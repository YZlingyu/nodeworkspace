{"version":3,"sources":["index.js"],"names":[],"mappings":"AAAA,IAAI,SAAS,QAAQ,QAAR,CAAb;AACA,IAAI,eAAe,CAAC,OAAD,EAAU,KAAV,EAAiB,SAAjB,CAAnB;AACA,IAAI,cAAc,CAAC,QAAD,EAAW,OAAX,CAAlB;AACA,IAAI,aAAa,CAAC,MAAD,EAAS,OAAT,CAAjB;AACA,IAAI,QAAQ,MAAM,SAAN,CAAgB,KAA5B;;AAEA,OAAO,OAAP,GAAiB,MAAjB;;AAEA,SAAS,OAAT,CAAkB,GAAlB,EAAuB,EAAvB,EAA2B;AACvB,QAAI,IAAI,OAAR,EAAiB;AACb,eAAO,IAAI,OAAJ,CAAY,EAAZ,CAAP;AACH;;AAED,SAAK,IAAI,IAAI,CAAb,EAAgB,IAAI,IAAI,MAAxB,EAAgC,GAAhC,EAAqC;AACjC,WAAG,IAAI,CAAJ,CAAH,EAAW,CAAX;AACH;AACJ;;AAED,SAAS,MAAT,CAAgB,MAAhB,EAAwB,MAAxB,EAAgC;AAC5B,QAAI,SAAS,IAAI,MAAJ,EAAb;AACA,QAAI,QAAQ,KAAZ;;AAEA,YAAQ,YAAR,EAAsB,WAAtB;;AAEA,YAAQ,WAAR,EAAqB,WAArB;;AAEA,YAAQ,UAAR,EAAoB,WAApB;;AAEA,WAAO,EAAP,CAAU,KAAV,EAAiB,SAAjB;;AAEA,WAAO,EAAP,CAAU,OAAV,EAAmB,YAAW;AAC5B,eAAO,IAAP,CAAY,OAAZ;AACD,KAFD;;AAIA,WAAO,EAAP,CAAU,OAAV,EAAmB,MAAnB;AACA,WAAO,EAAP,CAAU,OAAV,EAAmB,MAAnB;;AAEA,WAAO,QAAP,GAAkB,OAAO,QAAzB;AACA,WAAO,QAAP,GAAkB,OAAO,QAAzB;;AAEA,WAAO,MAAP;;AAEA,aAAS,WAAT,CAAqB,UAArB,EAAiC;AAC7B,eAAO,UAAP,IAAqB,MAArB;;AAEA,iBAAS,MAAT,GAAkB;AACd,mBAAO,OAAO,UAAP,EAAmB,KAAnB,CAAyB,MAAzB,EAAiC,SAAjC,CAAP;AACH;AACJ;;AAED,aAAS,WAAT,CAAqB,UAArB,EAAiC;AAC7B,eAAO,UAAP,IAAqB,MAArB;;AAEA,iBAAS,MAAT,GAAkB;AACd,mBAAO,IAAP,CAAY,UAAZ;AACA,gBAAI,OAAO,OAAO,UAAP,CAAX;AACA,gBAAI,IAAJ,EAAU;AACN,uBAAO,KAAK,KAAL,CAAW,MAAX,EAAmB,SAAnB,CAAP;AACH;AACD,mBAAO,IAAP,CAAY,UAAZ;AACH;AACJ;;AAED,aAAS,WAAT,CAAqB,UAArB,EAAiC;AAC7B,eAAO,EAAP,CAAU,UAAV,EAAsB,MAAtB;;AAEA,iBAAS,MAAT,GAAkB;AACd,gBAAI,OAAO,MAAM,IAAN,CAAW,SAAX,CAAX;AACA,iBAAK,OAAL,CAAa,UAAb;AACA,mBAAO,IAAP,CAAY,KAAZ,CAAkB,MAAlB,EAA0B,IAA1B;AACH;AACJ;;AAED,aAAS,SAAT,GAAqB;AACjB,YAAI,KAAJ,EAAW;AACP;AACH;AACD,gBAAQ,IAAR;AACA,YAAI,OAAO,MAAM,IAAN,CAAW,SAAX,CAAX;AACA,aAAK,OAAL,CAAa,KAAb;AACA,eAAO,IAAP,CAAY,KAAZ,CAAkB,MAAlB,EAA0B,IAA1B;AACH;;AAED,aAAS,MAAT,CAAgB,GAAhB,EAAqB;AACjB,eAAO,IAAP,CAAY,OAAZ,EAAqB,GAArB;AACH;AACJ","file":"index-compiled.js","sourcesContent":["var Stream = require(\"stream\")\nvar writeMethods = [\"write\", \"end\", \"destroy\"]\nvar readMethods = [\"resume\", \"pause\"]\nvar readEvents = [\"data\", \"close\"]\nvar slice = Array.prototype.slice\n\nmodule.exports = duplex\n\nfunction forEach (arr, fn) {\n    if (arr.forEach) {\n        return arr.forEach(fn)\n    }\n\n    for (var i = 0; i < arr.length; i++) {\n        fn(arr[i], i)\n    }\n}\n\nfunction duplex(writer, reader) {\n    var stream = new Stream()\n    var ended = false\n\n    forEach(writeMethods, proxyWriter)\n\n    forEach(readMethods, proxyReader)\n\n    forEach(readEvents, proxyStream)\n\n    reader.on(\"end\", handleEnd)\n\n    writer.on(\"drain\", function() {\n      stream.emit(\"drain\")\n    })\n\n    writer.on(\"error\", reemit)\n    reader.on(\"error\", reemit)\n\n    stream.writable = writer.writable\n    stream.readable = reader.readable\n\n    return stream\n\n    function proxyWriter(methodName) {\n        stream[methodName] = method\n\n        function method() {\n            return writer[methodName].apply(writer, arguments)\n        }\n    }\n\n    function proxyReader(methodName) {\n        stream[methodName] = method\n\n        function method() {\n            stream.emit(methodName)\n            var func = reader[methodName]\n            if (func) {\n                return func.apply(reader, arguments)\n            }\n            reader.emit(methodName)\n        }\n    }\n\n    function proxyStream(methodName) {\n        reader.on(methodName, reemit)\n\n        function reemit() {\n            var args = slice.call(arguments)\n            args.unshift(methodName)\n            stream.emit.apply(stream, args)\n        }\n    }\n\n    function handleEnd() {\n        if (ended) {\n            return\n        }\n        ended = true\n        var args = slice.call(arguments)\n        args.unshift(\"end\")\n        stream.emit.apply(stream, args)\n    }\n\n    function reemit(err) {\n        stream.emit(\"error\", err)\n    }\n}\n"]}