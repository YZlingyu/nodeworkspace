{"version":3,"sources":["url.js"],"names":[],"mappings":";AACA;;;;AAIA,IAAI,WAAW,QAAQ,UAAR,CAAf;AACA,IAAI,QAAQ,QAAQ,OAAR,EAAiB,sBAAjB,CAAZ;;AAEA;;;;AAIA,OAAO,OAAP,GAAiB,GAAjB;;AAEA;;;;;;;;;AASA,SAAS,GAAT,CAAc,GAAd,EAAmB,GAAnB,EAAwB;AACtB,MAAI,MAAM,GAAV;;AAEA;AACA,QAAM,OAAO,OAAO,QAApB;AACA,MAAI,QAAQ,GAAZ,EAAiB,MAAM,IAAI,QAAJ,GAAe,IAAf,GAAsB,IAAI,IAAhC;;AAEjB;AACA,MAAI,aAAa,OAAO,GAAxB,EAA6B;AAC3B,QAAI,QAAQ,IAAI,MAAJ,CAAW,CAAX,CAAZ,EAA2B;AACzB,UAAI,QAAQ,IAAI,MAAJ,CAAW,CAAX,CAAZ,EAA2B;AACzB,cAAM,IAAI,QAAJ,GAAe,GAArB;AACD,OAFD,MAEO;AACL,cAAM,IAAI,IAAJ,GAAW,GAAjB;AACD;AACF;;AAED,QAAI,CAAC,sBAAsB,IAAtB,CAA2B,GAA3B,CAAL,EAAsC;AACpC,YAAM,sBAAN,EAA8B,GAA9B;AACA,UAAI,gBAAgB,OAAO,GAA3B,EAAgC;AAC9B,cAAM,IAAI,QAAJ,GAAe,IAAf,GAAsB,GAA5B;AACD,OAFD,MAEO;AACL,cAAM,aAAa,GAAnB;AACD;AACF;;AAED;AACA,UAAM,UAAN,EAAkB,GAAlB;AACA,UAAM,SAAS,GAAT,CAAN;AACD;;AAED;AACA,MAAI,CAAC,IAAI,IAAT,EAAe;AACb,QAAI,cAAc,IAAd,CAAmB,IAAI,QAAvB,CAAJ,EAAsC;AACpC,UAAI,IAAJ,GAAW,IAAX;AACD,KAFD,MAEO,IAAI,eAAe,IAAf,CAAoB,IAAI,QAAxB,CAAJ,EAAuC;AAC5C,UAAI,IAAJ,GAAW,KAAX;AACD;AACF;;AAED,MAAI,IAAJ,GAAW,IAAI,IAAJ,IAAY,GAAvB;;AAEA,MAAI,OAAO,IAAI,IAAJ,CAAS,OAAT,CAAiB,GAAjB,MAA0B,CAAC,CAAtC;AACA,MAAI,OAAO,OAAO,MAAM,IAAI,IAAV,GAAiB,GAAxB,GAA8B,IAAI,IAA7C;;AAEA;AACA,MAAI,EAAJ,GAAS,IAAI,QAAJ,GAAe,KAAf,GAAuB,IAAvB,GAA8B,GAA9B,GAAoC,IAAI,IAAjD;AACA;AACA,MAAI,IAAJ,GAAW,IAAI,QAAJ,GAAe,KAAf,GAAuB,IAAvB,IAA+B,OAAO,IAAI,IAAJ,KAAa,IAAI,IAAxB,GAA+B,EAA/B,GAAqC,MAAM,IAAI,IAA9E,CAAX;;AAEA,SAAO,GAAP;AACD","file":"url-compiled.js","sourcesContent":["\n/**\n * Module dependencies.\n */\n\nvar parseuri = require('parseuri');\nvar debug = require('debug')('socket.io-client:url');\n\n/**\n * Module exports.\n */\n\nmodule.exports = url;\n\n/**\n * URL parser.\n *\n * @param {String} url\n * @param {Object} An object meant to mimic window.location.\n *                 Defaults to window.location.\n * @api public\n */\n\nfunction url (uri, loc) {\n  var obj = uri;\n\n  // default to window.location\n  loc = loc || global.location;\n  if (null == uri) uri = loc.protocol + '//' + loc.host;\n\n  // relative path support\n  if ('string' === typeof uri) {\n    if ('/' === uri.charAt(0)) {\n      if ('/' === uri.charAt(1)) {\n        uri = loc.protocol + uri;\n      } else {\n        uri = loc.host + uri;\n      }\n    }\n\n    if (!/^(https?|wss?):\\/\\//.test(uri)) {\n      debug('protocol-less url %s', uri);\n      if ('undefined' !== typeof loc) {\n        uri = loc.protocol + '//' + uri;\n      } else {\n        uri = 'https://' + uri;\n      }\n    }\n\n    // parse\n    debug('parse %s', uri);\n    obj = parseuri(uri);\n  }\n\n  // make sure we treat `localhost:80` and `localhost` equally\n  if (!obj.port) {\n    if (/^(http|ws)$/.test(obj.protocol)) {\n      obj.port = '80';\n    } else if (/^(http|ws)s$/.test(obj.protocol)) {\n      obj.port = '443';\n    }\n  }\n\n  obj.path = obj.path || '/';\n\n  var ipv6 = obj.host.indexOf(':') !== -1;\n  var host = ipv6 ? '[' + obj.host + ']' : obj.host;\n\n  // define unique id\n  obj.id = obj.protocol + '://' + host + ':' + obj.port;\n  // define href\n  obj.href = obj.protocol + '://' + host + (loc && loc.port === obj.port ? '' : (':' + obj.port));\n\n  return obj;\n}\n"]}