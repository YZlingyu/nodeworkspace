{"version":3,"sources":["polling.js"],"names":[],"mappings":"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","file":"polling-compiled.js","sourcesContent":["/**\n * Module dependencies.\n */\n\nvar Transport = require('../transport');\nvar parseqs = require('parseqs');\nvar parser = require('engine.io-parser');\nvar inherit = require('component-inherit');\nvar yeast = require('yeast');\nvar debug = require('debug')('engine.io-client:polling');\n\n/**\n * Module exports.\n */\n\nmodule.exports = Polling;\n\n/**\n * Is XHR2 supported?\n */\n\nvar hasXHR2 = (function () {\n  var XMLHttpRequest = require('xmlhttprequest-ssl');\n  var xhr = new XMLHttpRequest({ xdomain: false });\n  return null != xhr.responseType;\n})();\n\n/**\n * Polling interface.\n *\n * @param {Object} opts\n * @api private\n */\n\nfunction Polling (opts) {\n  var forceBase64 = (opts && opts.forceBase64);\n  if (!hasXHR2 || forceBase64) {\n    this.supportsBinary = false;\n  }\n  Transport.call(this, opts);\n}\n\n/**\n * Inherits from Transport.\n */\n\ninherit(Polling, Transport);\n\n/**\n * Transport name.\n */\n\nPolling.prototype.name = 'polling';\n\n/**\n * Opens the socket (triggers polling). We write a PING message to determine\n * when the transport is open.\n *\n * @api private\n */\n\nPolling.prototype.doOpen = function () {\n  this.poll();\n};\n\n/**\n * Pauses polling.\n *\n * @param {Function} callback upon buffers are flushed and transport is paused\n * @api private\n */\n\nPolling.prototype.pause = function (onPause) {\n  var self = this;\n\n  this.readyState = 'pausing';\n\n  function pause () {\n    debug('paused');\n    self.readyState = 'paused';\n    onPause();\n  }\n\n  if (this.polling || !this.writable) {\n    var total = 0;\n\n    if (this.polling) {\n      debug('we are currently polling - waiting to pause');\n      total++;\n      this.once('pollComplete', function () {\n        debug('pre-pause polling complete');\n        --total || pause();\n      });\n    }\n\n    if (!this.writable) {\n      debug('we are currently writing - waiting to pause');\n      total++;\n      this.once('drain', function () {\n        debug('pre-pause writing complete');\n        --total || pause();\n      });\n    }\n  } else {\n    pause();\n  }\n};\n\n/**\n * Starts polling cycle.\n *\n * @api public\n */\n\nPolling.prototype.poll = function () {\n  debug('polling');\n  this.polling = true;\n  this.doPoll();\n  this.emit('poll');\n};\n\n/**\n * Overloads onData to detect payloads.\n *\n * @api private\n */\n\nPolling.prototype.onData = function (data) {\n  var self = this;\n  debug('polling got data %s', data);\n  var callback = function (packet, index, total) {\n    // if its the first message we consider the transport open\n    if ('opening' === self.readyState) {\n      self.onOpen();\n    }\n\n    // if its a close packet, we close the ongoing requests\n    if ('close' === packet.type) {\n      self.onClose();\n      return false;\n    }\n\n    // otherwise bypass onData and handle the message\n    self.onPacket(packet);\n  };\n\n  // decode payload\n  parser.decodePayload(data, this.socket.binaryType, callback);\n\n  // if an event did not trigger closing\n  if ('closed' !== this.readyState) {\n    // if we got data we're not polling\n    this.polling = false;\n    this.emit('pollComplete');\n\n    if ('open' === this.readyState) {\n      this.poll();\n    } else {\n      debug('ignoring poll - transport state \"%s\"', this.readyState);\n    }\n  }\n};\n\n/**\n * For polling, send a close packet.\n *\n * @api private\n */\n\nPolling.prototype.doClose = function () {\n  var self = this;\n\n  function close () {\n    debug('writing close packet');\n    self.write([{ type: 'close' }]);\n  }\n\n  if ('open' === this.readyState) {\n    debug('transport open - closing');\n    close();\n  } else {\n    // in case we're trying to close while\n    // handshaking is in progress (GH-164)\n    debug('transport not open - deferring close');\n    this.once('open', close);\n  }\n};\n\n/**\n * Writes a packets payload.\n *\n * @param {Array} data packets\n * @param {Function} drain callback\n * @api private\n */\n\nPolling.prototype.write = function (packets) {\n  var self = this;\n  this.writable = false;\n  var callbackfn = function () {\n    self.writable = true;\n    self.emit('drain');\n  };\n\n  parser.encodePayload(packets, this.supportsBinary, function (data) {\n    self.doWrite(data, callbackfn);\n  });\n};\n\n/**\n * Generates uri for connection.\n *\n * @api private\n */\n\nPolling.prototype.uri = function () {\n  var query = this.query || {};\n  var schema = this.secure ? 'https' : 'http';\n  var port = '';\n\n  // cache busting is forced\n  if (false !== this.timestampRequests) {\n    query[this.timestampParam] = yeast();\n  }\n\n  if (!this.supportsBinary && !query.sid) {\n    query.b64 = 1;\n  }\n\n  query = parseqs.encode(query);\n\n  // avoid port if default for schema\n  if (this.port && (('https' === schema && Number(this.port) !== 443) ||\n     ('http' === schema && Number(this.port) !== 80))) {\n    port = ':' + this.port;\n  }\n\n  // prepend ? to query\n  if (query.length) {\n    query = '?' + query;\n  }\n\n  var ipv6 = this.hostname.indexOf(':') !== -1;\n  return schema + '://' + (ipv6 ? '[' + this.hostname + ']' : this.hostname) + port + this.path + query;\n};\n"]}