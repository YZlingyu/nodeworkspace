{"version":3,"sources":["index.js"],"names":[],"mappings":"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","file":"index-compiled.js","sourcesContent":["\nvar muri = require('../')\nvar assert = require('assert')\n\ndescribe('muri', function(){\n  it('must begin with mongodb://', function(done){\n    assert.throws(function () {\n      muri('localhost:27017');\n    }, /Invalid mongodb uri/);\n    assert.doesNotThrow(function () {\n      muri('mongodb://localhost:27017');\n    })\n    done();\n  })\n\n  describe('user:password', function(done){\n    it('is optional', function(done){\n      var uri = 'mongodb://local:27017';\n      var val = muri(uri);\n      assert.ok(!val.auth);\n      done();\n    })\n\n    it('parses properly', function(done){\n      var uri = 'mongodb://user:password@local:27017';\n      var val = muri(uri);\n      assert.ok(val.auth);\n      assert.equal('user', val.auth.user);\n      assert.equal('password', val.auth.pass);\n      done();\n    })\n\n    it('handles # in the username', function(done){\n      var uri = 'mongodb://us#er:password@local:27017';\n      var val = muri(uri);\n      assert.ok(val.auth);\n      assert.equal('us#er', val.auth.user);\n      assert.equal('password', val.auth.pass);\n      done();\n    })\n\n    it('handles # in the password', function(done){\n      var uri = 'mongodb://user:pa#ssword@local:27017';\n      var val = muri(uri);\n      assert.ok(val.auth);\n      assert.equal('user', val.auth.user);\n      assert.equal('pa#ssword', val.auth.pass);\n      done();\n    })\n  })\n\n  describe('user@', function(done){\n    it('works', function(done){\n      var uri = 'mongodb://username@local:27017/test?a=b';\n      var val = muri(uri);\n      assert.ok(val.auth);\n      assert.equal(val.auth.user, 'username');\n      assert.ok(!val.auth.pass);\n      done();\n    })\n  })\n\n  describe('host', function(){\n    it('must be specified', function(done){\n      assert.throws(function () {\n        muri('mongodb://');\n      }, /Missing host/)\n      assert.throws(function () {\n        muri('mongodb:///fake');\n      }, /Missing host/)\n      assert.throws(function () {\n        muri('mongodb://?yep');\n      }, /Missing host/)\n      assert.throws(function () {\n        muri('mongodb:///?yep');\n      }, /Missing host/)\n\n      var val = muri('mongodb://local');\n      assert.ok(Array.isArray(val.hosts));\n      assert.equal(1, val.hosts.length);\n      assert.equal('local', val.hosts[0].host);\n      done();\n    })\n\n    it('supports replica sets', function(done){\n      var val = muri('mongodb://local:27017,remote:27018,japan:99999');\n      assert.ok(Array.isArray(val.hosts));\n      assert.equal(3, val.hosts.length);\n      assert.equal('local', val.hosts[0].host);\n      assert.equal(27017, val.hosts[0].port);\n      assert.equal('remote', val.hosts[1].host);\n      assert.equal(27018, val.hosts[1].port);\n      assert.equal('japan', val.hosts[2].host);\n      assert.equal(99999, val.hosts[2].port);\n      done();\n    })\n  })\n\n  describe('port', function(){\n\n    describe('with single host', function(){\n      it('defaults to 27017 if not specified', function(done){\n        var val = muri('mongodb://local/');\n        assert.equal(27017, val.hosts[0].port);\n        done();\n      })\n\n      it('uses what is specified', function(done){\n        var val = muri('mongodb://local:27018');\n        assert.equal(27018, val.hosts[0].port);\n        done();\n      })\n    })\n\n    describe('with replica sets', function(){\n      var val;\n\n      before(function(){\n        val = muri('mongodb://local,remote:27018,another');\n      })\n\n      it('defaults to 27017 if not specified', function(done){\n        assert.equal(27017, val.hosts[0].port);\n        assert.equal(27017, val.hosts[2].port);\n        done();\n      })\n\n      it('uses what is specified', function(done){\n        assert.equal(27018, val.hosts[1].port);\n        done();\n      })\n    })\n  })\n\n  describe('database', function(){\n    it('default', function(done){\n      var val = muri('mongodb://localhost/');\n      assert.equal('test', val.db);\n      var val = muri('mongodb://localhost');\n      assert.equal('test', val.db);\n      done();\n    })\n    it('is overridable', function(done){\n      var val = muri('mongodb://localhost,a,x:34343,b/muri');\n      assert.equal('muri', val.db);\n      done();\n    })\n    it('works with multiple specified protocols', function(done){\n      var uri = 'mongodb://localhost:27020/testing,mongodb://localhost:27019,mongodb://localhost:27018'\n      var val = muri(uri);\n      assert.equal('testing', val.db);\n      done();\n    })\n  })\n\n  describe('querystring separator', function(){\n    it('can be ; ', function(done){\n      var val = muri('mongodb://muri/?replicaSet=myreplset;slaveOk=true;x=1');\n      assert.ok(val.options);\n      assert.equal(true, val.options.slaveOk);\n      assert.equal('myreplset', val.options.replicaSet);\n      assert.equal(1, val.options.x);\n      done();\n    })\n    it('can be & ', function(done){\n      var val = muri('mongodb://muri/?replicaSet=myreplset&slaveOk=true&x=1');\n      assert.ok(val.options);\n      assert.equal(true, val.options.slaveOk);\n      assert.equal('myreplset', val.options.replicaSet);\n      assert.equal(1, val.options.x);\n      done();\n    })\n  })\n\n  describe('readPref tags', function(){\n    describe('with & ', function(){\n      it('mongodb://localhost/?readPreferenceTags=dc:ny', function(done){\n        var val = muri('mongodb://localhost/?readPreferenceTags=dc:ny');\n        assert.equal('test', val.db);\n        assert.deepEqual([{ dc: 'ny' }], val.options.readPreferenceTags);\n        done();\n      })\n      it('mongodb://localhost/?readPreferenceTags=dc:ny,rack:1', function(done){\n        var val = muri('mongodb://localhost/?readPreferenceTags=dc:ny,rack:1');\n        assert.deepEqual([{ dc: 'ny', rack: 1 }], val.options.readPreferenceTags);\n        done();\n      })\n      it('mongodb://localhost/?readPreferenceTags=dc:ny,rack:1&readPreferenceTags=dc:sf,rack:2', function(done){\n        var val = muri('mongodb://localhost/?readPreferenceTags=dc:ny,rack:1&readPreferenceTags=dc:sf,rack:2');\n        assert.deepEqual([{ dc: 'ny', rack: 1 }, { dc: 'sf', rack: 2 }], val.options.readPreferenceTags);\n        done();\n      })\n      it('mongodb://localhost/db?readPreferenceTags=dc:ny,rack:1&readPreferenceTags=dc:sf,rack:2&readPreferenceTags=', function(done){\n        var val = muri('mongodb://localhost/db?readPreferenceTags=dc:ny,rack:1&readPreferenceTags=dc:sf,rack:2&readPreferenceTags=');\n        assert.deepEqual([{ dc: 'ny', rack: 1 }, { dc: 'sf', rack: 2 }], val.options.readPreferenceTags);\n        done();\n      })\n      it('mongodb://localhost/?readPreferenceTags=dc:ny,rack:1&readPreferenceTags=dc:ny&readPreferenceTags=', function(done){\n        var val = muri('mongodb://localhost/?readPreferenceTags=dc:ny,rack:1&readPreferenceTags=dc:ny&readPreferenceTags=');\n        assert.deepEqual([{ dc: 'ny', rack: 1 }, { dc: 'ny' }], val.options.readPreferenceTags);\n        done();\n      })\n    })\n    describe('with ; ', function(){\n      it('mongodb://localhost/?readPreferenceTags=dc:ny,rack:1;readPreferenceTags=dc:sf,rack:2', function(done){\n        var val = muri('mongodb://localhost/?readPreferenceTags=dc:ny,rack:1;readPreferenceTags=dc:sf,rack:2');\n        assert.deepEqual([{ dc: 'ny', rack: 1 }, { dc: 'sf', rack: 2 }], val.options.readPreferenceTags);\n        done();\n      })\n      it('mongodb://localhost/db?readPreferenceTags=dc:ny,rack:1;readPreferenceTags=dc:sf,rack:2;readPreferenceTags=', function(done){\n        var val = muri('mongodb://localhost/db?readPreferenceTags=dc:ny,rack:1;readPreferenceTags=dc:sf,rack:2;readPreferenceTags=');\n        assert.deepEqual([{ dc: 'ny', rack: 1 }, { dc: 'sf', rack: 2 }], val.options.readPreferenceTags);\n        done();\n      })\n      it('mongodb://localhost/?readPreferenceTags=dc:ny,rack:1;readPreferenceTags=dc:ny;readPreferenceTags=', function(done){\n        var val = muri('mongodb://localhost/?readPreferenceTags=dc:ny,rack:1;readPreferenceTags=dc:ny;readPreferenceTags=');\n        assert.deepEqual([{ dc: 'ny', rack: 1 }, { dc: 'ny' }], val.options.readPreferenceTags);\n        done();\n      })\n    })\n  })\n\n  describe('unix domain sockets', function(){\n    it('without auth', function(done){\n      var val = muri('mongodb:///tmp/mongodb-27017.sock?safe=false');\n      assert.equal(val.db, 'test')\n      assert.ok(Array.isArray(val.hosts));\n      assert.equal(1, val.hosts.length);\n      assert.equal(val.hosts[0].ipc, '/tmp/mongodb-27017.sock')\n      assert.equal(val.hosts[0].host, undefined);\n      assert.equal(val.hosts[0].port, undefined);\n      assert.equal(false, val.options.safe);\n      done();\n    })\n    it('without auth with a database name', function(done){\n      var val = muri('mongodb:///tmp/mongodb-27017.sock/tester?safe=false');\n      assert.equal(val.db, 'tester')\n      assert.ok(Array.isArray(val.hosts));\n      assert.equal(1, val.hosts.length);\n      assert.equal(val.hosts[0].ipc, '/tmp/mongodb-27017.sock')\n      assert.equal(val.hosts[0].host, undefined);\n      assert.equal(val.hosts[0].port, undefined);\n      assert.equal(false, val.options.safe);\n      done();\n    })\n    it('with auth', function(done){\n      var val = muri('mongodb://user:password@/tmp/mongodb-27017.sock?safe=false');\n      assert.equal(val.db, 'admin')\n      assert.ok(Array.isArray(val.hosts));\n      assert.equal(1, val.hosts.length);\n      assert.equal(val.hosts[0].ipc, '/tmp/mongodb-27017.sock')\n      assert.equal(val.hosts[0].host, undefined);\n      assert.equal(val.hosts[0].port, undefined);\n      assert.equal(false, val.options.safe);\n      done();\n    })\n    it('with auth with a db name', function(done){\n      var val = muri('mongodb://user:password@/tmp/mongodb-27017.sock/tester?safe=false');\n      assert.equal(val.db, 'tester')\n      assert.ok(Array.isArray(val.hosts));\n      assert.equal(1, val.hosts.length);\n      assert.equal(val.hosts[0].ipc, '/tmp/mongodb-27017.sock')\n      assert.equal(val.hosts[0].host, undefined);\n      assert.equal(val.hosts[0].port, undefined);\n      assert.equal(false, val.options.safe);\n      done();\n    })\n    it('with auth + repl sets', function(done){\n      var val = muri('mongodb://user:password@/tmp/mongodb-27017.sock,/tmp/another-27018.sock?safe=false');\n      assert.equal(val.db, 'admin')\n      assert.ok(Array.isArray(val.hosts));\n      assert.equal(2, val.hosts.length);\n      assert.equal(val.hosts[0].ipc, '/tmp/mongodb-27017.sock')\n      assert.equal(val.hosts[0].host, undefined);\n      assert.equal(val.hosts[0].port, undefined);\n      assert.equal(val.hosts[1].ipc, '/tmp/another-27018.sock')\n      assert.equal(val.hosts[1].host, undefined);\n      assert.equal(val.hosts[1].port, undefined);\n      assert.equal(false, val.options.safe);\n      done();\n    })\n    it('with auth + repl sets with a db name', function(done){\n      var val = muri('mongodb://user:password@/tmp/mongodb-27017.sock,/tmp/another-27018.sock/tester?safe=false');\n      assert.equal(val.db, 'tester')\n      assert.ok(Array.isArray(val.hosts));\n      assert.equal(2, val.hosts.length);\n      assert.equal(val.hosts[0].ipc, '/tmp/mongodb-27017.sock')\n      assert.equal(val.hosts[0].host, undefined);\n      assert.equal(val.hosts[0].port, undefined);\n      assert.equal(val.hosts[1].ipc, '/tmp/another-27018.sock')\n      assert.equal(val.hosts[1].host, undefined);\n      assert.equal(val.hosts[1].port, undefined);\n      assert.equal(false, val.options.safe);\n      done();\n    })\n  })\n\n  it('all together now', function(done){\n    var uri = 'mongodb://u#ser:pas#s@local,remote:27018,japan:27019/neatdb'\n    uri +=    '?replicaSet=myreplset&journal=true&w=2&wtimeoutMS=50'\n    var val = muri(uri);\n\n    assert.equal('u#ser', val.auth.user);\n    assert.equal('pas#s', val.auth.pass);\n    assert.equal('neatdb', val.db);\n    assert.equal(3, val.hosts.length);\n    assert.equal('local', val.hosts[0].host);\n    assert.strictEqual(27017, val.hosts[0].port);\n    assert.equal('remote', val.hosts[1].host);\n    assert.strictEqual(27018, val.hosts[1].port);\n    assert.equal('japan', val.hosts[2].host);\n    assert.strictEqual(27019, val.hosts[2].port);\n    assert.equal('myreplset', val.options.replicaSet);\n    assert.equal(true, val.options.journal);\n    assert.equal(50, val.options.wtimeoutMS);\n    done();\n  });\n\n  it('ipv6', function(done) {\n    var uri = 'mongodb://[::1]:27017/test';\n    var val = muri(uri);\n    assert.equal(1, val.hosts.length);\n    assert.equal('::1', val.hosts[0].host);\n    assert.equal(27017, val.hosts[0].port);\n    done();\n  });\n\n  it('has a version', function(done){\n    assert.ok(muri.version);\n    done();\n  })\n\n  it('replica set name with a leading number', function(done){\n    var uri = 'mongodb://localhost:27017/test?replicaSet=1800-shard-0';\n    var val = muri(uri);\n    assert.equal('1800-shard-0', val.options.replicaSet);\n    done();\n  });\n\n  it('parses x509-style uris', function(done) {\n    var userName = 'CN=client,OU=kerneluser,O=10Gen,L=New York City,ST=New York,C=US%';\n    var uri = 'mongodb://' + encodeURIComponent(userName) + '@server:27017/test?authMechanism=%s&ssl=true';\n    var val = muri(uri);\n    assert.equal(val.auth.user, userName);\n    assert.equal(val.auth.pass, void 0);\n    done();\n  });\n})\n"]}