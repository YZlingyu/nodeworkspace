{"version":3,"sources":["index.js"],"names":[],"mappings":"AAAA;;AAEA,IAAI,QAAQ,QAAQ,eAAR,EAAyB,KAArC;AAAA,IACI,KAAQ,QAAQ,cAAR,CADZ;;AAGA,OAAO,OAAP,GAAiB,SAAS,aAAT,CAAuB,GAAvB,EAA4B,QAA5B,EAAsC;AACrD,MAAI,UAAU,IAAd;;AAEA,MAAI,OAAO,QAAP,KAAoB,UAAxB,EAAoC;AAClC,UAAM,IAAI,KAAJ,CAAU,+CAAV,CAAN;AACD;;AAED,MAAI,OAAO,GAAP,KAAe,QAAnB,EAA6B;AAC3B,UAAM,IAAI,QAAJ,EAAN;AACD;;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,MAAI,aAAJ;AACA,MAAI,QAAQ,QAAR,KAAqB,OAAzB,EAAkC;AAChC;AACA,oBAAgB,MAAM,UAAN,EAAkB,CAAC,SAAD,EAAY,KAAZ,EAAmB,uCAAnB,CAAlB,CAAhB;AACD,GAHD,MAGO;AACL,oBAAgB,MAAM,IAAN,EAAY,CAAC,IAAD,EAAO,IAAP,EAAa,oBAAb,CAAZ,CAAhB;AACD;;AAED,KAAG,OAAH;AACE;AACA,gBAAc,MAFhB,EAGE,GAAG,KAAH,EAHF,EAIE,GAAG,GAAH,CAAO,UAAU,IAAV,EAAgB,EAAhB,EAAoB;AAAE;AAC3B,QAAI,UAAU,KAAK,IAAL,GAAY,KAAZ,CAAkB,KAAlB,CAAd;AACA,QAAI,CAAC,OAAL,EAAc;AACZ,gBAAU,OAAV;;AAEA;AACA;AACA;AACA,gBAAU,QAAQ,GAAR,CAAY,eAAZ,CAAV;AACA,aAAO,IAAP;AACD;;AAED,QAAI,MAAM,EAAV;AACA;AACA,QAAI,IAAI,QAAQ,KAAR,EAAR;AACA,WAAO,EAAE,MAAT,EAAiB;AACf,UAAI,EAAE,KAAF,EAAJ,IAAiB,EAAE,MAAF,GAAW,QAAQ,KAAR,EAAX,GAA6B,QAAQ,IAAR,CAAa,GAAb,CAA9C;AACD;;AAED,WAAO,GAAG,IAAH,EAAS,GAAT,CAAP;AACD,GApBD,CAJF,EAyBE,GAAG,UAAH,CAAc,UAAU,GAAV,EAAe,EAAf,EAAmB;AAC/B,QAAI,UAAU,CAAC,GAAD,CAAd;AAAA,QACI,WAAW,EADf;;AAGA,OAAG,OAAH,CAAW,UAAU,IAAV,EAAgB;AACzB,UAAI,QAAQ,OAAR,CAAgB,KAAK,IAArB,MAA+B,CAAC,CAApC,EAAuC;AACrC,gBAAQ,IAAR,CAAa,KAAK,GAAlB;AACA,iBAAS,IAAT,CAAc,IAAd;AACD;AACF,KALD;;AAOA,aAAS,IAAT,EAAe,QAAf;AACD,GAZD,CAzBF,EAsCE,EAtCF,CAsCK,OAtCL,EAsCc,QAtCd;AAuCD,CAnFD;;AAqFA;;;;;;AAMA,SAAS,eAAT,CAAyB,GAAzB,EAA8B;AAC5B,MAAI,QAAQ,QAAR,KAAqB,OAAzB,EAAkC;AAChC,WAAO,GAAP;AACD;;AAED,UAAQ,GAAR;AACE,SAAK,MAAL;AACE,aAAO,SAAP;AACA;AACF,SAAK,iBAAL;AACE,aAAO,MAAP;AACA;AACF,SAAK,WAAL;AACE,aAAO,KAAP;AACA;AACF,SAAK,QAAL;AACE,aAAO,MAAP;AACA;AACF;AACE,YAAM,IAAI,KAAJ,CAAU,qCAAqC,GAA/C,CAAN;AAdJ;AAgBD","file":"index-compiled.js","sourcesContent":["'use strict';\n\nvar spawn = require('child_process').spawn,\n    es    = require('event-stream');\n\nmodule.exports = function childrenOfPid(pid, callback) {\n  var headers = null;\n\n  if (typeof callback !== 'function') {\n    throw new Error('childrenOfPid(pid, callback) expects callback');\n  }\n\n  if (typeof pid === 'number') {\n    pid = pid.toString();\n  }\n\n  //\n  // The `ps-tree` module behaves differently on *nix vs. Windows\n  // by spawning different programs and parsing their output.\n  //\n  // Linux:\n  // 1. \" <defunct> \" need to be striped\n  // ```bash\n  // $ ps -A -o comm,ppid,pid,stat\n  // COMMAND          PPID   PID STAT\n  // bbsd             2899 16958 Ss\n  // watch <defunct>  1914 16964 Z\n  // ps              20688 16965 R+\n  // ```\n  //\n  // Win32:\n  // 1. wmic PROCESS WHERE ParentProcessId=4604 GET Name,ParentProcessId,ProcessId,Status)\n  // 2. The order of head columns is fixed\n  // ```shell\n  // > wmic PROCESS GET Name,ProcessId,ParentProcessId,Status\n  // Name                          ParentProcessId  ProcessId   Status\n  // System Idle Process           0                0\n  // System                        0                4\n  // smss.exe                      4                228\n  // ```\n\n  var processLister;\n  if (process.platform === 'win32') {\n    // See also: https://github.com/nodejs/node-v0.x-archive/issues/2318\n    processLister = spawn('wmic.exe', ['PROCESS', 'GET', 'Name,ProcessId,ParentProcessId,Status']);\n  } else {\n    processLister = spawn('ps', ['-A', '-o', 'ppid,pid,stat,comm']);\n  }\n\n  es.connect(\n    // spawn('ps', ['-A', '-o', 'ppid,pid,stat,comm']).stdout,\n    processLister.stdout,\n    es.split(),\n    es.map(function (line, cb) { //this could parse alot of unix command output\n      var columns = line.trim().split(/\\s+/);\n      if (!headers) {\n        headers = columns;\n\n        //\n        // Rename Win32 header name, to as same as the linux, for compatible.\n        //\n        headers = headers.map(normalizeHeader);\n        return cb();\n      }\n\n      var row = {};\n      // For each header\n      var h = headers.slice();\n      while (h.length) {\n        row[h.shift()] = h.length ? columns.shift() : columns.join(' ');\n      }\n\n      return cb(null, row);\n    }),\n    es.writeArray(function (err, ps) {\n      var parents = [pid],\n          children = [];\n\n      ps.forEach(function (proc) {\n        if (parents.indexOf(proc.PPID) !== -1) {\n          parents.push(proc.PID)\n          children.push(proc)\n        }\n      });\n\n      callback(null, children);\n    })\n  ).on('error', callback)\n}\n\n/**\n * Normalizes the given header `str` from the Windows\n * title to the *nix title.\n *\n * @param {string} str Header string to normalize\n */\nfunction normalizeHeader(str) {\n  if (process.platform !== 'win32') {\n    return str;\n  }\n\n  switch (str) {\n    case 'Name':\n      return 'COMMAND';\n      break;\n    case 'ParentProcessId':\n      return 'PPID';\n      break;\n    case 'ProcessId':\n      return 'PID';\n      break;\n    case 'Status':\n      return 'STAT';\n      break;\n    default:\n      throw new Error('Unknown process listing header: ' + str);\n  }\n}\n"]}