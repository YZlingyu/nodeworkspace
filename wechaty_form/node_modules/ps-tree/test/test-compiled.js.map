{"version":3,"sources":["test.js"],"names":[],"mappings":"AAAA,IAAI,OAAO,QAAQ,MAAR,CAAX;AACA,IAAI,OAAQ,QAAQ,MAAR,CAAZ;AACA,IAAI,QAAQ,QAAQ,OAAR,CAAZ;AACA,IAAI,KAAK,QAAQ,eAAR,CAAT;AACA,IAAI,WAAW,QAAQ,WAAR,CAAf;AACA,IAAI,SAAS,QAAQ,KAAR,CAAb;;AAEA,IAAI,MAAM,MAAM,GAAhB;AAAA,IACI,QAAQ,MAAM,KADlB;AAAA,IAEI,OAAO,MAAM,IAFjB;;AAIA,IAAI,UAAU;AACZ,UAAQ,KAAK,IAAL,CAAU,SAAV,EAAqB,MAArB,EAA6B,WAA7B,CADI;AAEZ,SAAO,KAAK,IAAL,CAAU,SAAV,EAAqB,MAArB,EAA6B,UAA7B;AAFK,CAAd;;AAKA,KAAK,KAAK,wDAAL,CAAL,EAAqE,UAAU,CAAV,EAAa;AAChF,MAAI,SAAS,GAAG,IAAH,CAAQ,UAAU,QAAQ,MAA1B,EAAkC,UAAU,KAAV,EAAiB,MAAjB,EAAyB,MAAzB,EAAiC,CAAE,CAArE,CAAb;;AAEA,aAAW,YAAY;AACrB,WAAO,OAAO,GAAd,EAAmB,UAAU,GAAV,EAAe,QAAf,EAAyB;AAC1C,UAAI,GAAJ,EAAS;AAAE,gBAAQ,GAAR,CAAY,GAAZ;AAAmB;AAC9B,cAAQ,GAAR,CAAY,IAAI,YAAJ,CAAZ,EAA+B,QAA/B,EAAyC,IAAzC;AACA,QAAE,IAAF,CAAO,SAAS,MAAT,GAAkB,CAAzB,EAA4B,MAAM,iBAAiB,SAAS,MAA1B,GAAmC,yBAAzC,CAA5B;AACA,eAAS,OAAO,GAAhB;AACD,KALD;;AAOA,eAAW,YAAY;AACrB,aAAO,OAAO,GAAd,EAAmB,UAAU,GAAV,EAAe,QAAf,EAAyB;AAC1C,YAAI,GAAJ,EAAS;AAAE,kBAAQ,GAAR,CAAY,GAAZ;AAAmB;AAC9B;AACA;AACA,UAAE,KAAF,CAAQ,SAAS,MAAjB,EAAyB,CAAzB,EAA4B,MAAM,mDAAN,CAA5B;AACA,UAAE,GAAF;AACD,OAND;AAOD,KARD,EAQG,IARH,EARqB,CAgBX;AACX,GAjBD,EAiBG,GAjBH,EAHgF,CAoBvE;AACT;AACD,CAtBD;;AAwBA,KAAK,KAAK,4DAAL,CAAL,EAAyE,UAAU,CAAV,EAAa;AACpF,MAAI,SAAS,sDAAb;AACA;AACA,MAAI;AAAE,WAAO,IAAP;AAAe,GAArB,CACA,OAAO,CAAP,EAAU;AACR,MAAE,KAAF,CAAQ,EAAE,QAAF,EAAR,EAAsB,MAAtB,EAA8B,MAAM,iDAAN,CAA9B;AACD;;AAED,IAAE,GAAF;AACD,CATD;;AAYA,KAAK,KAAK,uDAAL,CAAL,EAAoE,UAAU,CAAV,EAAa;AAC/E,MAAI,QAAQ,GAAG,IAAH,CAAQ,UAAU,QAAQ,KAA1B,EAAiC,UAAS,KAAT,EAAgB,MAAhB,EAAwB,MAAxB,EAAgC,CAAE,CAAnE,CAAZ;AACA,aAAW,YAAU;AACnB,WAAO,MAAM,GAAN,CAAU,QAAV,EAAP,EAA6B,UAAU,GAAV,EAAe,QAAf,EAAyB;AACpD,UAAI,GAAJ,EAAS;AAAE,gBAAQ,GAAR,CAAY,GAAZ;AAAmB;AAC9B;AACA,eAAS,MAAM,GAAf;AACD,KAJD;;AAMA,eAAW,YAAW;AACpB,aAAO,MAAM,GAAN,CAAU,QAAV,EAAP,EAA6B,UAAU,GAAV,EAAe,QAAf,EAAyB;AACpD,YAAI,GAAJ,EAAS;AAAE,kBAAQ,GAAR,CAAY,GAAZ;AAAmB;AAC9B,UAAE,KAAF,CAAQ,SAAS,MAAjB,EAAyB,CAAzB,EAA4B,MAAM,kCAAN,CAA5B;AACA,UAAE,GAAF;AACD,OAJD;AAKD,KAND,EAMG,IANH,EAPmB,CAaT;AACX,GAdD,EAcG,GAdH,EAF+E,CAgBtE;AACV,CAjBD","file":"test-compiled.js","sourcesContent":["var path = require('path');\nvar test  = require('tape');\nvar chalk = require('chalk');\nvar cp = require('child_process');\nvar treeKill = require('tree-kill');\nvar psTree = require('../');\n\nvar red = chalk.red,\n    green = chalk.green,\n    cyan = chalk.cyan;\n\nvar scripts = {\n  parent: path.join(__dirname, 'exec', 'parent.js'),\n  child: path.join(__dirname, 'exec', 'child.js')\n};\n\ntest(cyan('Spawn a Parent process which has a Two Child Processes'), function (t) {\n  var parent = cp.exec('node ' + scripts.parent, function (error, stdout, stderr) {});\n\n  setTimeout(function () {\n    psTree(parent.pid, function (err, children) {\n      if (err) { console.log(err); }\n      console.log(red('Children: '), children, '\\n');\n      t.true(children.length > 0, green('✓ There are ' + children.length + ' active child processes'));\n      treeKill(parent.pid);\n    });\n\n    setTimeout(function () {\n      psTree(parent.pid, function (err, children) {\n        if (err) { console.log(err); }\n        // console.log('Children: ', children, '\\n');\n        // console.log(' ')\n        t.equal(children.length, 0, green('✓ No more active child processes (we killed them)'));\n        t.end();\n      });\n    }, 2000); // give psTree time to kill the processes\n  }, 500); // give the child process time to spawn\n  // need more time on a slow(or heavy load server). maybe promise.then is better instead of the timeout\n});\n\ntest(cyan('FORCE ERROR by calling psTree without supplying a Callback'), function (t) {\n  var errmsg = 'Error: childrenOfPid(pid, callback) expects callback'\n  // Attempt to call psTree without a callback\n  try { psTree(1234); }\n  catch (e) {\n    t.equal(e.toString(), errmsg, green('✓ Fails when no callback supplied (as expected)'))\n  }\n\n  t.end();\n});\n\n\ntest(cyan('Spawn a Child Process and psTree with a String as pid'), function (t) {\n  var child = cp.exec('node ' + scripts.child, function(error, stdout, stderr) {});\n  setTimeout(function(){\n    psTree(child.pid.toString(), function (err, children) {\n      if (err) { console.log(err); }\n      // cp.spawn('kill', ['-9'].concat(children.map(function (p) { return p.PID })))\n      treeKill(child.pid);\n    });\n\n    setTimeout(function() {\n      psTree(child.pid.toString(), function (err, children) {\n        if (err) { console.log(err); }\n        t.equal(children.length, 0, green('✓ No more active child processes'));\n        t.end();\n      });\n    }, 1000); // give psTree time to kill the processes\n  }, 200); // give the child process time to spawn\n});\n"]}