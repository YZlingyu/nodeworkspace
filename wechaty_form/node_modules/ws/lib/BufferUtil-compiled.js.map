{"version":3,"sources":["BufferUtil.js"],"names":[],"mappings":"AAAA;;;;;;AAMA;;AAEA,MAAM,aAAa,QAAQ,aAAR,CAAnB;;AAEA,MAAM,SAAS,WAAW,MAA1B;;AAEA;;;;;;;;AAQA,MAAM,SAAS,CAAC,IAAD,EAAO,WAAP,KAAuB;AACpC,QAAM,SAAS,OAAO,WAAP,CAAmB,WAAnB,CAAf;AACA,MAAI,SAAS,CAAb;;AAEA,OAAK,IAAI,IAAI,CAAb,EAAgB,IAAI,KAAK,MAAzB,EAAiC,GAAjC,EAAsC;AACpC,UAAM,MAAM,KAAK,CAAL,CAAZ;AACA,QAAI,IAAJ,CAAS,MAAT,EAAiB,MAAjB;AACA,cAAU,IAAI,MAAd;AACD;;AAED,SAAO,MAAP;AACD,CAXD;;AAaA,IAAI;AACF,QAAM,aAAa,QAAQ,YAAR,CAAnB;;AAEA,SAAO,OAAP,GAAiB,OAAO,MAAP,CAAc,EAAE,MAAF,EAAd,EAA0B,WAAW,UAAX,IAAyB,UAAnD,CAAjB;AACD,CAJD,CAIE,OAAO,CAAP,EAAU,0BAA2B;AACrC;;;;;;;;;;AAUA,QAAM,OAAO,CAAC,MAAD,EAAS,IAAT,EAAe,MAAf,EAAuB,MAAvB,EAA+B,MAA/B,KAA0C;AACrD,SAAK,IAAI,IAAI,CAAb,EAAgB,IAAI,MAApB,EAA4B,GAA5B,EAAiC;AAC/B,aAAO,SAAS,CAAhB,IAAqB,OAAO,CAAP,IAAY,KAAK,IAAI,CAAT,CAAjC;AACD;AACF,GAJD;;AAMA;;;;;;;AAOA,QAAM,SAAS,CAAC,MAAD,EAAS,IAAT,KAAkB;AAC/B;AACA,UAAM,SAAS,OAAO,MAAtB;AACA,SAAK,IAAI,IAAI,CAAb,EAAgB,IAAI,MAApB,EAA4B,GAA5B,EAAiC;AAC/B,aAAO,CAAP,KAAa,KAAK,IAAI,CAAT,CAAb;AACD;AACF,GAND;;AAQA,SAAO,OAAP,GAAiB,EAAE,MAAF,EAAU,IAAV,EAAgB,MAAhB,EAAjB;AACD","file":"BufferUtil-compiled.js","sourcesContent":["/*!\n * ws: a node.js websocket client\n * Copyright(c) 2011 Einar Otto Stangvik <einaros@gmail.com>\n * MIT Licensed\n */\n\n'use strict';\n\nconst safeBuffer = require('safe-buffer');\n\nconst Buffer = safeBuffer.Buffer;\n\n/**\n * Merges an array of buffers into a new buffer.\n *\n * @param {Buffer[]} list The array of buffers to concat\n * @param {Number} totalLength The total length of buffers in the list\n * @return {Buffer} The resulting buffer\n * @public\n */\nconst concat = (list, totalLength) => {\n  const target = Buffer.allocUnsafe(totalLength);\n  var offset = 0;\n\n  for (var i = 0; i < list.length; i++) {\n    const buf = list[i];\n    buf.copy(target, offset);\n    offset += buf.length;\n  }\n\n  return target;\n};\n\ntry {\n  const bufferUtil = require('bufferutil');\n\n  module.exports = Object.assign({ concat }, bufferUtil.BufferUtil || bufferUtil);\n} catch (e) /* istanbul ignore next */ {\n  /**\n   * Masks a buffer using the given mask.\n   *\n   * @param {Buffer} source The buffer to mask\n   * @param {Buffer} mask The mask to use\n   * @param {Buffer} output The buffer where to store the result\n   * @param {Number} offset The offset at which to start writing\n   * @param {Number} length The number of bytes to mask.\n   * @public\n   */\n  const mask = (source, mask, output, offset, length) => {\n    for (var i = 0; i < length; i++) {\n      output[offset + i] = source[i] ^ mask[i & 3];\n    }\n  };\n\n  /**\n   * Unmasks a buffer using the given mask.\n   *\n   * @param {Buffer} buffer The buffer to unmask\n   * @param {Buffer} mask The mask to use\n   * @public\n   */\n  const unmask = (buffer, mask) => {\n    // Required until https://github.com/nodejs/node/issues/9006 is resolved.\n    const length = buffer.length;\n    for (var i = 0; i < length; i++) {\n      buffer[i] ^= mask[i & 3];\n    }\n  };\n\n  module.exports = { concat, mask, unmask };\n}\n"]}