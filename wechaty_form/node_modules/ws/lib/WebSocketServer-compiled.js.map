{"version":3,"sources":["WebSocketServer.js"],"names":[],"mappings":"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","file":"WebSocketServer-compiled.js","sourcesContent":["/*!\n * ws: a node.js websocket client\n * Copyright(c) 2011 Einar Otto Stangvik <einaros@gmail.com>\n * MIT Licensed\n */\n\n'use strict';\n\nconst safeBuffer = require('safe-buffer');\nconst EventEmitter = require('events');\nconst crypto = require('crypto');\nconst Ultron = require('ultron');\nconst http = require('http');\nconst url = require('url');\n\nconst PerMessageDeflate = require('./PerMessageDeflate');\nconst Extensions = require('./Extensions');\nconst constants = require('./Constants');\nconst WebSocket = require('./WebSocket');\n\nconst Buffer = safeBuffer.Buffer;\n\n/**\n * Class representing a WebSocket server.\n *\n * @extends EventEmitter\n */\nclass WebSocketServer extends EventEmitter {\n  /**\n   * Create a `WebSocketServer` instance.\n   *\n   * @param {Object} options Configuration options\n   * @param {String} options.host The hostname where to bind the server\n   * @param {Number} options.port The port where to bind the server\n   * @param {http.Server} options.server A pre-created HTTP/S server to use\n   * @param {Function} options.verifyClient An hook to reject connections\n   * @param {Function} options.handleProtocols An hook to handle protocols\n   * @param {String} options.path Accept only connections matching this path\n   * @param {Boolean} options.noServer Enable no server mode\n   * @param {Boolean} options.clientTracking Specifies whether or not to track clients\n   * @param {(Boolean|Object)} options.perMessageDeflate Enable/disable permessage-deflate\n   * @param {Number} options.maxPayload The maximum allowed message size\n   * @param {Function} callback A listener for the `listening` event\n   */\n  constructor (options, callback) {\n    super();\n\n    options = Object.assign({\n      maxPayload: 100 * 1024 * 1024,\n      perMessageDeflate: true,\n      handleProtocols: null,\n      clientTracking: true,\n      verifyClient: null,\n      noServer: false,\n      backlog: null, // use default (511 as implemented in net.js)\n      server: null,\n      host: null,\n      path: null,\n      port: null\n    }, options);\n\n    if (options.port == null && !options.server && !options.noServer) {\n      throw new TypeError('missing or invalid options');\n    }\n\n    if (options.port != null) {\n      this._server = http.createServer((req, res) => {\n        const body = http.STATUS_CODES[426];\n\n        res.writeHead(426, {\n          'Content-Length': body.length,\n          'Content-Type': 'text/plain'\n        });\n        res.end(body);\n      });\n      this._server.allowHalfOpen = false;\n      this._server.listen(options.port, options.host, options.backlog, callback);\n    } else if (options.server) {\n      this._server = options.server;\n    }\n\n    if (this._server) {\n      this._ultron = new Ultron(this._server);\n      this._ultron.on('listening', () => this.emit('listening'));\n      this._ultron.on('error', (err) => this.emit('error', err));\n      this._ultron.on('upgrade', (req, socket, head) => {\n        this.handleUpgrade(req, socket, head, (client) => {\n          this.emit(`connection${req.url}`, client);\n          this.emit('connection', client);\n        });\n      });\n    }\n\n    if (options.clientTracking) this.clients = new Set();\n    this.options = options;\n    this.path = options.path;\n  }\n\n  /**\n   * Close the server.\n   *\n   * @param {Function} cb Callback\n   * @public\n   */\n  close (cb) {\n    //\n    // Terminate all associated clients.\n    //\n    if (this.clients) {\n      for (const client of this.clients) client.terminate();\n    }\n\n    const server = this._server;\n\n    if (server) {\n      this._ultron.destroy();\n      this._ultron = this._server = null;\n\n      //\n      // Close the http server if it was internally created.\n      //\n      if (this.options.port != null) return server.close(cb);\n    }\n\n    if (cb) cb();\n  }\n\n  /**\n   * See if a given request should be handled by this server instance.\n   *\n   * @param {http.IncomingMessage} req Request object to inspect\n   * @return {Boolean} `true` if the request is valid, else `false`\n   * @public\n   */\n  shouldHandle (req) {\n    if (this.options.path && url.parse(req.url).pathname !== this.options.path) {\n      return false;\n    }\n\n    return true;\n  }\n\n  /**\n   * Handle a HTTP Upgrade request.\n   *\n   * @param {http.IncomingMessage} req The request object\n   * @param {net.Socket} socket The network socket between the server and client\n   * @param {Buffer} head The first packet of the upgraded stream\n   * @param {Function} cb Callback\n   * @public\n   */\n  handleUpgrade (req, socket, head, cb) {\n    socket.on('error', socketError);\n\n    const version = +req.headers['sec-websocket-version'];\n\n    if (\n      req.method !== 'GET' || req.headers.upgrade.toLowerCase() !== 'websocket' ||\n      !req.headers['sec-websocket-key'] || (version !== 8 && version !== 13) ||\n      !this.shouldHandle(req)\n    ) {\n      return abortConnection(socket, 400);\n    }\n\n    var protocol = (req.headers['sec-websocket-protocol'] || '').split(/, */);\n\n    //\n    // Optionally call external protocol selection handler.\n    //\n    if (this.options.handleProtocols) {\n      protocol = this.options.handleProtocols(protocol, req);\n      if (protocol === false) return abortConnection(socket, 401);\n    } else {\n      protocol = protocol[0];\n    }\n\n    //\n    // Optionally call external client verification handler.\n    //\n    if (this.options.verifyClient) {\n      const info = {\n        origin: req.headers[`${version === 8 ? 'sec-websocket-origin' : 'origin'}`],\n        secure: !!(req.connection.authorized || req.connection.encrypted),\n        req\n      };\n\n      if (this.options.verifyClient.length === 2) {\n        this.options.verifyClient(info, (verified, code, message) => {\n          if (!verified) return abortConnection(socket, code || 401, message);\n\n          this.completeUpgrade(protocol, version, req, socket, head, cb);\n        });\n        return;\n      } else if (!this.options.verifyClient(info)) {\n        return abortConnection(socket, 401);\n      }\n    }\n\n    this.completeUpgrade(protocol, version, req, socket, head, cb);\n  }\n\n  /**\n   * Upgrade the connection to WebSocket.\n   *\n   * @param {String} protocol The chosen subprotocol\n   * @param {Number} version The WebSocket protocol version\n   * @param {http.IncomingMessage} req The request object\n   * @param {net.Socket} socket The network socket between the server and client\n   * @param {Buffer} head The first packet of the upgraded stream\n   * @param {Function} cb Callback\n   * @private\n   */\n  completeUpgrade (protocol, version, req, socket, head, cb) {\n    //\n    // Destroy the socket if the client has already sent a FIN packet.\n    //\n    if (!socket.readable || !socket.writable) return socket.destroy();\n\n    const key = crypto.createHash('sha1')\n      .update(req.headers['sec-websocket-key'] + constants.GUID, 'binary')\n      .digest('base64');\n\n    const headers = [\n      'HTTP/1.1 101 Switching Protocols',\n      'Upgrade: websocket',\n      'Connection: Upgrade',\n      `Sec-WebSocket-Accept: ${key}`\n    ];\n\n    if (protocol) headers.push(`Sec-WebSocket-Protocol: ${protocol}`);\n\n    const offer = Extensions.parse(req.headers['sec-websocket-extensions']);\n    var extensions;\n\n    try {\n      extensions = acceptExtensions(this.options, offer);\n    } catch (err) {\n      return abortConnection(socket, 400);\n    }\n\n    const props = Object.keys(extensions);\n\n    if (props.length) {\n      const serverExtensions = props.reduce((obj, key) => {\n        obj[key] = [extensions[key].params];\n        return obj;\n      }, {});\n\n      headers.push(`Sec-WebSocket-Extensions: ${Extensions.format(serverExtensions)}`);\n    }\n\n    //\n    // Allow external modification/inspection of handshake headers.\n    //\n    this.emit('headers', headers, req);\n\n    socket.write(headers.concat('', '').join('\\r\\n'));\n\n    const client = new WebSocket([req, socket, head], null, {\n      maxPayload: this.options.maxPayload,\n      protocolVersion: version,\n      extensions,\n      protocol\n    });\n\n    if (this.clients) {\n      this.clients.add(client);\n      client.on('close', () => this.clients.delete(client));\n    }\n\n    socket.removeListener('error', socketError);\n    cb(client);\n  }\n}\n\nmodule.exports = WebSocketServer;\n\n/**\n * Handle premature socket errors.\n *\n * @private\n */\nfunction socketError () {\n  this.destroy();\n}\n\n/**\n * Accept WebSocket extensions.\n *\n * @param {Object} options The `WebSocketServer` configuration options\n * @param {Object} offer The parsed value of the `sec-websocket-extensions` header\n * @return {Object} Accepted extensions\n * @private\n */\nfunction acceptExtensions (options, offer) {\n  const pmd = options.perMessageDeflate;\n  const extensions = {};\n\n  if (pmd && offer[PerMessageDeflate.extensionName]) {\n    const perMessageDeflate = new PerMessageDeflate(\n      pmd !== true ? pmd : {},\n      true,\n      options.maxPayload\n    );\n\n    perMessageDeflate.accept(offer[PerMessageDeflate.extensionName]);\n    extensions[PerMessageDeflate.extensionName] = perMessageDeflate;\n  }\n\n  return extensions;\n}\n\n/**\n * Close the connection when preconditions are not fulfilled.\n *\n * @param {net.Socket} socket The socket of the upgrade request\n * @param {Number} code The HTTP response status code\n * @param {String} [message] The HTTP response body\n * @private\n */\nfunction abortConnection (socket, code, message) {\n  if (socket.writable) {\n    message = message || http.STATUS_CODES[code];\n    socket.write(\n      `HTTP/1.1 ${code} ${http.STATUS_CODES[code]}\\r\\n` +\n      'Connection: close\\r\\n' +\n      'Content-type: text/html\\r\\n' +\n      `Content-Length: ${Buffer.byteLength(message)}\\r\\n` +\n      '\\r\\n' +\n      message\n    );\n  }\n\n  socket.removeListener('error', socketError);\n  socket.destroy();\n}\n"]}