{"version":3,"sources":["httpserver.js"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA,IAAI,SAAS,QAAQ,QAAR,CAAb;AAAA,IACI,OAAO,QAAQ,MAAR,CADX;AAAA,IAEI,MAAM,QAAQ,KAAR,CAFV;;AAIA,IAAI,MAAM,QAAQ,WAAR,CAAV;AAAA,IACI,aAAa,QAAQ,sBAAR,CADjB;AAAA,IAEI,UAAU,QAAQ,OAAR,EAAiB,OAF/B;;AAMA;;;;;;;AAOA,IAAI,SAAS,UAAS,cAAT,EAAyB;AACpC,MAAI,SAAS,KAAK,YAAL,CAAkB,UAAS,GAAT,EAAc,GAAd,EAAmB;AAChD,mBAAe,GAAf,EAAoB,GAApB;AACD,GAFY,CAAb;;AAIA,SAAO,EAAP,CAAU,YAAV,EAAwB,UAAS,MAAT,EAAiB;AACvC,WAAO,UAAP,CAAkB,IAAlB;AACD,GAFD;;AAIA;AACA,MAAI,IAAJ;;AAEA;;;;;;;AAOA,OAAK,KAAL,GAAa,UAAS,QAAT,EAAmB;AAC9B,WAAO,OAAO,QAAP,KAAoB,UAA3B,EACO,yDADP;AAEA,QAAI,OAAO,YAAY,WAAW,YAAX,CAAwB,WAAxB,CAAvB;AACA,WAAO,QAAQ,OAAR,CAAgB,IAAhB,EAAsB,IAAtB,CAA2B,QAAQ;AACxC,aAAO,QAAQ,eAAR,CACH,OAAO,MAAP,CAAc,IAAd,CAAmB,MAAnB,EAA2B,IAA3B,EAAiC,WAAjC,CADG,CAAP;AAED,KAHM,EAGJ,IAHI,CAGC,YAAW;AACjB,aAAO,OAAO,OAAP,EAAP;AACD,KALM,CAAP;AAMD,GAVD;;AAYA;;;;;AAKA,OAAK,IAAL,GAAY,YAAW;AACrB,WAAO,IAAI,OAAJ,CAAY,WAAW,OAAO,KAAP,CAAa,OAAb,CAAvB,CAAP;AACD,GAFD;;AAIA;;;;AAIA,OAAK,OAAL,GAAe,YAAW;AACxB,QAAI,OAAO,OAAO,OAAP,EAAX;AACA,QAAI,CAAC,IAAL,EAAW;AACT,YAAM,MAAM,8BAAN,CAAN;AACD;AACD,WAAO,IAAP;AACD,GAND;;AAQA;;;;AAIA,OAAK,IAAL,GAAY,YAAW;AACrB,WAAO,IAAI,kBAAJ,KAA2B,GAA3B,GACH,KAAK,OAAL,GAAe,IADnB;AAED,GAHD;;AAKA;;;;;;AAMA,OAAK,GAAL,GAAW,UAAS,YAAT,EAAuB;AAChC,QAAI,OAAO,KAAK,OAAL,EAAX;AACA,QAAI,WAAW,gBAAgB,EAA/B;AACA,WAAO,IAAI,MAAJ,CAAW;AAChB,gBAAU,MADM;AAEhB,gBAAU,IAAI,kBAAJ,EAFM;AAGhB,YAAM,KAAK,IAHK;AAIhB,gBAAU;AAJM,KAAX,CAAP;AAMD,GATD;AAUD,CA7ED;;AAgFA;;;AAGA,QAAQ,MAAR,GAAiB,MAAjB","file":"httpserver-compiled.js","sourcesContent":["// Licensed to the Software Freedom Conservancy (SFC) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The SFC licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\n'use strict';\n\nvar assert = require('assert'),\n    http = require('http'),\n    url = require('url');\n\nvar net = require('../../net'),\n    portprober = require('../../net/portprober'),\n    promise = require('../..').promise;\n\n\n\n/**\n * Encapsulates a simple HTTP server for testing. The {@code onrequest}\n * function should be overridden to define request handling behavior.\n * @param {function(!http.ServerRequest, !http.ServerResponse)} requestHandler\n *     The request handler for the server.\n * @constructor\n */\nvar Server = function(requestHandler) {\n  var server = http.createServer(function(req, res) {\n    requestHandler(req, res);\n  });\n\n  server.on('connection', function(stream) {\n    stream.setTimeout(4000);\n  });\n\n  /** @typedef {{port: number, address: string, family: string}} */\n  var Host;\n\n  /**\n   * Starts the server on the given port. If no port, or 0, is provided,\n   * the server will be started on a random port.\n   * @param {number=} opt_port The port to start on.\n   * @return {!Promise<Host>} A promise that will resolve\n   *     with the server host when it has fully started.\n   */\n  this.start = function(opt_port) {\n    assert(typeof opt_port !== 'function',\n           \"start invoked with function, not port (mocha callback)?\");\n    var port = opt_port || portprober.findFreePort('localhost');\n    return Promise.resolve(port).then(port => {\n      return promise.checkedNodeCall(\n          server.listen.bind(server, port, 'localhost'));\n    }).then(function() {\n      return server.address();\n    });\n  };\n\n  /**\n   * Stops the server.\n   * @return {!Promise} A promise that will resolve when the\n   *     server has closed all connections.\n   */\n  this.stop = function() {\n    return new Promise(resolve => server.close(resolve));\n  };\n\n  /**\n   * @return {Host} This server's host info.\n   * @throws {Error} If the server is not running.\n   */\n  this.address = function() {\n    var addr = server.address();\n    if (!addr) {\n      throw Error('There server is not running!');\n    }\n    return addr;\n  };\n\n  /**\n   * return {string} The host:port of this server.\n   * @throws {Error} If the server is not running.\n   */\n  this.host = function() {\n    return net.getLoopbackAddress() + ':' +\n        this.address().port;\n  };\n\n  /**\n   * Formats a URL for this server.\n   * @param {string=} opt_pathname The desired pathname on the server.\n   * @return {string} The formatted URL.\n   * @throws {Error} If the server is not running.\n   */\n  this.url = function(opt_pathname) {\n    var addr = this.address();\n    var pathname = opt_pathname || '';\n    return url.format({\n      protocol: 'http',\n      hostname: net.getLoopbackAddress(),\n      port: addr.port,\n      pathname: pathname\n    });\n  };\n};\n\n\n// PUBLIC API\n\n\nexports.Server = Server;\n"]}