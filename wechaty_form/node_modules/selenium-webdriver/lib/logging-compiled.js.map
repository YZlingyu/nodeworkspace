{"version":3,"sources":["logging.js"],"names":[],"mappings":"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","file":"logging-compiled.js","sourcesContent":["// Licensed to the Software Freedom Conservancy (SFC) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The SFC licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\n'use strict';\n\n/**\n * @fileoverview Defines WebDriver's logging system. The logging system is\n * broken into major components: local and remote logging.\n *\n * The local logging API, which is anchored by the {@linkplain Logger} class is\n * similar to Java's logging API. Loggers, retrieved by\n * {@linkplain #getLogger getLogger(name)}, use hierarchical, dot-delimited\n * namespaces (e.g. \"\" > \"webdriver\" > \"webdriver.logging\"). Recorded log\n * messages are represented by the {@linkplain Entry} class. You can capture log\n * records by {@linkplain Logger#addHandler attaching} a handler function to the\n * desired logger. For convenience, you can quickly enable logging to the\n * console by simply calling {@linkplain #installConsoleHandler\n * installConsoleHandler}.\n *\n * The [remote logging API](https://github.com/SeleniumHQ/selenium/wiki/Logging)\n * allows you to retrieve logs from a remote WebDriver server. This API uses the\n * {@link Preferences} class to define desired log levels prior to creating\n * a WebDriver session:\n *\n *     var prefs = new logging.Preferences();\n *     prefs.setLevel(logging.Type.BROWSER, logging.Level.DEBUG);\n *\n *     var caps = Capabilities.chrome();\n *     caps.setLoggingPrefs(prefs);\n *     // ...\n *\n * Remote log entries, also represented by the {@link Entry} class, may be\n * retrieved via {@link webdriver.WebDriver.Logs}:\n *\n *     driver.manage().logs().get(logging.Type.BROWSER)\n *         .then(function(entries) {\n *            entries.forEach(function(entry) {\n *              console.log('[%s] %s', entry.level.name, entry.message);\n *            });\n *         });\n *\n * **NOTE:** Only a few browsers support the remote logging API (notably\n * Firefox and Chrome). Firefox supports basic logging functionality, while\n * Chrome exposes robust\n * [performance logging](https://sites.google.com/a/chromium.org/chromedriver/logging)\n * options. Remote logging is still considered a non-standard feature, and the\n * APIs exposed by this module for it are non-frozen. This module will be\n * updated, possibly breaking backwards-compatibility, once logging is\n * officially defined by the\n * [W3C WebDriver spec](http://www.w3.org/TR/webdriver/).\n */\n\n/**\n * Defines a message level that may be used to control logging output.\n *\n * @final\n */\nclass Level {\n  /**\n   * @param {string} name the level's name.\n   * @param {number} level the level's numeric value.\n   */\n  constructor(name, level) {\n    if (level < 0) {\n      throw new TypeError('Level must be >= 0');\n    }\n\n    /** @private {string} */\n    this.name_ = name;\n\n    /** @private {number} */\n    this.value_ = level;\n  }\n\n  /** This logger's name. */\n  get name() {\n    return this.name_;\n  }\n\n  /** The numeric log level. */\n  get value() {\n    return this.value_;\n  }\n\n  /** @override */\n  toString() {\n    return this.name;\n  }\n}\n\n/**\n * Indicates no log messages should be recorded.\n * @const\n */\nLevel.OFF = new Level('OFF', Infinity);\n\n\n/**\n * Log messages with a level of `1000` or higher.\n * @const\n */\nLevel.SEVERE = new Level('SEVERE', 1000);\n\n\n/**\n * Log messages with a level of `900` or higher.\n * @const\n */\nLevel.WARNING = new Level('WARNING', 900);\n\n\n/**\n * Log messages with a level of `800` or higher.\n * @const\n */\nLevel.INFO = new Level('INFO', 800);\n\n\n/**\n * Log messages with a level of `700` or higher.\n * @const\n */\nLevel.DEBUG = new Level('DEBUG', 700);\n\n\n/**\n * Log messages with a level of `500` or higher.\n * @const\n */\nLevel.FINE = new Level('FINE', 500);\n\n\n/**\n * Log messages with a level of `400` or higher.\n * @const\n */\nLevel.FINER = new Level('FINER', 400);\n\n\n/**\n * Log messages with a level of `300` or higher.\n * @const\n */\nLevel.FINEST = new Level('FINEST', 300);\n\n\n/**\n * Indicates all log messages should be recorded.\n * @const\n */\nLevel.ALL = new Level('ALL', 0);\n\n\nconst ALL_LEVELS = /** !Set<Level> */new Set([\n  Level.OFF,\n  Level.SEVERE,\n  Level.WARNING,\n  Level.INFO,\n  Level.DEBUG,\n  Level.FINE,\n  Level.FINER,\n  Level.FINEST,\n  Level.ALL\n]);\n\n\nconst LEVELS_BY_NAME = /** !Map<string, !Level> */ new Map([\n  [Level.OFF.name, Level.OFF],\n  [Level.SEVERE.name, Level.SEVERE],\n  [Level.WARNING.name, Level.WARNING],\n  [Level.INFO.name, Level.INFO],\n  [Level.DEBUG.name, Level.DEBUG],\n  [Level.FINE.name, Level.FINE],\n  [Level.FINER.name, Level.FINER],\n  [Level.FINEST.name, Level.FINEST],\n  [Level.ALL.name, Level.ALL]\n]);\n\n\n/**\n * Converts a level name or value to a {@link Level} value. If the name/value\n * is not recognized, {@link Level.ALL} will be returned.\n *\n * @param {(number|string)} nameOrValue The log level name, or value, to\n *     convert.\n * @return {!Level} The converted level.\n */\nfunction getLevel(nameOrValue) {\n  if (typeof nameOrValue === 'string') {\n    return LEVELS_BY_NAME.get(nameOrValue) || Level.ALL;\n  }\n  if (typeof nameOrValue !== 'number') {\n    throw new TypeError('not a string or number');\n  }\n  for (let level of ALL_LEVELS) {\n    if (nameOrValue >= level.value) {\n      return level;\n    }\n  }\n  return Level.ALL;\n}\n\n\n/**\n * Describes a single log entry.\n *\n * @final\n */\nclass Entry {\n  /**\n   * @param {(!Level|string|number)} level The entry level.\n   * @param {string} message The log message.\n   * @param {number=} opt_timestamp The time this entry was generated, in\n   *     milliseconds since 0:00:00, January 1, 1970 UTC. If omitted, the\n   *     current time will be used.\n   * @param {string=} opt_type The log type, if known.\n   */\n  constructor(level, message, opt_timestamp, opt_type) {\n    this.level = level instanceof Level ? level : getLevel(level);\n    this.message = message;\n    this.timestamp =\n        typeof opt_timestamp === 'number' ? opt_timestamp : Date.now();\n    this.type = opt_type || '';\n  }\n\n  /**\n   * @return {{level: string, message: string, timestamp: number,\n   *           type: string}} The JSON representation of this entry.\n   */\n  toJSON() {\n    return {\n      'level': this.level.name,\n      'message': this.message,\n      'timestamp': this.timestamp,\n      'type': this.type\n    };\n  }\n}\n\n\n/** @typedef {(string|function(): string)} */\nlet Loggable;\n\n\n/**\n * An object used to log debugging messages. Loggers use a hierarchical,\n * dot-separated naming scheme. For instance, \"foo\" is considered the parent of\n * the \"foo.bar\" and an ancestor of \"foo.bar.baz\".\n *\n * Each logger may be assigned a {@linkplain #setLevel log level}, which\n * controls which level of messages will be reported to the\n * {@linkplain #addHandler handlers} attached to this instance. If a log level\n * is not explicitly set on a logger, it will inherit its parent.\n *\n * This class should never be directly instantiated. Instead, users should\n * obtain logger references using the {@linkplain ./logging.getLogger()\n * getLogger()} function.\n *\n * @final\n */\nclass Logger {\n  /**\n   * @param {string} name the name of this logger.\n   * @param {Level=} opt_level the initial level for this logger.\n   */\n  constructor(name, opt_level) {\n    /** @private {string} */\n    this.name_ = name;\n\n    /** @private {Level} */\n    this.level_ = opt_level || null;\n\n    /** @private {Logger} */\n    this.parent_ = null;\n\n    /** @private {Set<function(!Entry)>} */\n    this.handlers_ = null;\n  }\n\n  /** @return {string} the name of this logger. */\n  getName() {\n    return this.name_;\n  }\n\n  /**\n   * @param {Level} level the new level for this logger, or `null` if the logger\n   *     should inherit its level from its parent logger.\n   */\n  setLevel(level) {\n    this.level_ = level;\n  }\n\n  /** @return {Level} the log level for this logger. */\n  getLevel() {\n    return this.level_;\n  }\n\n  /**\n   * @return {!Level} the effective level for this logger.\n   */\n  getEffectiveLevel() {\n    let logger = this;\n    let level;\n    do {\n      level = logger.level_;\n      logger = logger.parent_;\n    } while (logger && !level);\n    return level || Level.OFF;\n  }\n\n  /**\n   * @param {!Level} level the level to check.\n   * @return {boolean} whether messages recorded at the given level are loggable\n   *     by this instance.\n   */\n  isLoggable(level) {\n    return level.value !== Level.OFF.value\n        && level.value >= this.getEffectiveLevel().value;\n  }\n\n  /**\n   * Adds a handler to this logger. The handler will be invoked for each message\n   * logged with this instance, or any of its descendants.\n   *\n   * @param {function(!Entry)} handler the handler to add.\n   */\n  addHandler(handler) {\n    if (!this.handlers_) {\n      this.handlers_ = new Set;\n    }\n    this.handlers_.add(handler);\n  }\n\n  /**\n   * Removes a handler from this logger.\n   *\n   * @param {function(!Entry)} handler the handler to remove.\n   * @return {boolean} whether a handler was successfully removed.\n   */\n  removeHandler(handler) {\n    if (!this.handlers_) {\n      return false;\n    }\n    return this.handlers_.delete(handler);\n  }\n\n  /**\n   * Logs a message at the given level. The message may be defined as a string\n   * or as a function that will return the message. If a function is provided,\n   * it will only be invoked if this logger's\n   * {@linkplain #getEffectiveLevel() effective log level} includes the given\n   * `level`.\n   *\n   * @param {!Level} level the level at which to log the message.\n   * @param {(string|function(): string)} loggable the message to log, or a\n   *     function that will return the message.\n   */\n  log(level, loggable) {\n    if (!this.isLoggable(level)) {\n      return;\n    }\n    let message = '[' + this.name_ + '] '\n        + (typeof loggable === 'function' ? loggable() : loggable);\n    let entry = new Entry(level, message, Date.now());\n    for (let logger = this; !!logger; logger = logger.parent_) {\n      if (logger.handlers_) {\n        for (let handler of logger.handlers_) {\n          handler(entry);\n        }\n      }\n    }\n  }\n\n  /**\n   * Logs a message at the {@link Level.SEVERE} log level.\n   * @param {(string|function(): string)} loggable the message to log, or a\n   *     function that will return the message.\n   */\n  severe(loggable) {\n    this.log(Level.SEVERE, loggable);\n  }\n\n  /**\n   * Logs a message at the {@link Level.WARNING} log level.\n   * @param {(string|function(): string)} loggable the message to log, or a\n   *     function that will return the message.\n   */\n  warning(loggable) {\n    this.log(Level.WARNING, loggable);\n  }\n\n  /**\n   * Logs a message at the {@link Level.INFO} log level.\n   * @param {(string|function(): string)} loggable the message to log, or a\n   *     function that will return the message.\n   */\n  info(loggable) {\n    this.log(Level.INFO, loggable);\n  }\n\n  /**\n   * Logs a message at the {@link Level.DEBUG} log level.\n   * @param {(string|function(): string)} loggable the message to log, or a\n   *     function that will return the message.\n   */\n  debug(loggable) {\n    this.log(Level.DEBUG, loggable);\n  }\n\n  /**\n   * Logs a message at the {@link Level.FINE} log level.\n   * @param {(string|function(): string)} loggable the message to log, or a\n   *     function that will return the message.\n   */\n  fine(loggable) {\n    this.log(Level.FINE, loggable);\n  }\n\n  /**\n   * Logs a message at the {@link Level.FINER} log level.\n   * @param {(string|function(): string)} loggable the message to log, or a\n   *     function that will return the message.\n   */\n  finer(loggable) {\n    this.log(Level.FINER, loggable);\n  }\n\n  /**\n   * Logs a message at the {@link Level.FINEST} log level.\n   * @param {(string|function(): string)} loggable the message to log, or a\n   *     function that will return the message.\n   */\n  finest(loggable) {\n    this.log(Level.FINEST, loggable);\n  }\n}\n\n\n/**\n * Maintains a collection of loggers.\n *\n * @final\n */\nclass LogManager {\n  constructor() {\n    /** @private {!Map<string, !Logger>} */\n    this.loggers_ = new Map;\n    this.root_ = new Logger('', Level.OFF);\n  }\n\n  /**\n   * Retrieves a named logger, creating it in the process. This function will\n   * implicitly create the requested logger, and any of its parents, if they\n   * do not yet exist.\n   *\n   * @param {string} name the logger's name.\n   * @return {!Logger} the requested logger.\n   */\n  getLogger(name) {\n    if (!name) {\n      return this.root_;\n    }\n    let parent = this.root_;\n    for (let i = name.indexOf('.'); i != -1; i = name.indexOf('.', i + 1)) {\n      let parentName = name.substr(0, i);\n      parent = this.createLogger_(parentName, parent);\n    }\n    return this.createLogger_(name, parent);\n  }\n\n  /**\n   * Creates a new logger.\n   *\n   * @param {string} name the logger's name.\n   * @param {!Logger} parent the logger's parent.\n   * @return {!Logger} the new logger.\n   * @private\n   */\n  createLogger_(name, parent) {\n    if (this.loggers_.has(name)) {\n      return /** @type {!Logger} */(this.loggers_.get(name));\n    }\n    let logger = new Logger(name, null);\n    logger.parent_ = parent;\n    this.loggers_.set(name, logger);\n    return logger;\n  }\n}\n\n\nconst logManager = new LogManager;\n\n\n/**\n * Retrieves a named logger, creating it in the process. This function will\n * implicitly create the requested logger, and any of its parents, if they\n * do not yet exist.\n *\n * The log level will be unspecified for newly created loggers. Use\n * {@link Logger#setLevel(level)} to explicitly set a level.\n *\n * @param {string} name the logger's name.\n * @return {!Logger} the requested logger.\n */\nfunction getLogger(name) {\n  return logManager.getLogger(name);\n}\n\n\n/**\n * Pads a number to ensure it has a minimum of two digits.\n * \n * @param {number} n the number to be padded.\n * @return {string} the padded number.\n */\nfunction pad(n) {\n  if (n >= 10) {\n    return '' + n;\n  } else {\n    return '0' + n;\n  }\n}\n\n\n/**\n * Logs all messages to the Console API.\n * @param {!Entry} entry the entry to log.\n */\nfunction consoleHandler(entry) {\n  if (typeof console === 'undefined' || !console) {\n    return;\n  }\n\n  var timestamp = new Date(entry.timestamp);\n  var msg =\n      '[' + timestamp.getUTCFullYear() + '-' +\n      pad(timestamp.getUTCMonth() + 1) + '-' +\n      pad(timestamp.getUTCDate()) + 'T' +\n      pad(timestamp.getUTCHours()) + ':' +\n      pad(timestamp.getUTCMinutes()) + ':' +\n      pad(timestamp.getUTCSeconds()) + 'Z] ' +\n      '[' + entry.level.name + '] ' +\n      entry.message;\n\n  var level = entry.level.value;\n  if (level >= Level.SEVERE.value) {\n    console.error(msg);\n  } else if (level >= Level.WARNING.value) {\n    console.warn(msg);\n  } else {\n    console.log(msg);\n  }\n}\n\n\n/**\n * Adds the console handler to the given logger. The console handler will log\n * all messages using the JavaScript Console API.\n *\n * @param {Logger=} opt_logger The logger to add the handler to; defaults\n *     to the root logger.\n */\nfunction addConsoleHandler(opt_logger) {\n  let logger = opt_logger || logManager.root_;\n  logger.addHandler(consoleHandler);\n}\n\n\n/**\n * Removes the console log handler from the given logger.\n *\n * @param {Logger=} opt_logger The logger to remove the handler from; defaults\n *     to the root logger.\n * @see exports.addConsoleHandler\n */\nfunction removeConsoleHandler(opt_logger) {\n  let logger = opt_logger || logManager.root_;\n  logger.removeHandler(consoleHandler);\n}\n\n\n/**\n * Installs the console log handler on the root logger.\n */\nfunction installConsoleHandler() {\n  addConsoleHandler(logManager.root_);\n}\n\n\n/**\n * Common log types.\n * @enum {string}\n */\nconst Type = {\n  /** Logs originating from the browser. */\n  BROWSER: 'browser',\n  /** Logs from a WebDriver client. */\n  CLIENT: 'client',\n  /** Logs from a WebDriver implementation. */\n  DRIVER: 'driver',\n  /** Logs related to performance. */\n  PERFORMANCE: 'performance',\n  /** Logs from the remote server. */\n  SERVER: 'server'\n};\n\n\n/**\n * Describes the log preferences for a WebDriver session.\n *\n * @final\n */\nclass Preferences {\n  constructor() {\n    /** @private {!Map<string, !Level>} */\n    this.prefs_ = new Map;\n  }\n\n  /**\n   * Sets the desired logging level for a particular log type.\n   * @param {(string|Type)} type The log type.\n   * @param {(!Level|string|number)} level The desired log level.\n   * @throws {TypeError} if `type` is not a `string`.\n   */\n  setLevel(type, level) {\n    if (typeof type !== 'string') {\n      throw TypeError('specified log type is not a string: ' + typeof type);\n    }\n    this.prefs_.set(type, level instanceof Level ? level : getLevel(level));\n  }\n\n  /**\n   * Converts this instance to its JSON representation.\n   * @return {!Object<string, string>} The JSON representation of this set of\n   *     preferences.\n   */\n  toJSON() {\n    let json = {};\n    for (let key of this.prefs_.keys()) {\n      json[key] = this.prefs_.get(key).name;\n    }\n    return json;\n  }\n}\n\n\n// PUBLIC API\n\n\nmodule.exports = {\n  Entry: Entry,\n  Level: Level,\n  LogManager: LogManager,\n  Logger: Logger,\n  Preferences: Preferences,\n  Type: Type,\n  addConsoleHandler: addConsoleHandler,\n  getLevel: getLevel,\n  getLogger: getLogger,\n  installConsoleHandler: installConsoleHandler,\n  removeConsoleHandler: removeConsoleHandler\n};\n"]}