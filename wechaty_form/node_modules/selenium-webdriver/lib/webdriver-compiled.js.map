{"version":3,"sources":["webdriver.js"],"names":[],"mappings":"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","file":"webdriver-compiled.js","sourcesContent":["// Licensed to the Software Freedom Conservancy (SFC) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The SFC licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\n/**\n * @fileoverview The heart of the WebDriver JavaScript API.\n */\n\n'use strict';\n\nconst actions = require('./actions');\nconst by = require('./by');\nconst Capabilities = require('./capabilities').Capabilities;\nconst command = require('./command');\nconst error = require('./error');\nconst input = require('./input');\nconst logging = require('./logging');\nconst {Session} = require('./session');\nconst Symbols = require('./symbols');\nconst promise = require('./promise');\n\n\n/**\n * Defines a condition for use with WebDriver's {@linkplain WebDriver#wait wait\n * command}.\n *\n * @template OUT\n */\nclass Condition {\n  /**\n   * @param {string} message A descriptive error message. Should complete the\n   *     sentence \"Waiting [...]\"\n   * @param {function(!WebDriver): OUT} fn The condition function to\n   *     evaluate on each iteration of the wait loop.\n   */\n  constructor(message, fn) {\n    /** @private {string} */\n    this.description_ = 'Waiting ' + message;\n\n    /** @type {function(!WebDriver): OUT} */\n    this.fn = fn;\n  }\n\n  /** @return {string} A description of this condition. */\n  description() {\n    return this.description_;\n  }\n}\n\n\n/**\n * Defines a condition that will result in a {@link WebElement}.\n *\n * @extends {Condition<!(WebElement|IThenable<!WebElement>)>}\n */\nclass WebElementCondition extends Condition {\n  /**\n   * @param {string} message A descriptive error message. Should complete the\n   *     sentence \"Waiting [...]\"\n   * @param {function(!WebDriver): !(WebElement|IThenable<!WebElement>)}\n   *     fn The condition function to evaluate on each iteration of the wait\n   *     loop.\n   */\n  constructor(message, fn) {\n    super(message, fn);\n  }\n}\n\n\n//////////////////////////////////////////////////////////////////////////////\n//\n//  WebDriver\n//\n//////////////////////////////////////////////////////////////////////////////\n\n\n/**\n * Translates a command to its wire-protocol representation before passing it\n * to the given `executor` for execution.\n * @param {!command.Executor} executor The executor to use.\n * @param {!command.Command} command The command to execute.\n * @return {!Promise} A promise that will resolve with the command response.\n */\nfunction executeCommand(executor, command) {\n  return toWireValue(command.getParameters()).\n      then(function(parameters) {\n        command.setParameters(parameters);\n        return executor.execute(command);\n      });\n}\n\n\n/**\n * Converts an object to its JSON representation in the WebDriver wire protocol.\n * When converting values of type object, the following steps will be taken:\n * <ol>\n * <li>if the object is a WebElement, the return value will be the element's\n *     server ID\n * <li>if the object defines a {@link Symbols.serialize} method, this algorithm\n *     will be recursively applied to the object's serialized representation\n * <li>if the object provides a \"toJSON\" function, this algorithm will\n *     recursively be applied to the result of that function\n * <li>otherwise, the value of each key will be recursively converted according\n *     to the rules above.\n * </ol>\n *\n * @param {*} obj The object to convert.\n * @return {!Promise<?>} A promise that will resolve to the input value's JSON\n *     representation.\n */\nfunction toWireValue(obj) {\n  if (promise.isPromise(obj)) {\n    return Promise.resolve(obj).then(toWireValue);\n  }\n  return Promise.resolve(convertValue(obj));\n}\n\n\nfunction convertValue(value) {\n  if (value === void 0 || value === null) {\n    return value;\n  }\n\n  if (typeof value === 'boolean'\n      || typeof value === 'number'\n      || typeof value === 'string') {\n    return value;\n  }\n\n  if (Array.isArray(value)) {\n    return convertKeys(value);\n  }\n\n  if (typeof value === 'function') {\n    return '' + value;\n  }\n\n  if (typeof value[Symbols.serialize] === 'function') {\n    return toWireValue(value[Symbols.serialize]());\n  } else if (typeof value.toJSON === 'function') {\n    return toWireValue(value.toJSON());\n  }\n  return convertKeys(value);\n}\n\n\nfunction convertKeys(obj) {\n  const isArray = Array.isArray(obj);\n  const numKeys = isArray ? obj.length : Object.keys(obj).length;\n  const ret = isArray ? new Array(numKeys) : {};\n  if (!numKeys) {\n    return Promise.resolve(ret);\n  }\n\n  let numResolved = 0;\n\n  function forEachKey(obj, fn) {\n    if (Array.isArray(obj)) {\n      for (let i = 0, n = obj.length; i < n; i++) {\n        fn(obj[i], i);\n      }\n    } else {\n      for (let key in obj) {\n        fn(obj[key], key);\n      }\n    }\n  }\n\n  return new Promise(function(done, reject) {\n    forEachKey(obj, function(value, key) {\n      if (promise.isPromise(value)) {\n        value.then(toWireValue).then(setValue, reject);\n      } else {\n        value = convertValue(value);\n        if (promise.isPromise(value)) {\n          value.then(toWireValue).then(setValue, reject);\n        } else {\n          setValue(value);\n        }\n      }\n\n      function setValue(value) {\n        ret[key] = value;\n        maybeFulfill();\n      }\n    });\n\n    function maybeFulfill() {\n      if (++numResolved === numKeys) {\n        done(ret);\n      }\n    }\n  });\n}\n\n\n/**\n * Converts a value from its JSON representation according to the WebDriver wire\n * protocol. Any JSON object that defines a WebElement ID will be decoded to a\n * {@link WebElement} object. All other values will be passed through as is.\n *\n * @param {!WebDriver} driver The driver to use as the parent of any unwrapped\n *     {@link WebElement} values.\n * @param {*} value The value to convert.\n * @return {*} The converted value.\n */\nfunction fromWireValue(driver, value) {\n  if (Array.isArray(value)) {\n    value = value.map(v => fromWireValue(driver, v));\n  } else if (WebElement.isId(value)) {\n    let id = WebElement.extractId(value);\n    value = new WebElement(driver, id);\n  } else if (value && typeof value === 'object') {\n    let result = {};\n    for (let key in value) {\n      if (value.hasOwnProperty(key)) {\n        result[key] = fromWireValue(driver, value[key]);\n      }\n    }\n    value = result;\n  }\n  return value;\n}\n\n\n/**\n * Structural interface for a WebDriver client.\n *\n * @record\n */\nclass IWebDriver {\n\n  /** @return {!promise.ControlFlow} The control flow used by this instance. */\n  controlFlow() {}\n\n  /**\n   * Schedules a {@link command.Command} to be executed by this driver's\n   * {@link command.Executor}.\n   *\n   * @param {!command.Command} command The command to schedule.\n   * @param {string} description A description of the command for debugging.\n   * @return {!promise.Thenable<T>} A promise that will be resolved\n   *     with the command result.\n   * @template T\n   */\n  schedule(command, description) {}\n\n  /**\n   * Sets the {@linkplain input.FileDetector file detector} that should be\n   * used with this instance.\n   * @param {input.FileDetector} detector The detector to use or {@code null}.\n   */\n  setFileDetector(detector) {}\n\n  /**\n   * @return {!command.Executor} The command executor used by this instance.\n   */\n  getExecutor() {}\n\n  /**\n   * @return {!promise.Thenable<!Session>} A promise for this client's session.\n   */\n  getSession() {}\n\n  /**\n   * @return {!promise.Thenable<!Capabilities>} A promise that will resolve with\n   *     the this instance's capabilities.\n   */\n  getCapabilities() {}\n\n  /**\n   * Terminates the browser session. After calling quit, this instance will be\n   * invalidated and may no longer be used to issue commands against the\n   * browser.\n   *\n   * @return {!promise.Thenable<void>} A promise that will be resolved when the\n   *     command has completed.\n   */\n  quit() {}\n\n  /**\n   * Creates a new action sequence using this driver. The sequence will not be\n   * scheduled for execution until {@link actions.ActionSequence#perform} is\n   * called. Example:\n   *\n   *     driver.actions().\n   *         mouseDown(element1).\n   *         mouseMove(element2).\n   *         mouseUp().\n   *         perform();\n   *\n   * @return {!actions.ActionSequence} A new action sequence for this instance.\n   */\n  actions() {}\n\n  /**\n   * Creates a new touch sequence using this driver. The sequence will not be\n   * scheduled for execution until {@link actions.TouchSequence#perform} is\n   * called. Example:\n   *\n   *     driver.touchActions().\n   *         tap(element1).\n   *         doubleTap(element2).\n   *         perform();\n   *\n   * @return {!actions.TouchSequence} A new touch sequence for this instance.\n   */\n  touchActions() {}\n\n  /**\n   * Schedules a command to execute JavaScript in the context of the currently\n   * selected frame or window. The script fragment will be executed as the body\n   * of an anonymous function. If the script is provided as a function object,\n   * that function will be converted to a string for injection into the target\n   * window.\n   *\n   * Any arguments provided in addition to the script will be included as script\n   * arguments and may be referenced using the {@code arguments} object.\n   * Arguments may be a boolean, number, string, or {@linkplain WebElement}.\n   * Arrays and objects may also be used as script arguments as long as each item\n   * adheres to the types previously mentioned.\n   *\n   * The script may refer to any variables accessible from the current window.\n   * Furthermore, the script will execute in the window's context, thus\n   * {@code document} may be used to refer to the current document. Any local\n   * variables will not be available once the script has finished executing,\n   * though global variables will persist.\n   *\n   * If the script has a return value (i.e. if the script contains a return\n   * statement), then the following steps will be taken for resolving this\n   * functions return value:\n   *\n   * - For a HTML element, the value will resolve to a {@linkplain WebElement}\n   * - Null and undefined return values will resolve to null</li>\n   * - Booleans, numbers, and strings will resolve as is</li>\n   * - Functions will resolve to their string representation</li>\n   * - For arrays and objects, each member item will be converted according to\n   *     the rules above\n   *\n   * @param {!(string|Function)} script The script to execute.\n   * @param {...*} var_args The arguments to pass to the script.\n   * @return {!promise.Thenable<T>} A promise that will resolve to the\n   *    scripts return value.\n   * @template T\n   */\n  executeScript(script, var_args) {}\n\n  /**\n   * Schedules a command to execute asynchronous JavaScript in the context of the\n   * currently selected frame or window. The script fragment will be executed as\n   * the body of an anonymous function. If the script is provided as a function\n   * object, that function will be converted to a string for injection into the\n   * target window.\n   *\n   * Any arguments provided in addition to the script will be included as script\n   * arguments and may be referenced using the {@code arguments} object.\n   * Arguments may be a boolean, number, string, or {@code WebElement}.\n   * Arrays and objects may also be used as script arguments as long as each item\n   * adheres to the types previously mentioned.\n   *\n   * Unlike executing synchronous JavaScript with {@link #executeScript},\n   * scripts executed with this function must explicitly signal they are finished\n   * by invoking the provided callback. This callback will always be injected\n   * into the executed function as the last argument, and thus may be referenced\n   * with {@code arguments[arguments.length - 1]}. The following steps will be\n   * taken for resolving this functions return value against the first argument\n   * to the script's callback function:\n   *\n   * - For a HTML element, the value will resolve to a\n   *     {@link WebElement}\n   * - Null and undefined return values will resolve to null\n   * - Booleans, numbers, and strings will resolve as is\n   * - Functions will resolve to their string representation\n   * - For arrays and objects, each member item will be converted according to\n   *     the rules above\n   *\n   * __Example #1:__ Performing a sleep that is synchronized with the currently\n   * selected window:\n   *\n   *     var start = new Date().getTime();\n   *     driver.executeAsyncScript(\n   *         'window.setTimeout(arguments[arguments.length - 1], 500);').\n   *         then(function() {\n   *           console.log(\n   *               'Elapsed time: ' + (new Date().getTime() - start) + ' ms');\n   *         });\n   *\n   * __Example #2:__ Synchronizing a test with an AJAX application:\n   *\n   *     var button = driver.findElement(By.id('compose-button'));\n   *     button.click();\n   *     driver.executeAsyncScript(\n   *         'var callback = arguments[arguments.length - 1];' +\n   *         'mailClient.getComposeWindowWidget().onload(callback);');\n   *     driver.switchTo().frame('composeWidget');\n   *     driver.findElement(By.id('to')).sendKeys('dog@example.com');\n   *\n   * __Example #3:__ Injecting a XMLHttpRequest and waiting for the result. In\n   * this example, the inject script is specified with a function literal. When\n   * using this format, the function is converted to a string for injection, so it\n   * should not reference any symbols not defined in the scope of the page under\n   * test.\n   *\n   *     driver.executeAsyncScript(function() {\n   *       var callback = arguments[arguments.length - 1];\n   *       var xhr = new XMLHttpRequest();\n   *       xhr.open(\"GET\", \"/resource/data.json\", true);\n   *       xhr.onreadystatechange = function() {\n   *         if (xhr.readyState == 4) {\n   *           callback(xhr.responseText);\n   *         }\n   *       };\n   *       xhr.send('');\n   *     }).then(function(str) {\n   *       console.log(JSON.parse(str)['food']);\n   *     });\n   *\n   * @param {!(string|Function)} script The script to execute.\n   * @param {...*} var_args The arguments to pass to the script.\n   * @return {!promise.Thenable<T>} A promise that will resolve to the\n   *    scripts return value.\n   * @template T\n   */\n  executeAsyncScript(script, var_args) {}\n\n  /**\n   * Schedules a command to execute a custom function.\n   * @param {function(...): (T|IThenable<T>)} fn The function to execute.\n   * @param {Object=} opt_scope The object in whose scope to execute the function.\n   * @param {...*} var_args Any arguments to pass to the function.\n   * @return {!promise.Thenable<T>} A promise that will be resolved'\n   *     with the function's result.\n   * @template T\n   */\n  call(fn, opt_scope, var_args) {}\n\n  /**\n   * Schedules a command to wait for a condition to hold. The condition may be\n   * specified by a {@link Condition}, as a custom function, or as any\n   * promise-like thenable.\n   *\n   * For a {@link Condition} or function, the wait will repeatedly\n   * evaluate the condition until it returns a truthy value. If any errors occur\n   * while evaluating the condition, they will be allowed to propagate. In the\n   * event a condition returns a {@link promise.Promise promise}, the polling\n   * loop will wait for it to be resolved and use the resolved value for whether\n   * the condition has been satisfied. Note the resolution time for a promise\n   * is factored into whether a wait has timed out.\n   *\n   * Note, if the provided condition is a {@link WebElementCondition}, then\n   * the wait will return a {@link WebElementPromise} that will resolve to the\n   * element that satisfied the condition.\n   *\n   * _Example:_ waiting up to 10 seconds for an element to be present on the\n   * page.\n   *\n   *     var button = driver.wait(until.elementLocated(By.id('foo')), 10000);\n   *     button.click();\n   *\n   * This function may also be used to block the command flow on the resolution\n   * of any thenable promise object. When given a promise, the command will\n   * simply wait for its resolution before completing. A timeout may be provided\n   * to fail the command if the promise does not resolve before the timeout\n   * expires.\n   *\n   * _Example:_ Suppose you have a function, `startTestServer`, that returns a\n   * promise for when a server is ready for requests. You can block a WebDriver\n   * client on this promise with:\n   *\n   *     var started = startTestServer();\n   *     driver.wait(started, 5 * 1000, 'Server should start within 5 seconds');\n   *     driver.get(getServerUrl());\n   *\n   * @param {!(IThenable<T>|\n   *           Condition<T>|\n   *           function(!WebDriver): T)} condition The condition to\n   *     wait on, defined as a promise, condition object, or  a function to\n   *     evaluate as a condition.\n   * @param {number=} opt_timeout How long to wait for the condition to be true.\n   * @param {string=} opt_message An optional message to use if the wait times\n   *     out.\n   * @return {!(promise.Thenable<T>|WebElementPromise)} A promise that will be\n   *     resolved with the first truthy value returned by the condition\n   *     function, or rejected if the condition times out. If the input\n   *     input condition is an instance of a {@link WebElementCondition},\n   *     the returned value will be a {@link WebElementPromise}.\n   * @throws {TypeError} if the provided `condition` is not a valid type.\n   * @template T\n   */\n  wait(condition, opt_timeout, opt_message) {}\n\n  /**\n   * Schedules a command to make the driver sleep for the given amount of time.\n   * @param {number} ms The amount of time, in milliseconds, to sleep.\n   * @return {!promise.Thenable<void>} A promise that will be resolved\n   *     when the sleep has finished.\n   */\n  sleep(ms) {}\n\n  /**\n   * Schedules a command to retrieve the current window handle.\n   * @return {!promise.Thenable<string>} A promise that will be\n   *     resolved with the current window handle.\n   */\n  getWindowHandle() {}\n\n  /**\n   * Schedules a command to retrieve the current list of available window handles.\n   * @return {!promise.Thenable<!Array<string>>} A promise that will\n   *     be resolved with an array of window handles.\n   */\n  getAllWindowHandles() {}\n\n  /**\n   * Schedules a command to retrieve the current page's source. The page source\n   * returned is a representation of the underlying DOM: do not expect it to be\n   * formatted or escaped in the same way as the response sent from the web\n   * server.\n   * @return {!promise.Thenable<string>} A promise that will be\n   *     resolved with the current page source.\n   */\n  getPageSource() {}\n\n  /**\n   * Schedules a command to close the current window.\n   * @return {!promise.Thenable<void>} A promise that will be resolved\n   *     when this command has completed.\n   */\n  close() {}\n\n  /**\n   * Schedules a command to navigate to the given URL.\n   * @param {string} url The fully qualified URL to open.\n   * @return {!promise.Thenable<void>} A promise that will be resolved\n   *     when the document has finished loading.\n   */\n  get(url) {}\n\n  /**\n   * Schedules a command to retrieve the URL of the current page.\n   * @return {!promise.Thenable<string>} A promise that will be\n   *     resolved with the current URL.\n   */\n  getCurrentUrl() {}\n\n  /**\n   * Schedules a command to retrieve the current page's title.\n   * @return {!promise.Thenable<string>} A promise that will be\n   *     resolved with the current page's title.\n   */\n  getTitle() {}\n\n  /**\n   * Schedule a command to find an element on the page. If the element cannot be\n   * found, a {@link bot.ErrorCode.NO_SUCH_ELEMENT} result will be returned\n   * by the driver. Unlike other commands, this error cannot be suppressed. In\n   * other words, scheduling a command to find an element doubles as an assert\n   * that the element is present on the page. To test whether an element is\n   * present on the page, use {@link #findElements}:\n   *\n   *     driver.findElements(By.id('foo'))\n   *         .then(found => console.log('Element found? %s', !!found.length));\n   *\n   * The search criteria for an element may be defined using one of the\n   * factories in the {@link webdriver.By} namespace, or as a short-hand\n   * {@link webdriver.By.Hash} object. For example, the following two statements\n   * are equivalent:\n   *\n   *     var e1 = driver.findElement(By.id('foo'));\n   *     var e2 = driver.findElement({id:'foo'});\n   *\n   * You may also provide a custom locator function, which takes as input this\n   * instance and returns a {@link WebElement}, or a promise that will resolve\n   * to a WebElement. If the returned promise resolves to an array of\n   * WebElements, WebDriver will use the first element. For example, to find the\n   * first visible link on a page, you could write:\n   *\n   *     var link = driver.findElement(firstVisibleLink);\n   *\n   *     function firstVisibleLink(driver) {\n   *       var links = driver.findElements(By.tagName('a'));\n   *       return promise.filter(links, function(link) {\n   *         return link.isDisplayed();\n   *       });\n   *     }\n   *\n   * @param {!(by.By|Function)} locator The locator to use.\n   * @return {!WebElementPromise} A WebElement that can be used to issue\n   *     commands against the located element. If the element is not found, the\n   *     element will be invalidated and all scheduled commands aborted.\n   */\n  findElement(locator) {}\n\n  /**\n   * Schedule a command to search for multiple elements on the page.\n   *\n   * @param {!(by.By|Function)} locator The locator to use.\n   * @return {!promise.Thenable<!Array<!WebElement>>} A\n   *     promise that will resolve to an array of WebElements.\n   */\n  findElements(locator) {}\n\n  /**\n   * Schedule a command to take a screenshot. The driver makes a best effort to\n   * return a screenshot of the following, in order of preference:\n   *\n   * 1. Entire page\n   * 2. Current window\n   * 3. Visible portion of the current frame\n   * 4. The entire display containing the browser\n   *\n   * @return {!promise.Thenable<string>} A promise that will be\n   *     resolved to the screenshot as a base-64 encoded PNG.\n   */\n  takeScreenshot() {}\n\n  /**\n   * @return {!Options} The options interface for this instance.\n   */\n  manage() {}\n\n  /**\n   * @return {!Navigation} The navigation interface for this instance.\n   */\n  navigate() {}\n\n  /**\n   * @return {!TargetLocator} The target locator interface for this\n   *     instance.\n   */\n  switchTo() {}\n}\n\n\n/**\n * Each WebDriver instance provides automated control over a browser session.\n *\n * @implements {IWebDriver}\n */\nclass WebDriver {\n  /**\n   * @param {!(Session|IThenable<!Session>)} session Either a known session or a\n   *     promise that will be resolved to a session.\n   * @param {!command.Executor} executor The executor to use when sending\n   *     commands to the browser.\n   * @param {promise.ControlFlow=} opt_flow The flow to\n   *     schedule commands through. Defaults to the active flow object.\n   * @param {(function(this: void): ?)=} opt_onQuit A function to call, if any,\n   *     when the session is terminated.\n   */\n  constructor(session, executor, opt_flow, opt_onQuit) {\n    /** @private {!promise.ControlFlow} */\n    this.flow_ = opt_flow || promise.controlFlow();\n\n    /** @private {!promise.Thenable<!Session>} */\n    this.session_ = this.flow_.promise(resolve => resolve(session));\n\n    /** @private {!command.Executor} */\n    this.executor_ = executor;\n\n    /** @private {input.FileDetector} */\n    this.fileDetector_ = null;\n\n    /** @private @const {(function(this: void): ?|undefined)} */\n    this.onQuit_ = opt_onQuit;\n  }\n\n  /**\n   * Creates a new WebDriver client for an existing session.\n   * @param {!command.Executor} executor Command executor to use when querying\n   *     for session details.\n   * @param {string} sessionId ID of the session to attach to.\n   * @param {promise.ControlFlow=} opt_flow The control flow all\n   *     driver commands should execute under. Defaults to the\n   *     {@link promise.controlFlow() currently active}  control flow.\n   * @return {!WebDriver} A new client for the specified session.\n   */\n  static attachToSession(executor, sessionId, opt_flow) {\n    let flow = opt_flow || promise.controlFlow();\n    let cmd = new command.Command(command.Name.DESCRIBE_SESSION)\n        .setParameter('sessionId', sessionId);\n    let session = flow.execute(\n        () => executeCommand(executor, cmd).catch(err => {\n          // The DESCRIBE_SESSION command is not supported by the W3C spec, so\n          // if we get back an unknown command, just return a session with\n          // unknown capabilities.\n          if (err instanceof error.UnknownCommandError) {\n            return new Session(sessionId, new Capabilities);\n          }\n          throw err;\n        }),\n        'WebDriver.attachToSession()');\n    return new WebDriver(session, executor, flow);\n  }\n\n  /**\n   * Creates a new WebDriver session.\n   *\n   * By default, the requested session `capabilities` are merely \"desired\" and\n   * the remote end will still create a new session even if it cannot satisfy\n   * all of the requested capabilities. You can query which capabilities a\n   * session actually has using the\n   * {@linkplain #getCapabilities() getCapabilities()} method on the returned\n   * WebDriver instance.\n   *\n   * To define _required capabilities_, provide the `capabilities` as an object\n   * literal with `required` and `desired` keys. The `desired` key may be\n   * omitted if all capabilities are required, and vice versa. If the server\n   * cannot create a session with all of the required capabilities, it will\n   * return an {@linkplain error.SessionNotCreatedError}.\n   *\n   *     let required = new Capabilities().set('browserName', 'firefox');\n   *     let desired = new Capabilities().set('version', '45');\n   *     let driver = WebDriver.createSession(executor, {required, desired});\n   *\n   * This function will always return a WebDriver instance. If there is an error\n   * creating the session, such as the aforementioned SessionNotCreatedError,\n   * the driver will have a rejected {@linkplain #getSession session} promise.\n   * It is recommended that this promise is left _unhandled_ so it will\n   * propagate through the {@linkplain promise.ControlFlow control flow} and\n   * cause subsequent commands to fail.\n   *\n   *     let required = Capabilities.firefox();\n   *     let driver = WebDriver.createSession(executor, {required});\n   *\n   *     // If the createSession operation failed, then this command will also\n   *     // also fail, propagating the creation failure.\n   *     driver.get('http://www.google.com').catch(e => console.log(e));\n   *\n   * @param {!command.Executor} executor The executor to create the new session\n   *     with.\n   * @param {(!Capabilities|\n   *          {desired: (Capabilities|undefined),\n   *           required: (Capabilities|undefined)})} capabilities The desired\n   *     capabilities for the new session.\n   * @param {promise.ControlFlow=} opt_flow The control flow all driver\n   *     commands should execute under, including the initial session creation.\n   *     Defaults to the {@link promise.controlFlow() currently active}\n   *     control flow.\n   * @param {(function(new: WebDriver,\n   *                   !IThenable<!Session>,\n   *                   !command.Executor,\n   *                   promise.ControlFlow=))=} opt_ctor\n   *    A reference to the constructor of the specific type of WebDriver client\n   *    to instantiate. Will create a vanilla {@linkplain WebDriver} instance\n   *    if a constructor is not provided.\n   * @param {(function(this: void): ?)=} opt_onQuit A callback to invoke when\n   *    the newly created session is terminated. This should be used to clean\n   *    up any resources associated with the session.\n   * @return {!WebDriver} The driver for the newly created session.\n   */\n  static createSession(\n        executor, capabilities, opt_flow, opt_ctor, opt_onQuit) {\n    let flow = opt_flow || promise.controlFlow();\n    let cmd = new command.Command(command.Name.NEW_SESSION);\n\n    if (capabilities && (capabilities.desired || capabilities.required)) {\n      cmd.setParameter('desiredCapabilities', capabilities.desired);\n      cmd.setParameter('requiredCapabilities', capabilities.required);\n    } else {\n      cmd.setParameter('desiredCapabilities', capabilities);\n    }\n\n    let session = flow.execute(\n        () => executeCommand(executor, cmd),\n        'WebDriver.createSession()');\n    if (typeof opt_onQuit === 'function') {\n      session = session.catch(err => {\n        return Promise.resolve(opt_onQuit.call(void 0)).then(_ => {throw err;});\n      });\n    }\n    const ctor = opt_ctor || WebDriver;\n    return new ctor(session, executor, flow, opt_onQuit);\n  }\n\n  /** @override */\n  controlFlow() {\n    return this.flow_;\n  }\n\n  /** @override */\n  schedule(command, description) {\n    command.setParameter('sessionId', this.session_);\n\n    // If any of the command parameters are rejected promises, those\n    // rejections may be reported as unhandled before the control flow\n    // attempts to execute the command. To ensure parameters errors\n    // propagate through the command itself, we resolve all of the\n    // command parameters now, but suppress any errors until the ControlFlow\n    // actually executes the command. This addresses scenarios like catching\n    // an element not found error in:\n    //\n    //     driver.findElement(By.id('foo')).click().catch(function(e) {\n    //       if (e instanceof NoSuchElementError) {\n    //         // Do something.\n    //       }\n    //     });\n    var prepCommand = toWireValue(command.getParameters());\n    prepCommand.catch(function() {});\n\n    var flow = this.flow_;\n    var executor = this.executor_;\n    return flow.execute(() => {\n      // Retrieve resolved command parameters; any previously suppressed errors\n      // will now propagate up through the control flow as part of the command\n      // execution.\n      return prepCommand.then(function(parameters) {\n        command.setParameters(parameters);\n        return executor.execute(command);\n      }).then(value => fromWireValue(this, value));\n    }, description);\n  }\n\n  /** @override */\n  setFileDetector(detector) {\n    this.fileDetector_ = detector;\n  }\n\n  /** @override */\n  getExecutor() {\n    return this.executor_;\n  }\n\n  /** @override */\n  getSession() {\n    return this.session_;\n  }\n\n  /** @override */\n  getCapabilities() {\n    return this.session_.then(s => s.getCapabilities());\n  }\n\n  /** @override */\n  quit() {\n    var result = this.schedule(\n        new command.Command(command.Name.QUIT),\n        'WebDriver.quit()');\n    // Delete our session ID when the quit command finishes; this will allow us\n    // to throw an error when attempting to use a driver post-quit.\n    return /** @type {!promise.Thenable} */(promise.finally(result, () => {\n      this.session_ = this.flow_.promise((_, reject) => {\n        reject(new error.NoSuchSessionError(\n            'This driver instance does not have a valid session ID ' +\n            '(did you call WebDriver.quit()?) and may no longer be used.'));\n      });\n\n      // Only want the session rejection to bubble if accessed.\n      this.session_.catch(function() {});\n\n      if (this.onQuit_) {\n        return this.onQuit_.call(void 0);\n      }\n    }));\n  }\n\n  /** @override */\n  actions() {\n    return new actions.ActionSequence(this);\n  }\n\n  /** @override */\n  touchActions() {\n    return new actions.TouchSequence(this);\n  }\n\n  /** @override */\n  executeScript(script, var_args) {\n    if (typeof script === 'function') {\n      script = 'return (' + script + ').apply(null, arguments);';\n    }\n    let args =\n        arguments.length > 1 ? Array.prototype.slice.call(arguments, 1) : [];\n   return this.schedule(\n        new command.Command(command.Name.EXECUTE_SCRIPT).\n            setParameter('script', script).\n            setParameter('args', args),\n        'WebDriver.executeScript()');\n  }\n\n  /** @override */\n  executeAsyncScript(script, var_args) {\n    if (typeof script === 'function') {\n      script = 'return (' + script + ').apply(null, arguments);';\n    }\n    let args = Array.prototype.slice.call(arguments, 1);\n    return this.schedule(\n        new command.Command(command.Name.EXECUTE_ASYNC_SCRIPT).\n            setParameter('script', script).\n            setParameter('args', args),\n        'WebDriver.executeScript()');\n  }\n\n  /** @override */\n  call(fn, opt_scope, var_args) {\n    let args = Array.prototype.slice.call(arguments, 2);\n    return this.flow_.execute(function() {\n      return promise.fullyResolved(args).then(function(args) {\n        if (promise.isGenerator(fn)) {\n          args.unshift(fn, opt_scope);\n          return promise.consume.apply(null, args);\n        }\n        return fn.apply(opt_scope, args);\n      });\n    }, 'WebDriver.call(' + (fn.name || 'function') + ')');\n  }\n\n  /** @override */\n  wait(condition, opt_timeout, opt_message) {\n    if (promise.isPromise(condition)) {\n      return this.flow_.wait(\n          /** @type {!IThenable} */(condition),\n          opt_timeout, opt_message);\n    }\n\n    var message = opt_message;\n    var fn = /** @type {!Function} */(condition);\n    if (condition instanceof Condition) {\n      message = message || condition.description();\n      fn = condition.fn;\n    }\n\n    if (typeof fn !== 'function') {\n      throw TypeError(\n          'Wait condition must be a promise-like object, function, or a '\n              + 'Condition object');\n    }\n\n    var driver = this;\n    var result = this.flow_.wait(function() {\n      if (promise.isGenerator(fn)) {\n        return promise.consume(fn, null, [driver]);\n      }\n      return fn(driver);\n    }, opt_timeout, message);\n\n    if (condition instanceof WebElementCondition) {\n      result = new WebElementPromise(this, result.then(function(value) {\n        if (!(value instanceof WebElement)) {\n          throw TypeError(\n              'WebElementCondition did not resolve to a WebElement: '\n                  + Object.prototype.toString.call(value));\n        }\n        return value;\n      }));\n    }\n    return result;\n  }\n\n  /** @override */\n  sleep(ms) {\n    return this.flow_.timeout(ms, 'WebDriver.sleep(' + ms + ')');\n  }\n\n  /** @override */\n  getWindowHandle() {\n    return this.schedule(\n        new command.Command(command.Name.GET_CURRENT_WINDOW_HANDLE),\n        'WebDriver.getWindowHandle()');\n  }\n\n  /** @override */\n  getAllWindowHandles() {\n    return this.schedule(\n        new command.Command(command.Name.GET_WINDOW_HANDLES),\n        'WebDriver.getAllWindowHandles()');\n  }\n\n  /** @override */\n  getPageSource() {\n    return this.schedule(\n        new command.Command(command.Name.GET_PAGE_SOURCE),\n        'WebDriver.getPageSource()');\n  }\n\n  /** @override */\n  close() {\n    return this.schedule(new command.Command(command.Name.CLOSE),\n                         'WebDriver.close()');\n  }\n\n  /** @override */\n  get(url) {\n    return this.navigate().to(url);\n  }\n\n  /** @override */\n  getCurrentUrl() {\n    return this.schedule(\n        new command.Command(command.Name.GET_CURRENT_URL),\n        'WebDriver.getCurrentUrl()');\n  }\n\n  /** @override */\n  getTitle() {\n    return this.schedule(new command.Command(command.Name.GET_TITLE),\n                         'WebDriver.getTitle()');\n  }\n\n  /** @override */\n  findElement(locator) {\n    let id;\n    locator = by.checkedLocator(locator);\n    if (typeof locator === 'function') {\n      id = this.findElementInternal_(locator, this);\n    } else {\n      let cmd = new command.Command(command.Name.FIND_ELEMENT).\n          setParameter('using', locator.using).\n          setParameter('value', locator.value);\n      id = this.schedule(cmd, 'WebDriver.findElement(' + locator + ')');\n    }\n    return new WebElementPromise(this, id);\n  }\n\n  /**\n   * @param {!Function} locatorFn The locator function to use.\n   * @param {!(WebDriver|WebElement)} context The search\n   *     context.\n   * @return {!promise.Thenable<!WebElement>} A\n   *     promise that will resolve to a list of WebElements.\n   * @private\n   */\n  findElementInternal_(locatorFn, context) {\n    return this.call(() => locatorFn(context)).then(function(result) {\n      if (Array.isArray(result)) {\n        result = result[0];\n      }\n      if (!(result instanceof WebElement)) {\n        throw new TypeError('Custom locator did not return a WebElement');\n      }\n      return result;\n    });\n  }\n\n  /** @override */\n  findElements(locator) {\n    locator = by.checkedLocator(locator);\n    if (typeof locator === 'function') {\n      return this.findElementsInternal_(locator, this);\n    } else {\n      let cmd = new command.Command(command.Name.FIND_ELEMENTS).\n          setParameter('using', locator.using).\n          setParameter('value', locator.value);\n      let res = this.schedule(cmd, 'WebDriver.findElements(' + locator + ')');\n      return res.catch(function(e) {\n        if (e instanceof error.NoSuchElementError) {\n          return [];\n        }\n        throw e;\n      });\n    }\n  }\n\n  /**\n   * @param {!Function} locatorFn The locator function to use.\n   * @param {!(WebDriver|WebElement)} context The search context.\n   * @return {!promise.Thenable<!Array<!WebElement>>} A promise that\n   *     will resolve to an array of WebElements.\n   * @private\n   */\n  findElementsInternal_(locatorFn, context) {\n    return this.call(() => locatorFn(context)).then(function(result) {\n      if (result instanceof WebElement) {\n        return [result];\n      }\n\n      if (!Array.isArray(result)) {\n        return [];\n      }\n\n      return result.filter(function(item) {\n        return item instanceof WebElement;\n      });\n    });\n  }\n\n  /** @override */\n  takeScreenshot() {\n    return this.schedule(new command.Command(command.Name.SCREENSHOT),\n        'WebDriver.takeScreenshot()');\n  }\n\n  /** @override */\n  manage() {\n    return new Options(this);\n  }\n\n  /** @override */\n  navigate() {\n    return new Navigation(this);\n  }\n\n  /** @override */\n  switchTo() {\n    return new TargetLocator(this);\n  }\n}\n\n\n/**\n * Interface for navigating back and forth in the browser history.\n *\n * This class should never be instantiated directly. Instead, obtain an instance\n * with\n *\n *    webdriver.navigate()\n *\n * @see WebDriver#navigate()\n */\nclass Navigation {\n  /**\n   * @param {!WebDriver} driver The parent driver.\n   * @private\n   */\n  constructor(driver) {\n    /** @private {!WebDriver} */\n    this.driver_ = driver;\n  }\n\n  /**\n   * Schedules a command to navigate to a new URL.\n   * @param {string} url The URL to navigate to.\n   * @return {!promise.Thenable<void>} A promise that will be resolved\n   *     when the URL has been loaded.\n   */\n  to(url) {\n    return this.driver_.schedule(\n        new command.Command(command.Name.GET).\n            setParameter('url', url),\n        'WebDriver.navigate().to(' + url + ')');\n  }\n\n  /**\n   * Schedules a command to move backwards in the browser history.\n   * @return {!promise.Thenable<void>} A promise that will be resolved\n   *     when the navigation event has completed.\n   */\n  back() {\n    return this.driver_.schedule(\n        new command.Command(command.Name.GO_BACK),\n        'WebDriver.navigate().back()');\n  }\n\n  /**\n   * Schedules a command to move forwards in the browser history.\n   * @return {!promise.Thenable<void>} A promise that will be resolved\n   *     when the navigation event has completed.\n   */\n  forward() {\n    return this.driver_.schedule(\n        new command.Command(command.Name.GO_FORWARD),\n        'WebDriver.navigate().forward()');\n  }\n\n  /**\n   * Schedules a command to refresh the current page.\n   * @return {!promise.Thenable<void>} A promise that will be resolved\n   *     when the navigation event has completed.\n   */\n  refresh() {\n    return this.driver_.schedule(\n        new command.Command(command.Name.REFRESH),\n        'WebDriver.navigate().refresh()');\n  }\n}\n\n\n/**\n * Provides methods for managing browser and driver state.\n *\n * This class should never be instantiated directly. Instead, obtain an instance\n * with {@linkplain WebDriver#manage() webdriver.manage()}.\n */\nclass Options {\n  /**\n   * @param {!WebDriver} driver The parent driver.\n   * @private\n   */\n  constructor(driver) {\n    /** @private {!WebDriver} */\n    this.driver_ = driver;\n  }\n\n  /**\n   * Schedules a command to add a cookie.\n   *\n   * __Sample Usage:__\n   *\n   *     // Set a basic cookie.\n   *     driver.options().addCookie({name: 'foo', value: 'bar'});\n   *\n   *     // Set a cookie that expires in 10 minutes.\n   *     let expiry = new Date(Date.now() + (10 * 60 * 1000));\n   *     driver.options().addCookie({name: 'foo', value: 'bar', expiry});\n   *\n   *     // The cookie expiration may also be specified in seconds since epoch.\n   *     driver.options().addCookie({\n   *       name: 'foo',\n   *       value: 'bar',\n   *       expiry: Math.floor(Date.now() / 1000)\n   *     });\n   *\n   * @param {!Options.Cookie} spec Defines the cookie to add.\n   * @return {!promise.Thenable<void>} A promise that will be resolved\n   *     when the cookie has been added to the page.\n   * @throws {error.InvalidArgumentError} if any of the cookie parameters are\n   *     invalid.\n   * @throws {TypeError} if `spec` is not a cookie object.\n   */\n  addCookie(spec) {\n    if (!spec || typeof spec !== 'object') {\n      throw TypeError('addCookie called with non-cookie parameter');\n    }\n\n    // We do not allow '=' or ';' in the name.\n    let name = spec.name;\n    if (/[;=]/.test(name)) {\n      throw new error.InvalidArgumentError(\n          'Invalid cookie name \"' + name + '\"');\n    }\n\n    // We do not allow ';' in value.\n    let value = spec.value;\n    if (/;/.test(value)) {\n      throw new error.InvalidArgumentError(\n          'Invalid cookie value \"' + value + '\"');\n    }\n\n    let cookieString = name + '=' + value +\n        (spec.domain ? ';domain=' + spec.domain : '') +\n        (spec.path ? ';path=' + spec.path : '') +\n        (spec.secure ? ';secure' : '');\n\n    let expiry;\n    if (typeof spec.expiry === 'number') {\n      expiry = Math.floor(spec.expiry);\n      cookieString += ';expires=' + new Date(spec.expiry * 1000).toUTCString();\n    } else if (spec.expiry instanceof Date) {\n      let date = /** @type {!Date} */(spec.expiry);\n      expiry = Math.floor(date.getTime() / 1000);\n      cookieString += ';expires=' + date.toUTCString();\n    }\n\n    return this.driver_.schedule(\n        new command.Command(command.Name.ADD_COOKIE).\n            setParameter('cookie', {\n              'name': name,\n              'value': value,\n              'path': spec.path,\n              'domain': spec.domain,\n              'secure': !!spec.secure,\n              'expiry': expiry\n            }),\n        'WebDriver.manage().addCookie(' + cookieString + ')');\n  }\n\n  /**\n   * Schedules a command to delete all cookies visible to the current page.\n   * @return {!promise.Thenable<void>} A promise that will be resolved\n   *     when all cookies have been deleted.\n   */\n  deleteAllCookies() {\n    return this.driver_.schedule(\n        new command.Command(command.Name.DELETE_ALL_COOKIES),\n        'WebDriver.manage().deleteAllCookies()');\n  }\n\n  /**\n   * Schedules a command to delete the cookie with the given name. This command\n   * is a no-op if there is no cookie with the given name visible to the current\n   * page.\n   * @param {string} name The name of the cookie to delete.\n   * @return {!promise.Thenable<void>} A promise that will be resolved\n   *     when the cookie has been deleted.\n   */\n  deleteCookie(name) {\n    return this.driver_.schedule(\n        new command.Command(command.Name.DELETE_COOKIE).\n            setParameter('name', name),\n        'WebDriver.manage().deleteCookie(' + name + ')');\n  }\n\n  /**\n   * Schedules a command to retrieve all cookies visible to the current page.\n   * Each cookie will be returned as a JSON object as described by the WebDriver\n   * wire protocol.\n   * @return {!promise.Thenable<!Array<!Options.Cookie>>} A promise that will be\n   *     resolved with the cookies visible to the current browsing context.\n   */\n  getCookies() {\n    return this.driver_.schedule(\n        new command.Command(command.Name.GET_ALL_COOKIES),\n        'WebDriver.manage().getCookies()');\n  }\n\n  /**\n   * Schedules a command to retrieve the cookie with the given name. Returns null\n   * if there is no such cookie. The cookie will be returned as a JSON object as\n   * described by the WebDriver wire protocol.\n   *\n   * @param {string} name The name of the cookie to retrieve.\n   * @return {!promise.Thenable<?Options.Cookie>} A promise that will be resolved\n   *     with the named cookie, or `null` if there is no such cookie.\n   */\n  getCookie(name) {\n    return this.getCookies().then(function(cookies) {\n      for (let cookie of cookies) {\n        if (cookie && cookie['name'] === name) {\n          return cookie;\n        }\n      }\n      return null;\n    });\n  }\n\n  /**\n   * Schedules a command to fetch the timeouts currently configured for the\n   * current session.\n   *\n   * @return {!promise.Thenable<{script: number,\n   *                             pageLoad: number,\n   *                             implicit: number}>} A promise that will be\n   *     resolved with the timeouts currently configured for the current\n   *     session.\n   * @see #setTimeouts()\n   */\n  getTimeouts() {\n    return this.driver_.schedule(\n        new command.Command(command.Name.GET_TIMEOUT),\n        `WebDriver.manage().getTimeouts()`)\n  }\n\n  /**\n   * Schedules a command to set timeout durations associated with the current\n   * session.\n   *\n   * The following timeouts are supported (all timeouts are specified in\n   * milliseconds):\n   *\n   * -  `implicit` specifies the maximum amount of time to wait for an element\n   *    locator to succeed when {@linkplain WebDriver#findElement locating}\n   *    {@linkplain WebDriver#findElements elements} on the page.\n   *    Defaults to 0 milliseconds.\n   *\n   * -  `pageLoad` specifies the maximum amount of time to wait for a page to\n   *    finishing loading. Defaults to 300000 milliseconds.\n   *\n   * -  `script` specifies the maximum amount of time to wait for an\n   *    {@linkplain WebDriver#executeScript evaluated script} to run. If set to\n   *    `null`, the script timeout will be indefinite.\n   *    Defaults to 30000 milliseconds.\n   *\n   * @param {{script: (number|null|undefined),\n   *          pageLoad: (number|null|undefined),\n   *          implicit: (number|null|undefined)}} conf\n   *     The desired timeout configuration.\n   * @return {!promise.Thenable<void>} A promise that will be resolved when the\n   *     timeouts have been set.\n   * @throws {!TypeError} if an invalid options object is provided.\n   * @see #getTimeouts()\n   * @see <https://w3c.github.io/webdriver/webdriver-spec.html#dfn-set-timeouts>\n   */\n  setTimeouts({script, pageLoad, implicit} = {}) {\n    let cmd = new command.Command(command.Name.SET_TIMEOUT);\n\n    let valid = false;\n    function setParam(key, value) {\n      if (value === null || typeof value === 'number') {\n        valid = true;\n        cmd.setParameter(key, value);\n      } else if (typeof value !== 'undefined') {\n        throw TypeError(\n            'invalid timeouts configuration:'\n                + ` expected \"${key}\" to be a number, got ${typeof value}`);\n      }\n    }\n    setParam('implicit', implicit);\n    setParam('pageLoad', pageLoad);\n    setParam('script', script);\n\n    if (valid) {\n      return this.driver_.schedule(cmd, `WebDriver.manage().setTimeouts()`)\n          .catch(() => {\n            // Fallback to the legacy method.\n            let cmds = [];\n            if (typeof script === 'number') {\n              cmds.push(legacyTimeout(this.driver_, 'script', script));\n            }\n            if (typeof implicit === 'number') {\n              cmds.push(legacyTimeout(this.driver_, 'implicit', implicit));\n            }\n            if (typeof pageLoad === 'number') {\n              cmds.push(legacyTimeout(this.driver_, 'page load', pageLoad));\n            }\n            return Promise.all(cmds);\n          });\n    }\n    throw TypeError('no timeouts specified');\n  }\n\n  /**\n   * @return {!Logs} The interface for managing driver\n   *     logs.\n   */\n  logs() {\n    return new Logs(this.driver_);\n  }\n\n  /**\n   * @return {!Timeouts} The interface for managing driver timeouts.\n   * @deprecated Use {@link #setTimeouts()} instead.\n   */\n  timeouts() {\n    return new Timeouts(this.driver_);\n  }\n\n  /**\n   * @return {!Window} The interface for managing the current window.\n   */\n  window() {\n    return new Window(this.driver_);\n  }\n}\n\n\n/**\n * @param {!WebDriver} driver\n * @param {string} type\n * @param {number} ms\n * @return {!promise.Thenable<void>}\n */\nfunction legacyTimeout(driver, type, ms) {\n  return driver.schedule(\n      new command.Command(command.Name.SET_TIMEOUT)\n          .setParameter('type', type)\n          .setParameter('ms', ms),\n      `WebDriver.manage().setTimeouts({${type}: ${ms}})`);\n}\n\n\n\n/**\n * A record object describing a browser cookie.\n *\n * @record\n */\nOptions.Cookie = function() {};\n\n\n/**\n * The name of the cookie.\n *\n * @type {string}\n */\nOptions.Cookie.prototype.name;\n\n\n/**\n * The cookie value.\n *\n * @type {string}\n */\nOptions.Cookie.prototype.value;\n\n\n/**\n * The cookie path. Defaults to \"/\" when adding a cookie.\n *\n * @type {(string|undefined)}\n */\nOptions.Cookie.prototype.path;\n\n\n/**\n * The domain the cookie is visible to. Defaults to the current browsing\n * context's document's URL when adding a cookie.\n *\n * @type {(string|undefined)}\n */\nOptions.Cookie.prototype.domain;\n\n\n/**\n * Whether the cookie is a secure cookie. Defaults to false when adding a new\n * cookie.\n *\n * @type {(boolean|undefined)}\n */\nOptions.Cookie.prototype.secure;\n\n\n/**\n * Whether the cookie is an HTTP only cookie. Defaults to false when adding a\n * new cookie.\n *\n * @type {(boolean|undefined)}\n */\nOptions.Cookie.prototype.httpOnly;\n\n\n/**\n * When the cookie expires.\n *\n * When {@linkplain Options#addCookie() adding a cookie}, this may be specified\n * in _seconds_ since Unix epoch (January 1, 1970). The expiry will default to\n * 20 years in the future if omitted.\n *\n * The expiry is always returned in seconds since epoch when\n * {@linkplain Options#getCookies() retrieving cookies} from the browser.\n *\n * @type {(!Date|number|undefined)}\n */\nOptions.Cookie.prototype.expiry;\n\n\n/**\n * An interface for managing timeout behavior for WebDriver instances.\n *\n * This class should never be instantiated directly. Instead, obtain an instance\n * with\n *\n *    webdriver.manage().timeouts()\n *\n * @deprecated This has been deprecated in favor of\n *     {@link Options#setTimeouts()}, which supports setting multiple timeouts\n *     at once.\n * @see WebDriver#manage()\n * @see Options#timeouts()\n */\nclass Timeouts {\n  /**\n   * @param {!WebDriver} driver The parent driver.\n   * @private\n   */\n  constructor(driver) {\n    /** @private {!WebDriver} */\n    this.driver_ = driver;\n  }\n\n  /**\n   * Specifies the amount of time the driver should wait when searching for an\n   * element if it is not immediately present.\n   *\n   * When searching for a single element, the driver should poll the page\n   * until the element has been found, or this timeout expires before failing\n   * with a {@link bot.ErrorCode.NO_SUCH_ELEMENT} error. When searching\n   * for multiple elements, the driver should poll the page until at least one\n   * element has been found or this timeout has expired.\n   *\n   * Setting the wait timeout to 0 (its default value), disables implicit\n   * waiting.\n   *\n   * Increasing the implicit wait timeout should be used judiciously as it\n   * will have an adverse effect on test run time, especially when used with\n   * slower location strategies like XPath.\n   *\n   * @param {number} ms The amount of time to wait, in milliseconds.\n   * @return {!promise.Thenable<void>} A promise that will be resolved\n   *     when the implicit wait timeout has been set.\n   * @deprecated Use {@link Options#setTimeouts()\n   *     driver.manage().setTimeouts({implicit: ms})}.\n   */\n  implicitlyWait(ms) {\n    return this.driver_.manage().setTimeouts({implicit: ms});\n  }\n\n  /**\n   * Sets the amount of time to wait, in milliseconds, for an asynchronous\n   * script to finish execution before returning an error. If the timeout is\n   * less than or equal to 0, the script will be allowed to run indefinitely.\n   *\n   * @param {number} ms The amount of time to wait, in milliseconds.\n   * @return {!promise.Thenable<void>} A promise that will be resolved\n   *     when the script timeout has been set.\n   * @deprecated Use {@link Options#setTimeouts()\n   *     driver.manage().setTimeouts({script: ms})}.\n   */\n  setScriptTimeout(ms) {\n    return this.driver_.manage().setTimeouts({script: ms});\n  }\n\n  /**\n   * Sets the amount of time to wait for a page load to complete before\n   * returning an error.  If the timeout is negative, page loads may be\n   * indefinite.\n   *\n   * @param {number} ms The amount of time to wait, in milliseconds.\n   * @return {!promise.Thenable<void>} A promise that will be resolved\n   *     when the timeout has been set.\n   * @deprecated Use {@link Options#setTimeouts()\n   *     driver.manage().setTimeouts({pageLoad: ms})}.\n   */\n  pageLoadTimeout(ms) {\n    return this.driver_.manage().setTimeouts({pageLoad: ms});\n  }\n}\n\n\n/**\n * An interface for managing the current window.\n *\n * This class should never be instantiated directly. Instead, obtain an instance\n * with\n *\n *    webdriver.manage().window()\n *\n * @see WebDriver#manage()\n * @see Options#window()\n */\nclass Window {\n  /**\n   * @param {!WebDriver} driver The parent driver.\n   * @private\n   */\n  constructor(driver) {\n    /** @private {!WebDriver} */\n    this.driver_ = driver;\n  }\n\n  /**\n   * Retrieves the window's current position, relative to the top left corner of\n   * the screen.\n   * @return {!promise.Thenable<{x: number, y: number}>} A promise\n   *     that will be resolved with the window's position in the form of a\n   *     {x:number, y:number} object literal.\n   */\n  getPosition() {\n    return this.driver_.schedule(\n        new command.Command(command.Name.GET_WINDOW_POSITION).\n            setParameter('windowHandle', 'current'),\n        'WebDriver.manage().window().getPosition()');\n  }\n\n  /**\n   * Repositions the current window.\n   * @param {number} x The desired horizontal position, relative to the left\n   *     side of the screen.\n   * @param {number} y The desired vertical position, relative to the top of the\n   *     of the screen.\n   * @return {!promise.Thenable<void>} A promise that will be resolved\n   *     when the command has completed.\n   */\n  setPosition(x, y) {\n    return this.driver_.schedule(\n        new command.Command(command.Name.SET_WINDOW_POSITION).\n            setParameter('windowHandle', 'current').\n            setParameter('x', x).\n            setParameter('y', y),\n        'WebDriver.manage().window().setPosition(' + x + ', ' + y + ')');\n  }\n\n  /**\n   * Retrieves the window's current size.\n   * @return {!promise.Thenable<{width: number, height: number}>} A\n   *     promise that will be resolved with the window's size in the form of a\n   *     {width:number, height:number} object literal.\n   */\n  getSize() {\n    return this.driver_.schedule(\n        new command.Command(command.Name.GET_WINDOW_SIZE).\n            setParameter('windowHandle', 'current'),\n        'WebDriver.manage().window().getSize()');\n  }\n\n  /**\n   * Resizes the current window.\n   * @param {number} width The desired window width.\n   * @param {number} height The desired window height.\n   * @return {!promise.Thenable<void>} A promise that will be resolved\n   *     when the command has completed.\n   */\n  setSize(width, height) {\n    return this.driver_.schedule(\n        new command.Command(command.Name.SET_WINDOW_SIZE).\n            setParameter('windowHandle', 'current').\n            setParameter('width', width).\n            setParameter('height', height),\n        'WebDriver.manage().window().setSize(' + width + ', ' + height + ')');\n  }\n\n  /**\n   * Maximizes the current window.\n   * @return {!promise.Thenable<void>} A promise that will be resolved\n   *     when the command has completed.\n   */\n  maximize() {\n    return this.driver_.schedule(\n        new command.Command(command.Name.MAXIMIZE_WINDOW).\n            setParameter('windowHandle', 'current'),\n        'WebDriver.manage().window().maximize()');\n  }\n}\n\n\n/**\n * Interface for managing WebDriver log records.\n *\n * This class should never be instantiated directly. Instead, obtain an\n * instance with\n *\n *     webdriver.manage().logs()\n *\n * @see WebDriver#manage()\n * @see Options#logs()\n */\nclass Logs {\n  /**\n   * @param {!WebDriver} driver The parent driver.\n   * @private\n   */\n  constructor(driver) {\n    /** @private {!WebDriver} */\n    this.driver_ = driver;\n  }\n\n  /**\n   * Fetches available log entries for the given type.\n   *\n   * Note that log buffers are reset after each call, meaning that available\n   * log entries correspond to those entries not yet returned for a given log\n   * type. In practice, this means that this call will return the available log\n   * entries since the last call, or from the start of the session.\n   *\n   * @param {!logging.Type} type The desired log type.\n   * @return {!promise.Thenable<!Array.<!logging.Entry>>} A\n   *   promise that will resolve to a list of log entries for the specified\n   *   type.\n   */\n  get(type) {\n    let cmd = new command.Command(command.Name.GET_LOG).\n        setParameter('type', type);\n    return this.driver_.schedule(\n        cmd, 'WebDriver.manage().logs().get(' + type + ')').\n        then(function(entries) {\n          return entries.map(function(entry) {\n            if (!(entry instanceof logging.Entry)) {\n              return new logging.Entry(\n                  entry['level'], entry['message'], entry['timestamp'],\n                  entry['type']);\n            }\n            return entry;\n          });\n        });\n  }\n\n  /**\n   * Retrieves the log types available to this driver.\n   * @return {!promise.Thenable<!Array<!logging.Type>>} A\n   *     promise that will resolve to a list of available log types.\n   */\n  getAvailableLogTypes() {\n    return this.driver_.schedule(\n        new command.Command(command.Name.GET_AVAILABLE_LOG_TYPES),\n        'WebDriver.manage().logs().getAvailableLogTypes()');\n  }\n}\n\n\n/**\n * An interface for changing the focus of the driver to another frame or window.\n *\n * This class should never be instantiated directly. Instead, obtain an\n * instance with\n *\n *     webdriver.switchTo()\n *\n * @see WebDriver#switchTo()\n */\nclass TargetLocator {\n  /**\n   * @param {!WebDriver} driver The parent driver.\n   * @private\n   */\n  constructor(driver) {\n    /** @private {!WebDriver} */\n    this.driver_ = driver;\n  }\n\n  /**\n   * Schedules a command retrieve the {@code document.activeElement} element on\n   * the current document, or {@code document.body} if activeElement is not\n   * available.\n   * @return {!WebElementPromise} The active element.\n   */\n  activeElement() {\n    var id = this.driver_.schedule(\n        new command.Command(command.Name.GET_ACTIVE_ELEMENT),\n        'WebDriver.switchTo().activeElement()');\n    return new WebElementPromise(this.driver_, id);\n  }\n\n  /**\n   * Schedules a command to switch focus of all future commands to the topmost\n   * frame on the page.\n   * @return {!promise.Thenable<void>} A promise that will be resolved\n   *     when the driver has changed focus to the default content.\n   */\n  defaultContent() {\n    return this.driver_.schedule(\n        new command.Command(command.Name.SWITCH_TO_FRAME).\n            setParameter('id', null),\n        'WebDriver.switchTo().defaultContent()');\n  }\n\n  /**\n   * Schedules a command to switch the focus of all future commands to another\n   * frame on the page. The target frame may be specified as one of the\n   * following:\n   *\n   * - A number that specifies a (zero-based) index into [window.frames](\n   *   https://developer.mozilla.org/en-US/docs/Web/API/Window.frames).\n   * - A {@link WebElement} reference, which correspond to a `frame` or `iframe`\n   *   DOM element.\n   * - The `null` value, to select the topmost frame on the page. Passing `null`\n   *   is the same as calling {@link #defaultContent defaultContent()}.\n   *\n   * If the specified frame can not be found, the returned promise will be\n   * rejected with a {@linkplain error.NoSuchFrameError}.\n   *\n   * @param {(number|WebElement|null)} id The frame locator.\n   * @return {!promise.Thenable<void>} A promise that will be resolved\n   *     when the driver has changed focus to the specified frame.\n   */\n  frame(id) {\n    return this.driver_.schedule(\n        new command.Command(command.Name.SWITCH_TO_FRAME).\n            setParameter('id', id),\n        'WebDriver.switchTo().frame(' + id + ')');\n  }\n\n  /**\n   * Schedules a command to switch the focus of all future commands to another\n   * window. Windows may be specified by their {@code window.name} attribute or\n   * by its handle (as returned by {@link WebDriver#getWindowHandles}).\n   *\n   * If the specified window cannot be found, the returned promise will be\n   * rejected with a {@linkplain error.NoSuchWindowError}.\n   *\n   * @param {string} nameOrHandle The name or window handle of the window to\n   *     switch focus to.\n   * @return {!promise.Thenable<void>} A promise that will be resolved\n   *     when the driver has changed focus to the specified window.\n   */\n  window(nameOrHandle) {\n    return this.driver_.schedule(\n        new command.Command(command.Name.SWITCH_TO_WINDOW).\n            // \"name\" supports the legacy drivers. \"handle\" is the W3C\n            // compliant parameter.\n            setParameter('name', nameOrHandle).\n            setParameter('handle', nameOrHandle),\n        'WebDriver.switchTo().window(' + nameOrHandle + ')');\n  }\n\n  /**\n   * Schedules a command to change focus to the active modal dialog, such as\n   * those opened by `window.alert()`, `window.confirm()`, and\n   * `window.prompt()`. The returned promise will be rejected with a\n   * {@linkplain error.NoSuchAlertError} if there are no open alerts.\n   *\n   * @return {!AlertPromise} The open alert.\n   */\n  alert() {\n    var text = this.driver_.schedule(\n        new command.Command(command.Name.GET_ALERT_TEXT),\n        'WebDriver.switchTo().alert()');\n    var driver = this.driver_;\n    return new AlertPromise(driver, text.then(function(text) {\n      return new Alert(driver, text);\n    }));\n  }\n}\n\n\n//////////////////////////////////////////////////////////////////////////////\n//\n//  WebElement\n//\n//////////////////////////////////////////////////////////////////////////////\n\n\nconst LEGACY_ELEMENT_ID_KEY = 'ELEMENT';\nconst ELEMENT_ID_KEY = 'element-6066-11e4-a52e-4f735466cecf';\n\n\n/**\n * Represents a DOM element. WebElements can be found by searching from the\n * document root using a {@link WebDriver} instance, or by searching\n * under another WebElement:\n *\n *     driver.get('http://www.google.com');\n *     var searchForm = driver.findElement(By.tagName('form'));\n *     var searchBox = searchForm.findElement(By.name('q'));\n *     searchBox.sendKeys('webdriver');\n */\nclass WebElement {\n  /**\n   * @param {!WebDriver} driver the parent WebDriver instance for this element.\n   * @param {(!IThenable<string>|string)} id The server-assigned opaque ID for\n   *     the underlying DOM element.\n   */\n  constructor(driver, id) {\n    /** @private {!WebDriver} */\n    this.driver_ = driver;\n\n    /** @private {!promise.Thenable<string>} */\n    this.id_ = driver.controlFlow().promise(resolve => resolve(id));\n  }\n\n  /**\n   * @param {string} id The raw ID.\n   * @param {boolean=} opt_noLegacy Whether to exclude the legacy element key.\n   * @return {!Object} The element ID for use with WebDriver's wire protocol.\n   */\n  static buildId(id, opt_noLegacy) {\n    return opt_noLegacy\n        ? {[ELEMENT_ID_KEY]: id}\n        : {[ELEMENT_ID_KEY]: id, [LEGACY_ELEMENT_ID_KEY]: id};\n  }\n\n  /**\n   * Extracts the encoded WebElement ID from the object.\n   *\n   * @param {?} obj The object to extract the ID from.\n   * @return {string} the extracted ID.\n   * @throws {TypeError} if the object is not a valid encoded ID.\n   */\n  static extractId(obj) {\n    if (obj && typeof obj === 'object') {\n      if (typeof obj[ELEMENT_ID_KEY] === 'string') {\n        return obj[ELEMENT_ID_KEY];\n      } else if (typeof obj[LEGACY_ELEMENT_ID_KEY] === 'string') {\n        return obj[LEGACY_ELEMENT_ID_KEY];\n      }\n    }\n    throw new TypeError('object is not a WebElement ID');\n  }\n\n  /**\n   * @param {?} obj the object to test.\n   * @return {boolean} whether the object is a valid encoded WebElement ID.\n   */\n  static isId(obj) {\n    return obj && typeof obj === 'object'\n        && (typeof obj[ELEMENT_ID_KEY] === 'string'\n            || typeof obj[LEGACY_ELEMENT_ID_KEY] === 'string');\n  }\n\n  /**\n   * Compares two WebElements for equality.\n   *\n   * @param {!WebElement} a A WebElement.\n   * @param {!WebElement} b A WebElement.\n   * @return {!promise.Thenable<boolean>} A promise that will be\n   *     resolved to whether the two WebElements are equal.\n   */\n  static equals(a, b) {\n    if (a === b) {\n      return a.driver_.controlFlow().promise(resolve => resolve(true));\n    }\n    let ids = [a.getId(), b.getId()];\n    return promise.all(ids).then(function(ids) {\n      // If the two element's have the same ID, they should be considered\n      // equal. Otherwise, they may still be equivalent, but we'll need to\n      // ask the server to check for us.\n      if (ids[0] === ids[1]) {\n        return true;\n      }\n\n      let cmd = new command.Command(command.Name.ELEMENT_EQUALS);\n      cmd.setParameter('id', ids[0]);\n      cmd.setParameter('other', ids[1]);\n      return a.driver_.schedule(cmd, 'WebElement.equals()');\n    });\n  }\n\n  /** @return {!WebDriver} The parent driver for this instance. */\n  getDriver() {\n    return this.driver_;\n  }\n\n  /**\n   * @return {!promise.Thenable<string>} A promise that resolves to\n   *     the server-assigned opaque ID assigned to this element.\n   */\n  getId() {\n    return this.id_;\n  }\n\n  /**\n   * @return {!Object} Returns the serialized representation of this WebElement.\n   */\n  [Symbols.serialize]() {\n    return this.getId().then(WebElement.buildId);\n  }\n\n  /**\n   * Schedules a command that targets this element with the parent WebDriver\n   * instance. Will ensure this element's ID is included in the command\n   * parameters under the \"id\" key.\n   *\n   * @param {!command.Command} command The command to schedule.\n   * @param {string} description A description of the command for debugging.\n   * @return {!promise.Thenable<T>} A promise that will be resolved\n   *     with the command result.\n   * @template T\n   * @see WebDriver#schedule\n   * @private\n   */\n  schedule_(command, description) {\n    command.setParameter('id', this);\n    return this.driver_.schedule(command, description);\n  }\n\n  /**\n   * Schedule a command to find a descendant of this element. If the element\n   * cannot be found, the returned promise will be rejected with a\n   * {@linkplain error.NoSuchElementError NoSuchElementError}.\n   *\n   * The search criteria for an element may be defined using one of the static\n   * factories on the {@link by.By} class, or as a short-hand\n   * {@link ./by.ByHash} object. For example, the following two statements\n   * are equivalent:\n   *\n   *     var e1 = element.findElement(By.id('foo'));\n   *     var e2 = element.findElement({id:'foo'});\n   *\n   * You may also provide a custom locator function, which takes as input this\n   * instance and returns a {@link WebElement}, or a promise that will resolve\n   * to a WebElement. If the returned promise resolves to an array of\n   * WebElements, WebDriver will use the first element. For example, to find the\n   * first visible link on a page, you could write:\n   *\n   *     var link = element.findElement(firstVisibleLink);\n   *\n   *     function firstVisibleLink(element) {\n   *       var links = element.findElements(By.tagName('a'));\n   *       return promise.filter(links, function(link) {\n   *         return link.isDisplayed();\n   *       });\n   *     }\n   *\n   * @param {!(by.By|Function)} locator The locator strategy to use when\n   *     searching for the element.\n   * @return {!WebElementPromise} A WebElement that can be used to issue\n   *     commands against the located element. If the element is not found, the\n   *     element will be invalidated and all scheduled commands aborted.\n   */\n  findElement(locator) {\n    locator = by.checkedLocator(locator);\n    let id;\n    if (typeof locator === 'function') {\n      id = this.driver_.findElementInternal_(locator, this);\n    } else {\n      let cmd = new command.Command(\n          command.Name.FIND_CHILD_ELEMENT).\n          setParameter('using', locator.using).\n          setParameter('value', locator.value);\n      id = this.schedule_(cmd, 'WebElement.findElement(' + locator + ')');\n    }\n    return new WebElementPromise(this.driver_, id);\n  }\n\n  /**\n   * Schedules a command to find all of the descendants of this element that\n   * match the given search criteria.\n   *\n   * @param {!(by.By|Function)} locator The locator strategy to use when\n   *     searching for the element.\n   * @return {!promise.Thenable<!Array<!WebElement>>} A\n   *     promise that will resolve to an array of WebElements.\n   */\n  findElements(locator) {\n    locator = by.checkedLocator(locator);\n    let id;\n    if (typeof locator === 'function') {\n      return this.driver_.findElementsInternal_(locator, this);\n    } else {\n      var cmd = new command.Command(\n          command.Name.FIND_CHILD_ELEMENTS).\n          setParameter('using', locator.using).\n          setParameter('value', locator.value);\n      return this.schedule_(cmd, 'WebElement.findElements(' + locator + ')');\n    }\n  }\n\n  /**\n   * Schedules a command to click on this element.\n   * @return {!promise.Thenable<void>} A promise that will be resolved\n   *     when the click command has completed.\n   */\n  click() {\n    return this.schedule_(\n        new command.Command(command.Name.CLICK_ELEMENT),\n        'WebElement.click()');\n  }\n\n  /**\n   * Schedules a command to type a sequence on the DOM element represented by\n   * this instance.\n   *\n   * Modifier keys (SHIFT, CONTROL, ALT, META) are stateful; once a modifier is\n   * processed in the key sequence, that key state is toggled until one of the\n   * following occurs:\n   *\n   * - The modifier key is encountered again in the sequence. At this point the\n   *   state of the key is toggled (along with the appropriate keyup/down\n   *   events).\n   * - The {@link input.Key.NULL} key is encountered in the sequence. When\n   *   this key is encountered, all modifier keys current in the down state are\n   *   released (with accompanying keyup events). The NULL key can be used to\n   *   simulate common keyboard shortcuts:\n   *\n   *         element.sendKeys(\"text was\",\n   *                          Key.CONTROL, \"a\", Key.NULL,\n   *                          \"now text is\");\n   *         // Alternatively:\n   *         element.sendKeys(\"text was\",\n   *                          Key.chord(Key.CONTROL, \"a\"),\n   *                          \"now text is\");\n   *\n   * - The end of the key sequence is encountered. When there are no more keys\n   *   to type, all depressed modifier keys are released (with accompanying\n   *   keyup events).\n   *\n   * If this element is a file input ({@code <input type=\"file\">}), the\n   * specified key sequence should specify the path to the file to attach to\n   * the element. This is analogous to the user clicking \"Browse...\" and entering\n   * the path into the file select dialog.\n   *\n   *     var form = driver.findElement(By.css('form'));\n   *     var element = form.findElement(By.css('input[type=file]'));\n   *     element.sendKeys('/path/to/file.txt');\n   *     form.submit();\n   *\n   * For uploads to function correctly, the entered path must reference a file\n   * on the _browser's_ machine, not the local machine running this script. When\n   * running against a remote Selenium server, a {@link input.FileDetector}\n   * may be used to transparently copy files to the remote machine before\n   * attempting to upload them in the browser.\n   *\n   * __Note:__ On browsers where native keyboard events are not supported\n   * (e.g. Firefox on OS X), key events will be synthesized. Special\n   * punctuation keys will be synthesized according to a standard QWERTY en-us\n   * keyboard layout.\n   *\n   * @param {...(number|string|!IThenable<(number|string)>)} var_args The\n   *     sequence of keys to type. Number keys may be referenced numerically or\n   *     by string (1 or '1'). All arguments will be joined into a single\n   *     sequence.\n   * @return {!promise.Thenable<void>} A promise that will be resolved\n   *     when all keys have been typed.\n   */\n  sendKeys(var_args) {\n    let keys = Promise.all(Array.prototype.slice.call(arguments, 0)).\n        then(keys => {\n          let ret = [];\n          keys.forEach(key => {\n            let type = typeof key;\n            if (type === 'number') {\n              key = String(key);\n            } else if (type !== 'string') {\n              throw TypeError(\n                  'each key must be a number of string; got ' + type);\n            }\n\n            // The W3C protocol requires keys to be specified as an array where\n            // each element is a single key.\n            ret.push.apply(ret, key.split(''));\n          });\n          return ret;\n        });\n\n    if (!this.driver_.fileDetector_) {\n      return this.schedule_(\n          new command.Command(command.Name.SEND_KEYS_TO_ELEMENT).\n              setParameter('text', keys).\n              setParameter('value', keys),\n          'WebElement.sendKeys()');\n    }\n\n    // Suppress unhandled rejection errors until the flow executes the command.\n    keys.catch(function() {});\n\n    var element = this;\n    return this.getDriver().controlFlow().execute(function() {\n      return keys.then(function(keys) {\n        return element.driver_.fileDetector_\n            .handleFile(element.driver_, keys.join(''));\n      }).then(function(keys) {\n        return element.schedule_(\n            new command.Command(command.Name.SEND_KEYS_TO_ELEMENT).\n                setParameter('text', keys).\n                setParameter('value', keys.split('')),\n            'WebElement.sendKeys()');\n      });\n    }, 'WebElement.sendKeys()');\n  }\n\n  /**\n   * Schedules a command to query for the tag/node name of this element.\n   * @return {!promise.Thenable<string>} A promise that will be\n   *     resolved with the element's tag name.\n   */\n  getTagName() {\n    return this.schedule_(\n        new command.Command(command.Name.GET_ELEMENT_TAG_NAME),\n        'WebElement.getTagName()');\n  }\n\n  /**\n   * Schedules a command to query for the computed style of the element\n   * represented by this instance. If the element inherits the named style from\n   * its parent, the parent will be queried for its value.  Where possible, color\n   * values will be converted to their hex representation (e.g. #00ff00 instead\n   * of rgb(0, 255, 0)).\n   *\n   * _Warning:_ the value returned will be as the browser interprets it, so\n   * it may be tricky to form a proper assertion.\n   *\n   * @param {string} cssStyleProperty The name of the CSS style property to look\n   *     up.\n   * @return {!promise.Thenable<string>} A promise that will be\n   *     resolved with the requested CSS value.\n   */\n  getCssValue(cssStyleProperty) {\n    var name = command.Name.GET_ELEMENT_VALUE_OF_CSS_PROPERTY;\n    return this.schedule_(\n        new command.Command(name).\n            setParameter('propertyName', cssStyleProperty),\n        'WebElement.getCssValue(' + cssStyleProperty + ')');\n  }\n\n  /**\n   * Schedules a command to query for the value of the given attribute of the\n   * element. Will return the current value, even if it has been modified after\n   * the page has been loaded. More exactly, this method will return the value\n   * of the given attribute, unless that attribute is not present, in which case\n   * the value of the property with the same name is returned. If neither value\n   * is set, null is returned (for example, the \"value\" property of a textarea\n   * element). The \"style\" attribute is converted as best can be to a\n   * text representation with a trailing semi-colon. The following are deemed to\n   * be \"boolean\" attributes and will return either \"true\" or null:\n   *\n   * async, autofocus, autoplay, checked, compact, complete, controls, declare,\n   * defaultchecked, defaultselected, defer, disabled, draggable, ended,\n   * formnovalidate, hidden, indeterminate, iscontenteditable, ismap, itemscope,\n   * loop, multiple, muted, nohref, noresize, noshade, novalidate, nowrap, open,\n   * paused, pubdate, readonly, required, reversed, scoped, seamless, seeking,\n   * selected, spellcheck, truespeed, willvalidate\n   *\n   * Finally, the following commonly mis-capitalized attribute/property names\n   * are evaluated as expected:\n   *\n   * - \"class\"\n   * - \"readonly\"\n   *\n   * @param {string} attributeName The name of the attribute to query.\n   * @return {!promise.Thenable<?string>} A promise that will be\n   *     resolved with the attribute's value. The returned value will always be\n   *     either a string or null.\n   */\n  getAttribute(attributeName) {\n    return this.schedule_(\n        new command.Command(command.Name.GET_ELEMENT_ATTRIBUTE).\n            setParameter('name', attributeName),\n        'WebElement.getAttribute(' + attributeName + ')');\n  }\n\n  /**\n   * Get the visible (i.e. not hidden by CSS) innerText of this element,\n   * including sub-elements, without any leading or trailing whitespace.\n   *\n   * @return {!promise.Thenable<string>} A promise that will be\n   *     resolved with the element's visible text.\n   */\n  getText() {\n    return this.schedule_(\n        new command.Command(command.Name.GET_ELEMENT_TEXT),\n        'WebElement.getText()');\n  }\n\n  /**\n   * Schedules a command to compute the size of this element's bounding box, in\n   * pixels.\n   * @return {!promise.Thenable<{width: number, height: number}>} A\n   *     promise that will be resolved with the element's size as a\n   *     {@code {width:number, height:number}} object.\n   */\n  getSize() {\n    return this.schedule_(\n        new command.Command(command.Name.GET_ELEMENT_SIZE),\n        'WebElement.getSize()');\n  }\n\n  /**\n   * Schedules a command to compute the location of this element in page space.\n   * @return {!promise.Thenable<{x: number, y: number}>} A promise that\n   *     will be resolved to the element's location as a\n   *     {@code {x:number, y:number}} object.\n   */\n  getLocation() {\n    return this.schedule_(\n        new command.Command(command.Name.GET_ELEMENT_LOCATION),\n        'WebElement.getLocation()');\n  }\n\n  /**\n   * Schedules a command to query whether the DOM element represented by this\n   * instance is enabled, as dictated by the {@code disabled} attribute.\n   * @return {!promise.Thenable<boolean>} A promise that will be\n   *     resolved with whether this element is currently enabled.\n   */\n  isEnabled() {\n    return this.schedule_(\n        new command.Command(command.Name.IS_ELEMENT_ENABLED),\n        'WebElement.isEnabled()');\n  }\n\n  /**\n   * Schedules a command to query whether this element is selected.\n   * @return {!promise.Thenable<boolean>} A promise that will be\n   *     resolved with whether this element is currently selected.\n   */\n  isSelected() {\n    return this.schedule_(\n        new command.Command(command.Name.IS_ELEMENT_SELECTED),\n        'WebElement.isSelected()');\n  }\n\n  /**\n   * Schedules a command to submit the form containing this element (or this\n   * element if it is a FORM element). This command is a no-op if the element is\n   * not contained in a form.\n   * @return {!promise.Thenable<void>} A promise that will be resolved\n   *     when the form has been submitted.\n   */\n  submit() {\n    return this.schedule_(\n        new command.Command(command.Name.SUBMIT_ELEMENT),\n        'WebElement.submit()');\n  }\n\n  /**\n   * Schedules a command to clear the `value` of this element. This command has\n   * no effect if the underlying DOM element is neither a text INPUT element\n   * nor a TEXTAREA element.\n   * @return {!promise.Thenable<void>} A promise that will be resolved\n   *     when the element has been cleared.\n   */\n  clear() {\n    return this.schedule_(\n        new command.Command(command.Name.CLEAR_ELEMENT),\n        'WebElement.clear()');\n  }\n\n  /**\n   * Schedules a command to test whether this element is currently displayed.\n   * @return {!promise.Thenable<boolean>} A promise that will be\n   *     resolved with whether this element is currently visible on the page.\n   */\n  isDisplayed() {\n    return this.schedule_(\n        new command.Command(command.Name.IS_ELEMENT_DISPLAYED),\n        'WebElement.isDisplayed()');\n  }\n\n  /**\n   * Take a screenshot of the visible region encompassed by this element's\n   * bounding rectangle.\n   *\n   * @param {boolean=} opt_scroll Optional argument that indicates whether the\n   *     element should be scrolled into view before taking a screenshot.\n   *     Defaults to false.\n   * @return {!promise.Thenable<string>} A promise that will be\n   *     resolved to the screenshot as a base-64 encoded PNG.\n   */\n  takeScreenshot(opt_scroll) {\n    var scroll = !!opt_scroll;\n    return this.schedule_(\n        new command.Command(command.Name.TAKE_ELEMENT_SCREENSHOT)\n            .setParameter('scroll', scroll),\n        'WebElement.takeScreenshot(' + scroll + ')');\n  }\n}\n\n\n/**\n * WebElementPromise is a promise that will be fulfilled with a WebElement.\n * This serves as a forward proxy on WebElement, allowing calls to be\n * scheduled without directly on this instance before the underlying\n * WebElement has been fulfilled. In other words, the following two statements\n * are equivalent:\n *\n *     driver.findElement({id: 'my-button'}).click();\n *     driver.findElement({id: 'my-button'}).then(function(el) {\n *       return el.click();\n *     });\n *\n * @implements {promise.CancellableThenable<!WebElement>}\n * @final\n */\nclass WebElementPromise extends WebElement {\n  /**\n   * @param {!WebDriver} driver The parent WebDriver instance for this\n   *     element.\n   * @param {!promise.Thenable<!WebElement>} el A promise\n   *     that will resolve to the promised element.\n   */\n  constructor(driver, el) {\n    super(driver, 'unused');\n\n    /**\n     * Cancel operation is only supported if the wrapped thenable is also\n     * cancellable.\n     * @param {(string|Error)=} opt_reason\n     * @override\n     */\n    this.cancel = function(opt_reason) {\n      if (promise.CancellableThenable.isImplementation(el)) {\n        /** @type {!promise.CancellableThenable} */(el).cancel(opt_reason);\n      }\n    };\n\n    /** @override */\n    this.then = el.then.bind(el);\n\n    /** @override */\n    this.catch = el.catch.bind(el);\n\n    /**\n     * Defers returning the element ID until the wrapped WebElement has been\n     * resolved.\n     * @override\n     */\n    this.getId = function() {\n      return el.then(function(el) {\n        return el.getId();\n      });\n    };\n  }\n}\npromise.CancellableThenable.addImplementation(WebElementPromise);\n\n\n//////////////////////////////////////////////////////////////////////////////\n//\n//  Alert\n//\n//////////////////////////////////////////////////////////////////////////////\n\n\n/**\n * Represents a modal dialog such as {@code alert}, {@code confirm}, or\n * {@code prompt}. Provides functions to retrieve the message displayed with\n * the alert, accept or dismiss the alert, and set the response text (in the\n * case of {@code prompt}).\n */\nclass Alert {\n  /**\n   * @param {!WebDriver} driver The driver controlling the browser this alert\n   *     is attached to.\n   * @param {string} text The message text displayed with this alert.\n   */\n  constructor(driver, text) {\n    /** @private {!WebDriver} */\n    this.driver_ = driver;\n\n    /** @private {!promise.Thenable<string>} */\n    this.text_ = driver.controlFlow().promise(resolve => resolve(text));\n  }\n\n  /**\n   * Retrieves the message text displayed with this alert. For instance, if the\n   * alert were opened with alert(\"hello\"), then this would return \"hello\".\n   *\n   * @return {!promise.Thenable<string>} A promise that will be\n   *     resolved to the text displayed with this alert.\n   */\n  getText() {\n    return this.text_;\n  }\n\n  /**\n   * Sets the username and password in an alert prompting for credentials (such\n   * as a Basic HTTP Auth prompt). This method will implicitly\n   * {@linkplain #accept() submit} the dialog.\n   *\n   * @param {string} username The username to send.\n   * @param {string} password The password to send.\n   * @return {!promise.Thenable<void>} A promise that will be resolved when this\n   *     command has completed.\n   */\n  authenticateAs(username, password) {\n    return this.driver_.schedule(\n        new command.Command(command.Name.SET_ALERT_CREDENTIALS),\n        'WebDriver.switchTo().alert()'\n            + `.authenticateAs(\"${username}\", \"${password}\")`);\n  }\n\n  /**\n   * Accepts this alert.\n   *\n   * @return {!promise.Thenable<void>} A promise that will be resolved\n   *     when this command has completed.\n   */\n  accept() {\n    return this.driver_.schedule(\n        new command.Command(command.Name.ACCEPT_ALERT),\n        'WebDriver.switchTo().alert().accept()');\n  }\n\n  /**\n   * Dismisses this alert.\n   *\n   * @return {!promise.Thenable<void>} A promise that will be resolved\n   *     when this command has completed.\n   */\n  dismiss() {\n    return this.driver_.schedule(\n        new command.Command(command.Name.DISMISS_ALERT),\n        'WebDriver.switchTo().alert().dismiss()');\n  }\n\n  /**\n   * Sets the response text on this alert. This command will return an error if\n   * the underlying alert does not support response text (e.g. window.alert and\n   * window.confirm).\n   *\n   * @param {string} text The text to set.\n   * @return {!promise.Thenable<void>} A promise that will be resolved\n   *     when this command has completed.\n   */\n  sendKeys(text) {\n    return this.driver_.schedule(\n        new command.Command(command.Name.SET_ALERT_TEXT).\n            setParameter('text', text),\n        'WebDriver.switchTo().alert().sendKeys(' + text + ')');\n  }\n}\n\n\n/**\n * AlertPromise is a promise that will be fulfilled with an Alert. This promise\n * serves as a forward proxy on an Alert, allowing calls to be scheduled\n * directly on this instance before the underlying Alert has been fulfilled. In\n * other words, the following two statements are equivalent:\n *\n *     driver.switchTo().alert().dismiss();\n *     driver.switchTo().alert().then(function(alert) {\n *       return alert.dismiss();\n *     });\n *\n * @implements {promise.CancellableThenable<!webdriver.Alert>}\n * @final\n */\nclass AlertPromise extends Alert {\n  /**\n   * @param {!WebDriver} driver The driver controlling the browser this\n   *     alert is attached to.\n   * @param {!promise.Thenable<!Alert>} alert A thenable\n   *     that will be fulfilled with the promised alert.\n   */\n  constructor(driver, alert) {\n    super(driver, 'unused');\n\n    /**\n     * Cancel operation is only supported if the wrapped thenable is also\n     * cancellable.\n     * @param {(string|Error)=} opt_reason\n     * @override\n     */\n    this.cancel = function(opt_reason) {\n      if (promise.CancellableThenable.isImplementation(alert)) {\n        /** @type {!promise.CancellableThenable} */(alert).cancel(opt_reason);\n      }\n    };\n\n    /** @override */\n    this.then = alert.then.bind(alert);\n\n    /** @override */\n    this.catch = alert.catch.bind(alert);\n\n    /**\n     * Defer returning text until the promised alert has been resolved.\n     * @override\n     */\n    this.getText = function() {\n      return alert.then(function(alert) {\n        return alert.getText();\n      });\n    };\n\n    /**\n     * Defers action until the alert has been located.\n     * @override\n     */\n    this.authenticateAs = function(username, password) {\n      return alert.then(function(alert) {\n        return alert.authenticateAs(username, password);\n      });\n    };\n\n    /**\n     * Defers action until the alert has been located.\n     * @override\n     */\n    this.accept = function() {\n      return alert.then(function(alert) {\n        return alert.accept();\n      });\n    };\n\n    /**\n     * Defers action until the alert has been located.\n     * @override\n     */\n    this.dismiss = function() {\n      return alert.then(function(alert) {\n        return alert.dismiss();\n      });\n    };\n\n    /**\n     * Defers action until the alert has been located.\n     * @override\n     */\n    this.sendKeys = function(text) {\n      return alert.then(function(alert) {\n        return alert.sendKeys(text);\n      });\n    };\n  }\n}\npromise.CancellableThenable.addImplementation(AlertPromise);\n\n\n// PUBLIC API\n\n\nmodule.exports = {\n  Alert: Alert,\n  AlertPromise: AlertPromise,\n  Condition: Condition,\n  Logs: Logs,\n  Navigation: Navigation,\n  Options: Options,\n  TargetLocator: TargetLocator,\n  Timeouts: Timeouts,\n  IWebDriver: IWebDriver,\n  WebDriver: WebDriver,\n  WebElement: WebElement,\n  WebElementCondition: WebElementCondition,\n  WebElementPromise: WebElementPromise,\n  Window: Window\n};\n"]}