{"version":3,"sources":["proxy.js"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;;;;;;;;AASA;;AAEA,IAAI,cAAc,QAAQ,gBAAR,EAA0B,WAA5C;;AAGA;;;AAGA;;;;AAIA,QAAQ,MAAR,GAAiB,YAAW;AAC1B,SAAO,EAAC,WAAW,QAAZ,EAAP;AACD,CAFD;;AAKA;;;;;;;;;;;;;;;;;;;;;AAqBA,QAAQ,MAAR,GAAiB,UAAS,OAAT,EAAkB;AACjC;AACA;AACA,SAAO,4BAA4B;AACjC,iBAAW,QADsB;AAEjC,gBAAU,QAAQ,GAFe;AAGjC,iBAAW,QAAQ,IAHc;AAIjC,gBAAU,QAAQ,KAJe;AAKjC,eAAS,MAAM,OAAN,CAAc,QAAQ,MAAtB,IACL,QAAQ,MAAR,CAAe,IAAf,CAAoB,GAApB,CADK,GACsB,QAAQ;AANN;AAAnC;AAQD,CAXD;;AAcA;;;;;;;;;;;;;;;;;;AAkBA,QAAQ,KAAR,GAAgB,UAAS,IAAT,EAAe,QAAf,EAAyB,QAAzB,EAAmC;AACjD,SAAO,4BAA4B;AACjC,iBAAW,QADsB;AAEjC,kBAAY,IAFqB;AAGjC,qBAAe,QAHkB;AAIjC,qBAAe;AAJkB;AAAnC;AAMD,CAPD;;AAUA;;;;;;AAMA,QAAQ,GAAR,GAAc,UAAS,GAAT,EAAc;AAC1B,SAAO;AACL,eAAW,KADN;AAEL,wBAAoB;AAFf,GAAP;AAID,CALD;;AAQA;;;;AAIA,QAAQ,MAAR,GAAiB,YAAW;AAC1B,SAAO,EAAC,WAAW,QAAZ,EAAP;AACD,CAFD","file":"proxy-compiled.js","sourcesContent":["// Licensed to the Software Freedom Conservancy (SFC) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The SFC licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\n/**\n * @fileoverview Defines functions for configuring a webdriver proxy:\n *\n *     const Capabilities = require('./capabilities').Capabilities;\n *\n *     var capabilities = new Capabilities();\n *     capabilities.setProxy(proxy.manual({http: 'host:1234'});\n */\n\n'use strict';\n\nvar ProxyConfig = require('./capabilities').ProxyConfig;\n\n\n// PUBLIC API\n\n\n/**\n * Configures WebDriver to bypass all browser proxies.\n * @return {!ProxyConfig} A new proxy configuration object.\n */\nexports.direct = function() {\n  return {proxyType: 'direct'};\n};\n\n\n/**\n * Manually configures the browser proxy.  The following options are\n * supported:\n *\n * - `ftp`: Proxy host to use for FTP requests\n * - `http`: Proxy host to use for HTTP requests\n * - `https`: Proxy host to use for HTTPS requests\n * - `bypass`: A list of hosts requests should directly connect to,\n *     bypassing any other proxies for that request. May be specified as a\n *     comma separated string, or a list of strings.\n *\n * Behavior is undefined for FTP, HTTP, and HTTPS requests if the\n * corresponding key is omitted from the configuration options.\n *\n * @param {{ftp: (string|undefined),\n *          http: (string|undefined),\n *          https: (string|undefined),\n *          bypass: (string|!Array.<string>|undefined)}} options Proxy\n *     configuration options.\n * @return {!ProxyConfig} A new proxy configuration object.\n */\nexports.manual = function(options) {\n  // TODO(jleyba): Figure out why the Closure compiler does not think this is\n  // a ProxyConfig record without the cast.\n  return /** @type {!ProxyConfig} */({\n    proxyType: 'manual',\n    ftpProxy: options.ftp,\n    httpProxy: options.http,\n    sslProxy: options.https,\n    noProxy: Array.isArray(options.bypass) ?\n        options.bypass.join(',') : options.bypass\n  });\n};\n\n\n/**\n * Creates a proxy configuration for a socks proxy.\n *\n * __Example:__\n *\n *     const {Capabilities} = require('selenium-webdriver');\n *     const proxy = require('selenium-webdriver/lib/proxy');\n *\n *     let capabilities = new Capabilities();\n *     capabilities.setProxy(proxy.socks('localhost:1234', 'bob', 'password'));\n *\n *\n * @param {string} host The proxy host, in the form `hostname:port`.\n * @param {string} username The user name to authenticate as.\n * @param {string} password The password to authenticate with.\n * @return {!ProxyConfig} A new proxy configuration object.\n * @see https://en.wikipedia.org/wiki/SOCKS\n */\nexports.socks = function(host, username, password) {\n  return /** @type {!ProxyConfig} */({\n    proxyType: 'manual',\n    socksProxy: host,\n    socksUsername: username,\n    socksPassword: password\n  });\n};\n\n\n/**\n * Configures WebDriver to configure the browser proxy using the PAC file at\n * the given URL.\n * @param {string} url URL for the PAC proxy to use.\n * @return {!ProxyConfig} A new proxy configuration object.\n */\nexports.pac = function(url) {\n  return {\n    proxyType: 'pac',\n    proxyAutoconfigUrl: url\n  };\n};\n\n\n/**\n * Configures WebDriver to use the current system's proxy.\n * @return {!ProxyConfig} A new proxy configuration object.\n */\nexports.system = function() {\n  return {proxyType: 'system'};\n};\n"]}