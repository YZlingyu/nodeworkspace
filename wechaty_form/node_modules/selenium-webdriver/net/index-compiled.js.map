{"version":3,"sources":["index.js"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA,IAAI,KAAK,QAAQ,IAAR,CAAT;;AAGA,SAAS,cAAT,GAA0B;AACxB,MAAI,IAAJ;AACA,MAAI,QAAQ,QAAR,KAAqB,QAAzB,EAAmC;AACjC,WAAO,KAAP;AACD,GAFD,MAEO,IAAI,QAAQ,QAAR,KAAqB,OAAzB,EAAkC;AACvC,WAAO,IAAP;AACD;AACD,SAAO,OAAO,GAAG,iBAAH,GAAuB,IAAvB,CAAP,GAAsC,IAA7C;AACD;;AAGD;;;;;;AAMA,SAAS,UAAT,CAAoB,QAApB,EAA8B,UAA9B,EAA0C;AACxC,MAAI,SAAS,cAAc,MAA3B;AACA,MAAI,YAAY,EAAhB;;AAEA,MAAI,UAAJ;AACA,MAAI,QAAJ,EAAc;AACZ,QAAI,KAAK,gBAAT;AACA,iBAAa,KAAK,CAAC,EAAD,CAAL,GAAY,IAAzB;AACD;AACD,eAAa,cAAc,GAAG,iBAAH,EAA3B;AACA,OAAK,IAAI,GAAT,IAAgB,UAAhB,EAA4B;AAC1B,QAAI,CAAC,WAAW,cAAX,CAA0B,GAA1B,CAAL,EAAqC;AACnC;AACD;;AAED,eAAW,GAAX,EAAgB,OAAhB,CAAwB,UAAS,SAAT,EAAoB;AAC1C,UAAI,UAAU,MAAV,KAAqB,MAArB,IACA,UAAU,QAAV,KAAuB,QAD3B,EACqC;AACnC,kBAAU,IAAV,CAAe,UAAU,OAAzB;AACD;AACF,KALD;AAMD;AACD,SAAO,UAAU,CAAV,CAAP;AACD;;AAGD;;;AAGA;;;;;AAKA,QAAQ,UAAR,GAAqB,UAAS,UAAT,EAAqB;AACxC,SAAO,WAAW,KAAX,EAAkB,UAAlB,CAAP;AACD,CAFD;;AAKA;;;;;AAKA,QAAQ,kBAAR,GAA6B,UAAS,UAAT,EAAqB;AAChD,SAAO,WAAW,IAAX,EAAiB,UAAjB,CAAP;AACD,CAFD;;AAKA;;;;;;;;AAQA,QAAQ,gBAAR,GAA2B,UAAS,QAAT,EAAmB;AAC5C,MAAI,YAAY,SAAS,WAAT,CAAqB,GAArB,CAAhB;AACA,MAAI,YAAY,CAAhB,EAAmB;AACjB,WAAO,EAAC,MAAM,QAAP,EAAiB,MAAM,IAAvB,EAAP;AACD;;AAED,MAAI,aAAa,SAAS,OAAT,CAAiB,GAAjB,CAAjB;AACA,MAAI,cAAc,SAAd,IAA2B,CAAC,SAAS,QAAT,CAAkB,GAAlB,CAAhC,EAAwD;AACtD;AACA;AACA,WAAO,EAAC,MAAM,QAAP,EAAiB,MAAM,IAAvB,EAAP;AACD;;AAED,MAAI,OAAO,SAAS,KAAT,CAAe,CAAf,EAAkB,SAAlB,CAAX;AACA,MAAI,KAAK,UAAL,CAAgB,GAAhB,KAAwB,KAAK,QAAL,CAAc,GAAd,CAA5B,EAAgD;AAC9C,WAAO,KAAK,KAAL,CAAW,CAAX,EAAc,CAAC,CAAf,CAAP;AACD;;AAED,MAAI,OAAO,SAAS,SAAS,KAAT,CAAe,YAAY,CAA3B,CAAT,EAAwC,EAAxC,CAAX;AACA,SAAO,EAAC,IAAD,EAAO,IAAP,EAAP;AACD,CApBD","file":"index-compiled.js","sourcesContent":["// Licensed to the Software Freedom Conservancy (SFC) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The SFC licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\n'use strict';\n\nvar os = require('os');\n\n\nfunction getLoInterface() {\n  var name;\n  if (process.platform === 'darwin') {\n    name = 'lo0';\n  } else if (process.platform === 'linux') {\n    name = 'lo';\n  }\n  return name ? os.networkInterfaces()[name] : null;\n}\n\n\n/**\n * Queries the system network interfaces for an IP address.\n * @param {boolean} loopback Whether to find a loopback address.\n * @param {string=} opt_family The IP family (IPv4 or IPv6). Defaults to IPv4.\n * @return {string} The located IP address or undefined.\n */\nfunction getAddress(loopback, opt_family) {\n  var family = opt_family || 'IPv4';\n  var addresses = [];\n\n  var interfaces;\n  if (loopback) {\n    var lo = getLoInterface();\n    interfaces = lo ? [lo] : null;\n  }\n  interfaces = interfaces || os.networkInterfaces();\n  for (var key in interfaces) {\n    if (!interfaces.hasOwnProperty(key)) {\n      continue;\n    }\n\n    interfaces[key].forEach(function(ipAddress) {\n      if (ipAddress.family === family &&\n          ipAddress.internal === loopback) {\n        addresses.push(ipAddress.address);\n      }\n    });\n  }\n  return addresses[0];\n}\n\n\n// PUBLIC API\n\n\n/**\n * Retrieves the external IP address for this host.\n * @param {string=} opt_family The IP family to retrieve. Defaults to \"IPv4\".\n * @return {string} The IP address or undefined if not available.\n */\nexports.getAddress = function(opt_family) {\n  return getAddress(false, opt_family);\n};\n\n\n/**\n * Retrieves a loopback address for this machine.\n * @param {string=} opt_family The IP family to retrieve. Defaults to \"IPv4\".\n * @return {string} The IP address or undefined if not available.\n */\nexports.getLoopbackAddress = function(opt_family) {\n  return getAddress(true, opt_family);\n};\n\n\n/**\n * Splits a hostport string, e.g. \"www.example.com:80\", into its component\n * parts.\n *\n * @param {string} hostport The string to split.\n * @return {{host: string, port: ?number}} A host and port. If no port is\n *     present in the argument `hostport`, port is null.\n */\nexports.splitHostAndPort = function(hostport) {\n  let lastIndex = hostport.lastIndexOf(':');\n  if (lastIndex < 0) {\n    return {host: hostport, port: null};\n  }\n\n  let firstIndex = hostport.indexOf(':');\n  if (firstIndex != lastIndex && !hostport.includes('[')) {\n    // Multiple colons but no brackets, so assume the string is an IPv6 address\n    // with no port (e.g. \"1234:5678:9:0:1234:5678:9:0\").\n    return {host: hostport, port: null};\n  }\n\n  let host = hostport.slice(0, lastIndex);\n  if (host.startsWith('[') && host.endsWith(']')) {\n    host = host.slice(1, -1);\n  }\n\n  let port = parseInt(hostport.slice(lastIndex + 1), 10);\n  return {host, port};\n};\n"]}