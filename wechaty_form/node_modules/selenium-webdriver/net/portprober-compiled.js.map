{"version":3,"sources":["portprober.js"],"names":[],"mappings":"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","file":"portprober-compiled.js","sourcesContent":["// Licensed to the Software Freedom Conservancy (SFC) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The SFC licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\n'use strict';\n\nvar exec = require('child_process').exec,\n    fs = require('fs'),\n    net = require('net');\n\n\n/**\n * The IANA suggested ephemeral port range.\n * @type {{min: number, max: number}}\n * @const\n * @see http://en.wikipedia.org/wiki/Ephemeral_ports\n */\nconst DEFAULT_IANA_RANGE = {min: 49152, max: 65535};\n\n\n/**\n * The epheremal port range for the current system. Lazily computed on first\n * access.\n * @type {Promise.<{min: number, max: number}>}\n */\nvar systemRange = null;\n\n\n/**\n * Computes the ephemeral port range for the current system. This is based on\n * http://stackoverflow.com/a/924337.\n * @return {!Promise<{min: number, max: number}>} A promise that will resolve to\n *     the ephemeral port range of the current system.\n */\nfunction findSystemPortRange() {\n  if (systemRange) {\n    return systemRange;\n  }\n  var range = process.platform === 'win32' ?\n      findWindowsPortRange() : findUnixPortRange();\n  return systemRange = range.catch(function() {\n    return DEFAULT_IANA_RANGE;\n  });\n}\n\n\n/**\n * Executes a command and returns its output if it succeeds.\n * @param {string} cmd The command to execute.\n * @return {!Promise<string>} A promise that will resolve with the command's\n *     stdout data.\n */\nfunction execute(cmd) {\n  return new Promise((resolve, reject) => {\n    exec(cmd, function(err, stdout) {\n      if (err) {\n        reject(err);\n      } else {\n        resolve(stdout);\n      }\n    });\n  });\n}\n\n\n/**\n * Computes the ephemeral port range for a Unix-like system.\n * @return {!Promise<{min: number, max: number}>} A promise that will resolve\n *     with the ephemeral port range on the current system.\n */\nfunction findUnixPortRange() {\n  var cmd;\n  if (process.platform === 'sunos') {\n    cmd =\n        '/usr/sbin/ndd /dev/tcp tcp_smallest_anon_port tcp_largest_anon_port';\n  } else if (fs.existsSync('/proc/sys/net/ipv4/ip_local_port_range')) {\n    // Linux\n    cmd = 'cat /proc/sys/net/ipv4/ip_local_port_range';\n  } else {\n    cmd = 'sysctl net.inet.ip.portrange.first net.inet.ip.portrange.last' +\n        ' | sed -e \"s/.*:\\\\s*//\"';\n  }\n\n  return execute(cmd).then(function(stdout) {\n    if (!stdout || !stdout.length) return DEFAULT_IANA_RANGE;\n    var range = stdout.trim().split(/\\s+/).map(Number);\n    if (range.some(isNaN)) return DEFAULT_IANA_RANGE;\n    return {min: range[0], max: range[1]};\n  });\n}\n\n\n/**\n * Computes the ephemeral port range for a Windows system.\n * @return {!Promise<{min: number, max: number}>} A promise that will resolve\n *     with the ephemeral port range on the current system.\n */\nfunction findWindowsPortRange() {\n  // First, check if we're running on XP.  If this initial command fails,\n  // we just fallback on the default IANA range.\n  return execute('cmd.exe /c ver').then(function(stdout) {\n    if (/Windows XP/.test(stdout)) {\n      // TODO: Try to read these values from the registry.\n      return {min: 1025, max: 5000};\n    } else {\n      return execute('netsh int ipv4 show dynamicport tcp').\n          then(function(stdout) {\n            /* > netsh int ipv4 show dynamicport tcp\n              Protocol tcp Dynamic Port Range\n              ---------------------------------\n              Start Port : 49152\n              Number of Ports : 16384\n             */\n            var range = stdout.split(/\\n/).filter(function(line) {\n              return /.*:\\s*\\d+/.test(line);\n            }).map(function(line) {\n              return Number(line.split(/:\\s*/)[1]);\n            });\n\n            return {\n              min: range[0],\n              max: range[0] + range[1]\n            };\n          });\n    }\n  });\n}\n\n\n/**\n * Tests if a port is free.\n * @param {number} port The port to test.\n * @param {string=} opt_host The bound host to test the {@code port} against.\n *     Defaults to {@code INADDR_ANY}.\n * @return {!Promise<boolean>} A promise that will resolve with whether the port\n *     is free.\n */\nfunction isFree(port, opt_host) {\n  return new Promise((resolve, reject) => {\n    let server = net.createServer().on('error', function(e) {\n      if (e.code === 'EADDRINUSE') {\n        resolve(false);\n      } else {\n        reject(e);\n      }\n    });\n\n    server.listen(port, opt_host, function() {\n      server.close(() => resolve(true));\n    });\n  });\n}\n\n\n/**\n * @param {string=} opt_host The bound host to test the {@code port} against.\n *     Defaults to {@code INADDR_ANY}.\n * @return {!Promise<number>} A promise that will resolve to a free port. If a\n *     port cannot be found, the promise will be rejected.\n */\nfunction findFreePort(opt_host) {\n  return findSystemPortRange().then(function(range) {\n    var attempts = 0;\n    return new Promise((resolve, reject) => {\n      findPort();\n\n      function findPort() {\n        attempts += 1;\n        if (attempts > 10) {\n          reject(Error('Unable to find a free port'));\n        }\n\n        var port = Math.floor(\n            Math.random() * (range.max - range.min) + range.min);\n        isFree(port, opt_host).then(function(isFree) {\n          if (isFree) {\n            resolve(port);\n          } else {\n            findPort();\n          }\n        }, findPort);\n      }\n    });\n  });\n}\n\n\n// PUBLIC API\n\n\nexports.findFreePort = findFreePort;\nexports.isFree = isFree;\n"]}