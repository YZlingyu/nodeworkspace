{"version":3,"sources":["google_search_test.js"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;;;;;;;;;;;;;AAcA,MAAM,EAAC,OAAD,EAAU,EAAV,EAAc,KAAd,KAAuB,QAAQ,IAAR,CAA7B;AACA,MAAM,OAAO,QAAQ,YAAR,CAAb;;AAEA,KAAK,QAAL,CAAc,eAAd,EAA+B,YAAW;AACxC,MAAI,MAAJ;;AAEA,OAAK,MAAL,CAAY,aAAa;AACvB,aAAS,MAAM,IAAI,OAAJ,GAAc,UAAd,CAAyB,SAAzB,EAAoC,KAApC,EAAf;AACD,GAFD;;AAIA;AACA,KAAG,qBAAH,EAA0B,YAAW;AACnC,WAAO,OAAO,GAAP,CAAW,2BAAX,EACF,IADE,CACG,KAAK,OAAO,WAAP,CAAmB,GAAG,IAAH,CAAQ,GAAR,CAAnB,EAAiC,QAAjC,CAA0C,WAA1C,CADR,EAEF,IAFE,CAEG,KAAK,OAAO,WAAP,CAAmB,GAAG,IAAH,CAAQ,MAAR,CAAnB,EAAoC,KAApC,EAFR,EAGF,IAHE,CAGG,KAAK,OAAO,IAAP,CAAY,MAAM,OAAN,CAAc,2BAAd,CAAZ,EAAwD,IAAxD,CAHR,CAAP;AAID,GALD;;AAOA;AACA;AACA;AACA,OAAK,EAAL,CAAQ,uBAAR,EAAiC,aAAY;AAC3C,UAAM,OAAO,GAAP,CAAW,2BAAX,CAAN;AACA,UAAM,OAAO,WAAP,CAAmB,GAAG,IAAH,CAAQ,GAAR,CAAnB,EAAiC,QAAjC,CAA0C,WAA1C,CAAN;AACA,UAAM,OAAO,WAAP,CAAmB,GAAG,IAAH,CAAQ,MAAR,CAAnB,EAAoC,KAApC,EAAN;AACA,UAAM,OAAO,IAAP,CAAY,MAAM,OAAN,CAAc,2BAAd,CAAZ,EAAwD,IAAxD,CAAN;AACD,GALD;;AAOA,OAAK,KAAL,CAAW,MAAM,OAAO,IAAP,EAAjB;AACD,CA1BD","file":"google_search_test-compiled.js","sourcesContent":["// Licensed to the Software Freedom Conservancy (SFC) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The SFC licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\n/**\n * @fileoverview An example test that may be run using Mocha.\n *\n * Usage:\n *\n *     mocha -t 10000 selenium-webdriver/example/google_search_test.js\n *\n * You can change which browser is started with the SELENIUM_BROWSER environment\n * variable:\n *\n *     SELENIUM_BROWSER=chrome \\\n *         mocha -t 10000 selenium-webdriver/example/google_search_test.js\n */\n\nconst {Builder, By, until} = require('..');\nconst test = require('../testing');\n\ntest.describe('Google Search', function() {\n  let driver;\n\n  test.before(function *() {\n    driver = yield new Builder().forBrowser('firefox').build();\n  });\n\n  // You can write tests either using traditional promises.\n  it('works with promises', function() {\n    return driver.get('http://www.google.com/ncr')\n        .then(_ => driver.findElement(By.name('q')).sendKeys('webdriver'))\n        .then(_ => driver.findElement(By.name('btnG')).click())\n        .then(_ => driver.wait(until.titleIs('webdriver - Google Search'), 1000));\n  });\n\n  // Or you can define the test as a generator function. The test will wait for\n  // any yielded promises to resolve before invoking the next step in the\n  // generator.\n  test.it('works with generators', function*() {\n    yield driver.get('http://www.google.com/ncr');\n    yield driver.findElement(By.name('q')).sendKeys('webdriver');\n    yield driver.findElement(By.name('btnG')).click();\n    yield driver.wait(until.titleIs('webdriver - Google Search'), 1000);\n  });\n\n  test.after(() => driver.quit());\n});\n"]}