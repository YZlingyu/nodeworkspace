{"version":3,"sources":["index.js"],"names":[],"mappings":"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","file":"index-compiled.js","sourcesContent":["// Licensed to the Software Freedom Conservancy (SFC) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The SFC licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\n'use strict';\n\nconst AdmZip = require('adm-zip');\nconst fs = require('fs');\nconst path = require('path');\nconst url = require('url');\nconst util = require('util');\n\nconst httpUtil = require('../http/util');\nconst io = require('../io');\nconst exec = require('../io/exec');\nconst cmd = require('../lib/command');\nconst input = require('../lib/input');\nconst promise = require('../lib/promise');\nconst webdriver = require('../lib/webdriver');\nconst net = require('../net');\nconst portprober = require('../net/portprober');\n\n\n/**\n * @typedef {(string|!Array<string|number|!stream.Stream|null|undefined>)}\n */\nvar StdIoOptions;\n\n\n/**\n * @typedef {(string|!IThenable<string>)}\n */\nvar CommandLineFlag;\n\n\n/**\n * A record object that defines the configuration options for a DriverService\n * instance.\n *\n * @record\n */\nfunction ServiceOptions() {}\n\n/**\n * Whether the service should only be accessed on this host's loopback address.\n *\n * @type {(boolean|undefined)}\n */\nServiceOptions.prototype.loopback;\n\n/**\n * The host name to access the server on. If this option is specified, the\n * {@link #loopback} option will be ignored.\n *\n * @type {(string|undefined)}\n */\nServiceOptions.prototype.hostname;\n\n/**\n * The port to start the server on (must be > 0). If the port is provided as a\n * promise, the service will wait for the promise to resolve before starting.\n *\n * @type {(number|!IThenable<number>)}\n */\nServiceOptions.prototype.port;\n\n/**\n * The arguments to pass to the service. If a promise is provided, the service\n * will wait for it to resolve before starting.\n *\n * @type {!(Array<CommandLineFlag>|IThenable<!Array<CommandLineFlag>>)}\n */\nServiceOptions.prototype.args;\n\n/**\n * The base path on the server for the WebDriver wire protocol (e.g. '/wd/hub').\n * Defaults to '/'.\n *\n * @type {(string|undefined|null)}\n */\nServiceOptions.prototype.path;\n\n/**\n * The environment variables that should be visible to the server process.\n * Defaults to inheriting the current process's environment.\n *\n * @type {(Object<string, string>|undefined)}\n */\nServiceOptions.prototype.env;\n\n/**\n * IO configuration for the spawned server process. For more information, refer\n * to the documentation of `child_process.spawn`.\n *\n * @type {(StdIoOptions|undefined)}\n * @see https://nodejs.org/dist/latest-v4.x/docs/api/child_process.html#child_process_options_stdio\n */\nServiceOptions.prototype.stdio;\n\n\n/**\n * Manages the life and death of a native executable WebDriver server.\n *\n * It is expected that the driver server implements the\n * https://github.com/SeleniumHQ/selenium/wiki/JsonWireProtocol.\n * Furthermore, the managed server should support multiple concurrent sessions,\n * so that this class may be reused for multiple clients.\n */\nclass DriverService {\n  /**\n   * @param {string} executable Path to the executable to run.\n   * @param {!ServiceOptions} options Configuration options for the service.\n   */\n  constructor(executable, options) {\n    /** @private {string} */\n    this.executable_ = executable;\n\n    /** @private {boolean} */\n    this.loopbackOnly_ = !!options.loopback;\n\n    /** @private {(string|undefined)} */\n    this.hostname_ = options.hostname;\n\n    /** @private {(number|!IThenable<number>)} */\n    this.port_ = options.port;\n\n    /**\n     * @private {!(Array<CommandLineFlag>|\n     *             IThenable<!Array<CommandLineFlag>>)}\n     */\n    this.args_ = options.args;\n\n    /** @private {string} */\n    this.path_ = options.path || '/';\n\n    /** @private {!Object<string, string>} */\n    this.env_ = options.env || process.env;\n\n    /**\n     * @private {(string|!Array<string|number|!stream.Stream|null|undefined>)}\n     */\n    this.stdio_ = options.stdio || 'ignore';\n\n    /**\n     * A promise for the managed subprocess, or null if the server has not been\n     * started yet. This promise will never be rejected.\n     * @private {Promise<!exec.Command>}\n     */\n    this.command_ = null;\n\n    /**\n     * Promise that resolves to the server's address or null if the server has\n     * not been started. This promise will be rejected if the server terminates\n     * before it starts accepting WebDriver requests.\n     * @private {Promise<string>}\n     */\n    this.address_ = null;\n  }\n\n  /**\n   * @return {!Promise<string>} A promise that resolves to the server's address.\n   * @throws {Error} If the server has not been started.\n   */\n  address() {\n    if (this.address_) {\n      return this.address_;\n    }\n    throw Error('Server has not been started.');\n  }\n\n  /**\n   * Returns whether the underlying process is still running. This does not take\n   * into account whether the process is in the process of shutting down.\n   * @return {boolean} Whether the underlying service process is running.\n   */\n  isRunning() {\n    return !!this.address_;\n  }\n\n  /**\n   * Starts the server if it is not already running.\n   * @param {number=} opt_timeoutMs How long to wait, in milliseconds, for the\n   *     server to start accepting requests. Defaults to 30 seconds.\n   * @return {!Promise<string>} A promise that will resolve to the server's base\n   *     URL when it has started accepting requests. If the timeout expires\n   *     before the server has started, the promise will be rejected.\n   */\n  start(opt_timeoutMs) {\n    if (this.address_) {\n      return this.address_;\n    }\n\n    var timeout = opt_timeoutMs || DriverService.DEFAULT_START_TIMEOUT_MS;\n    var self = this;\n\n    let resolveCommand;\n    this.command_ = new Promise(resolve => resolveCommand = resolve);\n\n    this.address_ = new Promise((resolveAddress, rejectAddress) => {\n      resolveAddress(Promise.resolve(this.port_).then(port => {\n        if (port <= 0) {\n          throw Error('Port must be > 0: ' + port);\n        }\n\n        return resolveCommandLineFlags(this.args_).then(args => {\n          var command = exec(self.executable_, {\n            args: args,\n            env: self.env_,\n            stdio: self.stdio_\n          });\n\n          resolveCommand(command);\n\n          var earlyTermination = command.result().then(function(result) {\n            var error = result.code == null ?\n                Error('Server was killed with ' + result.signal) :\n                Error('Server terminated early with status ' + result.code);\n            rejectAddress(error);\n            self.address_ = null;\n            self.command_ = null;\n            throw error;\n          });\n\n          var hostname = self.hostname_;\n          if (!hostname) {\n            hostname = !self.loopbackOnly_ && net.getAddress()\n                || net.getLoopbackAddress();\n          }\n\n          var serverUrl = url.format({\n            protocol: 'http',\n            hostname: hostname,\n            port: port + '',\n            pathname: self.path_\n          });\n\n          return new Promise((fulfill, reject) => {\n            let cancelToken =\n                earlyTermination.catch(e => reject(Error(e.message)));\n\n            httpUtil.waitForServer(serverUrl, timeout, cancelToken)\n                .then(_ => fulfill(serverUrl), err => {\n                  if (err instanceof promise.CancellationError) {\n                    fulfill(serverUrl);\n                  } else {\n                    reject(err);\n                  }\n                });\n          });\n        });\n      }));\n    });\n\n    return this.address_;\n  }\n\n  /**\n   * Stops the service if it is not currently running. This function will kill\n   * the server immediately. To synchronize with the active control flow, use\n   * {@link #stop()}.\n   * @return {!Promise} A promise that will be resolved when the server has been\n   *     stopped.\n   */\n  kill() {\n    if (!this.address_ || !this.command_) {\n      return Promise.resolve(); // Not currently running.\n    }\n    return this.command_.then(function(command) {\n      command.kill('SIGTERM');\n    });\n  }\n\n  /**\n   * Schedules a task in the current control flow to stop the server if it is\n   * currently running.\n   * @return {!promise.Thenable} A promise that will be resolved when\n   *     the server has been stopped.\n   */\n  stop() {\n    return promise.controlFlow().execute(this.kill.bind(this));\n  }\n}\n\n\n/**\n * @param {!(Array<CommandLineFlag>|IThenable<!Array<CommandLineFlag>>)} args\n * @return {!Promise<!Array<string>>}\n */\nfunction resolveCommandLineFlags(args) {\n  // Resolve the outer array, then the individual flags.\n  return Promise.resolve(args)\n      .then(/** !Array<CommandLineFlag> */args => Promise.all(args));\n}\n\n\n/**\n * The default amount of time, in milliseconds, to wait for the server to\n * start.\n * @const {number}\n */\nDriverService.DEFAULT_START_TIMEOUT_MS = 30 * 1000;\n\n\n/**\n * Creates {@link DriverService} objects that manage a WebDriver server in a\n * child process.\n */\nDriverService.Builder = class {\n  /**\n   * @param {string} exe Path to the executable to use. This executable must\n   *     accept the `--port` flag for defining the port to start the server on.\n   * @throws {Error} If the provided executable path does not exist.\n   */\n  constructor(exe) {\n    if (!fs.existsSync(exe)) {\n      throw Error(`The specified executable path does not exist: ${exe}`);\n    }\n\n    /** @private @const {string} */\n    this.exe_ = exe;\n\n    /** @private {!ServiceOptions} */\n    this.options_ = {\n      args: [],\n      port: 0,\n      env: null,\n      stdio: 'ignore'\n    };\n  }\n\n  /**\n   * Define additional command line arguments to use when starting the server.\n   *\n   * @param {...CommandLineFlag} var_args The arguments to include.\n   * @return {!THIS} A self reference.\n   * @this {THIS}\n   * @template THIS\n   */\n  addArguments(var_args) {\n    let args = Array.prototype.slice.call(arguments, 0);\n    this.options_.args = this.options_.args.concat(args);\n    return this;\n  }\n\n  /**\n   * Sets the host name to access the server on. If specified, the\n   * {@linkplain #setLoopback() loopback} setting will be ignored.\n   *\n   * @param {string} hostname\n   * @return {!DriverService.Builder} A self reference.\n   */\n  setHostname(hostname) {\n    this.options_.hostname = hostname;\n    return this;\n  }\n\n  /**\n   * Sets whether the service should be accessed at this host's loopback\n   * address.\n   *\n   * @param {boolean} loopback\n   * @return {!DriverService.Builder} A self reference.\n   */\n  setLoopback(loopback) {\n    this.options_.loopback = loopback;\n    return this;\n  }\n\n  /**\n   * Sets the base path for WebDriver REST commands (e.g. \"/wd/hub\").\n   * By default, the driver will accept commands relative to \"/\".\n   *\n   * @param {?string} basePath The base path to use, or `null` to use the\n   *     default.\n   * @return {!DriverService.Builder} A self reference.\n   */\n  setPath(basePath) {\n    this.options_.path = basePath;\n    return this;\n  }\n\n  /**\n   * Sets the port to start the server on.\n   *\n   * @param {number} port The port to use, or 0 for any free port.\n   * @return {!DriverService.Builder} A self reference.\n   * @throws {Error} If an invalid port is specified.\n   */\n  setPort(port) {\n    if (port < 0) {\n      throw Error(`port must be >= 0: ${port}`);\n    }\n    this.options_.port = port;\n    return this;\n  }\n\n  /**\n   * Defines the environment to start the server under. This setting will be\n   * inherited by every browser session started by the server. By default, the\n   * server will inherit the enviroment of the current process.\n   *\n   * @param {(Map<string, string>|Object<string, string>|null)} env The desired\n   *     environment to use, or `null` if the server should inherit the\n   *     current environment.\n   * @return {!DriverService.Builder} A self reference.\n   */\n  setEnvironment(env) {\n    if (env instanceof Map) {\n      let tmp = {};\n      env.forEach((value, key) => tmp[key] = value);\n      env = tmp;\n    }\n    this.options_.env = env;\n    return this;\n  }\n\n  /**\n   * IO configuration for the spawned server process. For more information,\n   * refer to the documentation of `child_process.spawn`.\n   *\n   * @param {StdIoOptions} config The desired IO configuration.\n   * @return {!DriverService.Builder} A self reference.\n   * @see https://nodejs.org/dist/latest-v4.x/docs/api/child_process.html#child_process_options_stdio\n   */\n  setStdio(config) {\n    this.options_.stdio = config;\n    return this;\n  }\n\n  /**\n   * Creates a new DriverService using this instance's current configuration.\n   *\n   * @return {!DriverService} A new driver service.\n   */\n  build() {\n    let port = this.options_.port || portprober.findFreePort();\n    let args = Promise.resolve(port).then(port => {\n      return this.options_.args.concat('--port=' + port);\n    });\n\n    let options =\n        /** @type {!ServiceOptions} */\n        (Object.assign({}, this.options_, {args, port}));\n    return new DriverService(this.exe_, options);\n  }\n};\n\n\n/**\n * Manages the life and death of the\n * <a href=\"http://selenium-release.storage.googleapis.com/index.html\">\n * standalone Selenium server</a>.\n */\nclass SeleniumServer extends DriverService {\n  /**\n   * @param {string} jar Path to the Selenium server jar.\n   * @param {SeleniumServer.Options=} opt_options Configuration options for the\n   *     server.\n   * @throws {Error} If the path to the Selenium jar is not specified or if an\n   *     invalid port is specified.\n   */\n  constructor(jar, opt_options) {\n    if (!jar) {\n      throw Error('Path to the Selenium jar not specified');\n    }\n\n    var options = opt_options || {};\n\n    if (options.port < 0) {\n      throw Error('Port must be >= 0: ' + options.port);\n    }\n\n    let port = options.port || portprober.findFreePort();\n    let args = Promise.all([port, options.jvmArgs || [], options.args || []])\n        .then(resolved => {\n          let port = resolved[0];\n          let jvmArgs = resolved[1];\n          let args = resolved[2];\n          return jvmArgs.concat('-jar', jar, '-port', port).concat(args);\n        });\n\n    let java = 'java';\n    if (process.env['JAVA_HOME']) {\n      java = path.join(process.env['JAVA_HOME'], 'bin/java');\n    }\n\n    super(java, {\n      loopback: options.loopback,\n      port: port,\n      args: args,\n      path: '/wd/hub',\n      env: options.env,\n      stdio: options.stdio\n    });\n  }\n}\n\n\n/**\n * Options for the Selenium server:\n *\n * - `loopback` - Whether the server should only be accessed on this host's\n *     loopback address.\n * - `port` - The port to start the server on (must be > 0). If the port is\n *     provided as a promise, the service will wait for the promise to resolve\n *     before starting.\n * - `args` - The arguments to pass to the service. If a promise is provided,\n *     the service will wait for it to resolve before starting.\n * - `jvmArgs` - The arguments to pass to the JVM. If a promise is provided,\n *     the service will wait for it to resolve before starting.\n * - `env` - The environment variables that should be visible to the server\n *     process. Defaults to inheriting the current process's environment.\n * - `stdio` - IO configuration for the spawned server process. For more\n *     information, refer to the documentation of `child_process.spawn`.\n *\n * @typedef {{\n *   loopback: (boolean|undefined),\n *   port: (number|!promise.Promise<number>),\n *   args: !(Array<string>|promise.Promise<!Array<string>>),\n *   jvmArgs: (!Array<string>|\n *             !promise.Promise<!Array<string>>|\n *             undefined),\n *   env: (!Object<string, string>|undefined),\n *   stdio: (string|!Array<string|number|!stream.Stream|null|undefined>|\n *           undefined)\n * }}\n */\nSeleniumServer.Options;\n\n\n\n/**\n * A {@link webdriver.FileDetector} that may be used when running\n * against a remote\n * [Selenium server](http://selenium-release.storage.googleapis.com/index.html).\n *\n * When a file path on the local machine running this script is entered with\n * {@link webdriver.WebElement#sendKeys WebElement#sendKeys}, this file detector\n * will transfer the specified file to the Selenium server's host; the sendKeys\n * command will be updated to use the transfered file's path.\n *\n * __Note:__ This class depends on a non-standard command supported on the\n * Java Selenium server. The file detector will fail if used with a server that\n * only supports standard WebDriver commands (such as the ChromeDriver).\n *\n * @final\n */\nclass FileDetector extends input.FileDetector {\n  /**\n   * Prepares a `file` for use with the remote browser. If the provided path\n   * does not reference a normal file (i.e. it does not exist or is a\n   * directory), then the promise returned by this method will be resolved with\n   * the original file path. Otherwise, this method will upload the file to the\n   * remote server, which will return the file's path on the remote system so\n   * it may be referenced in subsequent commands.\n   *\n   * @override\n   */\n  handleFile(driver, file) {\n    return io.stat(file).then(function(stats) {\n      if (stats.isDirectory()) {\n        return file;  // Not a valid file, return original input.\n      }\n\n      var zip = new AdmZip();\n      zip.addLocalFile(file);\n      // Stored compression, see https://en.wikipedia.org/wiki/Zip_(file_format)\n      zip.getEntries()[0].header.method = 0;\n\n      var command = new cmd.Command(cmd.Name.UPLOAD_FILE)\n          .setParameter('file', zip.toBuffer().toString('base64'));\n      return driver.schedule(command,\n          'remote.FileDetector.handleFile(' + file + ')');\n    }, function(err) {\n      if (err.code === 'ENOENT') {\n        return file;  // Not a file; return original input.\n      }\n      throw err;\n    });\n  }\n}\n\n\n// PUBLIC API\n\nexports.DriverService = DriverService;\nexports.FileDetector = FileDetector;\nexports.SeleniumServer = SeleniumServer;\nexports.ServiceOptions = ServiceOptions;  // Exported for API docs.\n"]}