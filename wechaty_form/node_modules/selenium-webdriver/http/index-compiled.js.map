{"version":3,"sources":["index.js"],"names":[],"mappings":"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","file":"index-compiled.js","sourcesContent":["// Licensed to the Software Freedom Conservancy (SFC) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The SFC licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\n/**\n * @fileoverview Defines an {@linkplain cmd.Executor command executor} that\n * communicates with a remote end using HTTP + JSON.\n */\n\n'use strict';\n\nconst http = require('http');\nconst https = require('https');\nconst url = require('url');\n\nconst httpLib = require('../lib/http');\n\n\n/**\n * @typedef {{protocol: (?string|undefined),\n *            auth: (?string|undefined),\n *            hostname: (?string|undefined),\n *            host: (?string|undefined),\n *            port: (?string|undefined),\n *            path: (?string|undefined),\n *            pathname: (?string|undefined)}}\n */\nvar RequestOptions;\n\n\n/**\n * @param {string} aUrl The request URL to parse.\n * @return {RequestOptions} The request options.\n * @throws {Error} if the URL does not include a hostname.\n */\nfunction getRequestOptions(aUrl) {\n  let options = url.parse(aUrl);\n  if (!options.hostname) {\n    throw new Error('Invalid URL: ' + aUrl);\n  }\n  // Delete the search and has portions as they are not used.\n  options.search = null;\n  options.hash = null;\n  options.path = options.pathname;\n  return options;\n}\n\n\n/**\n * A basic HTTP client used to send messages to a remote end.\n *\n * @implements {httpLib.Client}\n */\nclass HttpClient {\n  /**\n   * @param {string} serverUrl URL for the WebDriver server to send commands to.\n   * @param {http.Agent=} opt_agent The agent to use for each request.\n   *     Defaults to `http.globalAgent`.\n   * @param {?string=} opt_proxy The proxy to use for the connection to the\n   *     server. Default is to use no proxy.\n   */\n  constructor(serverUrl, opt_agent, opt_proxy) {\n    /** @private {http.Agent} */\n    this.agent_ = opt_agent || null;\n\n    /**\n     * Base options for each request.\n     * @private {RequestOptions}\n     */\n    this.options_ = getRequestOptions(serverUrl);\n\n    /**\n     * @private {?RequestOptions}\n     */\n    this.proxyOptions_ = opt_proxy ? getRequestOptions(opt_proxy) : null;\n  }\n\n  /** @override */\n  send(httpRequest) {\n    let data;\n\n    let headers = {};\n    httpRequest.headers.forEach(function(value, name) {\n      headers[name] = value;\n    });\n\n    headers['Content-Length'] = 0;\n    if (httpRequest.method == 'POST' || httpRequest.method == 'PUT') {\n      data = JSON.stringify(httpRequest.data);\n      headers['Content-Length'] = Buffer.byteLength(data, 'utf8');\n      headers['Content-Type'] = 'application/json;charset=UTF-8';\n    }\n\n    let path = this.options_.path;\n    if (path.endsWith('/') && httpRequest.path.startsWith('/')) {\n      path += httpRequest.path.substring(1);\n    } else {\n      path += httpRequest.path;\n    }\n    let parsedPath = url.parse(path);\n\n    let options = {\n      agent: this.agent_ || null,\n      method: httpRequest.method,\n\n      auth: this.options_.auth,\n      hostname: this.options_.hostname,\n      port: this.options_.port,\n      protocol: this.options_.protocol,\n\n      path: parsedPath.path,\n      pathname: parsedPath.pathname,\n      search: parsedPath.search,\n      hash: parsedPath.hash,\n\n      headers,\n    };\n\n    return new Promise((fulfill, reject) => {\n      sendRequest(options, fulfill, reject, data, this.proxyOptions_);\n    });\n  }\n}\n\n\n/**\n * Sends a single HTTP request.\n * @param {!Object} options The request options.\n * @param {function(!httpLib.Response)} onOk The function to call if the\n *     request succeeds.\n * @param {function(!Error)} onError The function to call if the request fails.\n * @param {?string=} opt_data The data to send with the request.\n * @param {?RequestOptions=} opt_proxy The proxy server to use for the request.\n */\nfunction sendRequest(options, onOk, onError, opt_data, opt_proxy) {\n  var hostname = options.hostname;\n  var port = options.port;\n\n  if (opt_proxy) {\n    let proxy = /** @type {RequestOptions} */(opt_proxy);\n\n    // RFC 2616, section 5.1.2:\n    // The absoluteURI form is REQUIRED when the request is being made to a\n    // proxy.\n    let absoluteUri = url.format(options);\n\n    // RFC 2616, section 14.23:\n    // An HTTP/1.1 proxy MUST ensure that any request message it forwards does\n    // contain an appropriate Host header field that identifies the service\n    // being requested by the proxy.\n    let targetHost = options.hostname\n    if (options.port) {\n      targetHost += ':' + options.port;\n    }\n\n    // Update the request options with our proxy info.\n    options.headers['Host'] = targetHost;\n    options.path = absoluteUri;\n    options.host = proxy.host;\n    options.hostname = proxy.hostname;\n    options.port = proxy.port;\n\n    if (proxy.auth) {\n      options.headers['Proxy-Authorization'] =\n          'Basic ' + new Buffer(proxy.auth).toString('base64');\n    }\n  }\n\n  let requestFn = options.protocol === 'https:' ? https.request : http.request;\n  var request = requestFn(options, function onResponse(response) {\n    if (response.statusCode == 302 || response.statusCode == 303) {\n      try {\n        var location = url.parse(response.headers['location']);\n      } catch (ex) {\n        onError(Error(\n            'Failed to parse \"Location\" header for server redirect: ' +\n            ex.message + '\\nResponse was: \\n' +\n            new httpLib.Response(response.statusCode, response.headers, '')));\n        return;\n      }\n\n      if (!location.hostname) {\n        location.hostname = hostname;\n        location.port = port;\n      }\n\n      request.abort();\n      sendRequest({\n        method: 'GET',\n        protocol: location.protocol || options.protocol,\n        hostname: location.hostname,\n        port: location.port,\n        path: location.path,\n        pathname: location.pathname,\n        search: location.search,\n        hash: location.hash,\n        headers: {\n          'Accept': 'application/json; charset=utf-8'\n        }\n      }, onOk, onError, undefined, opt_proxy);\n      return;\n    }\n\n    var body = [];\n    response.on('data', body.push.bind(body));\n    response.on('end', function() {\n      var resp = new httpLib.Response(\n          /** @type {number} */(response.statusCode),\n          /** @type {!Object<string>} */(response.headers),\n          body.join('').replace(/\\0/g, ''));\n      onOk(resp);\n    });\n  });\n\n  request.on('error', function(e) {\n    if (e.code === 'ECONNRESET') {\n      setTimeout(function() {\n        sendRequest(options, onOk, onError, opt_data, opt_proxy);\n      }, 15);\n    } else {\n      var message = e.message;\n      if (e.code) {\n        message = e.code + ' ' + message;\n      }\n      onError(new Error(message));\n    }\n  });\n\n  if (opt_data) {\n    request.write(opt_data);\n  }\n\n  request.end();\n}\n\n\n// PUBLIC API\n\nexports.Executor = httpLib.Executor;\nexports.HttpClient = HttpClient;\nexports.Request = httpLib.Request;\nexports.Response = httpLib.Response;\n"]}