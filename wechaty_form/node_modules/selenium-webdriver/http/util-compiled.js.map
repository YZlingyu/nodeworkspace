{"version":3,"sources":["util.js"],"names":[],"mappings":"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","file":"util-compiled.js","sourcesContent":["// Licensed to the Software Freedom Conservancy (SFC) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The SFC licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\n/**\n * @fileoverview Various HTTP utilities.\n */\n\n'use strict';\n\nconst Executor = require('./index').Executor,\n    HttpClient = require('./index').HttpClient,\n    HttpRequest = require('./index').Request,\n    Command = require('../lib/command').Command,\n    CommandName = require('../lib/command').Name,\n    error = require('../lib/error'),\n    promise = require('../lib/promise');\n\n\n\n/**\n * Queries a WebDriver server for its current status.\n * @param {string} url Base URL of the server to query.\n * @return {!Promise<!Object>} A promise that resolves with\n *     a hash of the server status.\n */\nfunction getStatus(url) {\n  var client = new HttpClient(url);\n  var executor = new Executor(client);\n  var command = new Command(CommandName.GET_SERVER_STATUS);\n  return executor.execute(command);\n}\n\n\n// PUBLIC API\n\n\n/**\n * Queries a WebDriver server for its current status.\n * @param {string} url Base URL of the server to query.\n * @return {!Promise<!Object>} A promise that resolves with\n *     a hash of the server status.\n */\nexports.getStatus = getStatus;\n\n\n/**\n * Waits for a WebDriver server to be healthy and accepting requests.\n * @param {string} url Base URL of the server to query.\n * @param {number} timeout How long to wait for the server.\n * @param {Promise=} opt_cancelToken A promise used as a cancellation signal:\n *     if resolved before the server is ready, the wait will be terminated\n *     early with a {@link promise.CancellationError}.\n * @return {!Promise} A promise that will resolve when the server is ready, or\n *     if the wait is cancelled.\n */\nexports.waitForServer = function(url, timeout, opt_cancelToken) {\n  return new Promise((onResolve, onReject) => {\n    let start = Date.now();\n\n    let done = false;\n    let resolve = (status) => {\n      done = true;\n      onResolve(status);\n    };\n    let reject = (err) => {\n      done = true;\n      onReject(err);\n    };\n\n    if (opt_cancelToken) {\n      opt_cancelToken.then(_ => reject(new promise.CancellationError));\n    }\n\n    checkServerStatus();\n    function checkServerStatus() {\n      return getStatus(url).then(status => resolve(status), onError);\n    }\n\n    function onError(e) {\n      // Some servers don't support the status command. If they are able to\n      // response with an error, then can consider the server ready.\n      if (e instanceof error.UnsupportedOperationError) {\n        resolve({});\n        return;\n      }\n\n      if (Date.now() - start > timeout) {\n        reject(Error('Timed out waiting for the WebDriver server at ' + url));\n      } else {\n        setTimeout(function() {\n          if (!done) {\n            checkServerStatus();\n          }\n        }, 50);\n      }\n    }\n  });\n};\n\n\n/**\n * Polls a URL with GET requests until it returns a 2xx response or the\n * timeout expires.\n * @param {string} url The URL to poll.\n * @param {number} timeout How long to wait, in milliseconds.\n * @param {Promise=} opt_cancelToken A promise used as a cancellation signal:\n *     if resolved before the a 2xx response is received, the wait will be\n *     terminated early with a {@link promise.CancellationError}.\n * @return {!Promise} A promise that will resolve when a 2xx is received from\n *     the given URL, or if the wait is cancelled.\n */\nexports.waitForUrl = function(url, timeout, opt_cancelToken) {\n  return new Promise((onResolve, onReject) => {\n    let client = new HttpClient(url);\n    let request = new HttpRequest('GET', '');\n    let start = Date.now();\n\n    let done = false;\n    let resolve = () => {\n      done = true;\n      onResolve();\n    };\n    let reject = (err) => {\n      done = true;\n      onReject(err);\n    };\n\n    if (opt_cancelToken) {\n      opt_cancelToken.then(_ => reject(new promise.CancellationError));\n    }\n\n    testUrl();\n\n    function testUrl() {\n      client.send(request).then(onResponse, onError);\n    }\n\n    function onError() {\n      if (Date.now() - start > timeout) {\n        reject(Error('Timed out waiting for the URL to return 2xx: ' + url));\n      } else {\n        setTimeout(function() {\n          if (!done) {\n            testUrl();\n          }\n        }, 50);\n      }\n    }\n\n    function onResponse(response) {\n      if (done) {\n        return;\n      }\n      if (response.status > 199 && response.status < 300) {\n        resolve();\n        return;\n      }\n      onError();\n    }\n  });\n};\n"]}