{"version":3,"sources":["chrome.js"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAiGA;;AAEA,MAAM,KAAK,QAAQ,IAAR,CAAX;AAAA,MACI,OAAO,QAAQ,MAAR,CADX;;AAGA,MAAM,OAAO,QAAQ,QAAR,CAAb;AAAA,MACI,KAAK,QAAQ,MAAR,CADT;AAAA,MAEI,EAAC,YAAD,EAAe,UAAf,KAA6B,QAAQ,oBAAR,CAFjC;AAAA,MAGI,UAAU,QAAQ,eAAR,CAHd;AAAA,MAII,UAAU,QAAQ,eAAR,CAJd;AAAA,MAKI,UAAU,QAAQ,eAAR,CALd;AAAA,MAMI,UAAU,QAAQ,eAAR,CANd;AAAA,MAOI,YAAY,QAAQ,iBAAR,CAPhB;AAAA,MAQI,aAAa,QAAQ,kBAAR,CARjB;AAAA,MASI,SAAS,QAAQ,UAAR,CATb;;AAYA;;;;;AAKA,MAAM,mBACF,QAAQ,QAAR,KAAqB,OAArB,GAA+B,kBAA/B,GAAoD,cADxD;;AAIA;;;;AAIA,MAAM,UAAU;AACd,cAAY,WADE;AAEd,0BAAwB,sBAFV;AAGd,0BAAwB;AAHV,CAAhB;;AAOA;;;;;AAKA,SAAS,cAAT,CAAwB,GAAxB,EAA6B;AAC3B,MAAI,SAAS,IAAI,IAAJ,CAAS,OAAO,IAAI,KAAK,UAAT,CAAoB,GAApB,CAAhB,CAAb;AACA,MAAI,WAAW,IAAI,KAAK,QAAT,CAAkB,MAAlB,CAAf;AACA,oBAAkB,QAAlB;AACA,SAAO,QAAP;AACD;;AAGD;;;;AAIA,SAAS,iBAAT,CAA2B,QAA3B,EAAqC;AACnC,WAAS,aAAT,CACI,QAAQ,UADZ,EAEI,MAFJ,EAGI,yCAHJ;AAIA,WAAS,aAAT,CACI,QAAQ,sBADZ,EAEI,KAFJ,EAGI,iDAHJ;AAIA,WAAS,aAAT,CACI,QAAQ,sBADZ,EAEI,MAFJ,EAGI,iDAHJ;AAID;;AAGD;;;;;AAKA,MAAM,cAAN,SAA6B,OAAO,aAAP,CAAqB,OAAlD,CAA0D;AACxD;;;;;;;AAOA,cAAY,OAAZ,EAAqB;AACnB,QAAI,MAAM,WAAW,GAAG,UAAH,CAAc,gBAAd,EAAgC,IAAhC,CAArB;AACA,QAAI,CAAC,GAAL,EAAU;AACR,YAAM,MACF,qEACA,uDADA,GAEA,mEAFA,GAGA,+BAJE,CAAN;AAKD;;AAED,UAAM,GAAN;AACA,SAAK,WAAL,CAAiB,IAAjB,EAXmB,CAWM;AAC1B;;AAED;;;;;;;;AAQA,aAAW,IAAX,EAAiB;AACf,WAAO,KAAK,YAAL,CAAkB,gBAAgB,IAAlC,CAAP;AACD;;AAED;;;;;;AAMA,YAAU,IAAV,EAAgB;AACd,WAAO,KAAK,YAAL,CAAkB,gBAAgB,IAAlC,CAAP;AACD;;AAED;;;;AAIA,yBAAuB;AACrB,WAAO,KAAK,YAAL,CAAkB,WAAlB,CAAP;AACD;;AAED;;;;;;AAMA,oBAAkB,CAAlB,EAAqB;AACnB,WAAO,KAAK,YAAL,CAAkB,oBAAoB,CAAtC,CAAP;AACD;;AAED;;;AAGA,UAAQ,IAAR,EAAc;AACZ,UAAM,OAAN,CAAc,IAAd;AACA,WAAO,KAAK,YAAL,CAAkB,gBAAgB,IAAlC,CAAP;AACD;AApEuD;;AAyE1D;AACA,IAAI,iBAAiB,IAArB;;AAGA;;;;;AAKA,SAAS,iBAAT,CAA2B,OAA3B,EAAoC;AAClC,MAAI,kBAAkB,eAAe,SAAf,EAAtB,EAAkD;AAChD,UAAM,MACF,sEACA,gEAFE,CAAN;AAGD;AACD,mBAAiB,OAAjB;AACD;;AAGD;;;;;;AAMA,SAAS,iBAAT,GAA6B;AAC3B,MAAI,CAAC,cAAL,EAAqB;AACnB,qBAAiB,IAAI,cAAJ,GAAqB,KAArB,EAAjB;AACD;AACD,SAAO,cAAP;AACD;;AAGD;;;;AAIA,IAAI,yBAAyB,eAA7B;;AAGA;;;AAGA,MAAM,OAAN,CAAc;AACZ,gBAAc;AACZ;AACA,SAAK,QAAL,GAAgB,EAAhB;;AAEA;AACA,SAAK,WAAL,GAAmB,EAAnB;;AAEA;AACA,SAAK,SAAL,GAAiB,IAAjB;;AAEA;AACA,SAAK,MAAL,GAAc,IAAd;AACD;;AAED;;;;;;AAMA,SAAO,gBAAP,CAAwB,IAAxB,EAA8B;AAC5B,QAAI,UAAU,IAAI,OAAJ,EAAd;;AAEA,QAAI,IAAI,KAAK,GAAL,CAAS,sBAAT,CAAR;AACA,QAAI,aAAa,OAAjB,EAA0B;AACxB,gBAAU,CAAV;AACD,KAFD,MAEO,IAAI,CAAJ,EAAO;AACZ,cACI,YADJ,CACiB,EAAE,IAAF,IAAU,EAD3B,EAEI,aAFJ,CAEkB,EAAE,UAAF,IAAgB,EAFlC,EAGI,YAHJ,CAGiB,EAAE,MAHnB,EAII,eAJJ,CAIoB,EAAE,eAAF,IAAqB,EAJzC,EAKI,mBALJ,CAKwB,EAAE,MAL1B,EAMI,gBANJ,CAMqB,EAAE,OANvB,EAOI,qBAPJ,CAO0B,EAAE,YAP5B,EAQI,aARJ,CAQkB,EAAE,UARpB,EASI,kBATJ,CASuB,EAAE,eATzB,EAUI,kBAVJ,CAUuB,EAAE,KAVzB,EAWI,mBAXJ,CAWwB,EAAE,gBAX1B;AAYD;;AAED,QAAI,KAAK,GAAL,CAAS,WAAW,KAApB,CAAJ,EAAgC;AAC9B,cAAQ,QAAR,CAAiB,KAAK,GAAL,CAAS,WAAW,KAApB,CAAjB;AACD;;AAED,QAAI,KAAK,GAAL,CAAS,WAAW,aAApB,CAAJ,EAAwC;AACtC,cAAQ,eAAR,CACI,KAAK,GAAL,CAAS,WAAW,aAApB,CADJ;AAED;;AAED,WAAO,OAAP;AACD;;AAED;;;;;;;;AAQA,eAAa,QAAb,EAAuB;AACrB,QAAI,OAAO,KAAK,QAAL,CAAc,IAAd,IAAsB,EAAjC;AACA,WAAO,KAAK,MAAL,CAAY,KAAZ,CAAkB,IAAlB,EAAwB,SAAxB,CAAP;AACA,QAAI,KAAK,MAAT,EAAiB;AACf,WAAK,QAAL,CAAc,IAAd,GAAqB,IAArB;AACD;AACD,WAAO,IAAP;AACD;;AAED;;;;;;;AAOA,kBAAgB,QAAhB,EAA0B;AACxB,QAAI,WAAW,KAAK,QAAL,CAAc,eAAd,IAAiC,EAAhD;AACA,eAAW,SAAS,MAAT,CAAgB,KAAhB,CAAsB,QAAtB,EAAgC,SAAhC,CAAX;AACA,QAAI,SAAS,MAAb,EAAqB;AACnB,WAAK,QAAL,CAAc,eAAd,GAAgC,QAAhC;AACD;AACD,WAAO,IAAP;AACD;;AAED;;;;;;;;AAQA,gBAAc,QAAd,EAAwB;AACtB,SAAK,WAAL,GACI,KAAK,WAAL,CAAiB,MAAjB,CAAwB,KAAxB,CAA8B,KAAK,WAAnC,EAAgD,SAAhD,CADJ;AAEA,WAAO,IAAP;AACD;;AAED;;;;;;;;;;;AAWA,sBAAoB,IAApB,EAA0B;AACxB,SAAK,QAAL,CAAc,MAAd,GAAuB,IAAvB;AACA,WAAO,IAAP;AACD;;AAED;;;;;;;;AAQA,eAAa,MAAb,EAAqB;AACnB,SAAK,QAAL,CAAc,MAAd,GAAuB,MAAvB;AACA,WAAO,IAAP;AACD;;AAED;;;;;;AAMA,qBAAmB,KAAnB,EAA0B;AACxB,SAAK,QAAL,CAAc,KAAd,GAAsB,KAAtB;AACA,WAAO,IAAP;AACD;;AAED;;;;;AAKA,kBAAgB,KAAhB,EAAuB;AACrB,SAAK,SAAL,GAAiB,KAAjB;AACA,WAAO,IAAP;AACD;;AAED;;;;;;;;;;;;;;;;;;;;;;;;AAwBA,sBAAoB,KAApB,EAA2B;AACzB,SAAK,QAAL,CAAc,gBAAd,GAAiC,KAAjC;AACA,WAAO,IAAP;AACD;;AAED;;;;;;AAMA,gBAAc,KAAd,EAAqB;AACnB,SAAK,QAAL,CAAc,UAAd,GAA2B,KAA3B;AACA,WAAO,IAAP;AACD;;AAED;;;;;;;;AAQA,kBAAgB,IAAhB,EAAsB;AACpB,SAAK,QAAL,CAAc,eAAd,GAAgC,IAAhC;AACA,WAAO,IAAP;AACD;;AAED;;;;;;;;AAQA,sBAAoB,MAApB,EAA4B;AAC1B,SAAK,QAAL,CAAc,mBAAd,GAAoC,MAApC;AACA,WAAO,IAAP;AACD;;AAED;;;;;;AAMA,kBAAgB;AACd,WAAO,KAAK,cAAL,CAAoB,oBAApB,CAAP;AACD;;AAED;;;;;;;AAOA,iBAAe,GAAf,EAAoB;AAClB,SAAK,QAAL,CAAc,cAAd,GAA+B,GAA/B;AACA,WAAO,IAAP;AACD;;AAED;;;;;;;;AAQA,iBAAe,WAAf,EAA4B;AAC1B,SAAK,QAAL,CAAc,cAAd,GAA+B,WAA/B;AACA,WAAO,IAAP;AACD;;AAED;;;;;;;;AAQA,uBAAqB,UAArB,EAAiC;AAC/B,SAAK,QAAL,CAAc,oBAAd,GAAqC,UAArC;AACA,WAAO,IAAP;AACD;;AAED;;;;;;AAMA,mBAAiB,IAAjB,EAAuB;AACrB,SAAK,QAAL,CAAc,OAAd,GAAwB,IAAxB;AACA,WAAO,IAAP;AACD;;AAED;;;;;;AAMA,wBAAsB,IAAtB,EAA4B;AAC1B,SAAK,QAAL,CAAc,YAAd,GAA6B,IAA7B;AACA,WAAO,IAAP;AACD;;AAED;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAoCA,qBAAmB,MAAnB,EAA2B;AACzB,SAAK,QAAL,CAAc,eAAd,GAAgC,MAAhC;AACA,WAAO,IAAP;AACD;;AAED;;;;;;AAMA,WAAS,KAAT,EAAgB;AACd,SAAK,MAAL,GAAc,KAAd;AACA,WAAO,IAAP;AACD;;AAED;;;;;;AAMA,iBAAe,gBAAf,EAAiC;AAC/B,QAAI,OAAO,oBAAoB,aAAa,MAAb,EAA/B;AACA,SACI,GADJ,CACQ,WAAW,KADnB,EAC0B,KAAK,MAD/B,EAEI,GAFJ,CAEQ,WAAW,aAFnB,EAEkC,KAAK,SAFvC,EAGI,GAHJ,CAGQ,sBAHR,EAGgC,IAHhC;AAIA,WAAO,IAAP;AACD;;AAED;;;;;AAKA,GAAC,QAAQ,SAAT,IAAsB;AACpB,QAAI,OAAO,EAAX;AACA,SAAK,IAAI,GAAT,IAAgB,KAAK,QAArB,EAA+B;AAC7B,UAAI,KAAK,QAAL,CAAc,GAAd,KAAsB,IAA1B,EAAgC;AAC9B,aAAK,GAAL,IAAY,KAAK,QAAL,CAAc,GAAd,CAAZ;AACD;AACF;AACD,QAAI,KAAK,WAAL,CAAiB,MAArB,EAA6B;AAC3B,WAAK,UAAL,GAAkB,KAAK,WAAL,CAAiB,GAAjB,CAAqB,UAAS,SAAT,EAAoB;AACzD,YAAI,OAAO,QAAP,CAAgB,SAAhB,CAAJ,EAAgC;AAC9B,iBAAO,UAAU,QAAV,CAAmB,QAAnB,CAAP;AACD;AACD,eAAO,GAAG,IAAH,EAAQ,qBAAsB,SAA9B,EACF,IADE,CACG,UAAU,OAAO,QAAP,CAAgB,QAAhB,CADb,CAAP;AAED,OANiB,CAAlB;AAOD;AACD,WAAO,IAAP;AACD;AAxXW;;AA4Xd;;;AAGA,MAAM,MAAN,SAAqB,UAAU,SAA/B,CAAyC;;AAEvC;;;;;;;;;;;;;AAaA,SAAO,aAAP,CAAqB,UAArB,EAAiC,mBAAjC,EAAsD,QAAtD,EAAgE;AAC9D,QAAI,QAAJ;AACA,QAAI,+BAA+B,KAAK,QAAxC,EAAkD;AAChD,iBAAW,mBAAX;AACA,wBAAkB,QAAlB;AACD,KAHD,MAGO;AACL,UAAI,UAAU,uBAAuB,mBAArC;AACA,iBAAW,eAAe,QAAQ,KAAR,EAAf,CAAX;AACD;;AAED,QAAI,OACA,sBAAsB,OAAtB,GAAgC,WAAW,cAAX,EAAhC,GACC,cAAc,aAAa,MAAb,EAFnB;;AAIA,WAAO,uBACH,UAAU,SAAV,CAAoB,aAApB,CAAkC,QAAlC,EAA4C,IAA5C,EAAkD,QAAlD,EAA4D,IAA5D;AADJ;AAED;;AAED;;;;;AAKA,oBAAkB,CAAE;;AAEpB;;;;;;AAMA,YAAU,EAAV,EAAc;AACZ,WAAO,KAAK,QAAL,CACH,IAAI,QAAQ,OAAZ,CAAoB,QAAQ,UAA5B,EAAwC,YAAxC,CAAqD,IAArD,EAA2D,EAA3D,CADG,EAEH,oBAFG,CAAP;AAGD;;AAED;;;;;AAKA,yBAAuB;AACrB,WAAO,KAAK,QAAL,CACH,IAAI,QAAQ,OAAZ,CAAoB,QAAQ,sBAA5B,CADG,EAEH,+BAFG,CAAP;AAGD;;AAED;;;;;;;;;;;;;;;;AAgBA,uBAAqB,IAArB,EAA2B;AACzB,QAAI,CAAC,IAAD,IAAS,OAAO,IAAP,KAAgB,QAA7B,EAAuC;AACrC,YAAM,UAAU,mEAAV,CAAN;AACD;;AAED,WAAO,KAAK,QAAL,CACH,IAAI,QAAQ,OAAZ,CAAoB,QAAQ,sBAA5B,EAAoD,YAApD,CAAiE,oBAAjE,EAAuF,IAAvF,CADG,EAEH,iCAAiC,KAAK,SAAL,CAAe,IAAf,CAAjC,GAAwD,GAFrD,CAAP;AAGD;AAvFsC;;AA2FzC;;;AAGA,QAAQ,MAAR,GAAiB,MAAjB;AACA,QAAQ,OAAR,GAAkB,OAAlB;AACA,QAAQ,cAAR,GAAyB,cAAzB;AACA,QAAQ,iBAAR,GAA4B,iBAA5B;AACA,QAAQ,iBAAR,GAA4B,iBAA5B","file":"chrome-compiled.js","sourcesContent":["// Licensed to the Software Freedom Conservancy (SFC) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The SFC licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\n/**\n * @fileoverview Defines a {@linkplain Driver WebDriver} client for the Chrome\n * web browser. Before using this module, you must download the latest\n * [ChromeDriver release] and ensure it can be found on your system [PATH].\n *\n * There are three primary classes exported by this module:\n *\n * 1. {@linkplain ServiceBuilder}: configures the\n *     {@link selenium-webdriver/remote.DriverService remote.DriverService}\n *     that manages the [ChromeDriver] child process.\n *\n * 2. {@linkplain Options}: defines configuration options for each new Chrome\n *     session, such as which {@linkplain Options#setProxy proxy} to use,\n *     what {@linkplain Options#addExtensions extensions} to install, or\n *     what {@linkplain Options#addArguments command-line switches} to use when\n *     starting the browser.\n *\n * 3. {@linkplain Driver}: the WebDriver client; each new instance will control\n *     a unique browser session with a clean user profile (unless otherwise\n *     configured through the {@link Options} class).\n *\n * __Customizing the ChromeDriver Server__ <a id=\"custom-server\"></a>\n *\n * By default, every Chrome session will use a single driver service, which is\n * started the first time a {@link Driver} instance is created and terminated\n * when this process exits. The default service will inherit its environment\n * from the current process and direct all output to /dev/null. You may obtain\n * a handle to this default service using\n * {@link #getDefaultService getDefaultService()} and change its configuration\n * with {@link #setDefaultService setDefaultService()}.\n *\n * You may also create a {@link Driver} with its own driver service. This is\n * useful if you need to capture the server's log output for a specific session:\n *\n *     let chrome = require('selenium-webdriver/chrome');\n *\n *     let service = new chrome.ServiceBuilder()\n *         .loggingTo('/my/log/file.txt')\n *         .enableVerboseLogging()\n *         .build();\n *\n *     let options = new chrome.Options();\n *     // configure browser options ...\n *\n *     let driver = chrome.Driver.createSession(options, service);\n *\n * Users should only instantiate the {@link Driver} class directly when they\n * need a custom driver service configuration (as shown above). For normal\n * operation, users should start Chrome using the\n * {@link selenium-webdriver.Builder}.\n *\n * __Working with Android__ <a id=\"android\"></a>\n *\n * The [ChromeDriver][android] supports running tests on the Chrome browser as\n * well as [WebView apps][webview] starting in Android 4.4 (KitKat). In order to\n * work with Android, you must first start the adb\n *\n *     adb start-server\n *\n * By default, adb will start on port 5037. You may change this port, but this\n * will require configuring a [custom server](#custom-server) that will connect\n * to adb on the {@linkplain ServiceBuilder#setAdbPort correct port}:\n *\n *     let service = new chrome.ServiceBuilder()\n *         .setAdbPort(1234)\n *         build();\n *     // etc.\n *\n * The ChromeDriver may be configured to launch Chrome on Android using\n * {@link Options#androidChrome()}:\n *\n *     let driver = new Builder()\n *         .forBrowser('chrome')\n *         .setChromeOptions(new chrome.Options().androidChrome())\n *         .build();\n *\n * Alternatively, you can configure the ChromeDriver to launch an app with a\n * Chrome-WebView by setting the {@linkplain Options#androidActivity\n * androidActivity} option:\n *\n *     let driver = new Builder()\n *         .forBrowser('chrome')\n *         .setChromeOptions(new chrome.Options()\n *             .androidPackage('com.example')\n *             .androidActivity('com.example.Activity'))\n *         .build();\n *\n * [Refer to the ChromeDriver site] for more information on using the\n * [ChromeDriver with Android][android].\n *\n * [ChromeDriver]: https://sites.google.com/a/chromium.org/chromedriver/\n * [ChromeDriver release]: http://chromedriver.storage.googleapis.com/index.html\n * [PATH]: http://en.wikipedia.org/wiki/PATH_%28variable%29\n * [android]: https://sites.google.com/a/chromium.org/chromedriver/getting-started/getting-started---android\n * [webview]: https://developer.chrome.com/multidevice/webview/overview\n */\n\n'use strict';\n\nconst fs = require('fs'),\n    util = require('util');\n\nconst http = require('./http'),\n    io = require('./io'),\n    {Capabilities, Capability} = require('./lib/capabilities'),\n    command = require('./lib/command'),\n    logging = require('./lib/logging'),\n    promise = require('./lib/promise'),\n    Symbols = require('./lib/symbols'),\n    webdriver = require('./lib/webdriver'),\n    portprober = require('./net/portprober'),\n    remote = require('./remote');\n\n\n/**\n * Name of the ChromeDriver executable.\n * @type {string}\n * @const\n */\nconst CHROMEDRIVER_EXE =\n    process.platform === 'win32' ? 'chromedriver.exe' : 'chromedriver';\n\n\n/**\n * Custom command names supported by ChromeDriver.\n * @enum {string}\n */\nconst Command = {\n  LAUNCH_APP: 'launchApp',\n  GET_NETWORK_CONDITIONS: 'getNetworkConditions',\n  SET_NETWORK_CONDITIONS: 'setNetworkConditions'\n};\n\n\n/**\n * Creates a command executor with support for ChromeDriver's custom commands.\n * @param {!Promise<string>} url The server's URL.\n * @return {!command.Executor} The new command executor.\n */\nfunction createExecutor(url) {\n  let client = url.then(url => new http.HttpClient(url));\n  let executor = new http.Executor(client);\n  configureExecutor(executor);\n  return executor;\n}\n\n\n/**\n * Configures the given executor with Chrome-specific commands.\n * @param {!http.Executor} executor the executor to configure.\n */\nfunction configureExecutor(executor) {\n  executor.defineCommand(\n      Command.LAUNCH_APP,\n      'POST',\n      '/session/:sessionId/chromium/launch_app');\n  executor.defineCommand(\n      Command.GET_NETWORK_CONDITIONS,\n      'GET',\n      '/session/:sessionId/chromium/network_conditions');\n  executor.defineCommand(\n      Command.SET_NETWORK_CONDITIONS,\n      'POST',\n      '/session/:sessionId/chromium/network_conditions');\n}\n\n\n/**\n * Creates {@link selenium-webdriver/remote.DriverService} instances that manage\n * a [ChromeDriver](https://sites.google.com/a/chromium.org/chromedriver/)\n * server in a child process.\n */\nclass ServiceBuilder extends remote.DriverService.Builder {\n  /**\n   * @param {string=} opt_exe Path to the server executable to use. If omitted,\n   *     the builder will attempt to locate the chromedriver on the current\n   *     PATH.\n   * @throws {Error} If provided executable does not exist, or the chromedriver\n   *     cannot be found on the PATH.\n   */\n  constructor(opt_exe) {\n    let exe = opt_exe || io.findInPath(CHROMEDRIVER_EXE, true);\n    if (!exe) {\n      throw Error(\n          'The ChromeDriver could not be found on the current PATH. Please ' +\n          'download the latest version of the ChromeDriver from ' +\n          'http://chromedriver.storage.googleapis.com/index.html and ensure ' +\n          'it can be found on your PATH.');\n    }\n\n    super(exe);\n    this.setLoopback(true);  // Required\n  }\n\n  /**\n   * Sets which port adb is listening to. _The ChromeDriver will connect to adb\n   * if an {@linkplain Options#androidPackage Android session} is requested, but\n   * adb **must** be started beforehand._\n   *\n   * @param {number} port Which port adb is running on.\n   * @return {!ServiceBuilder} A self reference.\n   */\n  setAdbPort(port) {\n    return this.addArguments('--adb-port=' + port);\n  }\n\n  /**\n   * Sets the path of the log file the driver should log to. If a log file is\n   * not specified, the driver will log to stderr.\n   * @param {string} path Path of the log file to use.\n   * @return {!ServiceBuilder} A self reference.\n   */\n  loggingTo(path) {\n    return this.addArguments('--log-path=' + path);\n  }\n\n  /**\n   * Enables verbose logging.\n   * @return {!ServiceBuilder} A self reference.\n   */\n  enableVerboseLogging() {\n    return this.addArguments('--verbose');\n  }\n\n  /**\n   * Sets the number of threads the driver should use to manage HTTP requests.\n   * By default, the driver will use 4 threads.\n   * @param {number} n The number of threads to use.\n   * @return {!ServiceBuilder} A self reference.\n   */\n  setNumHttpThreads(n) {\n    return this.addArguments('--http-threads=' + n);\n  }\n\n  /**\n   * @override\n   */\n  setPath(path) {\n    super.setPath(path);\n    return this.addArguments('--url-base=' + path);\n  }\n}\n\n\n\n/** @type {remote.DriverService} */\nlet defaultService = null;\n\n\n/**\n * Sets the default service to use for new ChromeDriver instances.\n * @param {!remote.DriverService} service The service to use.\n * @throws {Error} If the default service is currently running.\n */\nfunction setDefaultService(service) {\n  if (defaultService && defaultService.isRunning()) {\n    throw Error(\n        'The previously configured ChromeDriver service is still running. ' +\n        'You must shut it down before you may adjust its configuration.');\n  }\n  defaultService = service;\n}\n\n\n/**\n * Returns the default ChromeDriver service. If such a service has not been\n * configured, one will be constructed using the default configuration for\n * a ChromeDriver executable found on the system PATH.\n * @return {!remote.DriverService} The default ChromeDriver service.\n */\nfunction getDefaultService() {\n  if (!defaultService) {\n    defaultService = new ServiceBuilder().build();\n  }\n  return defaultService;\n}\n\n\n/**\n * @type {string}\n * @const\n */\nlet OPTIONS_CAPABILITY_KEY = 'chromeOptions';\n\n\n/**\n * Class for managing ChromeDriver specific options.\n */\nclass Options {\n  constructor() {\n    /** @private {!Object} */\n    this.options_ = {};\n\n    /** @private {!Array<(string|!Buffer)>} */\n    this.extensions_ = [];\n\n    /** @private {?logging.Preferences} */\n    this.logPrefs_ = null;\n\n    /** @private {?./lib/capabilities.ProxyConfig} */\n    this.proxy_ = null;\n  }\n\n  /**\n   * Extracts the ChromeDriver specific options from the given capabilities\n   * object.\n   * @param {!Capabilities} caps The capabilities object.\n   * @return {!Options} The ChromeDriver options.\n   */\n  static fromCapabilities(caps) {\n    let options = new Options();\n\n    let o = caps.get(OPTIONS_CAPABILITY_KEY);\n    if (o instanceof Options) {\n      options = o;\n    } else if (o) {\n      options.\n          addArguments(o.args || []).\n          addExtensions(o.extensions || []).\n          detachDriver(o.detach).\n          excludeSwitches(o.excludeSwitches || []).\n          setChromeBinaryPath(o.binary).\n          setChromeLogFile(o.logPath).\n          setChromeMinidumpPath(o.minidumpPath).\n          setLocalState(o.localState).\n          setMobileEmulation(o.mobileEmulation).\n          setUserPreferences(o.prefs).\n          setPerfLoggingPrefs(o.perfLoggingPrefs);\n    }\n\n    if (caps.has(Capability.PROXY)) {\n      options.setProxy(caps.get(Capability.PROXY));\n    }\n\n    if (caps.has(Capability.LOGGING_PREFS)) {\n      options.setLoggingPrefs(\n          caps.get(Capability.LOGGING_PREFS));\n    }\n\n    return options;\n  }\n\n  /**\n   * Add additional command line arguments to use when launching the Chrome\n   * browser.  Each argument may be specified with or without the \"--\" prefix\n   * (e.g. \"--foo\" and \"foo\"). Arguments with an associated value should be\n   * delimited by an \"=\": \"foo=bar\".\n   * @param {...(string|!Array<string>)} var_args The arguments to add.\n   * @return {!Options} A self reference.\n   */\n  addArguments(var_args) {\n    let args = this.options_.args || [];\n    args = args.concat.apply(args, arguments);\n    if (args.length) {\n      this.options_.args = args;\n    }\n    return this;\n  }\n\n  /**\n   * List of Chrome command line switches to exclude that ChromeDriver by default\n   * passes when starting Chrome.  Do not prefix switches with \"--\".\n   *\n   * @param {...(string|!Array<string>)} var_args The switches to exclude.\n   * @return {!Options} A self reference.\n   */\n  excludeSwitches(var_args) {\n    let switches = this.options_.excludeSwitches || [];\n    switches = switches.concat.apply(switches, arguments);\n    if (switches.length) {\n      this.options_.excludeSwitches = switches;\n    }\n    return this;\n  }\n\n  /**\n   * Add additional extensions to install when launching Chrome. Each extension\n   * should be specified as the path to the packed CRX file, or a Buffer for an\n   * extension.\n   * @param {...(string|!Buffer|!Array<(string|!Buffer)>)} var_args The\n   *     extensions to add.\n   * @return {!Options} A self reference.\n   */\n  addExtensions(var_args) {\n    this.extensions_ =\n        this.extensions_.concat.apply(this.extensions_, arguments);\n    return this;\n  }\n\n  /**\n   * Sets the path to the Chrome binary to use. On Mac OS X, this path should\n   * reference the actual Chrome executable, not just the application binary\n   * (e.g. \"/Applications/Google Chrome.app/Contents/MacOS/Google Chrome\").\n   *\n   * The binary path be absolute or relative to the chromedriver server\n   * executable, but it must exist on the machine that will launch Chrome.\n   *\n   * @param {string} path The path to the Chrome binary to use.\n   * @return {!Options} A self reference.\n   */\n  setChromeBinaryPath(path) {\n    this.options_.binary = path;\n    return this;\n  }\n\n  /**\n   * Sets whether to leave the started Chrome browser running if the controlling\n   * ChromeDriver service is killed before {@link webdriver.WebDriver#quit()} is\n   * called.\n   * @param {boolean} detach Whether to leave the browser running if the\n   *     chromedriver service is killed before the session.\n   * @return {!Options} A self reference.\n   */\n  detachDriver(detach) {\n    this.options_.detach = detach;\n    return this;\n  }\n\n  /**\n   * Sets the user preferences for Chrome's user profile. See the \"Preferences\"\n   * file in Chrome's user data directory for examples.\n   * @param {!Object} prefs Dictionary of user preferences to use.\n   * @return {!Options} A self reference.\n   */\n  setUserPreferences(prefs) {\n    this.options_.prefs = prefs;\n    return this;\n  }\n\n  /**\n   * Sets the logging preferences for the new session.\n   * @param {!logging.Preferences} prefs The logging preferences.\n   * @return {!Options} A self reference.\n   */\n  setLoggingPrefs(prefs) {\n    this.logPrefs_ = prefs;\n    return this;\n  }\n\n  /**\n   * Sets the performance logging preferences. Options include:\n   *\n   * - `enableNetwork`: Whether or not to collect events from Network domain.\n   * - `enablePage`: Whether or not to collect events from Page domain.\n   * - `enableTimeline`: Whether or not to collect events from Timeline domain.\n   *     Note: when tracing is enabled, Timeline domain is implicitly disabled,\n   *     unless `enableTimeline` is explicitly set to true.\n   * - `tracingCategories`: A comma-separated string of Chrome tracing\n   *     categories for which trace events should be collected. An unspecified\n   *     or empty string disables tracing.\n   * - `bufferUsageReportingInterval`: The requested number of milliseconds\n   *     between DevTools trace buffer usage events. For example, if 1000, then\n   *     once per second, DevTools will report how full the trace buffer is. If\n   *     a report indicates the buffer usage is 100%, a warning will be issued.\n   *\n   * @param {{enableNetwork: boolean,\n   *          enablePage: boolean,\n   *          enableTimeline: boolean,\n   *          tracingCategories: string,\n   *          bufferUsageReportingInterval: number}} prefs The performance\n   *     logging preferences.\n   * @return {!Options} A self reference.\n   */\n  setPerfLoggingPrefs(prefs) {\n    this.options_.perfLoggingPrefs = prefs;\n    return this;\n  }\n\n  /**\n   * Sets preferences for the \"Local State\" file in Chrome's user data\n   * directory.\n   * @param {!Object} state Dictionary of local state preferences.\n   * @return {!Options} A self reference.\n   */\n  setLocalState(state) {\n    this.options_.localState = state;\n    return this;\n  }\n\n  /**\n   * Sets the name of the activity hosting a Chrome-based Android WebView. This\n   * option must be set to connect to an [Android WebView](\n   * https://sites.google.com/a/chromium.org/chromedriver/getting-started/getting-started---android)\n   *\n   * @param {string} name The activity name.\n   * @return {!Options} A self reference.\n   */\n  androidActivity(name) {\n    this.options_.androidActivity = name;\n    return this;\n  }\n\n  /**\n   * Sets the device serial number to connect to via ADB. If not specified, the\n   * ChromeDriver will select an unused device at random. An error will be\n   * returned if all devices already have active sessions.\n   *\n   * @param {string} serial The device serial number to connect to.\n   * @return {!Options} A self reference.\n   */\n  androidDeviceSerial(serial) {\n    this.options_.androidDeviceSerial = serial;\n    return this;\n  }\n\n  /**\n   * Configures the ChromeDriver to launch Chrome on Android via adb. This\n   * function is shorthand for\n   * {@link #androidPackage options.androidPackage('com.android.chrome')}.\n   * @return {!Options} A self reference.\n   */\n  androidChrome() {\n    return this.androidPackage('com.android.chrome');\n  }\n\n  /**\n   * Sets the package name of the Chrome or WebView app.\n   *\n   * @param {?string} pkg The package to connect to, or `null` to disable Android\n   *     and switch back to using desktop Chrome.\n   * @return {!Options} A self reference.\n   */\n  androidPackage(pkg) {\n    this.options_.androidPackage = pkg;\n    return this;\n  }\n\n  /**\n   * Sets the process name of the Activity hosting the WebView (as given by\n   * `ps`). If not specified, the process name is assumed to be the same as\n   * {@link #androidPackage}.\n   *\n   * @param {string} processName The main activity name.\n   * @return {!Options} A self reference.\n   */\n  androidProcess(processName) {\n    this.options_.androidProcess = processName;\n    return this;\n  }\n\n  /**\n   * Sets whether to connect to an already-running instead of the specified\n   * {@linkplain #androidProcess app} instead of launching the app with a clean\n   * data directory.\n   *\n   * @param {boolean} useRunning Whether to connect to a running instance.\n   * @return {!Options} A self reference.\n   */\n  androidUseRunningApp(useRunning) {\n    this.options_.androidUseRunningApp = useRunning;\n    return this;\n  }\n\n  /**\n   * Sets the path to Chrome's log file. This path should exist on the machine\n   * that will launch Chrome.\n   * @param {string} path Path to the log file to use.\n   * @return {!Options} A self reference.\n   */\n  setChromeLogFile(path) {\n    this.options_.logPath = path;\n    return this;\n  }\n\n  /**\n   * Sets the directory to store Chrome minidumps in. This option is only\n   * supported when ChromeDriver is running on Linux.\n   * @param {string} path The directory path.\n   * @return {!Options} A self reference.\n   */\n  setChromeMinidumpPath(path) {\n    this.options_.minidumpPath = path;\n    return this;\n  }\n\n  /**\n   * Configures Chrome to emulate a mobile device. For more information, refer\n   * to the ChromeDriver project page on [mobile emulation][em]. Configuration\n   * options include:\n   *\n   * - `deviceName`: The name of a pre-configured [emulated device][devem]\n   * - `width`: screen width, in pixels\n   * - `height`: screen height, in pixels\n   * - `pixelRatio`: screen pixel ratio\n   *\n   * __Example 1: Using a Pre-configured Device__\n   *\n   *     let options = new chrome.Options().setMobileEmulation(\n   *         {deviceName: 'Google Nexus 5'});\n   *\n   *     let driver = chrome.Driver.createSession(options);\n   *\n   * __Example 2: Using Custom Screen Configuration__\n   *\n   *     let options = new chrome.Options().setMobileEmulation({\n   *         width: 360,\n   *         height: 640,\n   *         pixelRatio: 3.0\n   *     });\n   *\n   *     let driver = chrome.Driver.createSession(options);\n   *\n   *\n   * [em]: https://sites.google.com/a/chromium.org/chromedriver/mobile-emulation\n   * [devem]: https://developer.chrome.com/devtools/docs/device-mode\n   *\n   * @param {?({deviceName: string}|\n   *           {width: number, height: number, pixelRatio: number})} config The\n   *     mobile emulation configuration, or `null` to disable emulation.\n   * @return {!Options} A self reference.\n   */\n  setMobileEmulation(config) {\n    this.options_.mobileEmulation = config;\n    return this;\n  }\n\n  /**\n   * Sets the proxy settings for the new session.\n   * @param {./lib/capabilities.ProxyConfig} proxy The proxy configuration to\n   *    use.\n   * @return {!Options} A self reference.\n   */\n  setProxy(proxy) {\n    this.proxy_ = proxy;\n    return this;\n  }\n\n  /**\n   * Converts this options instance to a {@link Capabilities} object.\n   * @param {Capabilities=} opt_capabilities The capabilities to merge\n   *     these options into, if any.\n   * @return {!Capabilities} The capabilities.\n   */\n  toCapabilities(opt_capabilities) {\n    let caps = opt_capabilities || Capabilities.chrome();\n    caps.\n        set(Capability.PROXY, this.proxy_).\n        set(Capability.LOGGING_PREFS, this.logPrefs_).\n        set(OPTIONS_CAPABILITY_KEY, this);\n    return caps;\n  }\n\n  /**\n   * Converts this instance to its JSON wire protocol representation. Note this\n   * function is an implementation not intended for general use.\n   * @return {!Object} The JSON wire protocol representation of this instance.\n   */\n  [Symbols.serialize]() {\n    let json = {};\n    for (let key in this.options_) {\n      if (this.options_[key] != null) {\n        json[key] = this.options_[key];\n      }\n    }\n    if (this.extensions_.length) {\n      json.extensions = this.extensions_.map(function(extension) {\n        if (Buffer.isBuffer(extension)) {\n          return extension.toString('base64');\n        }\n        return io.read(/** @type {string} */(extension))\n            .then(buffer => buffer.toString('base64'));\n      });\n    }\n    return json;\n  }\n}\n\n\n/**\n * Creates a new WebDriver client for Chrome.\n */\nclass Driver extends webdriver.WebDriver {\n\n  /**\n   * Creates a new session with the ChromeDriver.\n   *\n   * @param {(Capabilities|Options)=} opt_config The configuration options.\n   * @param {(remote.DriverService|http.Executor)=} opt_serviceExecutor Either\n   *     a  DriverService to use for the remote end, or a preconfigured executor\n   *     for an externally managed endpoint. If neither is provided, the\n   *     {@linkplain ##getDefaultService default service} will be used by\n   *     default.\n   * @param {promise.ControlFlow=} opt_flow The control flow to use, or `null`\n   *     to use the currently active flow.\n   * @return {!Driver} A new driver instance.\n   */\n  static createSession(opt_config, opt_serviceExecutor, opt_flow) {\n    let executor;\n    if (opt_serviceExecutor instanceof http.Executor) {\n      executor = opt_serviceExecutor;\n      configureExecutor(executor);\n    } else {\n      let service = opt_serviceExecutor || getDefaultService();\n      executor = createExecutor(service.start());\n    }\n\n    let caps =\n        opt_config instanceof Options ? opt_config.toCapabilities() :\n        (opt_config || Capabilities.chrome());\n\n    return /** @type {!Driver} */(\n        webdriver.WebDriver.createSession(executor, caps, opt_flow, this));\n  }\n\n  /**\n   * This function is a no-op as file detectors are not supported by this\n   * implementation.\n   * @override\n   */\n  setFileDetector() {}\n\n  /**\n   * Schedules a command to launch Chrome App with given ID.\n   * @param {string} id ID of the App to launch.\n   * @return {!promise.Thenable<void>} A promise that will be resolved\n   *     when app is launched.\n   */\n  launchApp(id) {\n    return this.schedule(\n        new command.Command(Command.LAUNCH_APP).setParameter('id', id),\n        'Driver.launchApp()');\n  }\n  \n  /**\n   * Schedules a command to get Chrome network emulation settings.\n   * @return {!promise.Thenable<T>} A promise that will be resolved\n   *     when network emulation settings are retrievied.\n   */\n  getNetworkConditions() {\n    return this.schedule(\n        new command.Command(Command.GET_NETWORK_CONDITIONS),\n        'Driver.getNetworkConditions()');\n  }\n\n  /**\n   * Schedules a command to set Chrome network emulation settings.\n   * \n   * __Sample Usage:__\n   * \n   *  driver.setNetworkConditions({\n   *    offline: false,\n   *    latency: 5, // Additional latency (ms).\n   *    download_throughput: 500 * 1024, // Maximal aggregated download throughput.\n   *    upload_throughput: 500 * 1024 // Maximal aggregated upload throughput.\n   * });\n   * \n   * @param {Object} spec Defines the network conditions to set\n   * @return {!promise.Thenable<void>} A promise that will be resolved\n   *     when network emulation settings are set.\n   */\n  setNetworkConditions(spec) {\n    if (!spec || typeof spec !== 'object') {\n      throw TypeError('setNetworkConditions called with non-network-conditions parameter');\n    }\n\n    return this.schedule(\n        new command.Command(Command.SET_NETWORK_CONDITIONS).setParameter('network_conditions', spec),\n        'Driver.setNetworkConditions(' + JSON.stringify(spec) + ')');\n  }\n}\n\n\n// PUBLIC API\n\n\nexports.Driver = Driver;\nexports.Options = Options;\nexports.ServiceBuilder = ServiceBuilder;\nexports.getDefaultService = getDefaultService;\nexports.setDefaultService = setDefaultService;\n"]}