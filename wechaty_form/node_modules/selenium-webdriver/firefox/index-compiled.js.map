{"version":3,"sources":["index.js"],"names":[],"mappings":"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","file":"index-compiled.js","sourcesContent":["// Licensed to the Software Freedom Conservancy (SFC) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The SFC licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\n/**\n * @fileoverview Defines the {@linkplain Driver WebDriver} client for Firefox.\n * Before using this module, you must download the latest\n * [geckodriver release] and ensure it can be found on your system [PATH].\n *\n * Each FirefoxDriver instance will be created with an anonymous profile,\n * ensuring browser historys do not share session data (cookies, history, cache,\n * offline storage, etc.)\n *\n * __Customizing the Firefox Profile__\n *\n * The {@linkplain Profile} class may be used to configure the browser profile\n * used with WebDriver, with functions to install additional\n * {@linkplain Profile#addExtension extensions}, configure browser\n * {@linkplain Profile#setPreference preferences}, and more. For example, you\n * may wish to include Firebug:\n *\n *     const {Builder} = require('selenium-webdriver');\n *     const firefox = require('selenium-webdriver/firefox');\n *\n *     let profile = new firefox.Profile();\n *     profile.addExtension('/path/to/firebug.xpi');\n *     profile.setPreference('extensions.firebug.showChromeErrors', true);\n *\n *     let options = new firefox.Options().setProfile(profile);\n *     let driver = new Builder()\n *         .forBrowser('firefox')\n *         .setFirefoxOptions(options)\n *         .build();\n *\n * The {@linkplain Profile} class may also be used to configure WebDriver based\n * on a pre-existing browser profile:\n *\n *     let profile = new firefox.Profile(\n *         '/usr/local/home/bob/.mozilla/firefox/3fgog75h.testing');\n *     let options = new firefox.Options().setProfile(profile);\n *\n * The FirefoxDriver will _never_ modify a pre-existing profile; instead it will\n * create a copy for it to modify. By extension, there are certain browser\n * preferences that are required for WebDriver to function properly and they\n * will always be overwritten.\n *\n * __Using a Custom Firefox Binary__\n *\n * On Windows and MacOS, the FirefoxDriver will search for Firefox in its\n * default installation location:\n *\n * - Windows: C:\\Program Files and C:\\Program Files (x86).\n * - MacOS: /Applications/Firefox.app\n *\n * For Linux, Firefox will always be located on the PATH: `$(where firefox)`.\n *\n * Several methods are provided for starting Firefox with a custom executable.\n * First, on Windows and MacOS, you may configure WebDriver to check the default\n * install location for a non-release channel. If the requested channel cannot\n * be found in its default location, WebDriver will fallback to searching your\n * PATH. _Note:_ on Linux, Firefox is _always_ located on your path, regardless\n * of the requested channel.\n *\n *     const {Builder} = require('selenium-webdriver');\n *     const firefox = require('selenium-webdriver/firefox');\n *\n *     let options = new firefox.Options().setBinary(firefox.Channel.NIGHTLY);\n *     let driver = new Builder()\n *         .forBrowser('firefox')\n *         .setFirefoxOptions(options)\n *         .build();\n *\n * On all platforms, you may configrue WebDriver to use a Firefox specific\n * executable:\n *\n *     let options = new firefox.Options()\n *         .setBinary('/my/firefox/install/dir/firefox-bin');\n *\n * __Remote Testing__\n *\n * You may customize the Firefox binary and profile when running against a\n * remote Selenium server. Your custom profile will be packaged as a zip and\n * transfered to the remote host for use. The profile will be transferred\n * _once for each new session_. The performance impact should be minimal if\n * you've only configured a few extra browser preferences. If you have a large\n * profile with several extensions, you should consider installing it on the\n * remote host and defining its path via the {@link Options} class. Custom\n * binaries are never copied to remote machines and must be referenced by\n * installation path.\n *\n *     const {Builder} = require('selenium-webdriver');\n *     const firefox = require('selenium-webdriver/firefox');\n *\n *     let options = new firefox.Options()\n *         .setProfile('/profile/path/on/remote/host')\n *         .setBinary('/install/dir/on/remote/host/firefox-bin');\n *\n *     let driver = new Builder()\n *         .forBrowser('firefox')\n *         .usingServer('http://127.0.0.1:4444/wd/hub')\n *         .setFirefoxOptions(options)\n *         .build();\n *\n * __Testing Older Versions of Firefox__\n *\n * To test versions of Firefox prior to Firefox 47, you must disable the use of\n * the geckodriver using the {@link Options} class.\n *\n *     let options = new firefox.Options().useGeckoDriver(false);\n *\n * Alternatively, you may disable the geckodriver at runtime by setting the\n * environment variable `SELENIUM_MARIONETTE=false`.\n *\n * [geckodriver release]: https://github.com/mozilla/geckodriver/releases/\n * [PATH]: http://en.wikipedia.org/wiki/PATH_%28variable%29\n */\n\n'use strict';\n\nconst url = require('url');\n\nconst {Binary, Channel} = require('./binary'),\n    Profile = require('./profile').Profile,\n    decodeProfile = require('./profile').decode,\n    http = require('../http'),\n    httpUtil = require('../http/util'),\n    io = require('../io'),\n    capabilities = require('../lib/capabilities'),\n    command = require('../lib/command'),\n    logging = require('../lib/logging'),\n    promise = require('../lib/promise'),\n    webdriver = require('../lib/webdriver'),\n    net = require('../net'),\n    portprober = require('../net/portprober'),\n    remote = require('../remote');\n\n\n/**\n * Firefox-specific capability keys. Users should use the {@linkplain Options}\n * class instead of referencing these keys directly. _These keys are considered\n * implementation details and may be removed or changed at any time._\n *\n * @enum {string}\n */\nconst Capability = {\n  /**\n   * Defines the Firefox binary to use. May be set to either a\n   * {@linkplain Binary} instance, or a string path to the Firefox executable.\n   */\n  BINARY: 'firefox_binary',\n\n  /**\n   * Specifies whether to use Mozilla's Marionette, or the legacy FirefoxDriver\n   * from the Selenium project. Defaults to false.\n   */\n  MARIONETTE: 'marionette',\n\n  /**\n   * Defines the Firefox profile to use. May be set to either a\n   * {@linkplain Profile} instance, or to a base-64 encoded zip of a profile\n   * directory.\n   */\n  PROFILE: 'firefox_profile'\n};\n\n\n/**\n * Configuration options for the FirefoxDriver.\n */\nclass Options {\n  constructor() {\n    /** @private {Profile} */\n    this.profile_ = null;\n\n    /** @private {Binary} */\n    this.binary_ = null;\n\n    /** @private {logging.Preferences} */\n    this.logPrefs_ = null;\n\n    /** @private {?capabilities.ProxyConfig} */\n    this.proxy_ = null;\n\n    /** @private {boolean} */\n    this.marionette_ = true;\n  }\n\n  /**\n   * Sets the profile to use. The profile may be specified as a\n   * {@link Profile} object or as the path to an existing Firefox profile to use\n   * as a template.\n   *\n   * @param {(string|!Profile)} profile The profile to use.\n   * @return {!Options} A self reference.\n   */\n  setProfile(profile) {\n    if (typeof profile === 'string') {\n      profile = new Profile(profile);\n    }\n    this.profile_ = profile;\n    return this;\n  }\n\n  /**\n   * Sets the binary to use. The binary may be specified as the path to a\n   * Firefox executable, a specific {@link Channel}, or as a {@link Binary}\n   * object.\n   *\n   * @param {(string|!Binary|!Channel)} binary The binary to use.\n   * @return {!Options} A self reference.\n   * @throws {TypeError} If `binary` is an invalid type.\n   */\n  setBinary(binary) {\n    if (typeof binary === 'string' || binary instanceof Channel) {\n      binary = new Binary(binary);\n    }\n\n    if (!(binary instanceof Binary)) {\n      throw TypeError(\n          'binary must be a string path, Channel, or Binary object');\n    }\n\n    this.binary_ = binary;\n    return this;\n  }\n\n  /**\n   * Sets the logging preferences for the new session.\n   * @param {logging.Preferences} prefs The logging preferences.\n   * @return {!Options} A self reference.\n   */\n  setLoggingPreferences(prefs) {\n    this.logPrefs_ = prefs;\n    return this;\n  }\n\n  /**\n   * Sets the proxy to use.\n   *\n   * @param {capabilities.ProxyConfig} proxy The proxy configuration to use.\n   * @return {!Options} A self reference.\n   */\n  setProxy(proxy) {\n    this.proxy_ = proxy;\n    return this;\n  }\n\n  /**\n   * Sets whether to use Mozilla's geckodriver to drive the browser. This option\n   * is enabled by default and required for Firefox 47+.\n   *\n   * @param {boolean} enable Whether to enable the geckodriver.\n   * @see https://github.com/mozilla/geckodriver\n   */\n  useGeckoDriver(enable) {\n    this.marionette_ = enable;\n    return this;\n  }\n\n  /**\n   * Converts these options to a {@link capabilities.Capabilities} instance.\n   *\n   * @return {!capabilities.Capabilities} A new capabilities object.\n   */\n  toCapabilities() {\n    var caps = capabilities.Capabilities.firefox();\n    if (this.logPrefs_) {\n      caps.set(capabilities.Capability.LOGGING_PREFS, this.logPrefs_);\n    }\n    if (this.proxy_) {\n      caps.set(capabilities.Capability.PROXY, this.proxy_);\n    }\n    if (this.binary_) {\n      caps.set(Capability.BINARY, this.binary_);\n    }\n    if (this.profile_) {\n      caps.set(Capability.PROFILE, this.profile_);\n    }\n    caps.set(Capability.MARIONETTE, this.marionette_);\n    return caps;\n  }\n}\n\n\n/**\n * Enum of available command contexts.\n *\n * Command contexts are specific to Marionette, and may be used with the\n * {@link #context=} method. Contexts allow you to direct all subsequent\n * commands to either \"content\" (default) or \"chrome\". The latter gives\n * you elevated security permissions.\n *\n * @enum {string}\n */\nconst Context = {\n  CONTENT: \"content\",\n  CHROME: \"chrome\",\n};\n\n\nconst GECKO_DRIVER_EXE =\n    process.platform === 'win32' ? 'geckodriver.exe' : 'geckodriver';\n\n\n/**\n * @return {string} .\n * @throws {Error}\n */\nfunction findGeckoDriver() {\n  let exe = io.findInPath(GECKO_DRIVER_EXE, true);\n  if (!exe) {\n    throw Error(\n      'The ' + GECKO_DRIVER_EXE + ' executable could not be found on the current ' +\n      'PATH. Please download the latest version from ' +\n      'https://github.com/mozilla/geckodriver/releases/' +\n      'WebDriver and ensure it can be found on your PATH.');\n  }\n  return exe;\n}\n\n\n/**\n * @param {(Profile|string)} profile The profile to prepare.\n * @param {number} port The port the FirefoxDriver should listen on.\n * @return {!Promise<string>} a promise for the path to the profile directory.\n */\nfunction prepareProfile(profile, port) {\n  if (typeof profile === 'string') {\n    return decodeProfile(/** @type {string} */(profile)).then(dir => {\n      profile = new Profile(dir);\n      profile.setPreference('webdriver_firefox_port', port);\n      return profile.writeToDisk();\n    });\n  }\n\n  profile = profile || new Profile;\n  profile.setPreference('webdriver_firefox_port', port);\n  return profile.writeToDisk();\n}\n\n\nfunction normalizeProxyConfiguration(config) {\n  if ('manual' === config.proxyType) {\n    if (config.ftpProxy && !config.ftpProxyPort) {\n      let hostAndPort = net.splitHostAndPort(config.ftpProxy);\n      config.ftpProxy = hostAndPort.host;\n      config.ftpProxyPort = hostAndPort.port;\n    }\n\n    if (config.httpProxy && !config.httpProxyPort) {\n      let hostAndPort = net.splitHostAndPort(config.httpProxy);\n      config.httpProxy = hostAndPort.host;\n      config.httpProxyPort = hostAndPort.port;\n    }\n\n    if (config.sslProxy && !config.sslProxyPort) {\n      let hostAndPort = net.splitHostAndPort(config.sslProxy);\n      config.sslProxy = hostAndPort.host;\n      config.sslProxyPort = hostAndPort.port;\n    }\n\n    if (config.socksProxy && !config.socksProxyPort) {\n      let hostAndPort = net.splitHostAndPort(config.socksProxy);\n      config.socksProxy = hostAndPort.host;\n      config.socksProxyPort = hostAndPort.port;\n    }\n  } else if ('pac' === config.proxyType) {\n    if (config.proxyAutoconfigUrl && !config.pacUrl) {\n      config.pacUrl = config.proxyAutoconfigUrl;\n    }\n  }\n  return config;\n}\n\n\n/** @enum {string} */\nconst ExtensionCommand = {\n  GET_CONTEXT: 'getContext',\n  SET_CONTEXT: 'setContext',\n};\n\n\n/**\n * Creates a command executor with support for Marionette's custom commands.\n * @param {!Promise<string>} serverUrl The server's URL.\n * @return {!command.Executor} The new command executor.\n */\nfunction createExecutor(serverUrl) {\n  let client = serverUrl.then(url => new http.HttpClient(url));\n  let executor = new http.Executor(client);\n  configureExecutor(executor);\n  return executor;\n}\n\n\n/**\n * Configures the given executor with Firefox-specific commands.\n * @param {!http.Executor} executor the executor to configure.\n */\nfunction configureExecutor(executor) {\n  executor.defineCommand(\n      ExtensionCommand.GET_CONTEXT,\n      'GET',\n      '/session/:sessionId/moz/context');\n\n  executor.defineCommand(\n      ExtensionCommand.SET_CONTEXT,\n      'POST',\n      '/session/:sessionId/moz/context');\n}\n\n\n/**\n * Creates {@link selenium-webdriver/remote.DriverService} instances that manage\n * a [geckodriver](https://github.com/mozilla/geckodriver) server in a child\n * process.\n */\nclass ServiceBuilder extends remote.DriverService.Builder {\n  /**\n   * @param {string=} opt_exe Path to the server executable to use. If omitted,\n   *     the builder will attempt to locate the geckodriver on the system PATH.\n   */\n  constructor(opt_exe) {\n    super(opt_exe || findGeckoDriver());\n    this.setLoopback(true);  // Required.\n  }\n\n  /**\n   * Enables verbose logging.\n   *\n   * @param {boolean=} opt_trace Whether to enable trace-level logging. By\n   *     default, only debug logging is enabled.\n   * @return {!ServiceBuilder} A self reference.\n   */\n  enableVerboseLogging(opt_trace) {\n    return this.addArguments(opt_trace ? '-vv' : '-v');\n  }\n\n  /**\n   * Sets the path to the executable Firefox binary that the geckodriver should\n   * use. If this method is not called, this builder will attempt to locate\n   * Firefox in the default installation location for the current platform.\n   *\n   * @param {(string|!Binary)} binary Path to the executable Firefox binary to use.\n   * @return {!ServiceBuilder} A self reference.\n   * @see Binary#locate()\n   */\n  setFirefoxBinary(binary) {\n    let exe = typeof binary === 'string'\n        ? Promise.resolve(binary) : binary.locate();\n    return this.addArguments('-b', exe);\n  }\n}\n\n\n/**\n * @typedef {{executor: !command.Executor,\n *            capabilities: (!capabilities.Capabilities|\n *                           {desired: (capabilities.Capabilities|undefined),\n *                            required: (capabilities.Capabilities|undefined)}),\n *            onQuit: function(this: void): ?}}\n */\nvar DriverSpec;\n\n\n/**\n * @param {(http.Executor|remote.DriverService|undefined)} executor\n * @param {!capabilities.Capabilities} caps\n * @param {Profile} profile\n * @param {Binary} binary\n * @return {DriverSpec}\n */\nfunction createGeckoDriver(executor, caps, profile, binary) {\n  let firefoxOptions = {};\n  caps.set('moz:firefoxOptions', firefoxOptions);\n\n  if (binary) {\n    if (binary.getExe()) {\n      firefoxOptions['binary'] = binary.getExe();\n    }\n\n    let args = binary.getArguments();\n    if (args.length) {\n      firefoxOptions['args'] = args;\n    }\n  }\n\n  if (profile) {\n    // If the user specified a template directory or any extensions to install,\n    // we need to encode the profile as a base64 string (which requires writing\n    // it to disk first). Otherwise, if the user just specified some custom\n    // preferences, we can send those directly.\n    if (profile.getTemplateDir() || profile.getExtensions().length) {\n      firefoxOptions['profile'] = profile.encode();\n\n    } else {\n      let prefs = profile.getPreferences();\n      if (Object.keys(prefs).length) {\n        firefoxOptions['prefs'] = prefs;\n      }\n    }\n  }\n\n  let sessionCaps = caps;\n  if (caps.has(capabilities.Capability.PROXY)) {\n    let proxy = normalizeProxyConfiguration(\n        caps.get(capabilities.Capability.PROXY));\n\n    // Marionette requires proxy settings to be specified as required\n    // capabilities. See mozilla/geckodriver#97\n    let required = new capabilities.Capabilities()\n        .set(capabilities.Capability.PROXY, proxy);\n\n    caps.delete(capabilities.Capability.PROXY);\n    sessionCaps = {required, desired: caps};\n  }\n\n  /** @type {!command.Executor} */\n  let cmdExecutor;\n  let onQuit = function() {};\n\n  if (executor instanceof http.Executor) {\n    configureExecutor(executor);\n    cmdExecutor = executor;\n  } else if (executor instanceof remote.DriverService) {\n    cmdExecutor = createExecutor(executor.start());\n    onQuit = () => executor.kill();\n  } else {\n    let builder = new ServiceBuilder();\n    if (binary) {\n      builder.setFirefoxBinary(binary);\n    }\n    let service = builder.build();\n    cmdExecutor = createExecutor(service.start());\n    onQuit = () => service.kill();\n  }\n\n  return {\n    executor: cmdExecutor,\n    capabilities: sessionCaps,\n    onQuit\n  };\n}\n\n\n/**\n * @param {!capabilities.Capabilities} caps\n * @param {Profile} profile\n * @param {!Binary} binary\n * @return {DriverSpec}\n */\nfunction createLegacyDriver(caps, profile, binary, flow) {\n  profile = profile || new Profile;\n\n  let freePort = portprober.findFreePort();\n  let preparedProfile =\n      freePort.then(port => prepareProfile(profile, port));\n  let command = preparedProfile.then(dir => binary.launch(dir));\n\n  let serverUrl = command.then(() => freePort)\n      .then(function(/** number */port) {\n        let serverUrl = url.format({\n          protocol: 'http',\n          hostname: net.getLoopbackAddress(),\n          port: port + '',\n          pathname: '/hub'\n        });\n        let ready = httpUtil.waitForServer(serverUrl, 45 * 1000);\n        return ready.then(() => serverUrl);\n      });\n\n  return {\n    executor: createExecutor(serverUrl),\n    capabilities: caps,\n    onQuit: function() {\n      return command.then(command => {\n        command.kill();\n        return preparedProfile.then(io.rmDir)\n            .then(() => command.result(),\n                  () => command.result());\n      });\n    }\n  };\n}\n\n\n/**\n * A WebDriver client for Firefox.\n */\nclass Driver extends webdriver.WebDriver {\n  /**\n   * Creates a new Firefox session.\n   *\n   * @param {(Options|capabilities.Capabilities|Object)=} opt_config The\n   *    configuration options for this driver, specified as either an\n   *    {@link Options} or {@link capabilities.Capabilities}, or as a raw hash\n   *    object.\n   * @param {(http.Executor|remote.DriverService)=} opt_executor Either a\n   *   pre-configured command executor to use for communicating with an\n   *   externally managed remote end (which is assumed to already be running),\n   *   or the `DriverService` to use to start the geckodriver in a child\n   *   process.\n   *\n   *   If an executor is provided, care should e taken not to use reuse it with\n   *   other clients as its internal command mappings will be updated to support\n   *   Firefox-specific commands.\n   *\n   *   _This parameter may only be used with Mozilla's GeckoDriver._\n   *\n   * @param {promise.ControlFlow=} opt_flow The flow to\n   *     schedule commands through. Defaults to the active flow object.\n   * @throws {Error} If a custom command executor is provided and the driver is\n   *     configured to use the legacy FirefoxDriver from the Selenium project.\n   * @return {!Driver} A new driver instance.\n   */\n  static createSession(opt_config, opt_executor, opt_flow) {\n    let caps;\n    if (opt_config instanceof Options) {\n      caps = opt_config.toCapabilities();\n    } else {\n      caps = new capabilities.Capabilities(opt_config);\n    }\n\n    let binary = caps.get(Capability.BINARY) || new Binary();\n    caps.delete(Capability.BINARY);\n    if (typeof binary === 'string') {\n      binary = new Binary(binary);\n    }\n\n    let profile;\n    if (caps.has(Capability.PROFILE)) {\n      profile = caps.get(Capability.PROFILE);\n      caps.delete(Capability.PROFILE);\n    }\n\n    // Users must now explicitly disable marionette to use the legacy\n    // FirefoxDriver.\n    let noMarionette =\n        caps.get(Capability.MARIONETTE) === false\n            || /^0|false$/i.test(process.env['SELENIUM_MARIONETTE']);\n    let useMarionette = !noMarionette;\n\n    let spec;\n    if (useMarionette) {\n      spec = createGeckoDriver(opt_executor, caps, profile, binary);\n    } else {\n      if (opt_executor) {\n        throw Error('You may not use a custom command executor with the legacy'\n            + ' FirefoxDriver');\n      }\n      spec = createLegacyDriver(caps, profile, binary, opt_flow);\n    }\n\n    return /** @type {!Driver} */(webdriver.WebDriver.createSession(\n        spec.executor, spec.capabilities, opt_flow, this, spec.onQuit));\n  }\n\n  /**\n   * This function is a no-op as file detectors are not supported by this\n   * implementation.\n   * @override\n   */\n  setFileDetector() {\n  }\n\n  /**\n   * Get the context that is currently in effect.\n   *\n   * @return {!promise.Thenable<Context>} Current context.\n   */\n  getContext() {\n    return this.schedule(\n        new command.Command(ExtensionCommand.GET_CONTEXT),\n        'get WebDriver.context');\n  }\n\n  /**\n   * Changes target context for commands between chrome- and content.\n   *\n   * Changing the current context has a stateful impact on all subsequent\n   * commands. The {@link Context.CONTENT} context has normal web\n   * platform document permissions, as if you would evaluate arbitrary\n   * JavaScript. The {@link Context.CHROME} context gets elevated\n   * permissions that lets you manipulate the browser chrome itself,\n   * with full access to the XUL toolkit.\n   *\n   * Use your powers wisely.\n   *\n   * @param {!promise.Thenable<void>} ctx The context to switch to.\n   */\n  setContext(ctx) {\n    return this.schedule(\n        new command.Command(ExtensionCommand.SET_CONTEXT)\n            .setParameter(\"context\", ctx),\n        'set WebDriver.context');\n  }\n}\n\n\n// PUBLIC API\n\n\nexports.Binary = Binary;\nexports.Channel = Channel;\nexports.Context = Context;\nexports.Driver = Driver;\nexports.Options = Options;\nexports.Profile = Profile;\nexports.ServiceBuilder = ServiceBuilder;\n"]}