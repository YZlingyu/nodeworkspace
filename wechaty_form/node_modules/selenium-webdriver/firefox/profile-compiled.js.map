{"version":3,"sources":["profile.js"],"names":[],"mappings":"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","file":"profile-compiled.js","sourcesContent":["// Licensed to the Software Freedom Conservancy (SFC) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The SFC licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\n/**\n * @fileoverview Profile management module. This module is considered internal;\n * users should use {@link selenium-webdriver/firefox}.\n */\n\n'use strict';\n\nconst AdmZip = require('adm-zip'),\n    fs = require('fs'),\n    path = require('path'),\n    vm = require('vm');\n\nconst isDevMode = require('../lib/devmode'),\n    Symbols = require('../lib/symbols'),\n    io = require('../io'),\n    extension = require('./extension');\n\n\n/** @const */\nconst WEBDRIVER_PREFERENCES_PATH = isDevMode\n    ? path.join(__dirname, '../../../firefox-driver/webdriver.json')\n    : path.join(__dirname, '../lib/firefox/webdriver.json');\n\n/** @const */\nconst WEBDRIVER_EXTENSION_PATH = isDevMode\n    ? path.join(__dirname,\n        '../../../../build/javascript/firefox-driver/webdriver.xpi')\n    : path.join(__dirname, '../lib/firefox/webdriver.xpi');\n\n/** @const */\nconst WEBDRIVER_EXTENSION_NAME = 'fxdriver@googlecode.com';\n\n\n\n/** @type {Object} */\nvar defaultPreferences = null;\n\n/**\n * Synchronously loads the default preferences used for the FirefoxDriver.\n * @return {!Object} The default preferences JSON object.\n */\nfunction getDefaultPreferences() {\n  if (!defaultPreferences) {\n    var contents = /** @type {string} */(\n        fs.readFileSync(WEBDRIVER_PREFERENCES_PATH, 'utf8'));\n    defaultPreferences = /** @type {!Object} */(JSON.parse(contents));\n  }\n  return defaultPreferences;\n}\n\n\n/**\n * Parses a user.js file in a Firefox profile directory.\n * @param {string} f Path to the file to parse.\n * @return {!Promise<!Object>} A promise for the parsed preferences as\n *     a JSON object. If the file does not exist, an empty object will be\n *     returned.\n */\nfunction loadUserPrefs(f) {\n  return io.read(f).then(\n      function onSuccess(contents) {\n        var prefs = {};\n        var context = vm.createContext({\n          'user_pref': function(key, value) {\n            prefs[key] = value;\n          }\n        });\n        vm.runInContext(contents.toString(), context, f);\n        return prefs;\n      },\n      function onError(err) {\n        if (err && err.code === 'ENOENT') {\n          return {};\n        }\n        throw err;\n      });\n}\n\n\n\n/**\n * @param {!Object} prefs The default preferences to write. Will be\n *     overridden by user.js preferences in the template directory and the\n *     frozen preferences required by WebDriver.\n * @param {string} dir Path to the directory write the file to.\n * @return {!Promise<string>} A promise for the profile directory,\n *     to be fulfilled when user preferences have been written.\n */\nfunction writeUserPrefs(prefs, dir) {\n  var userPrefs = path.join(dir, 'user.js');\n  return loadUserPrefs(userPrefs).then(function(overrides) {\n    Object.assign(prefs, overrides);\n    Object.assign(prefs, getDefaultPreferences()['frozen']);\n\n    var contents = Object.keys(prefs).map(function(key) {\n      return 'user_pref(' + JSON.stringify(key) + ', ' +\n          JSON.stringify(prefs[key]) + ');';\n    }).join('\\n');\n\n    return new Promise((resolve, reject) => {\n      fs.writeFile(userPrefs, contents, function(err) {\n        err && reject(err) || resolve(dir);\n      });\n    });\n  });\n};\n\n\n/**\n * Installs a group of extensions in the given profile directory. If the\n * WebDriver extension is not included in this set, the default version\n * bundled with this package will be installed.\n * @param {!Array.<string>} extensions The extensions to install, as a\n *     path to an unpacked extension directory or a path to a xpi file.\n * @param {string} dir The profile directory to install to.\n * @param {boolean=} opt_excludeWebDriverExt Whether to skip installation of\n *     the default WebDriver extension.\n * @return {!Promise<string>} A promise for the main profile directory\n *     once all extensions have been installed.\n */\nfunction installExtensions(extensions, dir, opt_excludeWebDriverExt) {\n  var hasWebDriver = !!opt_excludeWebDriverExt;\n  var next = 0;\n  var extensionDir = path.join(dir, 'extensions');\n\n  return new Promise(function(fulfill, reject) {\n    io.mkdir(extensionDir).then(installNext, reject);\n\n    function installNext() {\n      if (next >= extensions.length) {\n        if (hasWebDriver) {\n          fulfill(dir);\n        } else {\n          install(WEBDRIVER_EXTENSION_PATH);\n        }\n      } else {\n        install(extensions[next++]);\n      }\n    }\n\n    function install(ext) {\n      extension.install(ext, extensionDir).then(function(id) {\n        hasWebDriver = hasWebDriver || (id === WEBDRIVER_EXTENSION_NAME);\n        installNext();\n      }, reject);\n    }\n  });\n}\n\n\n/**\n * Decodes a base64 encoded profile.\n * @param {string} data The base64 encoded string.\n * @return {!Promise<string>} A promise for the path to the decoded profile\n *     directory.\n */\nfunction decode(data) {\n  return io.tmpFile().then(function(file) {\n    var buf = new Buffer(data, 'base64');\n    return io.write(file, buf)\n        .then(io.tmpDir)\n        .then(function(dir) {\n          var zip = new AdmZip(file);\n          zip.extractAllTo(dir);  // Sync only? Why?? :-(\n          return dir;\n        });\n  });\n}\n\n\n\n/**\n * Models a Firefox profile directory for use with the FirefoxDriver. The\n * {@code Profile} directory uses an in-memory model until\n * {@link #writeToDisk} or {@link #encode} is called.\n */\nclass Profile {\n  /**\n   * @param {string=} opt_dir Path to an existing Firefox profile directory to\n   *     use a template for this profile. If not specified, a blank profile will\n   *     be used.\n   */\n  constructor(opt_dir) {\n    /** @private {!Object} */\n    this.preferences_ = {};\n\n    /** @private {boolean} */\n    this.nativeEventsEnabled_ = true;\n\n    /** @private {(string|undefined)} */\n    this.template_ = opt_dir;\n\n    /** @private {number} */\n    this.port_ = 0;\n\n    /** @private {!Array<string>} */\n    this.extensions_ = [];\n  }\n\n  /**\n   * @return {(string|undefined)} Path to an existing Firefox profile directory\n   *     to use as a template when writing this Profile to disk.\n   */\n  getTemplateDir() {\n    return this.template_;\n  }\n\n  /**\n   * Registers an extension to be included with this profile.\n   * @param {string} extension Path to the extension to include, as either an\n   *     unpacked extension directory or the path to a xpi file.\n   */\n  addExtension(extension) {\n    this.extensions_.push(extension);\n  }\n\n  /**\n   * @return {!Array<string>} A list of extensions to install in this profile.\n   */\n  getExtensions() {\n    return this.extensions_;\n  }\n\n  /**\n   * Sets a desired preference for this profile.\n   * @param {string} key The preference key.\n   * @param {(string|number|boolean)} value The preference value.\n   * @throws {Error} If attempting to set a frozen preference.\n   */\n  setPreference(key, value) {\n    var frozen = getDefaultPreferences()['frozen'];\n    if (frozen.hasOwnProperty(key) && frozen[key] !== value) {\n      throw Error('You may not set ' + key + '=' + JSON.stringify(value)\n          + '; value is frozen for proper WebDriver functionality ('\n          + key + '=' + JSON.stringify(frozen[key]) + ')');\n    }\n    this.preferences_[key] = value;\n  }\n\n  /**\n   * Returns the currently configured value of a profile preference. This does\n   * not include any defaults defined in the profile's template directory user.js\n   * file (if a template were specified on construction).\n   * @param {string} key The desired preference.\n   * @return {(string|number|boolean|undefined)} The current value of the\n   *     requested preference.\n   */\n  getPreference(key) {\n    return this.preferences_[key];\n  }\n\n  /**\n   * @return {!Object} A copy of all currently configured preferences.\n   */\n  getPreferences() {\n    return Object.assign({}, this.preferences_);\n  }\n\n  /**\n   * Specifies which host the driver should listen for commands on. If not\n   * specified, the driver will default to \"localhost\". This option should be\n   * specified when \"localhost\" is not mapped to the loopback address\n   * (127.0.0.1) in `/etc/hosts`.\n   *\n   * @param {string} host the host the driver should listen for commands on\n   */\n  setHost(host) {\n    this.preferences_['webdriver_firefox_allowed_hosts'] = host;\n  }\n\n  /**\n   * @return {number} The port this profile is currently configured to use, or\n   *     0 if the port will be selected at random when the profile is written\n   *     to disk.\n   */\n  getPort() {\n    return this.port_;\n  }\n\n  /**\n   * Sets the port to use for the WebDriver extension loaded by this profile.\n   * @param {number} port The desired port, or 0 to use any free port.\n   */\n  setPort(port) {\n    this.port_ = port;\n  }\n\n  /**\n   * @return {boolean} Whether the FirefoxDriver is configured to automatically\n   *     accept untrusted SSL certificates.\n   */\n  acceptUntrustedCerts() {\n    return !!this.preferences_['webdriver_accept_untrusted_certs'];\n  }\n\n  /**\n   * Sets whether the FirefoxDriver should automatically accept untrusted SSL\n   * certificates.\n   * @param {boolean} value .\n   */\n  setAcceptUntrustedCerts(value) {\n    this.preferences_['webdriver_accept_untrusted_certs'] = !!value;\n  }\n\n  /**\n   * Sets whether to assume untrusted certificates come from untrusted issuers.\n   * @param {boolean} value .\n   */\n  setAssumeUntrustedCertIssuer(value) {\n    this.preferences_['webdriver_assume_untrusted_issuer'] = !!value;\n  }\n\n  /**\n   * @return {boolean} Whether to assume untrusted certs come from untrusted\n   *     issuers.\n   */\n  assumeUntrustedCertIssuer() {\n    return !!this.preferences_['webdriver_assume_untrusted_issuer'];\n  }\n\n  /**\n   * Sets whether to use native events with this profile.\n   * @param {boolean} enabled .\n   */\n  setNativeEventsEnabled(enabled) {\n    this.nativeEventsEnabled_ = enabled;\n  }\n\n  /**\n   * Returns whether native events are enabled in this profile.\n   * @return {boolean} .\n   */\n  nativeEventsEnabled() {\n    return this.nativeEventsEnabled_;\n  }\n\n  /**\n   * Writes this profile to disk.\n   * @param {boolean=} opt_excludeWebDriverExt Whether to exclude the WebDriver\n   *     extension from the generated profile. Used to reduce the size of an\n   *     {@link #encode() encoded profile} since the server will always install\n   *     the extension itself.\n   * @return {!Promise<string>} A promise for the path to the new profile\n   *     directory.\n   */\n  writeToDisk(opt_excludeWebDriverExt) {\n    var profileDir = io.tmpDir();\n    if (this.template_) {\n      profileDir = profileDir.then(function(dir) {\n        return io.copyDir(\n            /** @type {string} */(this.template_),\n            dir, /(parent\\.lock|lock|\\.parentlock)/);\n      }.bind(this));\n    }\n\n    // Freeze preferences for async operations.\n    var prefs = {};\n    Object.assign(prefs, getDefaultPreferences()['mutable']);\n    Object.assign(prefs, getDefaultPreferences()['frozen']);\n    Object.assign(prefs, this.preferences_);\n\n    // Freeze extensions for async operations.\n    var extensions = this.extensions_.concat();\n\n    return profileDir.then(function(dir) {\n      return writeUserPrefs(prefs, dir);\n    }).then(function(dir) {\n      return installExtensions(extensions, dir, !!opt_excludeWebDriverExt);\n    });\n  }\n\n  /**\n   * Write profile to disk, compress its containing directory, and return\n   * it as a Base64 encoded string.\n   *\n   * @return {!Promise<string>} A promise for the encoded profile as\n   *     Base64 string.\n   *\n   */\n  encode() {\n    return this.writeToDisk(true).then(function(dir) {\n      var zip = new AdmZip();\n      zip.addLocalFolder(dir, '');\n      // Stored compression, see https://en.wikipedia.org/wiki/Zip_(file_format)\n      zip.getEntries().forEach(function(entry) {\n        entry.header.method = 0;\n      });\n\n      return io.tmpFile().then(function(file) {\n        zip.writeZip(file);  // Sync! Why oh why :-(\n        return io.read(file);\n      });\n    }).then(function(data) {\n      return data.toString('base64');\n    });\n  }\n\n  /**\n   * Encodes this profile as a zipped, base64 encoded directory.\n   * @return {!Promise<string>} A promise for the encoded profile.\n   */\n  [Symbols.serialize]() {\n    return this.encode();\n  }\n}\n\n\n// PUBLIC API\n\n\nexports.Profile = Profile;\nexports.decode = decode;\nexports.loadUserPrefs = loadUserPrefs;\n"]}