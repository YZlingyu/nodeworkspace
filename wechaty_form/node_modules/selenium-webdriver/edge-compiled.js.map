{"version":3,"sources":["edge.js"],"names":[],"mappings":"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","file":"edge-compiled.js","sourcesContent":["// Licensed to the Software Freedom Conservancy (SFC) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The SFC licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\n/**\n * @fileoverview Defines a {@linkplain Driver WebDriver} client for\n * Microsoft's Edge web browser. Before using this module,\n * you must download and install the latest\n * [MicrosoftEdgeDriver](http://go.microsoft.com/fwlink/?LinkId=619687) server.\n * Ensure that the MicrosoftEdgeDriver is on your\n * [PATH](http://en.wikipedia.org/wiki/PATH_%28variable%29).\n *\n * There are three primary classes exported by this module:\n *\n * 1. {@linkplain ServiceBuilder}: configures the\n *     {@link ./remote.DriverService remote.DriverService}\n *     that manages the [MicrosoftEdgeDriver] child process.\n *\n * 2. {@linkplain Options}: defines configuration options for each new\n *     MicrosoftEdgeDriver session, such as which\n *     {@linkplain Options#setProxy proxy} to use when starting the browser.\n *\n * 3. {@linkplain Driver}: the WebDriver client; each new instance will control\n *     a unique browser session.\n *\n * __Customizing the MicrosoftEdgeDriver Server__ <a id=\"custom-server\"></a>\n *\n * By default, every MicrosoftEdge session will use a single driver service,\n * which is started the first time a {@link Driver} instance is created and\n * terminated when this process exits. The default service will inherit its\n * environment from the current process.\n * You may obtain a handle to this default service using\n * {@link #getDefaultService getDefaultService()} and change its configuration\n * with {@link #setDefaultService setDefaultService()}.\n *\n * You may also create a {@link Driver} with its own driver service. This is\n * useful if you need to capture the server's log output for a specific session:\n *\n *     var edge = require('selenium-webdriver/edge');\n *\n *     var service = new edge.ServiceBuilder()\n *         .setPort(55555)\n *         .build();\n *\n *     var options = new edge.Options();\n *     // configure browser options ...\n *\n *     var driver = edge.Driver.createSession(options, service);\n *\n * Users should only instantiate the {@link Driver} class directly when they\n * need a custom driver service configuration (as shown above). For normal\n * operation, users should start MicrosoftEdge using the\n * {@link ./builder.Builder selenium-webdriver.Builder}.\n *\n * [MicrosoftEdgeDriver]: https://msdn.microsoft.com/en-us/library/mt188085(v=vs.85).aspx\n */\n\n'use strict';\n\nconst fs = require('fs'),\n    util = require('util');\n\nconst http = require('./http'),\n    io = require('./io'),\n    capabilities = require('./lib/capabilities'),\n    promise = require('./lib/promise'),\n    Symbols = require('./lib/symbols'),\n    webdriver = require('./lib/webdriver'),\n    portprober = require('./net/portprober'),\n    remote = require('./remote');\n\nconst EDGEDRIVER_EXE = 'MicrosoftWebDriver.exe';\n\n\n/**\n * Option keys.\n * @enum {string}\n */\nconst CAPABILITY_KEY = {\n  PAGE_LOAD_STRATEGY: 'pageLoadStrategy'\n};\n\n\n/**\n * Class for managing MicrosoftEdgeDriver specific options.\n */\nclass Options {\n  constructor() {\n    /** @private {!Object} */\n    this.options_ = {};\n\n    /** @private {?capabilities.ProxyConfig} */\n    this.proxy_ = null;\n  }\n\n  /**\n   * Extracts the MicrosoftEdgeDriver specific options from the given\n   * capabilities object.\n   * @param {!capabilities.Capabilities} caps The capabilities object.\n   * @return {!Options} The MicrosoftEdgeDriver options.\n   */\n  static fromCapabilities(caps) {\n    var options = new Options();\n    var map = options.options_;\n\n    Object.keys(CAPABILITY_KEY).forEach(function(key) {\n      key = CAPABILITY_KEY[key];\n      if (caps.has(key)) {\n        map[key] = caps.get(key);\n      }\n    });\n\n    if (caps.has(capabilities.Capability.PROXY)) {\n      options.setProxy(caps.get(capabilities.Capability.PROXY));\n    }\n\n    return options;\n  }\n\n  /**\n   * Sets the proxy settings for the new session.\n   * @param {capabilities.ProxyConfig} proxy The proxy configuration to use.\n   * @return {!Options} A self reference.\n   */\n  setProxy(proxy) {\n    this.proxy_ = proxy;\n    return this;\n  }\n\n  /**\n   * Sets the page load strategy for Edge.\n   * Supported values are \"normal\", \"eager\", and \"none\";\n   *\n   * @param {string} pageLoadStrategy The page load strategy to use.\n   * @return {!Options} A self reference.\n   */\n  setPageLoadStrategy(pageLoadStrategy) {\n    this.options_[CAPABILITY_KEY.PAGE_LOAD_STRATEGY] =\n      pageLoadStrategy.toLowerCase();\n    return this;\n  }\n\n  /**\n   * Converts this options instance to a {@link capabilities.Capabilities}\n   * object.\n   * @param {capabilities.Capabilities=} opt_capabilities The capabilities to\n   *     merge these options into, if any.\n   * @return {!capabilities.Capabilities} The capabilities.\n   */\n  toCapabilities(opt_capabilities) {\n    var caps = opt_capabilities || capabilities.Capabilities.edge();\n    if (this.proxy_) {\n      caps.set(capabilities.Capability.PROXY, this.proxy_);\n    }\n    Object.keys(this.options_).forEach(function(key) {\n      caps.set(key, this.options_[key]);\n    }, this);\n    return caps;\n  }\n\n  /**\n   * Converts this instance to its JSON wire protocol representation. Note this\n   * function is an implementation not intended for general use.\n   * @return {{pageLoadStrategy: (string|undefined)}}\n   *   The JSON wire protocol representation of this instance.\n   */\n  [Symbols.serialize]() {\n    var json = {};\n    for (var key in this.options_) {\n      if (this.options_[key] != null) {\n        json[key] = this.options_[key];\n      }\n    }\n    return json;\n  }\n}\n\n\n/**\n * Creates {@link remote.DriverService} instances that manage a\n * MicrosoftEdgeDriver server in a child process.\n */\nclass ServiceBuilder extends remote.DriverService.Builder {\n  /**\n   * @param {string=} opt_exe Path to the server executable to use. If omitted,\n   *   the builder will attempt to locate the MicrosoftEdgeDriver on the current\n   *   PATH.\n   * @throws {Error} If provided executable does not exist, or the\n   *   MicrosoftEdgeDriver cannot be found on the PATH.\n   */\n  constructor(opt_exe) {\n    let exe = opt_exe || io.findInPath(EDGEDRIVER_EXE, true);\n    if (!exe) {\n      throw Error(\n        'The ' + EDGEDRIVER_EXE + ' could not be found on the current PATH. ' +\n        'Please download the latest version of the MicrosoftEdgeDriver from ' +\n        'https://www.microsoft.com/en-us/download/details.aspx?id=48212 and ' +\n        'ensure it can be found on your PATH.');\n    }\n\n    super(exe);\n\n    // Binding to the loopback address will fail if not running with\n    // administrator privileges. Since we cannot test for that in script\n    // (or can we?), force the DriverService to use \"localhost\".\n    this.setHostname('localhost');\n  }\n}\n\n\n/** @type {remote.DriverService} */\nvar defaultService = null;\n\n\n/**\n * Sets the default service to use for new MicrosoftEdgeDriver instances.\n * @param {!remote.DriverService} service The service to use.\n * @throws {Error} If the default service is currently running.\n */\nfunction setDefaultService(service) {\n  if (defaultService && defaultService.isRunning()) {\n    throw Error(\n      'The previously configured EdgeDriver service is still running. ' +\n      'You must shut it down before you may adjust its configuration.');\n  }\n  defaultService = service;\n}\n\n\n/**\n * Returns the default MicrosoftEdgeDriver service. If such a service has\n * not been configured, one will be constructed using the default configuration\n * for an MicrosoftEdgeDriver executable found on the system PATH.\n * @return {!remote.DriverService} The default MicrosoftEdgeDriver service.\n */\nfunction getDefaultService() {\n  if (!defaultService) {\n    defaultService = new ServiceBuilder().build();\n  }\n  return defaultService;\n}\n\n\n/**\n * Creates a new WebDriver client for Microsoft's Edge.\n */\nclass Driver extends webdriver.WebDriver {\n  /**\n   * Creates a new browser session for Microsoft's Edge browser.\n   *\n   * @param {(capabilities.Capabilities|Options)=} opt_config The configuration\n   *     options.\n   * @param {remote.DriverService=} opt_service The session to use; will use\n   *     the {@linkplain #getDefaultService default service} by default.\n   * @param {promise.ControlFlow=} opt_flow The control flow to use, or\n   *     {@code null} to use the currently active flow.\n   * @return {!Driver} A new driver instance.\n   */\n  static createSession(opt_config, opt_service, opt_flow) {\n    var service = opt_service || getDefaultService();\n    var client = service.start().then(url => new http.HttpClient(url));\n    var executor = new http.Executor(client);\n\n    var caps =\n        opt_config instanceof Options ? opt_config.toCapabilities() :\n        (opt_config || capabilities.Capabilities.edge());\n\n    return /** @type {!Driver} */(webdriver.WebDriver.createSession(\n        executor, caps, opt_flow, this, () => service.kill()));\n  }\n\n  /**\n   * This function is a no-op as file detectors are not supported by this\n   * implementation.\n   * @override\n   */\n  setFileDetector() {}\n}\n\n\n// PUBLIC API\n\n\nexports.Driver = Driver;\nexports.Options = Options;\nexports.ServiceBuilder = ServiceBuilder;\nexports.getDefaultService = getDefaultService;\nexports.setDefaultService = setDefaultService;\n"]}