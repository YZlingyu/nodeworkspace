{"version":3,"sources":["opera.js"],"names":[],"mappings":"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","file":"opera-compiled.js","sourcesContent":["// Licensed to the Software Freedom Conservancy (SFC) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The SFC licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\n/**\n * @fileoverview Defines a {@linkplain Driver WebDriver} client for the\n * Opera web browser (v26+). Before using this module, you must download the\n * latest OperaDriver\n * [release](https://github.com/operasoftware/operachromiumdriver/releases) and\n * ensure it can be found on your system\n * [PATH](http://en.wikipedia.org/wiki/PATH_%28variable%29).\n *\n * There are three primary classes exported by this module:\n *\n * 1. {@linkplain ServiceBuilder}: configures the\n *     {@link selenium-webdriver/remote.DriverService remote.DriverService}\n *     that manages the\n *     [OperaDriver](https://github.com/operasoftware/operachromiumdriver)\n *     child process.\n *\n * 2. {@linkplain Options}: defines configuration options for each new Opera\n *     session, such as which {@linkplain Options#setProxy proxy} to use,\n *     what {@linkplain Options#addExtensions extensions} to install, or\n *     what {@linkplain Options#addArguments command-line switches} to use when\n *     starting the browser.\n *\n * 3. {@linkplain Driver}: the WebDriver client; each new instance will control\n *     a unique browser session with a clean user profile (unless otherwise\n *     configured through the {@link Options} class).\n *\n * By default, every Opera session will use a single driver service, which is\n * started the first time a {@link Driver} instance is created and terminated\n * when this process exits. The default service will inherit its environment\n * from the current process and direct all output to /dev/null. You may obtain\n * a handle to this default service using\n * {@link #getDefaultService getDefaultService()} and change its configuration\n * with {@link #setDefaultService setDefaultService()}.\n *\n * You may also create a {@link Driver} with its own driver service. This is\n * useful if you need to capture the server's log output for a specific session:\n *\n *     var opera = require('selenium-webdriver/opera');\n *\n *     var service = new opera.ServiceBuilder()\n *         .loggingTo('/my/log/file.txt')\n *         .enableVerboseLogging()\n *         .build();\n *\n *     var options = new opera.Options();\n *     // configure browser options ...\n *\n *     var driver = opera.Driver.createSession(options, service);\n *\n * Users should only instantiate the {@link Driver} class directly when they\n * need a custom driver service configuration (as shown above). For normal\n * operation, users should start Opera using the\n * {@link selenium-webdriver.Builder}.\n */\n\n'use strict';\n\nconst fs = require('fs');\n\nconst http = require('./http'),\n    io = require('./io'),\n    capabilities = require('./lib/capabilities'),\n    promise = require('./lib/promise'),\n    Symbols = require('./lib/symbols'),\n    webdriver = require('./lib/webdriver'),\n    portprober = require('./net/portprober'),\n    remote = require('./remote');\n\n\n/**\n * Name of the OperaDriver executable.\n * @type {string}\n * @const\n */\nconst OPERADRIVER_EXE =\n    process.platform === 'win32' ? 'operadriver.exe' : 'operadriver';\n\n\n/**\n * Creates {@link remote.DriverService} instances that manages an\n * [OperaDriver](https://github.com/operasoftware/operachromiumdriver)\n * server in a child process.\n */\nclass ServiceBuilder extends remote.DriverService.Builder {\n  /**\n   * @param {string=} opt_exe Path to the server executable to use. If omitted,\n   *     the builder will attempt to locate the operadriver on the current\n   *     PATH.\n   * @throws {Error} If provided executable does not exist, or the operadriver\n   *     cannot be found on the PATH.\n   */\n  constructor(opt_exe) {\n    let exe = opt_exe || io.findInPath(OPERADRIVER_EXE, true);\n    if (!exe) {\n      throw Error(\n          'The OperaDriver could not be found on the current PATH. Please ' +\n          'download the latest version of the OperaDriver from ' +\n          'https://github.com/operasoftware/operachromiumdriver/releases and ' +\n          'ensure it can be found on your PATH.');\n    }\n\n    super(exe);\n    this.setLoopback(true);\n  }\n\n  /**\n   * Sets the path of the log file the driver should log to. If a log file is\n   * not specified, the driver will log to stderr.\n   * @param {string} path Path of the log file to use.\n   * @return {!ServiceBuilder} A self reference.\n   */\n  loggingTo(path) {\n    return this.addArguments('--log-path=' + path);\n  }\n\n  /**\n   * Enables verbose logging.\n   * @return {!ServiceBuilder} A self reference.\n   */\n  enableVerboseLogging() {\n    return this.addArguments('--verbose');\n  }\n\n  /**\n   * Silence sthe drivers output.\n   * @return {!ServiceBuilder} A self reference.\n   */\n  silent() {\n    return this.addArguments('--silent');\n  }\n}\n\n\n\n/** @type {remote.DriverService} */\nvar defaultService = null;\n\n\n/**\n * Sets the default service to use for new OperaDriver instances.\n * @param {!remote.DriverService} service The service to use.\n * @throws {Error} If the default service is currently running.\n */\nfunction setDefaultService(service) {\n  if (defaultService && defaultService.isRunning()) {\n    throw Error(\n        'The previously configured OperaDriver service is still running. ' +\n        'You must shut it down before you may adjust its configuration.');\n  }\n  defaultService = service;\n}\n\n\n/**\n * Returns the default OperaDriver service. If such a service has not been\n * configured, one will be constructed using the default configuration for\n * a OperaDriver executable found on the system PATH.\n * @return {!remote.DriverService} The default OperaDriver service.\n */\nfunction getDefaultService() {\n  if (!defaultService) {\n    defaultService = new ServiceBuilder().build();\n  }\n  return defaultService;\n}\n\n\n/**\n * @type {string}\n * @const\n */\nvar OPTIONS_CAPABILITY_KEY = 'chromeOptions';\n\n\n/**\n * Class for managing {@linkplain Driver OperaDriver} specific options.\n */\nclass Options {\n  constructor() {\n    /** @private {!Array.<string>} */\n    this.args_ = [];\n\n    /** @private {?string} */\n    this.binary_ = null;\n\n    /** @private {!Array.<(string|!Buffer)>} */\n    this.extensions_ = [];\n\n    /** @private {./lib/logging.Preferences} */\n    this.logPrefs_ = null;\n\n    /** @private {?capabilities.ProxyConfig} */\n    this.proxy_ = null;\n  }\n\n  /**\n   * Extracts the OperaDriver specific options from the given capabilities\n   * object.\n   * @param {!capabilities.Capabilities} caps The capabilities object.\n   * @return {!Options} The OperaDriver options.\n   */\n  static fromCapabilities(caps) {\n    var options;\n    var o = caps.get(OPTIONS_CAPABILITY_KEY);\n    if (o instanceof Options) {\n      options = o;\n    } else if (o) {\n      options = new Options()\n          .addArguments(o.args || [])\n          .addExtensions(o.extensions || [])\n          .setOperaBinaryPath(o.binary);\n    } else {\n      options = new Options;\n    }\n\n    if (caps.has(capabilities.Capability.PROXY)) {\n      options.setProxy(caps.get(capabilities.Capability.PROXY));\n    }\n\n    if (caps.has(capabilities.Capability.LOGGING_PREFS)) {\n      options.setLoggingPrefs(\n          caps.get(capabilities.Capability.LOGGING_PREFS));\n    }\n\n    return options;\n  }\n\n  /**\n   * Add additional command line arguments to use when launching the Opera\n   * browser.  Each argument may be specified with or without the \"--\" prefix\n   * (e.g. \"--foo\" and \"foo\"). Arguments with an associated value should be\n   * delimited by an \"=\": \"foo=bar\".\n   * @param {...(string|!Array.<string>)} var_args The arguments to add.\n   * @return {!Options} A self reference.\n   */\n  addArguments(var_args) {\n    this.args_ = this.args_.concat.apply(this.args_, arguments);\n    return this;\n  }\n\n  /**\n   * Add additional extensions to install when launching Opera. Each extension\n   * should be specified as the path to the packed CRX file, or a Buffer for an\n   * extension.\n   * @param {...(string|!Buffer|!Array.<(string|!Buffer)>)} var_args The\n   *     extensions to add.\n   * @return {!Options} A self reference.\n   */\n  addExtensions(var_args) {\n    this.extensions_ = this.extensions_.concat.apply(\n        this.extensions_, arguments);\n    return this;\n  }\n\n  /**\n   * Sets the path to the Opera binary to use. On Mac OS X, this path should\n   * reference the actual Opera executable, not just the application binary. The\n   * binary path be absolute or relative to the operadriver server executable, but\n   * it must exist on the machine that will launch Opera.\n   *\n   * @param {string} path The path to the Opera binary to use.\n   * @return {!Options} A self reference.\n   */\n  setOperaBinaryPath(path) {\n    this.binary_ = path;\n    return this;\n  }\n\n  /**\n   * Sets the logging preferences for the new session.\n   * @param {!./lib/logging.Preferences} prefs The logging preferences.\n   * @return {!Options} A self reference.\n   */\n  setLoggingPrefs(prefs) {\n    this.logPrefs_ = prefs;\n    return this;\n  }\n\n  /**\n   * Sets the proxy settings for the new session.\n   * @param {capabilities.ProxyConfig} proxy The proxy configuration to use.\n   * @return {!Options} A self reference.\n   */\n  setProxy(proxy) {\n    this.proxy_ = proxy;\n    return this;\n  }\n\n  /**\n   * Converts this options instance to a {@link capabilities.Capabilities}\n   *     object.\n   * @param {capabilities.Capabilities=} opt_capabilities The capabilities to\n   *     merge these options into, if any.\n   * @return {!capabilities.Capabilities} The capabilities.\n   */\n  toCapabilities(opt_capabilities) {\n    var caps = opt_capabilities || capabilities.Capabilities.opera();\n    caps.\n        set(capabilities.Capability.PROXY, this.proxy_).\n        set(capabilities.Capability.LOGGING_PREFS, this.logPrefs_).\n        set(OPTIONS_CAPABILITY_KEY, this);\n    return caps;\n  }\n\n  /**\n   * Converts this instance to its JSON wire protocol representation. Note this\n   * function is an implementation not intended for general use.\n   * @return {!Object} The JSON wire protocol representation of this instance.\n   */\n  [Symbols.serialize]() {\n    var json = {\n      args: this.args_,\n      extensions: this.extensions_.map(function(extension) {\n        if (Buffer.isBuffer(extension)) {\n          return extension.toString('base64');\n        }\n        return io.read(/** @type {string} */(extension))\n            .then(buffer => buffer.toString('base64'));\n      })\n    };\n    if (this.binary_) {\n      json.binary = this.binary_;\n    }\n    return json;\n  }\n}\n\n\n/**\n * Creates a new WebDriver client for Opera.\n */\nclass Driver extends webdriver.WebDriver {\n  /**\n   * Creates a new session for Opera.\n   *\n   * @param {(capabilities.Capabilities|Options)=} opt_config The configuration\n   *     options.\n   * @param {remote.DriverService=} opt_service The session to use; will use\n   *     the {@link getDefaultService default service} by default.\n   * @param {promise.ControlFlow=} opt_flow The control flow to use,\n   *     or {@code null} to use the currently active flow.\n   * @return {!Driver} A new driver instance.\n   */\n  static createSession(opt_config, opt_service, opt_flow) {\n    var service = opt_service || getDefaultService();\n    var client = service.start().then(url => new http.HttpClient(url));\n    var executor = new http.Executor(client);\n\n    var caps =\n        opt_config instanceof Options ? opt_config.toCapabilities() :\n        (opt_config || capabilities.Capabilities.opera());\n\n    // On Linux, the OperaDriver does not look for Opera on the PATH, so we\n    // must explicitly find it. See: operachromiumdriver #9.\n    if (process.platform === 'linux') {\n      var options = Options.fromCapabilities(caps);\n      if (!options.binary_) {\n        let exe = io.findInPath('opera', true);\n        if (!exe) {\n          throw Error(\n              'The opera executable could not be found on the current PATH');\n        }\n        options.setOperaBinaryPath(exe);\n      }\n      caps = options.toCapabilities(caps);\n    }\n\n    return /** @type {!Driver} */(\n        webdriver.WebDriver.createSession(executor, caps, opt_flow, this));\n  }\n\n  /**\n   * This function is a no-op as file detectors are not supported by this\n   * implementation.\n   * @override\n   */\n  setFileDetector() {}\n}\n\n\n// PUBLIC API\n\n\nexports.Driver = Driver;\nexports.Options = Options;\nexports.ServiceBuilder = ServiceBuilder;\nexports.getDefaultService = getDefaultService;\nexports.setDefaultService = setDefaultService;\n"]}