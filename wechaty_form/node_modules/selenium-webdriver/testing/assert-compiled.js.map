{"version":3,"sources":["assert.js"],"names":[],"mappings":"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","file":"assert-compiled.js","sourcesContent":["// Licensed to the Software Freedom Conservancy (SFC) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The SFC licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\n/**\n * @fileoverview Defines a library that simplifies writing assertions against\n * promised values.\n *\n * > <hr>\n * > __NOTE:__ This module is considered experimental and is subject to\n * > change, or removal, at any time!\n * > <hr>\n *\n * Sample usage:\n *\n *     var driver = new webdriver.Builder().build();\n *     driver.get('http://www.google.com');\n *\n *     assert(driver.getTitle()).equalTo('Google');\n */\n\n'use strict';\n\nconst assert = require('assert');\n\nfunction trueType(v) {\n  if (v === null) {\n    return 'null';\n  }\n\n  let type = typeof v;\n  if (type === 'object') {\n    if (Array.isArray(v)) {\n      type = 'array';\n    }\n  }\n  return type;\n}\n\n\nfunction checkType(v, want) {\n  let got = trueType(v);\n  if (got !== want) {\n    throw new TypeError('require ' + want + ', but got ' + got);\n  }\n  return v;\n}\n\nconst checkNumber = v => checkType(v, 'number');\nconst checkFunction = v => checkType(v, 'function');\nconst checkString = v => checkType(v, 'string');\n\nconst isFunction = v => trueType(v) === 'function';\nconst isNumber = v => trueType(v) === 'number';\nconst isObject = v => trueType(v) === 'object';\nconst isString = v => trueType(v) === 'string';\n\n\nfunction describe(value) {\n  let ret;\n  try {\n    ret = `<${String(value)}>`;\n  } catch (e) {\n    ret = `<toString failed: ${e.message}>`;\n  }\n\n  if (null !== value && void(0) !== value) {\n    ret += ` (${trueType(value)})`;\n  }\n\n  return ret;\n}\n\n\nfunction evaluate(value, predicate) {\n  if (isObject(value) && isFunction(value.then)) {\n    return value.then(predicate);\n  }\n  predicate(value);\n}\n\n\n/**\n * @private\n */\nclass Assertion {\n  /**\n   * @param {?} subject The subject of this assertion.\n   * @param {boolean=} opt_invert Whether to invert any assertions performed by\n   *     this instance.\n   */\n  constructor(subject, opt_invert) {\n    /** @private {?} */\n    this.subject_ = subject;\n    /** @private {boolean} */\n    this.invert_ = !!opt_invert;\n  }\n\n  /**\n   * @param {number} expected The minimum permissible value (inclusive).\n   * @param {string=} opt_message An optional failure message.\n   * @return {(Promise|undefined)} The result of this assertion, if the subject\n   *     is a promised-value. Otherwise, the assertion is performed immediately\n   *     and nothing is returned.\n   */\n  atLeast(expected, opt_message) {\n    checkNumber(expected);\n    return evaluate(this.subject_, function(actual) {\n      if (!isNumber(actual) || actual < expected) {\n        assert.fail(actual, expected, opt_message, '>=');\n      }\n    });\n  }\n\n  /**\n   * @param {number} expected The maximum permissible value (inclusive).\n   * @param {string=} opt_message An optional failure message.\n   * @return {(Promise|undefined)} The result of this assertion, if the subject\n   *     is a promised-value. Otherwise, the assertion is performed immediately\n   *     and nothing is returned.\n   */\n  atMost(expected, opt_message) {\n    checkNumber(expected);\n    return evaluate(this.subject_, function (actual) {\n      if (!isNumber(actual) || actual > expected) {\n        assert.fail(actual, expected, opt_message, '<=');\n      }\n    });\n  }\n\n  /**\n   * @param {number} expected The maximum permissible value (exclusive).\n   * @param {string=} opt_message An optional failure message.\n   * @return {(Promise|undefined)} The result of this assertion, if the subject\n   *     is a promised-value. Otherwise, the assertion is performed immediately\n   *     and nothing is returned.\n   */\n  greaterThan(expected, opt_message) {\n    checkNumber(expected);\n    return evaluate(this.subject_, function(actual) {\n      if (!isNumber(actual) || actual <= expected) {\n        assert.fail(actual, expected, opt_message, '>');\n      }\n    });\n  }\n\n  /**\n   * @param {number} expected The minimum permissible value (exclusive).\n   * @param {string=} opt_message An optional failure message.\n   * @return {(Promise|undefined)} The result of this assertion, if the subject\n   *     is a promised-value. Otherwise, the assertion is performed immediately\n   *     and nothing is returned.\n   */\n  lessThan(expected, opt_message) {\n    checkNumber(expected);\n    return evaluate(this.subject_,  function (actual) {\n      if (!isNumber(actual) || actual >= expected) {\n        assert.fail(actual, expected, opt_message, '<');\n      }\n    });\n  }\n\n  /**\n   * @param {number} expected The desired value.\n   * @param {number} epsilon The maximum distance from the desired value.\n   * @param {string=} opt_message An optional failure message.\n   * @return {(Promise|undefined)} The result of this assertion, if the subject\n   *     is a promised-value. Otherwise, the assertion is performed immediately\n   *     and nothing is returned.\n   */\n  closeTo(expected, epsilon, opt_message) {\n    checkNumber(expected);\n    checkNumber(epsilon);\n    return evaluate(this.subject_, function(actual) {\n      checkNumber(actual);\n      if (Math.abs(expected - actual) > epsilon) {\n        assert.fail(opt_message || `${actual} === ${expected} (± ${epsilon})`);\n      }\n    });\n  }\n\n  /**\n   * @param {function(new: ?)} ctor The exptected type's constructor.\n   * @param {string=} opt_message An optional failure message.\n   * @return {(Promise|undefined)} The result of this assertion, if the subject\n   *     is a promised-value. Otherwise, the assertion is performed immediately\n   *     and nothing is returned.\n   */\n  instanceOf(ctor, opt_message) {\n    checkFunction(ctor);\n    return evaluate(this.subject_, function(actual) {\n      if (!(actual instanceof ctor)) {\n        assert.fail(\n            opt_message\n                || `${describe(actual)} instanceof ${ctor.name || ctor}`);\n      }\n    });\n  }\n\n  /**\n   * @param {string=} opt_message An optional failure message.\n   * @return {(Promise|undefined)} The result of this assertion, if the subject\n   *     is a promised-value. Otherwise, the assertion is performed immediately\n   *     and nothing is returned.\n   */\n  isNull(opt_message) {\n    return this.isEqualTo(null);\n  }\n\n  /**\n   * @param {string=} opt_message An optional failure message.\n   * @return {(Promise|undefined)} The result of this assertion, if the subject\n   *     is a promised-value. Otherwise, the assertion is performed immediately\n   *     and nothing is returned.\n   */\n  isUndefined(opt_message) {\n    return this.isEqualTo(void(0));\n  }\n\n  /**\n   * Ensures the subject of this assertion is either a string or array\n   * containing the given `value`.\n   *\n   * @param {?} value The value expected to be contained within the subject.\n   * @param {string=} opt_message An optional failure message.\n   * @return {(Promise|undefined)} The result of this assertion, if the subject\n   *     is a promised-value. Otherwise, the assertion is performed immediately\n   *     and nothing is returned.\n   */\n  contains(value, opt_message) {\n    return evaluate(this.subject_, function(actual) {\n      if (actual instanceof Map || actual instanceof Set) {\n        assert.ok(actual.has(value), opt_message || `${actual}.has(${value})`);\n      } else if (Array.isArray(actual) || isString(actual)) {\n        assert.ok(\n            actual.indexOf(value) !== -1,\n            opt_message || `${actual}.indexOf(${value}) !== -1`);\n      } else {\n        assert.fail(\n            `Expected an array, map, set, or string: got ${describe(actual)}`);\n      }\n    });\n  }\n\n  /**\n   * @param {string} str The expected suffix.\n   * @param {string=} opt_message An optional failure message.\n   * @return {(Promise|undefined)} The result of this assertion, if the subject\n   *     is a promised-value. Otherwise, the assertion is performed immediately\n   *     and nothing is returned.\n   */\n  endsWith(str, opt_message) {\n    checkString(str);\n    return evaluate(this.subject_, function(actual) {\n      if (!isString(actual) || !actual.endsWith(str)) {\n        assert.fail(actual, str, 'ends with');\n      }\n    });\n  }\n\n  /**\n   * @param {string} str The expected prefix.\n   * @param {string=} opt_message An optional failure message.\n   * @return {(Promise|undefined)} The result of this assertion, if the subject\n   *     is a promised-value. Otherwise, the assertion is performed immediately\n   *     and nothing is returned.\n   */\n  startsWith(str, opt_message) {\n    checkString(str);\n    return evaluate(this.subject_, function(actual) {\n      if (!isString(actual) || !actual.startsWith(str)) {\n        assert.fail(actual, str, 'starts with');\n      }\n    });\n  }\n\n  /**\n   * @param {!RegExp} regex The regex the subject is expected to match.\n   * @param {string=} opt_message An optional failure message.\n   * @return {(Promise|undefined)} The result of this assertion, if the subject\n   *     is a promised-value. Otherwise, the assertion is performed immediately\n   *     and nothing is returned.\n   */\n  matches(regex, opt_message) {\n    if (!(regex instanceof RegExp)) {\n      throw TypeError(`Not a RegExp: ${describe(regex)}`);\n    }\n    return evaluate(this.subject_, function(actual) {\n      if (!isString(actual) || !regex.test(actual)) {\n        let message = opt_message\n            || `Expected a string matching ${regex}, got ${describe(actual)}`;\n        assert.fail(actual, regex, message);\n      }\n    });\n  }\n\n  /**\n   * @param {?} value The unexpected value.\n   * @param {string=} opt_message An optional failure message.\n   * @return {(Promise|undefined)} The result of this assertion, if the subject\n   *     is a promised-value. Otherwise, the assertion is performed immediately\n   *     and nothing is returned.\n   */\n  notEqualTo(value, opt_message) {\n    return evaluate(this.subject_, function(actual) {\n      assert.notStrictEqual(actual, value, opt_message);\n    });\n  }\n\n  /** An alias for {@link #isEqualTo}. */\n  equalTo(value, opt_message) {\n    return this.isEqualTo(value, opt_message);\n  }\n\n  /** An alias for {@link #isEqualTo}. */\n  equals(value, opt_message) {\n    return this.isEqualTo(value, opt_message);\n  }\n\n  /**\n   * @param {?} value The expected value.\n   * @param {string=} opt_message An optional failure message.\n   * @return {(Promise|undefined)} The result of this assertion, if the subject\n   *     is a promised-value. Otherwise, the assertion is performed immediately\n   *     and nothing is returned.\n   */\n  isEqualTo(value, opt_message) {\n    return evaluate(this.subject_, function(actual) {\n      assert.strictEqual(actual, value, opt_message);\n    });\n  }\n\n  /**\n   * @param {string=} opt_message An optional failure message.\n   * @return {(Promise|undefined)} The result of this assertion, if the subject\n   *     is a promised-value. Otherwise, the assertion is performed immediately\n   *     and nothing is returned.\n   */\n  isTrue(opt_message) {\n    return this.isEqualTo(true, opt_message);\n  }\n\n  /**\n   * @param {string=} opt_message An optional failure message.\n   * @return {(Promise|undefined)} The result of this assertion, if the subject\n   *     is a promised-value. Otherwise, the assertion is performed immediately\n   *     and nothing is returned.\n   */\n  isFalse(opt_message) {\n    return this.isEqualTo(false, opt_message);\n  }\n}\n\n\n// PUBLIC API\n\n\n/**\n * Creates an assertion about the given `value`.\n * @return {!Assertion} the new assertion.\n */\nmodule.exports = function assertThat(value) {\n  return new Assertion(value);\n};\nmodule.exports.Assertion = Assertion;  // Exported to help generated docs\n"]}