{"version":3,"sources":["exec.js"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA,MAAM,eAAe,QAAQ,eAAR,CAArB;;AAGA;;;;;;;;;;;;;;;;AAgBA,IAAI,OAAJ;;AAGA;;;AAGA,MAAM,MAAN,CAAa;AACX;;;;;;AAMA,cAAY,IAAZ,EAAkB,MAAlB,EAA0B;AACxB;AACA,SAAK,IAAL,GAAY,IAAZ;;AAEA;AACA,SAAK,MAAL,GAAc,MAAd;AACD;;AAED;AACA,aAAW;AACT,WAAQ,gBAAc,KAAK,IAAK,cAAW,KAAK,MAAO,IAAvD;AACD;AAlBU;;AAsBb,MAAM,iBAAiB,4CAA4C,IAAI,OAAJ,EAAnE;AACA,MAAM,YAAY,2CAA2C,IAAI,OAAJ,EAA7D;;AAEA;;;AAGA,MAAM,OAAN,CAAc;AACZ;;;;;AAKA,cAAY,MAAZ,EAAoB,MAApB,EAA4B;AAC1B,mBAAe,GAAf,CAAmB,IAAnB,EAAyB,MAAzB;AACA,cAAU,GAAV,CAAc,IAAd,EAAoB,MAApB;AACD;;AAED;;;;AAIA,WAAS;AACP,WAAO,iCAAiC,eAAe,GAAf,CAAmB,IAAnB;AAAxC;AACD;;AAED;;;;AAIA,OAAK,UAAL,EAAiB;AACf,cAAU,GAAV,CAAc,IAAd,EAAoB,cAAc,SAAlC;AACD;AAzBW;;AA6Bd;;;AAGA;;;;;;;;AAQA,OAAO,OAAP,GAAiB,SAAS,IAAT,CAAc,OAAd,EAAuB,WAAvB,EAAoC;AACnD,MAAI,UAAU,eAAe,EAA7B;;AAEA,MAAI,OAAO,aAAa,KAAb,CAAmB,OAAnB,EAA4B,QAAQ,IAAR,IAAgB,EAA5C,EAAgD;AACzD,SAAK,QAAQ,GAAR,IAAe,QAAQ,GAD6B;AAEzD,WAAO,QAAQ,KAAR,IAAiB;AAFiC,GAAhD,CAAX;;AAKA;AACA;AACA,OAAK,KAAL;AACA,UAAQ,IAAR,CAAa,MAAb,EAAqB,aAArB;;AAEA,MAAI,SAAS,IAAI,OAAJ,CAAY,WAAW;AAClC,SAAK,IAAL,CAAU,MAAV,EAAkB,CAAC,IAAD,EAAO,MAAP,KAAkB;AAClC,aAAO,IAAP;AACA,cAAQ,cAAR,CAAuB,MAAvB,EAA+B,aAA/B;AACA,cAAQ,IAAI,MAAJ,CAAW,IAAX,EAAiB,MAAjB,CAAR;AACD,KAJD;AAKD,GANY,CAAb;AAOA,SAAO,IAAI,OAAJ,CAAY,MAAZ,EAAoB,WAApB,CAAP;;AAEA,WAAS,aAAT,GAAyB;AACvB,gBAAY,SAAZ;AACD;;AAED,WAAS,WAAT,CAAqB,MAArB,EAA6B;AAC3B,YAAQ,cAAR,CAAuB,MAAvB,EAA+B,aAA/B;AACA,QAAI,IAAJ,EAAU;AACR,WAAK,IAAL,CAAU,MAAV;AACA,aAAO,IAAP;AACD;AACF;AACF,CAjCD;;AAmCA;;AAEA,OAAO,OAAP,CAAe,OAAf,GAAyB,OAAzB;AACA;AACA,OAAO,OAAP,CAAe,OAAf,GAAyB,OAAzB;AACA,OAAO,OAAP,CAAe,MAAf,GAAwB,MAAxB","file":"exec-compiled.js","sourcesContent":["// Licensed to the Software Freedom Conservancy (SFC) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The SFC licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\n'use strict';\n\nconst childProcess = require('child_process');\n\n\n/**\n * A hash with configuration options for an executed command.\n *\n * - `args` - Command line arguments.\n * - `env` - Command environment; will inherit from the current process if\n *     missing.\n * - `stdio` - IO configuration for the spawned server process. For more\n *     information, refer to the documentation of `child_process.spawn`.\n *\n * @typedef {{\n *   args: (!Array<string>|undefined),\n *   env: (!Object<string, string>|undefined),\n *   stdio: (string|!Array<string|number|!stream.Stream|null|undefined>|\n *           undefined)\n * }}\n */\nvar Options;\n\n\n/**\n * Describes a command's termination conditions.\n */\nclass Result {\n  /**\n   * @param {?number} code The exit code, or {@code null} if the command did not\n   *     exit normally.\n   * @param {?string} signal The signal used to kill the command, or\n   *     {@code null}.\n   */\n  constructor(code, signal) {\n    /** @type {?number} */\n    this.code = code;\n\n    /** @type {?string} */\n    this.signal = signal;\n  }\n\n  /** @override */\n  toString() {\n    return `Result(code=${this.code}, signal=${this.signal})`;\n  }\n}\n\n\nconst COMMAND_RESULT = /** !WeakMap<!Command, !Promise<!Result>> */new WeakMap;\nconst KILL_HOOK = /** !WeakMap<!Command, function(string)> */new WeakMap;\n\n/**\n * Represents a command running in a sub-process.\n */\nclass Command {\n  /**\n   * @param {!Promise<!Result>} result The command result.\n   * @param {function(string)} onKill The function to call when {@link #kill()}\n   *     is called.\n   */\n  constructor(result, onKill) {\n    COMMAND_RESULT.set(this, result);\n    KILL_HOOK.set(this, onKill);\n  }\n\n  /**\n   * @return {!Promise<!Result>} A promise for the result of this\n   *     command.\n   */\n  result() {\n    return /** @type {!Promise<!Result>} */(COMMAND_RESULT.get(this));\n  }\n\n  /**\n   * Sends a signal to the underlying process.\n   * @param {string=} opt_signal The signal to send; defaults to `SIGTERM`.\n   */\n  kill(opt_signal) {\n    KILL_HOOK.get(this)(opt_signal || 'SIGTERM');\n  }\n}\n\n\n// PUBLIC API\n\n\n/**\n * Spawns a child process. The returned {@link Command} may be used to wait\n * for the process result or to send signals to the process.\n *\n * @param {string} command The executable to spawn.\n * @param {Options=} opt_options The command options.\n * @return {!Command} The launched command.\n */\nmodule.exports = function exec(command, opt_options) {\n  var options = opt_options || {};\n\n  var proc = childProcess.spawn(command, options.args || [], {\n    env: options.env || process.env,\n    stdio: options.stdio || 'ignore'\n  });\n\n  // This process should not wait on the spawned child, however, we do\n  // want to ensure the child is killed when this process exits.\n  proc.unref();\n  process.once('exit', onProcessExit);\n\n  let result = new Promise(resolve => {\n    proc.once('exit', (code, signal) => {\n      proc = null;\n      process.removeListener('exit', onProcessExit);\n      resolve(new Result(code, signal));\n    });\n  });\n  return new Command(result, killCommand);\n\n  function onProcessExit() {\n    killCommand('SIGTERM');\n  }\n\n  function killCommand(signal) {\n    process.removeListener('exit', onProcessExit);\n    if (proc) {\n      proc.kill(signal);\n      proc = null;\n    }\n  }\n};\n\n// Exported to improve generated API documentation.\n\nmodule.exports.Command = Command;\n/** @typedef {!Options} */\nmodule.exports.Options = Options;\nmodule.exports.Result = Result;\n"]}