{"version":3,"sources":["index.js"],"names":[],"mappings":"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","file":"index-compiled.js","sourcesContent":["// Licensed to the Software Freedom Conservancy (SFC) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The SFC licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\n'use strict';\n\nvar fs = require('fs'),\n    path = require('path'),\n    rimraf = require('rimraf'),\n    tmp = require('tmp');\n\n\n/**\n * @param {!Function} fn .\n * @return {!Promise<T>} .\n * @template T\n */\nfunction checkedCall(fn) {\n  return new Promise((resolve, reject) => {\n    try {\n      fn((err, value) => {\n        if (err) {\n          reject(err);\n        } else {\n          resolve(value);\n        }\n      });\n    } catch (e) {\n      reject(e);\n    }\n  });\n}\n\n\n\n// PUBLIC API\n\n\n\n/**\n * Recursively removes a directory and all of its contents. This is equivalent\n * to {@code rm -rf} on a POSIX system.\n * @param {string} dirPath Path to the directory to remove.\n * @return {!Promise} A promise to be resolved when the operation has\n *     completed.\n */\nexports.rmDir = function(dirPath) {\n  return new Promise(function(fulfill, reject) {\n    var numAttempts = 0;\n    attemptRm();\n    function attemptRm() {\n      numAttempts += 1;\n      rimraf(dirPath, function(err) {\n        if (err) {\n          if (err.code && err.code === 'ENOTEMPTY' && numAttempts < 2) {\n            attemptRm();\n            return;\n          }\n          reject(err);\n        } else {\n          fulfill();\n        }\n      });\n    }\n  });\n};\n\n\n/**\n * Copies one file to another.\n * @param {string} src The source file.\n * @param {string} dst The destination file.\n * @return {!Promise<string>} A promise for the copied file's path.\n */\nexports.copy = function(src, dst) {\n  return new Promise(function(fulfill, reject) {\n    var rs = fs.createReadStream(src);\n    rs.on('error', reject);\n    rs.on('end', () => fulfill(dst));\n\n    var ws = fs.createWriteStream(dst);\n    ws.on('error', reject);\n\n    rs.pipe(ws);\n  });\n};\n\n\n/**\n * Recursively copies the contents of one directory to another.\n * @param {string} src The source directory to copy.\n * @param {string} dst The directory to copy into.\n * @param {(RegExp|function(string): boolean)=} opt_exclude An exclusion filter\n *     as either a regex or predicate function. All files matching this filter\n *     will not be copied.\n * @return {!Promise<string>} A promise for the destination\n *     directory's path once all files have been copied.\n */\nexports.copyDir = function(src, dst, opt_exclude) {\n  var predicate = opt_exclude;\n  if (opt_exclude && typeof opt_exclude !== 'function') {\n    predicate = function(p) {\n      return !opt_exclude.test(p);\n    };\n  }\n\n  // TODO(jleyba): Make this function completely async.\n  if (!fs.existsSync(dst)) {\n    fs.mkdirSync(dst);\n  }\n\n  var files = fs.readdirSync(src);\n  files = files.map(function(file) {\n    return path.join(src, file);\n  });\n\n  if (predicate) {\n    files = files.filter(/** @type {function(string): boolean} */(predicate));\n  }\n\n  var results = [];\n  files.forEach(function(file) {\n    var stats = fs.statSync(file);\n    var target = path.join(dst, path.basename(file));\n\n    if (stats.isDirectory()) {\n      if (!fs.existsSync(target)) {\n        fs.mkdirSync(target, stats.mode);\n      }\n      results.push(exports.copyDir(file, target, predicate));\n    } else {\n      results.push(exports.copy(file, target));\n    }\n  });\n\n  return Promise.all(results).then(() => dst);\n};\n\n\n/**\n * Tests if a file path exists.\n * @param {string} aPath The path to test.\n * @return {!Promise<boolean>} A promise for whether the file exists.\n */\nexports.exists = function(aPath) {\n  return new Promise(function(fulfill, reject) {\n    let type = typeof aPath;\n    if (type !== 'string') {\n      reject(TypeError(`expected string path, but got ${type}`));\n    } else {\n      fs.exists(aPath, fulfill);\n    }\n  });\n};\n\n\n/**\n * Calls `stat(2)`.\n * @param {string} aPath The path to stat.\n * @return {!Promise<!fs.Stats>} A promise for the file stats.\n */\nexports.stat = function stat(aPath) {\n  return checkedCall(callback => fs.stat(aPath, callback));\n};\n\n\n/**\n * Deletes a name from the filesystem and possibly the file it refers to. Has\n * no effect if the file does not exist.\n * @param {string} aPath The path to remove.\n * @return {!Promise} A promise for when the file has been removed.\n */\nexports.unlink = function(aPath) {\n  return new Promise(function(fulfill, reject) {\n    fs.exists(aPath, function(exists) {\n      if (exists) {\n        fs.unlink(aPath, function(err) {\n          err && reject(err) || fulfill();\n        });\n      } else {\n        fulfill();\n      }\n    });\n  });\n};\n\n\n/**\n * @return {!Promise<string>} A promise for the path to a temporary directory.\n * @see https://www.npmjs.org/package/tmp\n */\nexports.tmpDir = function() {\n  return checkedCall(tmp.dir);\n};\n\n\n/**\n * @param {{postfix: string}=} opt_options Temporary file options.\n * @return {!Promise<string>} A promise for the path to a temporary file.\n * @see https://www.npmjs.org/package/tmp\n */\nexports.tmpFile = function(opt_options) {\n  return checkedCall(callback => {\n    // |tmp.file| checks arguments length to detect options rather than doing a\n    // truthy check, so we must only pass options if there are some to pass.\n    if (opt_options) {\n      tmp.file(opt_options, callback);\n    } else {\n      tmp.file(callback);\n    }\n  });\n};\n\n\n/**\n * Searches the {@code PATH} environment variable for the given file.\n * @param {string} file The file to locate on the PATH.\n * @param {boolean=} opt_checkCwd Whether to always start with the search with\n *     the current working directory, regardless of whether it is explicitly\n *     listed on the PATH.\n * @return {?string} Path to the located file, or {@code null} if it could\n *     not be found.\n */\nexports.findInPath = function(file, opt_checkCwd) {\n  let dirs = [];\n  if (opt_checkCwd) {\n    dirs.push(process.cwd());\n  }\n  dirs.push.apply(dirs, process.env['PATH'].split(path.delimiter));\n\n  let foundInDir = dirs.find(dir => {\n    let tmp = path.join(dir, file);\n    try {\n      let stats = fs.statSync(tmp);\n      return stats.isFile() && !stats.isDirectory();\n    } catch (ex) {\n      return false;\n    }\n  });\n\n  return foundInDir ? path.join(foundInDir, file) : null;\n};\n\n\n/**\n * Reads the contents of the given file.\n *\n * @param {string} aPath Path to the file to read.\n * @return {!Promise<!Buffer>} A promise that will resolve with a buffer of the\n *     file contents.\n */\nexports.read = function(aPath) {\n  return checkedCall(callback => fs.readFile(aPath, callback));\n};\n\n\n/**\n * Writes to a file.\n *\n * @param {string} aPath Path to the file to write to.\n * @param {(string|!Buffer)} data The data to write.\n * @return {!Promise} A promise that will resolve when the operation has\n *     completed.\n */\nexports.write = function(aPath, data) {\n  return checkedCall(callback => fs.writeFile(aPath, data, callback));\n};\n\n\n/**\n * Creates a directory.\n *\n * @param {string} aPath The directory path.\n * @return {!Promise<string>} A promise that will resolve with the path of the\n *     created directory.\n */\nexports.mkdir = function(aPath) {\n  return checkedCall(callback => {\n    fs.mkdir(aPath, undefined, err => {\n      if (err && err.code !== 'EEXIST') {\n        callback(err);\n      } else {\n        callback(null, aPath);\n      }\n    });\n  });\n};\n"]}