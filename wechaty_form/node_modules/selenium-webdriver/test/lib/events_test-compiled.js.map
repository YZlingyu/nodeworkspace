{"version":3,"sources":["events_test.js"],"names":[],"mappings":"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","file":"events_test-compiled.js","sourcesContent":["// Licensed to the Software Freedom Conservancy (SFC) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The SFC licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\n'use strict';\n\nconst EventEmitter = require('../../lib/events').EventEmitter;\n\nconst assert = require('assert');\nconst sinon = require('sinon');\n\ndescribe('EventEmitter', function() {\n  describe('#emit()', function() {\n    it('can emit events when nothing is registered', function() {\n      let emitter = new EventEmitter;\n      emitter.emit('foo');\n      // Ok if no errors are thrown.\n    });\n\n    it('can pass args to listeners on emit', function() {\n      let emitter = new EventEmitter;\n      let now = Date.now();\n\n      let messages = [];\n      emitter.on('foo', (arg) => messages.push(arg));\n\n      emitter.emit('foo', now);\n      assert.deepEqual([now], messages);\n\n      emitter.emit('foo', now + 15);\n      assert.deepEqual([now, now + 15], messages);\n    });\n  });\n\n  describe('#addListener()', function() {\n    it('can add multiple listeners for one event', function() {\n      let emitter = new EventEmitter;\n      let count = 0;\n      emitter.addListener('foo', () => count++);\n      emitter.addListener('foo', () => count++);\n      emitter.addListener('foo', () => count++);\n      emitter.emit('foo');\n      assert.equal(3, count);\n    });\n\n    it('only registers each listener function once', function() {\n      let emitter = new EventEmitter;\n      let count = 0;\n      let onFoo = () => count++;\n      emitter.addListener('foo', onFoo);\n      emitter.addListener('foo', onFoo);\n      emitter.addListener('foo', onFoo);\n\n      emitter.emit('foo');\n      assert.equal(1, count);\n\n      emitter.emit('foo');\n      assert.equal(2, count);\n    });\n\n    it('allows users to specify a custom scope', function() {\n      let obj = {\n        count: 0,\n        inc: function() {\n          this.count++;\n        }\n      };\n      let emitter = new EventEmitter;\n      emitter.addListener('foo', obj.inc, obj);\n\n      emitter.emit('foo');\n      assert.equal(1, obj.count);\n\n      emitter.emit('foo');\n      assert.equal(2, obj.count);\n    });\n  });\n\n  describe('#once()', function() {\n    it('only calls registered callback once', function() {\n      let emitter = new EventEmitter;\n      let count = 0;\n      emitter.once('foo', () => count++);\n      emitter.once('foo', () => count++);\n      emitter.once('foo', () => count++);\n\n      emitter.emit('foo');\n      assert.equal(3, count);\n\n      emitter.emit('foo');\n      assert.equal(3, count);\n\n      emitter.emit('foo');\n      assert.equal(3, count);\n    });\n  });\n\n  describe('#removeListeners()', function() {\n    it('only removes the given listener function', function() {\n      let emitter = new EventEmitter;\n      let count = 0;\n      emitter.addListener('foo', () => count++);\n      emitter.addListener('foo', () => count++);\n\n      let toRemove = () => count++;\n      emitter.addListener('foo', toRemove);\n\n      emitter.emit('foo');\n      assert.equal(3, count);\n\n      emitter.removeListener('foo', toRemove);\n      emitter.emit('foo');\n      assert.equal(5, count);\n    });\n  });\n\n  describe('#removeAllListeners()', function() {\n    it('only removes listeners for type if specified', function() {\n      let emitter = new EventEmitter;\n      let count = 0;\n      emitter.addListener('foo', () => count++);\n      emitter.addListener('foo', () => count++);\n      emitter.addListener('foo', () => count++);\n      emitter.addListener('bar', () => count++);\n\n      emitter.emit('foo');\n      assert.equal(3, count);\n\n      emitter.removeAllListeners('foo');\n\n      emitter.emit('foo');\n      assert.equal(3, count);\n\n      emitter.emit('bar');\n      assert.equal(4, count);\n    });\n\n    it('removes absolutely all listeners if no type specified', function() {\n      let emitter = new EventEmitter;\n      let count = 0;\n      emitter.addListener('foo', () => count++);\n      emitter.addListener('bar', () => count++);\n      emitter.addListener('baz', () => count++);\n      emitter.addListener('baz', () => count++);\n\n      emitter.emit('foo');\n      assert.equal(1, count);\n\n      emitter.emit('baz');\n      assert.equal(3, count);\n\n      emitter.removeAllListeners();\n\n      emitter.emit('foo');\n      assert.equal(3, count);\n\n      emitter.emit('bar');\n      assert.equal(3, count);\n\n      emitter.emit('baz');\n      assert.equal(3, count);\n    });\n  });\n});\n"]}