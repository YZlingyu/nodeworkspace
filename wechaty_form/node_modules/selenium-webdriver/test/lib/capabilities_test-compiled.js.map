{"version":3,"sources":["capabilities_test.js"],"names":[],"mappings":"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","file":"capabilities_test-compiled.js","sourcesContent":["// Licensed to the Software Freedom Conservancy (SFC) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The SFC licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\n'use strict';\n\nconst Capabilities = require('../../lib/capabilities').Capabilities;\nconst Symbols = require('../../lib/symbols');\n\nconst assert = require('assert');\n\ndescribe('Capabilities', function() {\n  it('can set and unset a capability', function() {\n    let caps = new Capabilities();\n    assert.equal(undefined, caps.get('foo'));\n    assert.ok(!caps.has('foo'));\n\n    caps.set('foo', 'bar');\n    assert.equal('bar', caps.get('foo'));\n    assert.ok(caps.has('foo'));\n\n    caps.set('foo', null);\n    assert.equal(null, caps.get('foo'));\n    assert.ok(caps.has('foo'));\n  });\n\n  it('requires string capability keys', function() {\n    let caps = new Capabilities();\n    assert.throws(() => caps.set({}, 'hi'));\n  });\n\n  it('can merge capabilities', function() {\n    let caps1 = new Capabilities()\n        .set('foo', 'bar')\n        .set('color', 'red');\n\n    let caps2 = new Capabilities()\n        .set('color', 'green');\n\n    assert.equal('bar', caps1.get('foo'));\n    assert.equal('red', caps1.get('color'));\n    assert.equal('green', caps2.get('color'));\n    assert.equal(undefined, caps2.get('foo'));\n\n    caps2.merge(caps1);\n    assert.equal('bar', caps1.get('foo'));\n    assert.equal('red', caps1.get('color'));\n    assert.equal('red', caps2.get('color'));\n    assert.equal('bar', caps2.get('foo'));\n  });\n\n  it('can be initialized from a hash object', function() {\n    let caps = new Capabilities({'one': 123, 'abc': 'def'});\n    assert.equal(123, caps.get('one'));\n    assert.equal('def', caps.get('abc'));\n  });\n\n  it('can be initialized from a map', function() {\n    let m = new Map([['one', 123], ['abc', 'def']]);\n\n    let caps = new Capabilities(m);\n    assert.equal(123, caps.get('one'));\n    assert.equal('def', caps.get('abc'));\n  });\n\n  describe('serialize', function() {\n    it('works for simple capabilities', function() {\n      let m = new Map([['one', 123], ['abc', 'def']]);\n      let caps = new Capabilities(m);\n      assert.deepEqual({one: 123, abc: 'def'}, caps[Symbols.serialize]());\n    });\n\n    it('does not omit capabilities set to a false-like value', function() {\n      let caps = new Capabilities;\n      caps.set('bool', false);\n      caps.set('number', 0);\n      caps.set('string', '');\n\n      assert.deepEqual(\n          {bool: false, number: 0, string: ''},\n          caps[Symbols.serialize]());\n    });\n\n    it('omits capabilities with a null value', function() {\n      let caps = new Capabilities;\n      caps.set('foo', null);\n      caps.set('bar', 123);\n      assert.deepEqual({bar: 123}, caps[Symbols.serialize]());\n    });\n\n    it('omits capabilities with an undefined value', function() {\n      let caps = new Capabilities;\n      caps.set('foo', undefined);\n      caps.set('bar', 123);\n      assert.deepEqual({bar: 123}, caps[Symbols.serialize]());\n    });\n  });\n});\n"]}