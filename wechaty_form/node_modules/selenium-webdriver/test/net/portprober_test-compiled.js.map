{"version":3,"sources":["portprober_test.js"],"names":[],"mappings":"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","file":"portprober_test-compiled.js","sourcesContent":["// Licensed to the Software Freedom Conservancy (SFC) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The SFC licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\n'use strict';\n\nconst assert = require('assert');\nconst net = require('net');\n\nconst portprober = require('../../net/portprober');\n\ndescribe('isFree', function() {\n\n  var server;\n\n  beforeEach(function() {\n    server = net.createServer(function(){});\n  })\n\n  afterEach(function(done) {\n    if (!server) return done();\n    server.close(function() {\n      done();\n    });\n  });\n\n  it('should work for INADDR_ANY', function(done) {\n    server.listen(0, function() {\n      var port = server.address().port;\n      assertPortNotfree(port).then(function() {\n        return new Promise(resolve => {\n          server.close(function() {\n            server = null;\n            resolve(assertPortIsFree(port));\n          });\n        });\n      }).then(function() { done(); }, done);\n    });\n  });\n\n  it('should work for a specific host', function(done) {\n    var host = '127.0.0.1';\n    server.listen(0, host, function() {\n      var port = server.address().port;\n      assertPortNotfree(port, host).then(function() {\n        return new Promise(resolve => {\n          server.close(function() {\n            server = null;\n            resolve(assertPortIsFree(port, host));\n          });\n        });\n      }).then(function() { done(); }, done);\n    });\n  });\n});\n\ndescribe('findFreePort', function() {\n  var server;\n\n  beforeEach(function() {\n    server = net.createServer(function(){});\n  })\n\n  afterEach(function(done) {\n    if (!server) return done();\n    server.close(function() {\n      done();\n    });\n  });\n\n  it('should work for INADDR_ANY', function(done) {\n    portprober.findFreePort().then(function(port) {\n      server.listen(port, function() {\n        assertPortNotfree(port).then(function() {\n          return new Promise(resolve => {\n            server.close(function() {\n              server = null;\n              resolve(assertPortIsFree(port));\n            });\n          });\n        }).then(function() { done(); }, done);\n      });\n    });\n  });\n\n  it('should work for a specific host', function(done) {\n    var host = '127.0.0.1';\n    portprober.findFreePort(host).then(function(port) {\n      server.listen(port, host, function() {\n        assertPortNotfree(port, host).then(function() {\n          return new Promise(resolve => {\n            server.close(function() {\n              server = null;\n              resolve(assertPortIsFree(port, host));\n            });\n          });\n        }).then(function() { done(); }, done);\n      });\n    });\n  });\n});\n\n\nfunction assertPortIsFree(port, opt_host) {\n  return portprober.isFree(port, opt_host).then(function(free) {\n    assert.ok(free, 'port should be free');\n  });\n}\n\n\nfunction assertPortNotfree(port, opt_host) {\n  return portprober.isFree(port, opt_host).then(function(free) {\n    assert.ok(!free, 'port should is not free');\n  });\n}\n"]}