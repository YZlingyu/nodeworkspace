{"version":3,"sources":["population-options.js"],"names":[],"mappings":";AACA,IAAI,WAAW,QAAQ,WAAR,CAAf;AACA,IAAI,SAAS,SAAS,MAAtB;;AAEA,QAAQ,GAAR,CAAY,6BAAZ,EAA2C,SAAS,OAApD;;AAEA;;;;AAIA,IAAI,gBAAgB,OAAO;AACzB,QAAM,MADmB;AAEzB,gBAAc,MAFW;AAGzB,YAAU;AAHe,CAAP,CAApB;AAKA,IAAI,UAAU,SAAS,KAAT,CAAe,SAAf,EAA0B,aAA1B,CAAd;;AAEA;;;;AAIA,IAAI,aAAa,OAAO;AACtB,QAAM,MADgB;AAEtB,aAAW,MAFW;AAGtB,YAAU,IAHY;AAItB,YAAU,CAAC;AACT,UAAM,OAAO,KAAP,CAAa,QADV;AAET,SAAK;AAFI,GAAD;AAJY,CAAP,CAAjB;AASA,IAAI,OAAO,SAAS,KAAT,CAAe,MAAf,EAAuB,UAAvB,CAAX;;AAEA;;;;;AAKA,SAAS,OAAT,CAAiB,6BAAjB,EAAgD,UAAS,GAAT,EAAc;AAC5D;AACA,MAAI,GAAJ,EAAS,MAAM,GAAN;;AAET;AACA;AACD,CAND;;AAQA;;;;AAIA,SAAS,UAAT,GAAsB;AACpB,UAAQ,MAAR,CACE;AACE,UAAM,aADR;AAEE,kBAAc,UAFhB;AAGE,cAAU;AAHZ,GADF,EAME;AACE,UAAM,gBADR;AAEE,kBAAc,UAFhB;AAGE,cAAU;AAHZ,GANF,EAWE;AACE,UAAM,UADR;AAEE,kBAAc,WAFhB;AAGE,cAAU;AAHZ,GAXF,EAgBE,UAAS,GAAT,EAAc,UAAd,EAA0B,aAA1B,EAAyC,OAAzC,EAAkD;AAChD,QAAI,GAAJ,EAAS,OAAO,KAAK,GAAL,CAAP;;AAET,SAAK,MAAL,CACE;AACE,YAAM,kCADR;AAEE,iBAAW,UAFb;AAGE,gBAAU,IAAI,IAAJ,CAAS,mBAAT,CAHZ;AAIE,gBAAU,CAAC,UAAD;AAJZ,KADF,EAOE;AACE,YAAM,YADR;AAEE,iBAAW,UAFb;AAGE,gBAAU,mBAHZ;AAIE,gBAAU,CAAC,aAAD;AAJZ,KAPF,EAaE;AACE,YAAM,mBADR;AAEE,iBAAW,MAFb;AAGE,gBAAU,mBAHZ;AAIE,gBAAU,CAAC,OAAD;AAJZ,KAbF,EAmBE,UAAS,GAAT,EAAc;AACZ,UAAI,GAAJ,EAAS,OAAO,KAAK,GAAL,CAAP;AACT;AACD,KAtBH;AAwBD,GA3CH;AA6CD;;AAED;;;;AAIA,SAAS,OAAT,GAAmB;AACjB,OACC,IADD,CACM,EADN,EAEC,QAFD,CAEU;AACR,UAAM,UADE;AAER,WAAO,EAAC,cAAc,UAAf,EAFC;AAGR,YAAQ,MAHA;AAIR,aAAS,EAAC,SAAS,YAAV;AAJD,GAFV,EAQC,IARD,CAQM,UAAS,GAAT,EAAc,KAAd,EAAqB;AACzB,QAAI,GAAJ,EAAS,OAAO,KAAK,GAAL,CAAP;;AAET,UAAM,OAAN,CAAc,UAAS,IAAT,EAAe;AAC3B,cAAQ,GAAR,CACE,oCADF,EAEE,KAAK,IAFP,EAGE,KAAK,QAAL,CAAc,MAAd,GAAuB,KAAK,QAAL,CAAc,CAAd,EAAiB,IAAxC,GAA+C,IAHjD,EAIE,KAAK,QAAL,CAAc,kBAAd,EAJF;AAMD,KAPD;;AASA,WAAO,MAAP;AACD,GArBD;AAsBD;;AAED;;;;AAIA,SAAS,IAAT,CAAc,GAAd,EAAmB;AACjB,MAAI,GAAJ,EAAS,QAAQ,KAAR,CAAc,GAAd;AACT,UAAQ,MAAR,CAAe,YAAW;AACxB,SAAK,MAAL,CAAY,YAAW;AACrB,eAAS,UAAT;AACD,KAFD;AAGD,GAJD;AAKD","file":"population-options-compiled.js","sourcesContent":["\nvar mongoose = require('../../lib');\nvar Schema = mongoose.Schema;\n\nconsole.log('Running mongoose version %s', mongoose.version);\n\n/**\n * Console schema\n */\n\nvar consoleSchema = Schema({\n  name: String,\n  manufacturer: String,\n  released: Date\n});\nvar Console = mongoose.model('Console', consoleSchema);\n\n/**\n * Game schema\n */\n\nvar gameSchema = Schema({\n  name: String,\n  developer: String,\n  released: Date,\n  consoles: [{\n    type: Schema.Types.ObjectId,\n    ref: 'Console'\n  }]\n});\nvar Game = mongoose.model('Game', gameSchema);\n\n/**\n * Connect to the console database on localhost with\n * the default port (27017)\n */\n\nmongoose.connect('mongodb://localhost/console', function(err) {\n  // if we failed to connect, abort\n  if (err) throw err;\n\n  // we connected ok\n  createData();\n});\n\n/**\n * Data generation\n */\n\nfunction createData() {\n  Console.create(\n    {\n      name: 'Nintendo 64',\n      manufacturer: 'Nintendo',\n      released: 'September 29, 1996'\n    },\n    {\n      name: 'Super Nintendo',\n      manufacturer: 'Nintendo',\n      released: 'August 23, 1991'\n    },\n    {\n      name: 'XBOX 360',\n      manufacturer: 'Microsoft',\n      released: 'November 22, 2005'\n    },\n    function(err, nintendo64, superNintendo, xbox360) {\n      if (err) return done(err);\n\n      Game.create(\n        {\n          name: 'Legend of Zelda: Ocarina of Time',\n          developer: 'Nintendo',\n          released: new Date('November 21, 1998'),\n          consoles: [nintendo64]\n        },\n        {\n          name: 'Mario Kart',\n          developer: 'Nintendo',\n          released: 'September 1, 1992',\n          consoles: [superNintendo]\n        },\n        {\n          name: 'Perfect Dark Zero',\n          developer: 'Rare',\n          released: 'November 17, 2005',\n          consoles: [xbox360]\n        },\n        function(err) {\n          if (err) return done(err);\n          example();\n        }\n      );\n    }\n  );\n}\n\n/**\n * Population\n */\n\nfunction example() {\n  Game\n  .find({})\n  .populate({\n    path: 'consoles',\n    match: {manufacturer: 'Nintendo'},\n    select: 'name',\n    options: {comment: 'population'}\n  })\n  .exec(function(err, games) {\n    if (err) return done(err);\n\n    games.forEach(function(game) {\n      console.log(\n        '\"%s\" was released for the %s on %s',\n        game.name,\n        game.consoles.length ? game.consoles[0].name : '??',\n        game.released.toLocaleDateString()\n      );\n    });\n\n    return done();\n  });\n}\n\n/**\n * Clean up\n */\n\nfunction done(err) {\n  if (err) console.error(err);\n  Console.remove(function() {\n    Game.remove(function() {\n      mongoose.disconnect();\n    });\n  });\n}\n"]}