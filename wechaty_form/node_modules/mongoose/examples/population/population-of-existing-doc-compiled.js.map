{"version":3,"sources":["population-of-existing-doc.js"],"names":[],"mappings":";AACA,IAAI,WAAW,QAAQ,WAAR,CAAf;AACA,IAAI,SAAS,SAAS,MAAtB;;AAEA,QAAQ,GAAR,CAAY,6BAAZ,EAA2C,SAAS,OAApD;;AAEA;;;;AAIA,IAAI,gBAAgB,OAAO;AACzB,QAAM,MADmB;AAEzB,gBAAc,MAFW;AAGzB,YAAU;AAHe,CAAP,CAApB;AAKA,IAAI,UAAU,SAAS,KAAT,CAAe,SAAf,EAA0B,aAA1B,CAAd;;AAEA;;;;AAIA,IAAI,aAAa,OAAO;AACtB,QAAM,MADgB;AAEtB,aAAW,MAFW;AAGtB,YAAU,IAHY;AAItB,YAAU,CAAC;AACT,UAAM,OAAO,KAAP,CAAa,QADV;AAET,SAAK;AAFI,GAAD;AAJY,CAAP,CAAjB;AASA,IAAI,OAAO,SAAS,KAAT,CAAe,MAAf,EAAuB,UAAvB,CAAX;;AAEA;;;;;AAKA,SAAS,OAAT,CAAiB,6BAAjB,EAAgD,UAAS,GAAT,EAAc;AAC5D;AACA,MAAI,GAAJ,EAAS,MAAM,GAAN;;AAET;AACA;AACD,CAND;;AAQA;;;;AAIA,SAAS,UAAT,GAAsB;AACpB,UAAQ,MAAR,CACE;AACE,UAAM,aADR;AAEE,kBAAc,UAFhB;AAGE,cAAU;AAHZ,GADF,EAME,UAAS,GAAT,EAAc,UAAd,EAA0B;AACxB,QAAI,GAAJ,EAAS,OAAO,KAAK,GAAL,CAAP;;AAET,SAAK,MAAL,CAAY;AACV,YAAM,kCADI;AAEV,iBAAW,UAFD;AAGV,gBAAU,IAAI,IAAJ,CAAS,mBAAT,CAHA;AAIV,gBAAU,CAAC,UAAD;AAJA,KAAZ,EAMA,UAAS,GAAT,EAAc;AACZ,UAAI,GAAJ,EAAS,OAAO,KAAK,GAAL,CAAP;AACT;AACD,KATD;AAUD,GAnBH;AAqBD;;AAED;;;;AAIA,SAAS,OAAT,GAAmB;AACjB,OACC,OADD,CACS,EAAC,MAAM,kBAAP,EADT,EAEC,IAFD,CAEM,UAAS,GAAT,EAAc,OAAd,EAAuB;AAC3B,QAAI,GAAJ,EAAS,OAAO,KAAK,GAAL,CAAP;;AAET,YAAQ,GAAR,CAAY,sBAAZ,EAAoC,QAAQ,IAA5C,EAAkD,QAAQ,QAAR,CAAiB,CAAjB,CAAlD;;AAEA;AACA,YAAQ,QAAR,CAAiB,UAAjB,EAA6B,UAAS,GAAT,EAAc;AACzC,UAAI,GAAJ,EAAS,OAAO,KAAK,GAAL,CAAP;;AAET,cAAQ,GAAR,CACE,oCADF,EAEE,QAAQ,IAFV,EAGE,QAAQ,QAAR,CAAiB,CAAjB,EAAoB,IAHtB,EAIE,QAAQ,QAAR,CAAiB,kBAAjB,EAJF;;AAOA;AACD,KAXD;AAYD,GApBD;AAqBD;;AAED,SAAS,IAAT,CAAc,GAAd,EAAmB;AACjB,MAAI,GAAJ,EAAS,QAAQ,KAAR,CAAc,GAAd;AACT,UAAQ,MAAR,CAAe,YAAW;AACxB,SAAK,MAAL,CAAY,YAAW;AACrB,eAAS,UAAT;AACD,KAFD;AAGD,GAJD;AAKD","file":"population-of-existing-doc-compiled.js","sourcesContent":["\nvar mongoose = require('../../lib');\nvar Schema = mongoose.Schema;\n\nconsole.log('Running mongoose version %s', mongoose.version);\n\n/**\n * Console schema\n */\n\nvar consoleSchema = Schema({\n  name: String,\n  manufacturer: String,\n  released: Date\n});\nvar Console = mongoose.model('Console', consoleSchema);\n\n/**\n * Game schema\n */\n\nvar gameSchema = Schema({\n  name: String,\n  developer: String,\n  released: Date,\n  consoles: [{\n    type: Schema.Types.ObjectId,\n    ref: 'Console'\n  }]\n});\nvar Game = mongoose.model('Game', gameSchema);\n\n/**\n * Connect to the console database on localhost with\n * the default port (27017)\n */\n\nmongoose.connect('mongodb://localhost/console', function(err) {\n  // if we failed to connect, abort\n  if (err) throw err;\n\n  // we connected ok\n  createData();\n});\n\n/**\n * Data generation\n */\n\nfunction createData() {\n  Console.create(\n    {\n      name: 'Nintendo 64',\n      manufacturer: 'Nintendo',\n      released: 'September 29, 1996'\n    },\n    function(err, nintendo64) {\n      if (err) return done(err);\n\n      Game.create({\n        name: 'Legend of Zelda: Ocarina of Time',\n        developer: 'Nintendo',\n        released: new Date('November 21, 1998'),\n        consoles: [nintendo64]\n      },\n      function(err) {\n        if (err) return done(err);\n        example();\n      });\n    }\n  );\n}\n\n/**\n * Population\n */\n\nfunction example() {\n  Game\n  .findOne({name: /^Legend of Zelda/})\n  .exec(function(err, ocinara) {\n    if (err) return done(err);\n\n    console.log('\"%s\" console _id: %s', ocinara.name, ocinara.consoles[0]);\n\n    // population of existing document\n    ocinara.populate('consoles', function(err) {\n      if (err) return done(err);\n\n      console.log(\n        '\"%s\" was released for the %s on %s',\n        ocinara.name,\n        ocinara.consoles[0].name,\n        ocinara.released.toLocaleDateString()\n      );\n\n      done();\n    });\n  });\n}\n\nfunction done(err) {\n  if (err) console.error(err);\n  Console.remove(function() {\n    Game.remove(function() {\n      mongoose.disconnect();\n    });\n  });\n}\n"]}