{"version":3,"sources":["population-across-three-collections.js"],"names":[],"mappings":"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","file":"population-across-three-collections-compiled.js","sourcesContent":["\nvar assert = require('assert');\nvar mongoose = require('../../lib');\nvar Schema = mongoose.Schema;\nvar ObjectId = mongoose.Types.ObjectId;\n\n/**\n * Connect to the db\n */\n\nvar dbname = 'testing_populateAdInfinitum_' + require('../../lib/utils').random();\nmongoose.connect('localhost', dbname);\nmongoose.connection.on('error', function() {\n  console.error('connection error', arguments);\n});\n\n/**\n * Schemas\n */\n\nvar user = new Schema({\n  name: String,\n  friends: [{\n    type: Schema.ObjectId,\n    ref: 'User'\n  }]\n});\nvar User = mongoose.model('User', user);\n\nvar blogpost = Schema({\n  title: String,\n  tags: [String],\n  author: {\n    type: Schema.ObjectId,\n    ref: 'User'\n  }\n});\nvar BlogPost = mongoose.model('BlogPost', blogpost);\n\n/**\n * example\n */\n\nmongoose.connection.on('open', function() {\n  /**\n   * Generate data\n   */\n\n  var userIds = [new ObjectId, new ObjectId, new ObjectId, new ObjectId];\n  var users = [];\n\n  users.push({\n    _id: userIds[0],\n    name: 'mary',\n    friends: [userIds[1], userIds[2], userIds[3]]\n  });\n  users.push({\n    _id: userIds[1],\n    name: 'bob',\n    friends: [userIds[0], userIds[2], userIds[3]]\n  });\n  users.push({\n    _id: userIds[2],\n    name: 'joe',\n    friends: [userIds[0], userIds[1], userIds[3]]\n  });\n  users.push({\n    _id: userIds[3],\n    name: 'sally',\n    friends: [userIds[0], userIds[1], userIds[2]]\n  });\n\n  User.create(users, function(err) {\n    assert.ifError(err);\n\n    var blogposts = [];\n    blogposts.push({\n      title: 'blog 1',\n      tags: ['fun', 'cool'],\n      author: userIds[3]\n    });\n    blogposts.push({\n      title: 'blog 2',\n      tags: ['cool'],\n      author: userIds[1]\n    });\n    blogposts.push({\n      title: 'blog 3',\n      tags: ['fun', 'odd'],\n      author: userIds[2]\n    });\n\n    BlogPost.create(blogposts, function(err) {\n      assert.ifError(err);\n\n      /**\n       * Population\n       */\n\n      BlogPost\n      .find({tags: 'fun'})\n      .lean()\n      .populate('author')\n      .exec(function(err, docs) {\n        assert.ifError(err);\n\n        /**\n         * Populate the populated documents\n         */\n\n        var opts = {\n          path: 'author.friends',\n          select: 'name',\n          options: {limit: 2}\n        };\n\n        BlogPost.populate(docs, opts, function(err, docs) {\n          assert.ifError(err);\n          console.log('populated');\n          var s = require('util').inspect(docs, {depth: null, colors: true});\n          console.log(s);\n          done();\n        });\n      });\n    });\n  });\n});\n\nfunction done(err) {\n  if (err) console.error(err.stack);\n  mongoose.connection.db.dropDatabase(function() {\n    mongoose.connection.close();\n  });\n}\n"]}