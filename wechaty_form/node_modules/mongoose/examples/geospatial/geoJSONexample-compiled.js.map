{"version":3,"sources":["geoJSONexample.js"],"names":[],"mappings":"AAAA;AACA,IAAI,QAAQ,QAAQ,OAAR,CAAZ;;AAEA;AACA,IAAI,WAAW,QAAQ,WAAR,CAAf;;AAEA,QAAQ,oBAAR;;AAEA,IAAI,WAAW,SAAS,KAAT,CAAe,UAAf,CAAf;;AAEA;AACA;AACA,IAAI,OAAO,CACT,EAAC,KAAK,EAAC,MAAM,OAAP,EAAgB,aAAa,CAAC,CAAC,IAAF,EAAQ,GAAR,CAA7B,EAAN,EADS,EAET,EAAC,KAAK,EAAC,MAAM,OAAP,EAAgB,aAAa,CAAC,GAAD,EAAM,IAAN,CAA7B,EAAN,EAFS,EAGT,EAAC,KAAK,EAAC,MAAM,OAAP,EAAgB,aAAa,CAAC,IAAD,EAAO,CAAC,IAAR,CAA7B,EAAN,EAHS,EAIT,EAAC,KAAK,EAAC,MAAM,OAAP,EAAgB,aAAa,CAAC,CAAC,KAAF,EAAS,IAAT,CAA7B,EAAN,EAJS,EAKT,EAAC,KAAK,EAAC,MAAM,OAAP,EAAgB,aAAa,CAAC,IAAD,EAAO,IAAP,CAA7B,EAAN,EALS,CAAX;;AASA,SAAS,OAAT,CAAiB,+BAAjB,EAAkD,UAAS,GAAT,EAAc;AAC9D,MAAI,GAAJ,EAAS;AACP,UAAM,GAAN;AACD;;AAED,WAAS,EAAT,CAAY,OAAZ,EAAqB,UAAS,GAAT,EAAc;AACjC,QAAI,GAAJ,EAAS;AACP,YAAM,GAAN;AACD;AACD;AACA,UAAM,IAAN,CAAW,IAAX,EAAiB,UAAS,IAAT,EAAe,EAAf,EAAmB;AAClC,eAAS,MAAT,CAAgB,IAAhB,EAAsB,EAAtB;AACD,KAFD,EAEG,UAAS,GAAT,EAAc;AACf,UAAI,GAAJ,EAAS;AACP,cAAM,GAAN;AACD;AACD;AACA,UAAI,SAAS,EAAC,MAAM,OAAP,EAAgB,aAAa,CAAC,CAAC,CAAF,EAAK,CAAL,CAA7B,EAAb;AACA;AACA,eAAS,IAAT,CAAc,EAAC,KAAK,EAAC,OAAO,MAAR,EAAN,EAAd,EAAsC,KAAtC,CAA4C,CAA5C,EAA+C,IAA/C,CAAoD,UAAS,GAAT,EAAc,GAAd,EAAmB;AACrE,YAAI,GAAJ,EAAS;AACP,gBAAM,GAAN;AACD;AACD,gBAAQ,GAAR,CAAY,qBAAZ,EAAmC,KAAK,SAAL,CAAe,MAAf,CAAnC,EAA2D,GAA3D;AACA;AACD,OAND;AAOD,KAhBD;AAiBD,GAtBD;AAuBD,CA5BD;;AA8BA,SAAS,OAAT,GAAmB;AACjB,WAAS,MAAT,CAAgB,YAAW;AACzB,aAAS,UAAT;AACD,GAFD;AAGD","file":"geoJSONexample-compiled.js","sourcesContent":["// import async to make control flow simplier\nvar async = require('async');\n\n// import the rest of the normal stuff\nvar mongoose = require('../../lib');\n\nrequire('./geoJSONSchema.js')();\n\nvar Location = mongoose.model('Location');\n\n// define some dummy data\n// note: the type can be Point, LineString, or Polygon\nvar data = [\n  {loc: {type: 'Point', coordinates: [-20.0, 5.0]}},\n  {loc: {type: 'Point', coordinates: [6.0, 10.0]}},\n  {loc: {type: 'Point', coordinates: [34.0, -50.0]}},\n  {loc: {type: 'Point', coordinates: [-100.0, 70.0]}},\n  {loc: {type: 'Point', coordinates: [38.0, 38.0]}}\n];\n\n\nmongoose.connect('mongodb://localhost/locations', function(err) {\n  if (err) {\n    throw err;\n  }\n\n  Location.on('index', function(err) {\n    if (err) {\n      throw err;\n    }\n    // create all of the dummy locations\n    async.each(data, function(item, cb) {\n      Location.create(item, cb);\n    }, function(err) {\n      if (err) {\n        throw err;\n      }\n      // create the location we want to search for\n      var coords = {type: 'Point', coordinates: [-5, 5]};\n      // search for it\n      Location.find({loc: {$near: coords}}).limit(1).exec(function(err, res) {\n        if (err) {\n          throw err;\n        }\n        console.log('Closest to %s is %s', JSON.stringify(coords), res);\n        cleanup();\n      });\n    });\n  });\n});\n\nfunction cleanup() {\n  Location.remove(function() {\n    mongoose.disconnect();\n  });\n}\n"]}