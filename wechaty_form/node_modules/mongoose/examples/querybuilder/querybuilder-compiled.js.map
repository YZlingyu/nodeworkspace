{"version":3,"sources":["querybuilder.js"],"names":[],"mappings":";AACA;AACA,IAAI,QAAQ,QAAQ,OAAR,CAAZ;;AAEA;AACA,IAAI,WAAW,QAAQ,WAAR,CAAf;;AAEA,QAAQ,aAAR;;AAEA,IAAI,SAAS,SAAS,KAAT,CAAe,QAAf,CAAb;;AAEA;AACA,IAAI,OAAO,CACT;AACE,QAAM,MADR;AAEE,OAAK,EAFP;AAGE,YAAU,IAAI,IAAJ,GAAW,WAAX,CAAwB,IAAI,IAAJ,GAAW,WAAX,KAA2B,EAAnD;AAHZ,CADS,EAMT;AACE,QAAM,MADR;AAEE,OAAK,EAFP;AAGE,YAAU,IAAI,IAAJ,GAAW,WAAX,CAAwB,IAAI,IAAJ,GAAW,WAAX,KAA2B,EAAnD;AAHZ,CANS,EAWT;AACE,QAAM,KADR;AAEE,OAAK,EAFP;AAGE,YAAU,IAAI,IAAJ,GAAW,WAAX,CAAwB,IAAI,IAAJ,GAAW,WAAX,KAA2B,EAAnD;AAHZ,CAXS,EAgBT;AACE,QAAM,OADR;AAEE,OAAK,EAFP;AAGE,YAAU,IAAI,IAAJ,GAAW,WAAX,CAAwB,IAAI,IAAJ,GAAW,WAAX,KAA2B,EAAnD;AAHZ,CAhBS,EAqBT;AACE,QAAM,SADR;AAEE,OAAK,IAFP;AAGE,YAAU,IAAI,IAAJ,GAAW,WAAX,CAAwB,IAAI,IAAJ,GAAW,WAAX,KAA2B,IAAnD;AAHZ,CArBS,CAAX;;AA6BA,SAAS,OAAT,CAAiB,6BAAjB,EAAgD,UAAS,GAAT,EAAc;AAC5D,MAAI,GAAJ,EAAS,MAAM,GAAN;;AAET;AACA,QAAM,IAAN,CAAW,IAAX,EAAiB,UAAS,IAAT,EAAe,EAAf,EAAmB;AAClC,WAAO,MAAP,CAAc,IAAd,EAAoB,EAApB;AACD,GAFD,EAEG,UAAS,GAAT,EAAc;AACf,QAAI,GAAJ,EAAS,MAAM,GAAN;;AAET;AACA;AACA,QAAI,QAAQ,OAAO,IAAP,CAAY,EAAC,KAAK,EAAC,KAAK,IAAN,EAAN,EAAZ,CAAZ;;AAEA;AACA,UAAM,IAAN,CAAW,UAAX;AACA,UAAM,MAAN,CAAa,MAAb;;AAEA;AACA;AACA;AACA,UAAM,KAAN,CAAY,KAAZ,EAAmB,EAAnB,CAAsB,EAAtB;;AAEA;AACA,UAAM,IAAN,CAAW,UAAS,GAAT,EAAc,OAAd,EAAuB;AAChC,UAAI,GAAJ,EAAS,MAAM,GAAN;;AAET,cAAQ,GAAR,CAAY,OAAZ;;AAEA;AACD,KAND;AAOD,GA1BD;AA2BD,CA/BD;;AAiCA,SAAS,OAAT,GAAmB;AACjB,SAAO,MAAP,CAAc,YAAW;AACvB,aAAS,UAAT;AACD,GAFD;AAGD","file":"querybuilder-compiled.js","sourcesContent":["\n// import async to make control flow simplier\nvar async = require('async');\n\n// import the rest of the normal stuff\nvar mongoose = require('../../lib');\n\nrequire('./person.js')();\n\nvar Person = mongoose.model('Person');\n\n// define some dummy data\nvar data = [\n  {\n    name: 'bill',\n    age: 25,\n    birthday: new Date().setFullYear((new Date().getFullYear() - 25))\n  },\n  {\n    name: 'mary',\n    age: 30,\n    birthday: new Date().setFullYear((new Date().getFullYear() - 30))\n  },\n  {\n    name: 'bob',\n    age: 21,\n    birthday: new Date().setFullYear((new Date().getFullYear() - 21))\n  },\n  {\n    name: 'lilly',\n    age: 26,\n    birthday: new Date().setFullYear((new Date().getFullYear() - 26))\n  },\n  {\n    name: 'alucard',\n    age: 1000,\n    birthday: new Date().setFullYear((new Date().getFullYear() - 1000))\n  }\n];\n\n\nmongoose.connect('mongodb://localhost/persons', function(err) {\n  if (err) throw err;\n\n  // create all of the dummy people\n  async.each(data, function(item, cb) {\n    Person.create(item, cb);\n  }, function(err) {\n    if (err) throw err;\n\n    // when querying data, instead of providing a callback, you can instead\n    // leave that off and get a query object returned\n    var query = Person.find({age: {$lt: 1000}});\n\n    // this allows you to continue applying modifiers to it\n    query.sort('birthday');\n    query.select('name');\n\n    // you can chain them together as well\n    // a full list of methods can be found:\n    // http://mongoosejs.com/docs/api.html#query-js\n    query.where('age').gt(21);\n\n    // finally, when ready to execute the query, call the exec() function\n    query.exec(function(err, results) {\n      if (err) throw err;\n\n      console.log(results);\n\n      cleanup();\n    });\n  });\n});\n\nfunction cleanup() {\n  Person.remove(function() {\n    mongoose.disconnect();\n  });\n}\n"]}