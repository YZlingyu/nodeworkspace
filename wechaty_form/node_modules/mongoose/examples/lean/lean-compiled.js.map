{"version":3,"sources":["lean.js"],"names":[],"mappings":";AACA;AACA,IAAI,QAAQ,QAAQ,OAAR,CAAZ;;AAEA;AACA,IAAI,WAAW,QAAQ,WAAR,CAAf;;AAEA,QAAQ,aAAR;;AAEA,IAAI,SAAS,SAAS,KAAT,CAAe,QAAf,CAAb;;AAEA;AACA,IAAI,OAAO,CACT;AACE,QAAM,MADR;AAEE,OAAK,EAFP;AAGE,YAAU,IAAI,IAAJ,GAAW,WAAX,CAAwB,IAAI,IAAJ,GAAW,WAAX,KAA2B,EAAnD,CAHZ;AAIE,UAAQ,MAJV;AAKE,SAAO,CAAC,QAAD,EAAW,OAAX,EAAoB,MAApB;AALT,CADS,EAQT;AACE,QAAM,MADR;AAEE,OAAK,EAFP;AAGE,YAAU,IAAI,IAAJ,GAAW,WAAX,CAAwB,IAAI,IAAJ,GAAW,WAAX,KAA2B,EAAnD,CAHZ;AAIE,UAAQ,QAJV;AAKE,SAAO,CAAC,QAAD,EAAW,OAAX,EAAoB,MAApB;AALT,CARS,EAeT;AACE,QAAM,KADR;AAEE,OAAK,EAFP;AAGE,YAAU,IAAI,IAAJ,GAAW,WAAX,CAAwB,IAAI,IAAJ,GAAW,WAAX,KAA2B,EAAnD,CAHZ;AAIE,UAAQ,MAJV;AAKE,SAAO,CAAC,IAAD,EAAO,OAAP,EAAgB,SAAhB;AALT,CAfS,EAsBT;AACE,QAAM,OADR;AAEE,OAAK,EAFP;AAGE,YAAU,IAAI,IAAJ,GAAW,WAAX,CAAwB,IAAI,IAAJ,GAAW,WAAX,KAA2B,EAAnD,CAHZ;AAIE,UAAQ,QAJV;AAKE,SAAO,CAAC,OAAD,EAAU,MAAV,EAAkB,MAAlB;AALT,CAtBS,EA6BT;AACE,QAAM,SADR;AAEE,OAAK,IAFP;AAGE,YAAU,IAAI,IAAJ,GAAW,WAAX,CAAwB,IAAI,IAAJ,GAAW,WAAX,KAA2B,IAAnD,CAHZ;AAIE,UAAQ,MAJV;AAKE,SAAO,CAAC,SAAD,EAAY,MAAZ,EAAoB,WAApB;AALT,CA7BS,CAAX;;AAuCA,SAAS,OAAT,CAAiB,6BAAjB,EAAgD,UAAS,GAAT,EAAc;AAC5D,MAAI,GAAJ,EAAS,MAAM,GAAN;;AAET;AACA,QAAM,IAAN,CAAW,IAAX,EAAiB,UAAS,IAAT,EAAe,EAAf,EAAmB;AAClC,WAAO,MAAP,CAAc,IAAd,EAAoB,EAApB;AACD,GAFD,EAEG,UAAS,GAAT,EAAc;AACf,QAAI,GAAJ,EAAS,CAER;AADC;;;AAGF;AACA;AACA;;AAEA;AACA;AACA,QAAI,IAAI,OAAO,IAAP,CAAY,EAAC,KAAK,EAAC,KAAK,IAAN,EAAN,EAAZ,EAAgC,IAAhC,CAAqC,KAArC,EAA4C,KAA5C,CAAkD,CAAlD,EAAqD,IAArD,EAAR;AACA,MAAE,IAAF,CAAO,UAAS,GAAT,EAAc,OAAd,EAAuB;AAC5B,UAAI,GAAJ,EAAS,MAAM,GAAN;AACT,cAAQ,GAAR,CAAY,wCAAZ,EAAsD,QAAQ,CAAR,aAAsB,SAAS,QAArF;;AAEA,cAAQ,GAAR,CAAY,OAAZ;AACA;AACD,KAND;AAOD,GArBD;AAsBD,CA1BD;;AA4BA,SAAS,OAAT,GAAmB;AACjB,SAAO,MAAP,CAAc,YAAW;AACvB,aAAS,UAAT;AACD,GAFD;AAGD","file":"lean-compiled.js","sourcesContent":["\n// import async to make control flow simplier\nvar async = require('async');\n\n// import the rest of the normal stuff\nvar mongoose = require('../../lib');\n\nrequire('./person.js')();\n\nvar Person = mongoose.model('Person');\n\n// define some dummy data\nvar data = [\n  {\n    name: 'bill',\n    age: 25,\n    birthday: new Date().setFullYear((new Date().getFullYear() - 25)),\n    gender: 'Male',\n    likes: ['movies', 'games', 'dogs']\n  },\n  {\n    name: 'mary',\n    age: 30,\n    birthday: new Date().setFullYear((new Date().getFullYear() - 30)),\n    gender: 'Female',\n    likes: ['movies', 'birds', 'cats']\n  },\n  {\n    name: 'bob',\n    age: 21,\n    birthday: new Date().setFullYear((new Date().getFullYear() - 21)),\n    gender: 'Male',\n    likes: ['tv', 'games', 'rabbits']\n  },\n  {\n    name: 'lilly',\n    age: 26,\n    birthday: new Date().setFullYear((new Date().getFullYear() - 26)),\n    gender: 'Female',\n    likes: ['books', 'cats', 'dogs']\n  },\n  {\n    name: 'alucard',\n    age: 1000,\n    birthday: new Date().setFullYear((new Date().getFullYear() - 1000)),\n    gender: 'Male',\n    likes: ['glasses', 'wine', 'the night']\n  }\n];\n\n\nmongoose.connect('mongodb://localhost/persons', function(err) {\n  if (err) throw err;\n\n  // create all of the dummy people\n  async.each(data, function(item, cb) {\n    Person.create(item, cb);\n  }, function(err) {\n    if (err) {\n      // handle error\n    }\n\n    // lean queries return just plain javascript objects, not\n    // MongooseDocuments. This makes them good for high performance read\n    // situations\n\n    // when using .lean() the default is true, but you can explicitly set the\n    // value by passing in a boolean value. IE. .lean(false)\n    var q = Person.find({age: {$lt: 1000}}).sort('age').limit(2).lean();\n    q.exec(function(err, results) {\n      if (err) throw err;\n      console.log('Are the results MongooseDocuments?: %s', results[0] instanceof mongoose.Document);\n\n      console.log(results);\n      cleanup();\n    });\n  });\n});\n\nfunction cleanup() {\n  Person.remove(function() {\n    mongoose.disconnect();\n  });\n}\n"]}