{"version":3,"sources":["aggregate.js"],"names":[],"mappings":";AACA;AACA,IAAI,QAAQ,QAAQ,OAAR,CAAZ;;AAEA;AACA,IAAI,WAAW,QAAQ,WAAR,CAAf;;AAEA,QAAQ,aAAR;;AAEA,IAAI,SAAS,SAAS,KAAT,CAAe,QAAf,CAAb;;AAEA;AACA,IAAI,OAAO,CACT;AACE,QAAM,MADR;AAEE,OAAK,EAFP;AAGE,YAAU,IAAI,IAAJ,GAAW,WAAX,CAAwB,IAAI,IAAJ,GAAW,WAAX,KAA2B,EAAnD,CAHZ;AAIE,UAAQ,MAJV;AAKE,SAAO,CAAC,QAAD,EAAW,OAAX,EAAoB,MAApB;AALT,CADS,EAQT;AACE,QAAM,MADR;AAEE,OAAK,EAFP;AAGE,YAAU,IAAI,IAAJ,GAAW,WAAX,CAAwB,IAAI,IAAJ,GAAW,WAAX,KAA2B,EAAnD,CAHZ;AAIE,UAAQ,QAJV;AAKE,SAAO,CAAC,QAAD,EAAW,OAAX,EAAoB,MAApB;AALT,CARS,EAeT;AACE,QAAM,KADR;AAEE,OAAK,EAFP;AAGE,YAAU,IAAI,IAAJ,GAAW,WAAX,CAAwB,IAAI,IAAJ,GAAW,WAAX,KAA2B,EAAnD,CAHZ;AAIE,UAAQ,MAJV;AAKE,SAAO,CAAC,IAAD,EAAO,OAAP,EAAgB,SAAhB;AALT,CAfS,EAsBT;AACE,QAAM,OADR;AAEE,OAAK,EAFP;AAGE,YAAU,IAAI,IAAJ,GAAW,WAAX,CAAwB,IAAI,IAAJ,GAAW,WAAX,KAA2B,EAAnD,CAHZ;AAIE,UAAQ,QAJV;AAKE,SAAO,CAAC,OAAD,EAAU,MAAV,EAAkB,MAAlB;AALT,CAtBS,EA6BT;AACE,QAAM,SADR;AAEE,OAAK,IAFP;AAGE,YAAU,IAAI,IAAJ,GAAW,WAAX,CAAwB,IAAI,IAAJ,GAAW,WAAX,KAA2B,IAAnD,CAHZ;AAIE,UAAQ,MAJV;AAKE,SAAO,CAAC,SAAD,EAAY,MAAZ,EAAoB,WAApB;AALT,CA7BS,CAAX;;AAuCA,SAAS,OAAT,CAAiB,6BAAjB,EAAgD,UAAS,GAAT,EAAc;AAC5D,MAAI,GAAJ,EAAS,MAAM,GAAN;;AAET;AACA,QAAM,IAAN,CAAW,IAAX,EAAiB,UAAS,IAAT,EAAe,EAAf,EAAmB;AAClC,WAAO,MAAP,CAAc,IAAd,EAAoB,EAApB;AACD,GAFD,EAEG,UAAS,GAAT,EAAc;AACf,QAAI,GAAJ,EAAS,CAER;AADC;;;AAGF;AACA;AACA;AACA,WAAO,SAAP;AACE;AACA,MAAC,UAAU,EAAC,MAAM,CAAP,EAAU,OAAO,CAAjB,EAAX,EAFF;AAGE;AACA,MAAC,SAAS,QAAV,EAJF;AAKE;AACA;AACA,MAAC,QAAQ;AACP,aAAK,EAAC,OAAO,QAAR,EADE;AAEP,gBAAQ,EAAC,WAAW,OAAZ;AAFD,OAAT,EAPF,EAWE,UAAS,GAAT,EAAc,MAAd,EAAsB;AACpB,UAAI,GAAJ,EAAS,MAAM,GAAN;AACT,cAAQ,GAAR,CAAY,MAAZ;AACC;;;;;;;;;;;;;;AAcD;AACD,KA7BH;AA8BD,GAxCD;AAyCD,CA7CD;;AA+CA,SAAS,OAAT,GAAmB;AACjB,SAAO,MAAP,CAAc,YAAW;AACvB,aAAS,UAAT;AACD,GAFD;AAGD","file":"aggregate-compiled.js","sourcesContent":["\n// import async to make control flow simplier\nvar async = require('async');\n\n// import the rest of the normal stuff\nvar mongoose = require('../../lib');\n\nrequire('./person.js')();\n\nvar Person = mongoose.model('Person');\n\n// define some dummy data\nvar data = [\n  {\n    name: 'bill',\n    age: 25,\n    birthday: new Date().setFullYear((new Date().getFullYear() - 25)),\n    gender: 'Male',\n    likes: ['movies', 'games', 'dogs']\n  },\n  {\n    name: 'mary',\n    age: 30,\n    birthday: new Date().setFullYear((new Date().getFullYear() - 30)),\n    gender: 'Female',\n    likes: ['movies', 'birds', 'cats']\n  },\n  {\n    name: 'bob',\n    age: 21,\n    birthday: new Date().setFullYear((new Date().getFullYear() - 21)),\n    gender: 'Male',\n    likes: ['tv', 'games', 'rabbits']\n  },\n  {\n    name: 'lilly',\n    age: 26,\n    birthday: new Date().setFullYear((new Date().getFullYear() - 26)),\n    gender: 'Female',\n    likes: ['books', 'cats', 'dogs']\n  },\n  {\n    name: 'alucard',\n    age: 1000,\n    birthday: new Date().setFullYear((new Date().getFullYear() - 1000)),\n    gender: 'Male',\n    likes: ['glasses', 'wine', 'the night']\n  }\n];\n\n\nmongoose.connect('mongodb://localhost/persons', function(err) {\n  if (err) throw err;\n\n  // create all of the dummy people\n  async.each(data, function(item, cb) {\n    Person.create(item, cb);\n  }, function(err) {\n    if (err) {\n      // handle error\n    }\n\n    // run an aggregate query that will get all of the people who like a given\n    // item. To see the full documentation on ways to use the aggregate\n    // framework, see http://docs.mongodb.org/manual/core/aggregation/\n    Person.aggregate(\n      // select the fields we want to deal with\n      {$project: {name: 1, likes: 1}},\n      // unwind 'likes', which will create a document for each like\n      {$unwind: '$likes'},\n      // group everything by the like and then add each name with that like to\n      // the set for the like\n      {$group: {\n        _id: {likes: '$likes'},\n        likers: {$addToSet: '$name'}\n      }},\n      function(err, result) {\n        if (err) throw err;\n        console.log(result);\n         /* [\n         { _id: { likes: 'the night' }, likers: [ 'alucard' ] },\n         { _id: { likes: 'wine' }, likers: [ 'alucard' ] },\n         { _id: { likes: 'books' }, likers: [ 'lilly' ] },\n         { _id: { likes: 'glasses' }, likers: [ 'alucard' ] },\n         { _id: { likes: 'birds' }, likers: [ 'mary' ] },\n         { _id: { likes: 'rabbits' }, likers: [ 'bob' ] },\n         { _id: { likes: 'cats' }, likers: [ 'lilly', 'mary' ] },\n         { _id: { likes: 'dogs' }, likers: [ 'lilly', 'bill' ] },\n         { _id: { likes: 'tv' }, likers: [ 'bob' ] },\n         { _id: { likes: 'games' }, likers: [ 'bob', 'bill' ] },\n         { _id: { likes: 'movies' }, likers: [ 'mary', 'bill' ] }\n         ] */\n\n        cleanup();\n      });\n  });\n});\n\nfunction cleanup() {\n  Person.remove(function() {\n    mongoose.disconnect();\n  });\n}\n"]}