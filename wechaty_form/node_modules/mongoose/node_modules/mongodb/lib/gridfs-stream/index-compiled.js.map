{"version":3,"sources":["index.js"],"names":[],"mappings":"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","file":"index-compiled.js","sourcesContent":["var Emitter = require('events').EventEmitter;\nvar GridFSBucketReadStream = require('./download');\nvar GridFSBucketWriteStream = require('./upload');\nvar shallowClone = require('../utils').shallowClone;\nvar toError = require('../utils').toError;\nvar util = require('util');\n\nvar DEFAULT_GRIDFS_BUCKET_OPTIONS = {\n  bucketName: 'fs',\n  chunkSizeBytes: 255 * 1024\n};\n\nmodule.exports = GridFSBucket;\n\n/**\n * Constructor for a streaming GridFS interface\n * @class\n * @param {Db} db A db handle\n * @param {object} [options=null] Optional settings.\n * @param {string} [options.bucketName=\"fs\"] The 'files' and 'chunks' collections will be prefixed with the bucket name followed by a dot.\n * @param {number} [options.chunkSizeBytes=255 * 1024] Number of bytes stored in each chunk. Defaults to 255KB\n * @param {object} [options.writeConcern=null] Optional write concern to be passed to write operations, for instance `{ w: 1 }`\n * @param {object} [options.readPreference=null] Optional read preference to be passed to read operations\n * @fires GridFSBucketWriteStream#index\n * @return {GridFSBucket}\n */\n\nfunction GridFSBucket(db, options) {\n  Emitter.apply(this);\n  this.setMaxListeners(0);\n\n  if (options && typeof options === 'object') {\n    options = shallowClone(options);\n    var keys = Object.keys(DEFAULT_GRIDFS_BUCKET_OPTIONS);\n    for (var i = 0; i < keys.length; ++i) {\n      if (!options[keys[i]]) {\n        options[keys[i]] = DEFAULT_GRIDFS_BUCKET_OPTIONS[keys[i]];\n      }\n    }\n  } else {\n    options = DEFAULT_GRIDFS_BUCKET_OPTIONS;\n  }\n\n  this.s = {\n    db: db,\n    options: options,\n    _chunksCollection: db.collection(options.bucketName + '.chunks'),\n    _filesCollection: db.collection(options.bucketName + '.files'),\n    checkedIndexes: false,\n    calledOpenUploadStream: false,\n    promiseLibrary: db.s.promiseLibrary ||\n      (typeof global.Promise == 'function' ? global.Promise : require('es6-promise').Promise)\n  };\n}\n\nutil.inherits(GridFSBucket, Emitter);\n\n/**\n * When the first call to openUploadStream is made, the upload stream will\n * check to see if it needs to create the proper indexes on the chunks and\n * files collections. This event is fired either when 1) it determines that\n * no index creation is necessary, 2) when it successfully creates the\n * necessary indexes.\n *\n * @event GridFSBucket#index\n * @type {Error}\n */\n\n/**\n * Returns a writable stream (GridFSBucketWriteStream) for writing\n * buffers to GridFS. The stream's 'id' property contains the resulting\n * file's id.\n * @method\n * @param {string} filename The value of the 'filename' key in the files doc\n * @param {object} [options=null] Optional settings.\n * @param {number} [options.chunkSizeBytes=null] Optional overwrite this bucket's chunkSizeBytes for this file\n * @param {object} [options.metadata=null] Optional object to store in the file document's `metadata` field\n * @param {string} [options.contentType=null] Optional string to store in the file document's `contentType` field\n * @param {array} [options.aliases=null] Optional array of strings to store in the file document's `aliases` field\n * @return {GridFSBucketWriteStream}\n */\n\nGridFSBucket.prototype.openUploadStream = function(filename, options) {\n  if (options) {\n    options = shallowClone(options);\n  } else {\n    options = {};\n  }\n  if (!options.chunkSizeBytes) {\n    options.chunkSizeBytes = this.s.options.chunkSizeBytes;\n  }\n  return new GridFSBucketWriteStream(this, filename, options);\n};\n\n/**\n * Returns a writable stream (GridFSBucketWriteStream) for writing\n * buffers to GridFS for a custom file id. The stream's 'id' property contains the resulting\n * file's id.\n * @method\n * @param {string|number|object} id A custom id used to identify the file\n * @param {string} filename The value of the 'filename' key in the files doc\n * @param {object} [options=null] Optional settings.\n * @param {number} [options.chunkSizeBytes=null] Optional overwrite this bucket's chunkSizeBytes for this file\n * @param {object} [options.metadata=null] Optional object to store in the file document's `metadata` field\n * @param {string} [options.contentType=null] Optional string to store in the file document's `contentType` field\n * @param {array} [options.aliases=null] Optional array of strings to store in the file document's `aliases` field\n * @return {GridFSBucketWriteStream}\n */\n\nGridFSBucket.prototype.openUploadStreamWithId = function(id, filename, options) {\n  if (options) {\n    options = shallowClone(options);\n  } else {\n    options = {};\n  }\n\n  if (!options.chunkSizeBytes) {\n    options.chunkSizeBytes = this.s.options.chunkSizeBytes;\n  }\n\n  options.id = id;\n\n  return new GridFSBucketWriteStream(this, filename, options);\n};\n\n/**\n * Returns a readable stream (GridFSBucketReadStream) for streaming file\n * data from GridFS.\n * @method\n * @param {ObjectId} id The id of the file doc\n * @param {Object} [options=null] Optional settings.\n * @param {Number} [options.start=null] Optional 0-based offset in bytes to start streaming from\n * @param {Number} [options.end=null] Optional 0-based offset in bytes to stop streaming before\n * @return {GridFSBucketReadStream}\n */\n\nGridFSBucket.prototype.openDownloadStream = function(id, options) {\n  var filter = { _id: id };\n  options = {\n    start: options && options.start,\n    end: options && options.end\n  };\n\n  return new GridFSBucketReadStream(this.s._chunksCollection,\n    this.s._filesCollection, this.s.options.readPreference, filter, options);\n};\n\n/**\n * Deletes a file with the given id\n * @method\n * @param {ObjectId} id The id of the file doc\n * @param {GridFSBucket~errorCallback} [callback]\n */\n\nGridFSBucket.prototype.delete = function(id, callback) {\n  if (typeof callback === 'function') {\n    return _delete(this, id, callback);\n  }\n\n  var _this = this;\n  return new this.s.promiseLibrary(function(resolve, reject) {\n    _delete(_this, id, function(error, res) {\n      if (error) {\n        reject(error);\n      } else {\n        resolve(res);\n      }\n    });\n  });\n};\n\n/**\n * @ignore\n */\n\nfunction _delete(_this, id, callback) {\n  _this.s._filesCollection.deleteOne({ _id: id }, function(error, res) {\n    if (error) {\n      return callback(error);\n    }\n\n    _this.s._chunksCollection.deleteMany({ files_id: id }, function(error) {\n      if (error) {\n        return callback(error);\n      }\n\n      // Delete orphaned chunks before returning FileNotFound\n      if (!res.result.n) {\n        var errmsg = 'FileNotFound: no file with id ' + id + ' found';\n        return callback(new Error(errmsg));\n      }\n\n      callback();\n    });\n  });\n}\n\n/**\n * Convenience wrapper around find on the files collection\n * @method\n * @param {Object} filter\n * @param {Object} [options=null] Optional settings for cursor\n * @param {number} [options.batchSize=null] Optional batch size for cursor\n * @param {number} [options.limit=null] Optional limit for cursor\n * @param {number} [options.maxTimeMS=null] Optional maxTimeMS for cursor\n * @param {boolean} [options.noCursorTimeout=null] Optionally set cursor's `noCursorTimeout` flag\n * @param {number} [options.skip=null] Optional skip for cursor\n * @param {object} [options.sort=null] Optional sort for cursor\n * @return {Cursor}\n */\n\nGridFSBucket.prototype.find = function(filter, options) {\n  filter = filter || {};\n  options = options || {};\n\n  var cursor = this.s._filesCollection.find(filter);\n\n  if (options.batchSize != null) {\n    cursor.batchSize(options.batchSize);\n  }\n  if (options.limit != null) {\n    cursor.limit(options.limit);\n  }\n  if (options.maxTimeMS != null) {\n    cursor.maxTimeMS(options.maxTimeMS);\n  }\n  if (options.noCursorTimeout != null) {\n    cursor.addCursorFlag('noCursorTimeout', options.noCursorTimeout);\n  }\n  if (options.skip != null) {\n    cursor.skip(options.skip);\n  }\n  if (options.sort != null) {\n    cursor.sort(options.sort);\n  }\n\n  return cursor;\n};\n\n/**\n * Returns a readable stream (GridFSBucketReadStream) for streaming the\n * file with the given name from GridFS. If there are multiple files with\n * the same name, this will stream the most recent file with the given name\n * (as determined by the `uploadDate` field). You can set the `revision`\n * option to change this behavior.\n * @method\n * @param {String} filename The name of the file to stream\n * @param {Object} [options=null] Optional settings\n * @param {number} [options.revision=-1] The revision number relative to the oldest file with the given filename. 0 gets you the oldest file, 1 gets you the 2nd oldest, -1 gets you the newest.\n * @param {Number} [options.start=null] Optional 0-based offset in bytes to start streaming from\n * @param {Number} [options.end=null] Optional 0-based offset in bytes to stop streaming before\n * @return {GridFSBucketReadStream}\n */\n\nGridFSBucket.prototype.openDownloadStreamByName = function(filename, options) {\n  var sort = { uploadDate: -1 };\n  var skip = null;\n  if (options && options.revision != null) {\n    if (options.revision >= 0) {\n      sort = { uploadDate: 1 };\n      skip = options.revision;\n    } else {\n      skip = -options.revision - 1;\n    }\n  }\n\n  var filter = { filename: filename };\n  options = {\n    sort: sort,\n    skip: skip,\n    start: options && options.start,\n    end: options && options.end\n  };\n  return new GridFSBucketReadStream(this.s._chunksCollection,\n    this.s._filesCollection, this.s.options.readPreference, filter, options);\n};\n\n/**\n * Renames the file with the given _id to the given string\n * @method\n * @param {ObjectId} id the id of the file to rename\n * @param {String} filename new name for the file\n * @param {GridFSBucket~errorCallback} [callback]\n */\n\nGridFSBucket.prototype.rename = function(id, filename, callback) {\n  if (typeof callback === 'function') {\n    return _rename(this, id, filename, callback);\n  }\n\n  var _this = this;\n  return new this.s.promiseLibrary(function(resolve, reject) {\n    _rename(_this, id, filename, function(error, res) {\n      if (error) {\n        reject(error);\n      } else {\n        resolve(res);\n      }\n    });\n  });\n};\n\n/**\n * @ignore\n */\n\nfunction _rename(_this, id, filename, callback) {\n  var filter = { _id: id };\n  var update = { $set: { filename: filename } };\n  _this.s._filesCollection.updateOne(filter, update, function(error, res) {\n    if (error) {\n      return callback(error);\n    }\n    if (!res.result.n) {\n      return callback(toError('File with id ' + id + ' not found'));\n    }\n    callback();\n  });\n}\n\n/**\n * Removes this bucket's files collection, followed by its chunks collection.\n * @method\n * @param {GridFSBucket~errorCallback} [callback]\n */\n\nGridFSBucket.prototype.drop = function(callback) {\n  if (typeof callback === 'function') {\n    return _drop(this, callback);\n  }\n\n  var _this = this;\n  return new this.s.promiseLibrary(function(resolve, reject) {\n    _drop(_this, function(error, res) {\n      if (error) {\n        reject(error);\n      } else {\n        resolve(res);\n      }\n    });\n  });\n};\n\n/**\n * @ignore\n */\n\nfunction _drop(_this, callback) {\n  _this.s._filesCollection.drop(function(error) {\n    if (error) {\n      return callback(error);\n    }\n    _this.s._chunksCollection.drop(function(error) {\n      if (error) {\n        return callback(error);\n      }\n\n      return callback();\n    });\n  });\n}\n\n/**\n * Callback format for all GridFSBucket methods that can accept a callback.\n * @callback GridFSBucket~errorCallback\n * @param {MongoError} error An error instance representing any errors that occurred\n */\n"]}