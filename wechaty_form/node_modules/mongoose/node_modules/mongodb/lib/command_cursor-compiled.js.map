{"version":3,"sources":["command_cursor.js"],"names":[],"mappings":"AAAA;;AAEA,IAAI,WAAW,QAAQ,MAAR,EAAgB,QAA/B;AAAA,IACI,iBAAiB,QAAQ,mBAAR,CADrB;AAAA,IAEI,aAAa,QAAQ,cAAR,EAAwB,UAFzC;AAAA,IAGI,WAAW,QAAQ,QAAR,EAAkB,QAAlB,IAA8B,QAAQ,iBAAR,EAA2B,QAHxE;AAAA,IAII,SAAS,QAAQ,YAAR,CAJb;AAAA,IAKI,aAAa,QAAQ,UAAR,CALjB;AAAA,IAMI,qBAAqB,QAAQ,cAAR,EAAwB,cANjD;;AAQA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA+BA;;;;;AAKA;;;;;;;;;;AAUA,IAAI,gBAAgB,UAAS,IAAT,EAAe,EAAf,EAAmB,GAAnB,EAAwB,OAAxB,EAAiC,QAAjC,EAA2C,eAA3C,EAA4D;AAC9E,aAAW,KAAX,CAAiB,IAAjB,EAAuB,MAAM,SAAN,CAAgB,KAAhB,CAAsB,IAAtB,CAA2B,SAA3B,EAAsC,CAAtC,CAAvB;AACA,MAAI,QAAQ,cAAc,IAA1B;AACA,MAAI,gBAAgB,EAApB;;AAEA;AACA,MAAI,YAAY,IAAhB;;AAEA;AACA,MAAI,iBAAiB,QAAQ,cAA7B;;AAEA;AACA,MAAG,CAAC,cAAJ,EAAoB;AAClB,qBAAiB,OAAO,OAAO,OAAd,IAAyB,UAAzB,GACf,OAAO,OADQ,GACE,QAAQ,aAAR,EAAuB,OAD1C;AAED;;AAED;AACA,WAAS,IAAT,CAAc,IAAd,EAAoB,EAAC,YAAY,IAAb,EAApB;;AAEA;AACA,OAAK,CAAL,GAAS;AACP;AACE,eAAW;AACb;AAHO,MAIL,OAAO;AACT;AALO,MAML,eAAe;AACjB;AAPO,MAQL,MAAM;AACR;AATO,MAUL,IAAI;AACN;AAXO,MAYL,KAAK;AACP;AAbO,MAcL,SAAS;AACX;AAfO,MAgBL,UAAU;AACZ;AAjBO,MAkBL,iBAAiB;AACnB;AAnBO,MAoBL,gBAAgB;AApBX,GAAT;AAsBD,CA3CD;;AA6CA;;;;;;;AAOA;;;;;;;AAOA;;;;;;;AAOA;;;;;;;AAOA;AACA,SAAS,aAAT,EAAwB,QAAxB;;AAEA;AACA,IAAI,mBAAmB,CAAC,OAAD,EAAU,MAAV,EAAkB,MAAlB,EAA0B,SAA1B,EAAqC,SAArC,EACnB,QADmB,EACT,eADS,EACQ,uBADR,EACiC,OADjC,EAC0C,UAD1C,EACsD,MADtD,EAC8D,oBAD9D,EAEnB,OAFmB,EAEV,UAFU,EAEE,aAFF,EAEiB,QAFjB,EAE2B,SAF3B,EAEsC,YAFtC,EAEoD,UAFpD,CAAvB;;AAIA;AACA,KAAI,IAAI,IAAI,CAAZ,EAAe,IAAI,iBAAiB,MAApC,EAA4C,GAA5C,EAAiD;AAC/C,gBAAc,SAAd,CAAwB,iBAAiB,CAAjB,CAAxB,IAA+C,WAAW,SAAX,CAAqB,iBAAiB,CAAjB,CAArB,CAA/C;AACD;;AAED,IAAI,SAAS,cAAc,MAAd,GAAuB,IAAI,MAAJ,CAAW,eAAX,EAA4B,aAA5B,EAA2C,IAA3C,CAApC;;AAEA;;;;;;;AAOA,cAAc,SAAd,CAAwB,iBAAxB,GAA4C,UAAS,CAAT,EAAY;AACtD,MAAG,KAAK,CAAL,CAAO,KAAP,IAAgB,cAAc,MAA9B,IAAwC,KAAK,MAAL,EAA3C,EAA0D,MAAM,WAAW,MAAX,CAAkB,EAAC,SAAS,kBAAV,EAA8B,QAAO,IAArC,EAAlB,CAAN;AAC1D,MAAG,KAAK,CAAL,CAAO,KAAP,IAAgB,cAAc,IAAjC,EAAuC,MAAM,WAAW,MAAX,CAAkB,EAAC,SAAS,oEAAV,EAAgF,QAAO,IAAvF,EAAlB,CAAN;;AAEvC,MAAG,aAAa,cAAhB,EAAgC;AAC9B,SAAK,CAAL,CAAO,OAAP,CAAe,cAAf,GAAgC,IAAI,kBAAJ,CAAuB,EAAE,IAAzB,EAA+B,EAAE,IAAjC,EAAuC,EAAC,qBAAqB,EAAE,mBAAxB,EAAvC,CAAhC;AACD,GAFD,MAEO,IAAG,OAAO,CAAP,IAAY,QAAf,EAAyB;AAC9B,SAAK,CAAL,CAAO,OAAP,CAAe,cAAf,GAAgC,IAAI,kBAAJ,CAAuB,CAAvB,CAAhC;AACD,GAFM,MAEA,IAAG,aAAa,kBAAhB,EAAoC;AACzC,SAAK,CAAL,CAAO,OAAP,CAAe,cAAf,GAAgC,CAAhC;AACD;;AAED,SAAO,IAAP;AACD,CAbD;;AAeA,OAAO,WAAP,CAAmB,mBAAnB,EAAwC,EAAC,UAAU,KAAX,EAAkB,SAAQ,KAA1B,EAAiC,SAAS,CAAC,aAAD,CAA1C,EAAxC;;AAEA;;;;;;;AAOA,cAAc,SAAd,CAAwB,SAAxB,GAAoC,UAAS,KAAT,EAAgB;AAClD,MAAG,KAAK,CAAL,CAAO,KAAP,IAAgB,cAAc,MAA9B,IAAwC,KAAK,MAAL,EAA3C,EAA0D,MAAM,WAAW,MAAX,CAAkB,EAAC,SAAS,kBAAV,EAA8B,QAAO,IAArC,EAAlB,CAAN;AAC1D,MAAG,OAAO,KAAP,IAAgB,QAAnB,EAA6B,MAAM,WAAW,MAAX,CAAkB,EAAC,SAAS,+BAAV,EAA2C,QAAO,IAAlD,EAAlB,CAAN;AAC7B,MAAG,KAAK,CAAL,CAAO,GAAP,CAAW,MAAd,EAAsB,KAAK,CAAL,CAAO,GAAP,CAAW,MAAX,CAAkB,SAAlB,GAA8B,KAA9B;AACtB,OAAK,kBAAL,CAAwB,KAAxB;AACA,SAAO,IAAP;AACD,CAND;;AAQA,OAAO,WAAP,CAAmB,WAAnB,EAAgC,EAAC,UAAU,KAAX,EAAkB,SAAQ,KAA1B,EAAiC,SAAS,CAAC,aAAD,CAA1C,EAAhC;;AAEA;;;;;;AAMA,cAAc,SAAd,CAAwB,SAAxB,GAAoC,UAAS,KAAT,EAAgB;AAClD,MAAG,KAAK,CAAL,CAAO,QAAP,CAAgB,YAAhB,GAA+B,cAA/B,GAAgD,CAAnD,EAAsD;AACpD,SAAK,CAAL,CAAO,GAAP,CAAW,SAAX,GAAuB,KAAvB;AACD;AACD,SAAO,IAAP;AACD,CALD;;AAOA,OAAO,WAAP,CAAmB,WAAnB,EAAgC,EAAC,UAAU,KAAX,EAAkB,SAAQ,KAA1B,EAAiC,SAAS,CAAC,aAAD,CAA1C,EAAhC;;AAEA,cAAc,SAAd,CAAwB,GAAxB,GAA8B,cAAc,SAAd,CAAwB,OAAtD;;AAEA,OAAO,WAAP,CAAmB,KAAnB,EAA0B,EAAC,UAAU,IAAX,EAAiB,SAAQ,KAAzB,EAA1B;;AAEA;AACA,OAAO,WAAP,CAAmB,SAAnB,EAA8B,EAAC,UAAU,IAAX,EAAiB,SAAQ,IAAzB,EAA9B;AACA,OAAO,WAAP,CAAmB,MAAnB,EAA2B,EAAC,UAAU,IAAX,EAAiB,SAAQ,KAAzB,EAA3B;AACA,OAAO,WAAP,CAAmB,SAAnB,EAA8B,EAAC,UAAU,IAAX,EAAiB,SAAQ,KAAzB,EAA9B;AACA,OAAO,WAAP,CAAmB,MAAnB,EAA2B,EAAC,UAAU,IAAX,EAAiB,SAAQ,IAAzB,EAA3B;AACA,OAAO,WAAP,CAAmB,OAAnB,EAA4B,EAAC,UAAU,IAAX,EAAiB,SAAQ,IAAzB,EAA5B;AACA,OAAO,WAAP,CAAmB,UAAnB,EAA+B,EAAC,UAAU,KAAX,EAAkB,SAAQ,KAA1B,EAAiC,SAAS,CAAC,OAAD,CAA1C,EAA/B;AACA,OAAO,WAAP,CAAmB,QAAnB,EAA6B,EAAC,UAAU,KAAX,EAAkB,SAAQ,KAA1B,EAA7B;AACA,OAAO,WAAP,CAAmB,eAAnB,EAAoC,EAAC,UAAU,KAAX,EAAkB,SAAQ,KAA1B,EAAiC,SAAS,CAAC,MAAD,CAA1C,EAApC;AACA,OAAO,WAAP,CAAmB,uBAAnB,EAA4C,EAAC,UAAU,KAAX,EAAkB,SAAQ,KAA1B,EAAiC,SAAS,CAAC,KAAD,CAA1C,EAA5C;;AAEA;;;;;;;;AAQA;;;;;;;AAOA;;;;;;;;;;AAUA;;;;;;;AAOA;;;;;;;;;;;;;AAaA;;;;;;;AAOA;;;;;;AAMA;;;;;;AAMA;;;;;;AAMA;;;;;;AAMA;;;;;;AAMA;;;;;;;;;AASA,cAAc,IAAd,GAAqB,CAArB;AACA,cAAc,IAAd,GAAqB,CAArB;AACA,cAAc,MAAd,GAAuB,CAAvB;;AAEA,OAAO,OAAP,GAAiB,aAAjB","file":"command_cursor-compiled.js","sourcesContent":["\"use strict\";\n\nvar inherits = require('util').inherits\n  , ReadPreference = require('./read_preference')\n  , MongoError = require('mongodb-core').MongoError\n  , Readable = require('stream').Readable || require('readable-stream').Readable\n  , Define = require('./metadata')\n  , CoreCursor = require('./cursor')\n  , CoreReadPreference = require('mongodb-core').ReadPreference;\n\n/**\n * @fileOverview The **CommandCursor** class is an internal class that embodies a\n * generalized cursor based on a MongoDB command allowing for iteration over the\n * results returned. It supports one by one document iteration, conversion to an\n * array or can be iterated as a Node 0.10.X or higher stream\n *\n * **CommandCursor Cannot directly be instantiated**\n * @example\n * var MongoClient = require('mongodb').MongoClient,\n *   test = require('assert');\n * // Connection url\n * var url = 'mongodb://localhost:27017/test';\n * // Connect using MongoClient\n * MongoClient.connect(url, function(err, db) {\n *   // Create a collection we want to drop later\n *   var col = db.collection('listCollectionsExample1');\n *   // Insert a bunch of documents\n *   col.insert([{a:1, b:1}\n *     , {a:2, b:2}, {a:3, b:3}\n *     , {a:4, b:4}], {w:1}, function(err, result) {\n *     test.equal(null, err);\n *\n *     // List the database collections available\n *     db.listCollections().toArray(function(err, items) {\n *       test.equal(null, err);\n *       db.close();\n *     });\n *   });\n * });\n */\n\n/**\n * Namespace provided by the browser.\n * @external Readable\n */\n\n/**\n * Creates a new Command Cursor instance (INTERNAL TYPE, do not instantiate directly)\n * @class CommandCursor\n * @extends external:Readable\n * @fires CommandCursor#data\n * @fires CommandCursor#end\n * @fires CommandCursor#close\n * @fires CommandCursor#readable\n * @return {CommandCursor} an CommandCursor instance.\n */\nvar CommandCursor = function(bson, ns, cmd, options, topology, topologyOptions) {\n  CoreCursor.apply(this, Array.prototype.slice.call(arguments, 0));\n  var state = CommandCursor.INIT;\n  var streamOptions = {};\n\n  // MaxTimeMS\n  var maxTimeMS = null;\n\n  // Get the promiseLibrary\n  var promiseLibrary = options.promiseLibrary;\n\n  // No promise library selected fall back\n  if(!promiseLibrary) {\n    promiseLibrary = typeof global.Promise == 'function' ?\n      global.Promise : require('es6-promise').Promise;\n  }\n\n  // Set up\n  Readable.call(this, {objectMode: true});\n\n  // Internal state\n  this.s = {\n    // MaxTimeMS\n      maxTimeMS: maxTimeMS\n    // State\n    , state: state\n    // Stream options\n    , streamOptions: streamOptions\n    // BSON\n    , bson: bson\n    // Namespace\n    , ns: ns\n    // Command\n    , cmd: cmd\n    // Options\n    , options: options\n    // Topology\n    , topology: topology\n    // Topology Options\n    , topologyOptions: topologyOptions\n    // Promise library\n    , promiseLibrary: promiseLibrary\n  }\n}\n\n/**\n * CommandCursor stream data event, fired for each document in the cursor.\n *\n * @event CommandCursor#data\n * @type {object}\n */\n\n/**\n * CommandCursor stream end event\n *\n * @event CommandCursor#end\n * @type {null}\n */\n\n/**\n * CommandCursor stream close event\n *\n * @event CommandCursor#close\n * @type {null}\n */\n\n/**\n * CommandCursor stream readable event\n *\n * @event CommandCursor#readable\n * @type {null}\n */\n\n// Inherit from Readable\ninherits(CommandCursor, Readable);\n\n// Set the methods to inherit from prototype\nvar methodsToInherit = ['_next', 'next', 'each', 'forEach', 'toArray'\n  , 'rewind', 'bufferedCount', 'readBufferedDocuments', 'close', 'isClosed', 'kill', 'setCursorBatchSize'\n  , '_find', '_getmore', '_killcursor', 'isDead', 'explain', 'isNotified', 'isKilled'];\n\n// Only inherit the types we need\nfor(var i = 0; i < methodsToInherit.length; i++) {\n  CommandCursor.prototype[methodsToInherit[i]] = CoreCursor.prototype[methodsToInherit[i]];\n}\n\nvar define = CommandCursor.define = new Define('CommandCursor', CommandCursor, true);\n\n/**\n * Set the ReadPreference for the cursor.\n * @method\n * @param {(string|ReadPreference)} readPreference The new read preference for the cursor.\n * @throws {MongoError}\n * @return {Cursor}\n */\nCommandCursor.prototype.setReadPreference = function(r) {\n  if(this.s.state == CommandCursor.CLOSED || this.isDead()) throw MongoError.create({message: \"Cursor is closed\", driver:true});\n  if(this.s.state != CommandCursor.INIT) throw MongoError.create({message: 'cannot change cursor readPreference after cursor has been accessed', driver:true});\n\n  if(r instanceof ReadPreference) {\n    this.s.options.readPreference = new CoreReadPreference(r.mode, r.tags, {maxStalenessSeconds: r.maxStalenessSeconds});\n  } else if(typeof r == 'string') {\n    this.s.options.readPreference = new CoreReadPreference(r);\n  } else if(r instanceof CoreReadPreference) {\n    this.s.options.readPreference = r;\n  }\n\n  return this;\n}\n\ndefine.classMethod('setReadPreference', {callback: false, promise:false, returns: [CommandCursor]});\n\n/**\n * Set the batch size for the cursor.\n * @method\n * @param {number} value The batchSize for the cursor.\n * @throws {MongoError}\n * @return {CommandCursor}\n */\nCommandCursor.prototype.batchSize = function(value) {\n  if(this.s.state == CommandCursor.CLOSED || this.isDead()) throw MongoError.create({message: \"Cursor is closed\", driver:true});\n  if(typeof value != 'number') throw MongoError.create({message: \"batchSize requires an integer\", driver:true});\n  if(this.s.cmd.cursor) this.s.cmd.cursor.batchSize = value;\n  this.setCursorBatchSize(value);\n  return this;\n}\n\ndefine.classMethod('batchSize', {callback: false, promise:false, returns: [CommandCursor]});\n\n/**\n * Add a maxTimeMS stage to the aggregation pipeline\n * @method\n * @param {number} value The state maxTimeMS value.\n * @return {CommandCursor}\n */\nCommandCursor.prototype.maxTimeMS = function(value) {\n  if(this.s.topology.lastIsMaster().minWireVersion > 2) {\n    this.s.cmd.maxTimeMS = value;\n  }\n  return this;\n}\n\ndefine.classMethod('maxTimeMS', {callback: false, promise:false, returns: [CommandCursor]});\n\nCommandCursor.prototype.get = CommandCursor.prototype.toArray;\n\ndefine.classMethod('get', {callback: true, promise:false});\n\n// Inherited methods\ndefine.classMethod('toArray', {callback: true, promise:true});\ndefine.classMethod('each', {callback: true, promise:false});\ndefine.classMethod('forEach', {callback: true, promise:false});\ndefine.classMethod('next', {callback: true, promise:true});\ndefine.classMethod('close', {callback: true, promise:true});\ndefine.classMethod('isClosed', {callback: false, promise:false, returns: [Boolean]});\ndefine.classMethod('rewind', {callback: false, promise:false});\ndefine.classMethod('bufferedCount', {callback: false, promise:false, returns: [Number]});\ndefine.classMethod('readBufferedDocuments', {callback: false, promise:false, returns: [Array]});\n\n/**\n * Get the next available document from the cursor, returns null if no more documents are available.\n * @function CommandCursor.prototype.next\n * @param {CommandCursor~resultCallback} [callback] The result callback.\n * @throws {MongoError}\n * @return {Promise} returns Promise if no callback passed\n */\n\n/**\n * The callback format for results\n * @callback CommandCursor~toArrayResultCallback\n * @param {MongoError} error An error instance representing the error during the execution.\n * @param {object[]} documents All the documents the satisfy the cursor.\n */\n\n/**\n * Returns an array of documents. The caller is responsible for making sure that there\n * is enough memory to store the results. Note that the array only contain partial\n * results when this cursor had been previouly accessed.\n * @method CommandCursor.prototype.toArray\n * @param {CommandCursor~toArrayResultCallback} [callback] The result callback.\n * @throws {MongoError}\n * @return {Promise} returns Promise if no callback passed\n */\n\n/**\n * The callback format for results\n * @callback CommandCursor~resultCallback\n * @param {MongoError} error An error instance representing the error during the execution.\n * @param {(object|null)} result The result object if the command was executed successfully.\n */\n\n/**\n * Iterates over all the documents for this cursor. As with **{cursor.toArray}**,\n * not all of the elements will be iterated if this cursor had been previouly accessed.\n * In that case, **{cursor.rewind}** can be used to reset the cursor. However, unlike\n * **{cursor.toArray}**, the cursor will only hold a maximum of batch size elements\n * at any given time if batch size is specified. Otherwise, the caller is responsible\n * for making sure that the entire result can fit the memory.\n * @method CommandCursor.prototype.each\n * @param {CommandCursor~resultCallback} callback The result callback.\n * @throws {MongoError}\n * @return {null}\n */\n\n/**\n * Close the cursor, sending a KillCursor command and emitting close.\n * @method CommandCursor.prototype.close\n * @param {CommandCursor~resultCallback} [callback] The result callback.\n * @return {Promise} returns Promise if no callback passed\n */\n\n/**\n * Is the cursor closed\n * @method CommandCursor.prototype.isClosed\n * @return {boolean}\n */\n\n/**\n * Clone the cursor\n * @function CommandCursor.prototype.clone\n * @return {CommandCursor}\n */\n\n/**\n * Resets the cursor\n * @function CommandCursor.prototype.rewind\n * @return {CommandCursor}\n */\n\n/**\n * The callback format for the forEach iterator method\n * @callback CommandCursor~iteratorCallback\n * @param {Object} doc An emitted document for the iterator\n */\n\n/**\n * The callback error format for the forEach iterator method\n * @callback CommandCursor~endCallback\n * @param {MongoError} error An error instance representing the error during the execution.\n */\n\n/*\n * Iterates over all the documents for this cursor using the iterator, callback pattern.\n * @method CommandCursor.prototype.forEach\n * @param {CommandCursor~iteratorCallback} iterator The iteration callback.\n * @param {CommandCursor~endCallback} callback The end callback.\n * @throws {MongoError}\n * @return {null}\n */\n\nCommandCursor.INIT = 0;\nCommandCursor.OPEN = 1;\nCommandCursor.CLOSED = 2;\n\nmodule.exports = CommandCursor;\n"]}