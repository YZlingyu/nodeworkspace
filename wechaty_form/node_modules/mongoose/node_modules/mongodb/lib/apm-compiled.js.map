{"version":3,"sources":["apm.js"],"names":[],"mappings":"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","file":"apm-compiled.js","sourcesContent":["var EventEmitter = require('events').EventEmitter,\n  inherits = require('util').inherits;\n\n// Get prototypes\nvar AggregationCursor = require('./aggregation_cursor'),\n  CommandCursor = require('./command_cursor'),\n  OrderedBulkOperation = require('./bulk/ordered').OrderedBulkOperation,\n  UnorderedBulkOperation = require('./bulk/unordered').UnorderedBulkOperation,\n  GridStore = require('./gridfs/grid_store'),\n  Cursor = require('./cursor'),\n  Collection = require('./collection'),\n  Db = require('./db');\n\nvar basicOperationIdGenerator = {\n  operationId: 1,\n\n  next: function() {\n    return this.operationId++;\n  }\n}\n\nvar basicTimestampGenerator = {\n  current: function() {\n    return new Date().getTime();\n  },\n\n  duration: function(start, end) {\n    return end - start;\n  }\n}\n\nvar senstiveCommands = ['authenticate', 'saslStart', 'saslContinue', 'getnonce',\n  'createUser', 'updateUser', 'copydbgetnonce', 'copydbsaslstart', 'copydb'];\n\nvar Instrumentation = function(core, options, callback) {\n  options = options || {};\n\n  // Optional id generators\n  var operationIdGenerator = options.operationIdGenerator || basicOperationIdGenerator;\n  // Optional timestamp generator\n  var timestampGenerator = options.timestampGenerator || basicTimestampGenerator;\n  // Extend with event emitter functionality\n  EventEmitter.call(this);\n\n  // Contains all the instrumentation overloads\n  this.overloads = [];\n\n  // ---------------------------------------------------------\n  //\n  // Instrument prototype\n  //\n  // ---------------------------------------------------------\n\n  var instrumentPrototype = function(callback) {\n    var instrumentations = []\n\n    // Classes to support\n    var classes = [GridStore, OrderedBulkOperation, UnorderedBulkOperation,\n      CommandCursor, AggregationCursor, Cursor, Collection, Db];\n\n    // Add instrumentations to the available list\n    for(var i = 0; i < classes.length; i++) {\n      if(classes[i].define) {\n        instrumentations.push(classes[i].define.generate());\n      }\n    }\n\n    // Return the list of instrumentation points\n    callback(null, instrumentations);\n  }\n\n  // Did the user want to instrument the prototype\n  if(typeof callback == 'function') {\n    instrumentPrototype(callback);\n  }\n\n  // ---------------------------------------------------------\n  //\n  // Server\n  //\n  // ---------------------------------------------------------\n\n  // Reference\n  var self = this;\n  // Names of methods we need to wrap\n  var methods = ['command', 'insert', 'update', 'remove'];\n  // Prototype\n  var proto = core.Server.prototype;\n  // Core server method we are going to wrap\n  methods.forEach(function(x) {\n    var func = proto[x];\n\n    // Add to overloaded methods\n    self.overloads.push({proto: proto, name:x, func:func});\n\n    // The actual prototype\n    proto[x] = function() {\n      var requestId = core.Query.nextRequestId();\n      // Get the aruments\n      var args = Array.prototype.slice.call(arguments, 0);\n      var ns = args[0];\n      var commandObj = args[1];\n      var options = args[2] || {};\n      var keys = Object.keys(commandObj);\n      var commandName = keys[0];\n      var db = ns.split('.')[0];\n\n      // Get the collection\n      var col = ns.split('.');\n      col.shift();\n      col = col.join('.');\n\n      // Do we have a legacy insert/update/remove command\n      if(x == 'insert') { //} && !this.lastIsMaster().maxWireVersion) {\n        commandName = 'insert';\n\n        // Re-write the command\n        commandObj = {\n          insert: col, documents: commandObj\n        }\n\n        if(options.writeConcern && Object.keys(options.writeConcern).length > 0)  {\n          commandObj.writeConcern = options.writeConcern;\n        }\n\n        commandObj.ordered = options.ordered != undefined ? options.ordered : true;\n      } else if(x == 'update') { // && !this.lastIsMaster().maxWireVersion) {\n        commandName = 'update';\n\n        // Re-write the command\n        commandObj = {\n          update: col, updates: commandObj\n        }\n\n        if(options.writeConcern && Object.keys(options.writeConcern).length > 0) {\n          commandObj.writeConcern = options.writeConcern;\n        }\n\n        commandObj.ordered = options.ordered != undefined ? options.ordered : true;\n      } else if(x == 'remove') { //&& !this.lastIsMaster().maxWireVersion) {\n        commandName = 'delete';\n\n        // Re-write the command\n        commandObj = {\n          delete: col, deletes: commandObj\n        }\n\n        if(options.writeConcern && Object.keys(options.writeConcern).length > 0) {\n          commandObj.writeConcern = options.writeConcern;\n        }\n\n        commandObj.ordered = options.ordered != undefined ? options.ordered : true;\n      }\n\n      // Get the callback\n      var callback = args.pop();\n      // Set current callback operation id from the current context or create\n      // a new one\n      var ourOpId = callback.operationId || operationIdGenerator.next();\n\n      // Get a connection reference for this server instance\n      var connection = this.s.pool.get()\n\n      // Emit the start event for the command\n      var command = {\n        // Returns the command.\n        command: commandObj,\n        // Returns the database name.\n        databaseName: db,\n        // Returns the command name.\n        commandName: commandName,\n        // Returns the driver generated request id.\n        requestId: requestId,\n        // Returns the driver generated operation id.\n        // This is used to link events together such as bulk write operations. OPTIONAL.\n        operationId: ourOpId,\n        // Returns the connection id for the command. For languages that do not have this,\n        // this MUST return the driver equivalent which MUST include the server address and port.\n        // The name of this field is flexible to match the object that is returned from the driver.\n        connectionId: connection\n      };\n\n      // Filter out any sensitive commands\n      if(senstiveCommands.indexOf(commandName.toLowerCase()) != -1) {\n        command.commandObj = {};\n        command.commandObj[commandName] = true;\n      }\n\n      // Emit the started event\n      self.emit('started', command)\n\n      // Start time\n      var startTime = timestampGenerator.current();\n\n      // Push our handler callback\n      args.push(function(err, r) {\n        var endTime = timestampGenerator.current();\n        var command = {\n          duration: timestampGenerator.duration(startTime, endTime),\n          commandName: commandName,\n          requestId: requestId,\n          operationId: ourOpId,\n          connectionId: connection\n        };\n\n        // If we have an error\n        if(err || (r && r.result && r.result.ok == 0)) {\n          command.failure = err || r.result.writeErrors || r.result;\n\n          // Filter out any sensitive commands\n          if(senstiveCommands.indexOf(commandName.toLowerCase()) != -1) {\n            command.failure = {};\n          }\n\n          self.emit('failed', command);\n        } else if(commandObj && commandObj.writeConcern\n          && commandObj.writeConcern.w == 0) {\n          // If we have write concern 0\n          command.reply = {ok:1};\n          self.emit('succeeded', command);\n        } else {\n          command.reply = r && r.result ? r.result : r;\n\n          // Filter out any sensitive commands\n          if(senstiveCommands.indexOf(commandName.toLowerCase()) != -1) {\n            command.reply = {};\n          }\n\n          self.emit('succeeded', command);\n        }\n\n        // Return to caller\n        callback(err, r);\n      });\n\n      // Apply the call\n      func.apply(this, args);\n    }\n  });\n\n  // ---------------------------------------------------------\n  //\n  // Bulk Operations\n  //\n  // ---------------------------------------------------------\n\n  // Inject ourselves into the Bulk methods\n  methods = ['execute'];\n  var prototypes = [\n    require('./bulk/ordered').Bulk.prototype,\n    require('./bulk/unordered').Bulk.prototype\n  ]\n\n  prototypes.forEach(function(proto) {\n    // Core server method we are going to wrap\n    methods.forEach(function(x) {\n      var func = proto[x];\n\n      // Add to overloaded methods\n      self.overloads.push({proto: proto, name:x, func:func});\n\n      // The actual prototype\n      proto[x] = function() {\n        // Get the aruments\n        var args = Array.prototype.slice.call(arguments, 0);\n        // Set an operation Id on the bulk object\n        this.operationId = operationIdGenerator.next();\n\n        // Get the callback\n        var callback = args.pop();\n        // If we have a callback use this\n        if(typeof callback == 'function') {\n          args.push(function(err, r) {\n            // Return to caller\n            callback(err, r);\n          });\n\n          // Apply the call\n          func.apply(this, args);\n        } else {\n          return func.apply(this, args);\n        }\n      }\n    });\n  });\n\n  // ---------------------------------------------------------\n  //\n  // Cursor\n  //\n  // ---------------------------------------------------------\n\n  // Inject ourselves into the Cursor methods\n  methods = ['_find', '_getmore', '_killcursor'];\n  prototypes = [\n    require('./cursor').prototype,\n    require('./command_cursor').prototype,\n    require('./aggregation_cursor').prototype\n  ]\n\n  // Command name translation\n  var commandTranslation = {\n    '_find': 'find', '_getmore': 'getMore', '_killcursor': 'killCursors', '_explain': 'explain'\n  }\n\n  prototypes.forEach(function(proto) {\n\n    // Core server method we are going to wrap\n    methods.forEach(function(x) {\n      var func = proto[x];\n\n      // Add to overloaded methods\n      self.overloads.push({proto: proto, name:x, func:func});\n\n      // The actual prototype\n      proto[x] = function() {\n        var cursor = this;\n        var requestId = core.Query.nextRequestId();\n        var ourOpId = operationIdGenerator.next();\n        var parts = this.ns.split('.');\n        var db = parts[0];\n\n        // Get the collection\n        parts.shift();\n        var collection = parts.join('.');\n\n        // Set the command\n        var command = this.query;\n        var cmd = this.s.cmd;\n\n        // If we have a find method, set the operationId on the cursor\n        if(x == '_find') {\n          cursor.operationId = ourOpId;\n        }\n\n        // Do we have a find command rewrite it\n        if(x == '_getmore') {\n          command = {\n            getMore: this.cursorState.cursorId,\n            collection: collection,\n            batchSize: cmd.batchSize\n          }\n\n          if(cmd.maxTimeMS) command.maxTimeMS = cmd.maxTimeMS;\n        } else if(x == '_killcursor') {\n          command = {\n            killCursors: collection,\n            cursors: [this.cursorState.cursorId]\n          }\n        } else if(cmd.find) {\n          command = {\n            find: collection, filter: cmd.query\n          }\n\n          if(cmd.sort) command.sort = cmd.sort;\n          if(cmd.fields) command.projection = cmd.fields;\n          if(cmd.limit && cmd.limit < 0) {\n            command.limit = Math.abs(cmd.limit);\n            command.singleBatch = true;\n          } else if(cmd.limit) {\n            command.limit = Math.abs(cmd.limit);\n          }\n\n          // Options\n          if(cmd.skip) command.skip = cmd.skip;\n          if(cmd.hint) command.hint = cmd.hint;\n          if(cmd.batchSize) command.batchSize = cmd.batchSize;\n          if(typeof cmd.returnKey == 'boolean') command.returnKey = cmd.returnKey;\n          if(cmd.comment) command.comment = cmd.comment;\n          if(cmd.min) command.min = cmd.min;\n          if(cmd.max) command.max = cmd.max;\n          if(cmd.maxScan) command.maxScan = cmd.maxScan;\n          if(cmd.maxTimeMS) command.maxTimeMS = cmd.maxTimeMS;\n\n          // Flags\n          if(typeof cmd.awaitData == 'boolean') command.awaitData = cmd.awaitData;\n          if(typeof cmd.snapshot == 'boolean') command.snapshot = cmd.snapshot;\n          if(typeof cmd.tailable == 'boolean') command.tailable = cmd.tailable;\n          if(typeof cmd.oplogReplay == 'boolean') command.oplogReplay = cmd.oplogReplay;\n          if(typeof cmd.noCursorTimeout == 'boolean') command.noCursorTimeout = cmd.noCursorTimeout;\n          if(typeof cmd.partial == 'boolean') command.partial = cmd.partial;\n          if(typeof cmd.showDiskLoc == 'boolean') command.showRecordId = cmd.showDiskLoc;\n\n          // Read Concern\n          if(cmd.readConcern) command.readConcern = cmd.readConcern;\n\n          // Override method\n          if(cmd.explain) command.explain = cmd.explain;\n          if(cmd.exhaust) command.exhaust = cmd.exhaust;\n\n          // If we have a explain flag\n          if(cmd.explain) {\n            // Create fake explain command\n            command = {\n              explain: command,\n              verbosity: 'allPlansExecution'\n            }\n\n            // Set readConcern on the command if available\n            if(cmd.readConcern) command.readConcern = cmd.readConcern\n\n            // Set up the _explain name for the command\n            x = '_explain';\n          }\n        } else {\n          command = cmd;\n        }\n\n        // Set up the connection\n        var connectionId = null;\n\n        // Set local connection\n        if(this.connection) connectionId = this.connection;\n        if(!connectionId && this.server && this.server.getConnection) connectionId = this.server.getConnection();\n\n        // Get the command Name\n        var commandName = x == '_find' ? Object.keys(command)[0] : commandTranslation[x];\n\n        // Emit the start event for the command\n        command = {\n          // Returns the command.\n          command: command,\n          // Returns the database name.\n          databaseName: db,\n          // Returns the command name.\n          commandName: commandName,\n          // Returns the driver generated request id.\n          requestId: requestId,\n          // Returns the driver generated operation id.\n          // This is used to link events together such as bulk write operations. OPTIONAL.\n          operationId: this.operationId,\n          // Returns the connection id for the command. For languages that do not have this,\n          // this MUST return the driver equivalent which MUST include the server address and port.\n          // The name of this field is flexible to match the object that is returned from the driver.\n          connectionId: connectionId\n        };\n\n        // Get the aruments\n        var args = Array.prototype.slice.call(arguments, 0);\n\n        // Get the callback\n        var callback = args.pop();\n\n        // We do not have a callback but a Promise\n        if(typeof callback == 'function' || command.commandName == 'killCursors') {\n          var startTime = timestampGenerator.current();\n          // Emit the started event\n          self.emit('started', command)\n\n          // Emit succeeded event with killcursor if we have a legacy protocol\n          if(command.commandName == 'killCursors'\n            && this.server.lastIsMaster()\n            && this.server.lastIsMaster().maxWireVersion < 4) {\n            // Emit the succeeded command\n            command = {\n              duration: timestampGenerator.duration(startTime, timestampGenerator.current()),\n              commandName: commandName,\n              requestId: requestId,\n              operationId: cursor.operationId,\n              connectionId: cursor.server.getConnection(),\n              reply: [{ok:1}]\n            };\n\n            // Apply callback to the list of args\n            args.push(callback);\n            // Apply the call\n            func.apply(this, args);\n            // Emit the command\n            return self.emit('succeeded', command)\n          }\n\n          // Add our callback handler\n          args.push(function(err, r) {\n            if(err) {\n              // Command\n              var command = {\n                duration: timestampGenerator.duration(startTime, timestampGenerator.current()),\n                commandName: commandName,\n                requestId: requestId,\n                operationId: ourOpId,\n                connectionId: cursor.server.getConnection(),\n                failure: err };\n\n              // Emit the command\n              self.emit('failed', command)\n            } else {\n              // Do we have a getMore\n              if(commandName.toLowerCase() == 'getmore' && r == null) {\n                r = {\n                  cursor: {\n                    id: cursor.cursorState.cursorId,\n                    ns: cursor.ns,\n                    nextBatch: cursor.cursorState.documents\n                  }, ok:1\n                }\n              } else if((commandName.toLowerCase() == 'find' \n                || commandName.toLowerCase() == 'aggregate'\n                || commandName.toLowerCase() == 'listcollections') && r == null) {\n                r = {\n                  cursor: {\n                    id: cursor.cursorState.cursorId,\n                    ns: cursor.ns,\n                    firstBatch: cursor.cursorState.documents\n                  }, ok:1\n                }\n              } else if(commandName.toLowerCase() == 'killcursors' && r == null) {\n                r = {\n                  cursorsUnknown:[cursor.cursorState.lastCursorId],\n                  ok:1\n                }\n              }\n\n              // cursor id is zero, we can issue success command\n              command = {\n                duration: timestampGenerator.duration(startTime, timestampGenerator.current()),\n                commandName: commandName,\n                requestId: requestId,\n                operationId: cursor.operationId,\n                connectionId: cursor.server.getConnection(),\n                reply: r && r.result ? r.result : r\n              };\n\n              // Emit the command\n              self.emit('succeeded', command)\n            }\n\n            // Return\n            if(!callback) return;\n\n            // Return to caller\n            callback(err, r);\n          });\n\n          // Apply the call\n          func.apply(this, args);\n        } else {\n          // Assume promise, push back the missing value\n          args.push(callback);\n          // Get the promise\n          var promise = func.apply(this, args);\n          // Return a new promise\n          return new cursor.s.promiseLibrary(function(resolve, reject) {\n            var startTime = timestampGenerator.current();\n            // Emit the started event\n            self.emit('started', command)\n            // Execute the function\n            promise.then(function() {\n              // cursor id is zero, we can issue success command\n              var command = {\n                duration: timestampGenerator.duration(startTime, timestampGenerator.current()),\n                commandName: commandName,\n                requestId: requestId,\n                operationId: cursor.operationId,\n                connectionId: cursor.server.getConnection(),\n                reply: cursor.cursorState.documents\n              };\n\n              // Emit the command\n              self.emit('succeeded', command)\n            }).catch(function(err) {\n              // Command\n              var command = {\n                duration: timestampGenerator.duration(startTime, timestampGenerator.current()),\n                commandName: commandName,\n                requestId: requestId,\n                operationId: ourOpId,\n                connectionId: cursor.server.getConnection(),\n                failure: err };\n\n              // Emit the command\n              self.emit('failed', command)\n              // reject the promise\n              reject(err);\n            });\n          });\n        }\n      }\n    });\n  });\n}\n\ninherits(Instrumentation, EventEmitter);\n\nInstrumentation.prototype.uninstrument = function() {\n  for(var i = 0; i < this.overloads.length; i++) {\n    var obj = this.overloads[i];\n    obj.proto[obj.name] = obj.func;\n  }\n\n  // Remove all listeners\n  this.removeAllListeners('started');\n  this.removeAllListeners('succeeded');\n  this.removeAllListeners('failed');\n}\n\nmodule.exports = Instrumentation;\n"]}