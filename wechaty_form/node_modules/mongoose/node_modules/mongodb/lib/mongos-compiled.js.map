{"version":3,"sources":["mongos.js"],"names":[],"mappings":"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","file":"mongos-compiled.js","sourcesContent":["\"use strict\";\n\nvar EventEmitter = require('events').EventEmitter\n  , inherits = require('util').inherits\n  , f = require('util').format\n  , ServerCapabilities = require('./topology_base').ServerCapabilities\n  , MongoError = require('mongodb-core').MongoError\n  , CMongos = require('mongodb-core').Mongos\n  , Cursor = require('./cursor')\n  , AggregationCursor = require('./aggregation_cursor')\n  , CommandCursor = require('./command_cursor')\n  , Define = require('./metadata')\n  , Server = require('./server')\n  , Store = require('./topology_base').Store\n  , MAX_JS_INT = require('./utils').MAX_JS_INT\n  , translateOptions = require('./utils').translateOptions\n  , filterOptions = require('./utils').filterOptions\n  , mergeOptions = require('./utils').mergeOptions\n  , getReadPreference = require('./utils').getReadPreference\n  , os = require('os');\n\n// Get package.json variable\nvar driverVersion = require('../package.json').version;\nvar nodejsversion = f('Node.js %s, %s', process.version, os.endianness());\nvar type = os.type();\nvar name = process.platform;\nvar architecture = process.arch;\nvar release = os.release();\n\n/**\n * @fileOverview The **Mongos** class is a class that represents a Mongos Proxy topology and is\n * used to construct connections.\n *\n * **Mongos Should not be used, use MongoClient.connect**\n * @example\n * var Db = require('mongodb').Db,\n *   Mongos = require('mongodb').Mongos,\n *   Server = require('mongodb').Server,\n *   test = require('assert');\n * // Connect using Mongos\n * var server = new Server('localhost', 27017);\n * var db = new Db('test', new Mongos([server]));\n * db.open(function(err, db) {\n *   // Get an additional db\n *   db.close();\n * });\n */\n\n // Allowed parameters\n var legalOptionNames = ['ha', 'haInterval', 'acceptableLatencyMS'\n   , 'poolSize', 'ssl', 'checkServerIdentity', 'sslValidate'\n   , 'sslCA', 'sslCRL', 'sslCert', 'sslKey', 'sslPass', 'socketOptions', 'bufferMaxEntries'\n   , 'store', 'auto_reconnect', 'autoReconnect', 'emitError'\n   , 'keepAlive', 'noDelay', 'connectTimeoutMS', 'socketTimeoutMS'\n   , 'loggerLevel', 'logger', 'reconnectTries', 'appname', 'domainsEnabled'\n   , 'servername', 'promoteLongs', 'promoteValues', 'promoteBuffers'];\n\n/**\n * Creates a new Mongos instance\n * @class\n * @deprecated\n * @param {Server[]} servers A seedlist of servers participating in the replicaset.\n * @param {object} [options=null] Optional settings.\n * @param {booelan} [options.ha=true] Turn on high availability monitoring.\n * @param {number} [options.haInterval=5000] Time between each replicaset status check.\n * @param {number} [options.poolSize=5] Number of connections in the connection pool for each server instance, set to 5 as default for legacy reasons.\n * @param {number} [options.acceptableLatencyMS=15] Cutoff latency point in MS for MongoS proxy selection\n * @param {boolean} [options.ssl=false] Use ssl connection (needs to have a mongod server with ssl support)\n * @param {boolean|function} [options.checkServerIdentity=true] Ensure we check server identify during SSL, set to false to disable checking. Only works for Node 0.12.x or higher. You can pass in a boolean or your own checkServerIdentity override function.\n * @param {object} [options.sslValidate=true] Validate mongod server certificate against ca (needs to have a mongod server with ssl support, 2.4 or higher)\n * @param {array} [options.sslCA=null] Array of valid certificates either as Buffers or Strings (needs to have a mongod server with ssl support, 2.4 or higher)\n * @param {array} [options.sslCRL=null] Array of revocation certificates either as Buffers or Strings (needs to have a mongod server with ssl support, 2.4 or higher)\n * @param {(Buffer|string)} [options.sslCert=null] String or buffer containing the certificate we wish to present (needs to have a mongod server with ssl support, 2.4 or higher)\n * @param {(Buffer|string)} [options.sslKey=null] String or buffer containing the certificate private key we wish to present (needs to have a mongod server with ssl support, 2.4 or higher)\n * @param {(Buffer|string)} [options.sslPass=null] String or buffer containing the certificate password (needs to have a mongod server with ssl support, 2.4 or higher)\n * @param {string} [options.servername=null] String containing the server name requested via TLS SNI.\n * @param {object} [options.socketOptions=null] Socket options\n * @param {boolean} [options.socketOptions.noDelay=true] TCP Socket NoDelay option.\n * @param {number} [options.socketOptions.keepAlive=0] TCP KeepAlive on the socket with a X ms delay before start.\n * @param {number} [options.socketOptions.connectTimeoutMS=0] TCP Connection timeout setting\n * @param {number} [options.socketOptions.socketTimeoutMS=0] TCP Socket timeout setting\n * @param {boolean} [options.domainsEnabled=false] Enable the wrapping of the callback in the current domain, disabled by default to avoid perf hit.\n * @fires Mongos#connect\n * @fires Mongos#ha\n * @fires Mongos#joined\n * @fires Mongos#left\n * @fires Mongos#fullsetup\n * @fires Mongos#open\n * @fires Mongos#close\n * @fires Mongos#error\n * @fires Mongos#timeout\n * @fires Mongos#parseError\n * @property {string} parserType the parser type used (c++ or js).\n * @return {Mongos} a Mongos instance.\n */\nvar Mongos = function(servers, options) {\n  if(!(this instanceof Mongos)) return new Mongos(servers, options);\n  options = options || {};\n  var self = this;\n\n  // Filter the options\n  options = filterOptions(options, legalOptionNames);\n\n  // Ensure all the instances are Server\n  for(var i = 0; i < servers.length; i++) {\n    if(!(servers[i] instanceof Server)) {\n      throw MongoError.create({message: \"all seed list instances must be of the Server type\", driver:true});\n    }\n  }\n\n  // Stored options\n  var storeOptions = {\n      force: false\n    , bufferMaxEntries: typeof options.bufferMaxEntries == 'number' ? options.bufferMaxEntries : MAX_JS_INT\n  }\n\n  // Shared global store\n  var store = options.store || new Store(self, storeOptions);\n\n  // Set up event emitter\n  EventEmitter.call(this);\n\n  // Build seed list\n  var seedlist = servers.map(function(x) {\n    return {host: x.host, port: x.port}\n  });\n\n  // Get the reconnect option\n  var reconnect = typeof options.auto_reconnect == 'boolean' ? options.auto_reconnect : true;\n  reconnect = typeof options.autoReconnect == 'boolean' ? options.autoReconnect : reconnect;\n\n  // Clone options\n  var clonedOptions = mergeOptions({}, {\n    disconnectHandler: store,\n    cursorFactory: Cursor,\n    reconnect: reconnect,\n    emitError: typeof options.emitError == 'boolean' ? options.emitError : true,\n    size: typeof options.poolSize == 'number' ? options.poolSize : 5\n  });\n\n  // Translate any SSL options and other connectivity options\n  clonedOptions = translateOptions(clonedOptions, options);\n\n  // Socket options\n  var socketOptions = options.socketOptions && Object.keys(options.socketOptions).length > 0\n    ? options.socketOptions : options;\n\n  // Translate all the options to the mongodb-core ones\n  clonedOptions = translateOptions(clonedOptions, socketOptions);\n  if(typeof clonedOptions.keepAlive == 'number') {\n    clonedOptions.keepAliveInitialDelay = clonedOptions.keepAlive;\n    clonedOptions.keepAlive = clonedOptions.keepAlive > 0;\n  }\n\n  // Build default client information\n  this.clientInfo = {\n    driver: {\n      name: \"nodejs\",\n      version: driverVersion\n    },\n    os: {\n      type: type,\n      name: name,\n      architecture: architecture,\n      version: release\n    },\n    platform: nodejsversion\n  }\n\n  // Build default client information\n  clonedOptions.clientInfo = this.clientInfo;\n  // Do we have an application specific string\n  if(options.appname) {\n    clonedOptions.clientInfo.application = { name: options.appname };\n  }\n\n  // Create the Mongos\n  var mongos = new CMongos(seedlist, clonedOptions)\n  // Server capabilities\n  var sCapabilities = null;\n\n  // Internal state\n  this.s = {\n    // Create the Mongos\n      mongos: mongos\n    // Server capabilities\n    , sCapabilities: sCapabilities\n    // Debug turned on\n    , debug: clonedOptions.debug\n    // Store option defaults\n    , storeOptions: storeOptions\n    // Cloned options\n    , clonedOptions: clonedOptions\n    // Actual store of callbacks\n    , store: store\n    // Options\n    , options: options\n  }\n}\n\nvar define = Mongos.define = new Define('Mongos', Mongos, false);\n\n/**\n * @ignore\n */\ninherits(Mongos, EventEmitter);\n\n// Last ismaster\nObject.defineProperty(Mongos.prototype, 'isMasterDoc', {\n  enumerable:true, get: function() { return this.s.mongos.lastIsMaster(); }\n});\n\nObject.defineProperty(Mongos.prototype, 'parserType', {\n  enumerable:true, get: function() {\n    return this.s.mongos.parserType;\n  }\n});\n\n// BSON property\nObject.defineProperty(Mongos.prototype, 'bson', {\n  enumerable: true, get: function() {\n    return this.s.mongos.s.bson;\n  }\n});\n\nObject.defineProperty(Mongos.prototype, 'haInterval', {\n  enumerable:true, get: function() { return this.s.mongos.s.haInterval; }\n});\n\n// Connect\nMongos.prototype.connect = function(db, _options, callback) {\n  var self = this;\n  if('function' === typeof _options) callback = _options, _options = {};\n  if(_options == null) _options = {};\n  if(!('function' === typeof callback)) callback = null;\n  self.s.options = _options;\n\n  // Update bufferMaxEntries\n  self.s.storeOptions.bufferMaxEntries = db.bufferMaxEntries;\n\n  // Error handler\n  var connectErrorHandler = function() {\n    return function(err) {\n      // Remove all event handlers\n      var events = ['timeout', 'error', 'close'];\n      events.forEach(function(e) {\n        self.removeListener(e, connectErrorHandler);\n      });\n\n      self.s.mongos.removeListener('connect', connectErrorHandler);\n\n      // Try to callback\n      try {\n        callback(err);\n      } catch(err) {\n        process.nextTick(function() { throw err; })\n      }\n    }\n  }\n\n  // Actual handler\n  var errorHandler = function(event) {\n    return function(err) {\n      if(event != 'error') {\n        self.emit(event, err);\n      }\n    }\n  }\n\n  // Error handler\n  var reconnectHandler = function() {\n    self.emit('reconnect');\n    self.s.store.execute();\n  }\n\n  // relay the event\n  var relay = function(event) {\n    return function(t, server) {\n      self.emit(event, t, server);\n    }\n  }\n\n  // Connect handler\n  var connectHandler = function() {\n    // Clear out all the current handlers left over\n    [\"timeout\", \"error\", \"close\", 'serverOpening', 'serverDescriptionChanged', 'serverHeartbeatStarted',\n      'serverHeartbeatSucceeded', 'serverHeartbeatFailed', 'serverClosed', 'topologyOpening',\n      'topologyClosed', 'topologyDescriptionChanged'].forEach(function(e) {\n      self.s.mongos.removeAllListeners(e);\n    });\n\n    // Set up listeners\n    self.s.mongos.once('timeout', errorHandler('timeout'));\n    self.s.mongos.once('error', errorHandler('error'));\n    self.s.mongos.once('close', errorHandler('close'));\n\n    // Set up SDAM listeners\n    self.s.mongos.on('serverDescriptionChanged', relay('serverDescriptionChanged'));\n    self.s.mongos.on('serverHeartbeatStarted', relay('serverHeartbeatStarted'));\n    self.s.mongos.on('serverHeartbeatSucceeded', relay('serverHeartbeatSucceeded'));\n    self.s.mongos.on('serverHeartbeatFailed', relay('serverHeartbeatFailed'));\n    self.s.mongos.on('serverOpening', relay('serverOpening'));\n    self.s.mongos.on('serverClosed', relay('serverClosed'));\n    self.s.mongos.on('topologyOpening', relay('topologyOpening'));\n    self.s.mongos.on('topologyClosed', relay('topologyClosed'));\n    self.s.mongos.on('topologyDescriptionChanged', relay('topologyDescriptionChanged'));\n\n    // Set up serverConfig listeners\n    self.s.mongos.on('fullsetup', relay('fullsetup'));\n\n    // Emit open event\n    self.emit('open', null, self);\n\n    // Return correctly\n    try {\n      callback(null, self);\n    } catch(err) {\n      process.nextTick(function() { throw err; })\n    }\n  }\n\n  // Set up listeners\n  self.s.mongos.once('timeout', connectErrorHandler('timeout'));\n  self.s.mongos.once('error', connectErrorHandler('error'));\n  self.s.mongos.once('close', connectErrorHandler('close'));\n  self.s.mongos.once('connect', connectHandler);\n  // Join and leave events\n  self.s.mongos.on('joined', relay('joined'));\n  self.s.mongos.on('left', relay('left'));\n\n  // Reconnect server\n  self.s.mongos.on('reconnect', reconnectHandler);\n\n  // Start connection\n  self.s.mongos.connect(_options);\n}\n\n// Server capabilities\nMongos.prototype.capabilities = function() {\n  if(this.s.sCapabilities) return this.s.sCapabilities;\n  if(this.s.mongos.lastIsMaster() == null) return null;\n  this.s.sCapabilities = new ServerCapabilities(this.s.mongos.lastIsMaster());\n  return this.s.sCapabilities;\n}\n\ndefine.classMethod('capabilities', {callback: false, promise:false, returns: [ServerCapabilities]});\n\n// Command\nMongos.prototype.command = function(ns, cmd, options, callback) {\n  this.s.mongos.command(ns, cmd, getReadPreference(options), callback);\n}\n\ndefine.classMethod('command', {callback: true, promise:false});\n\n// Insert\nMongos.prototype.insert = function(ns, ops, options, callback) {\n  this.s.mongos.insert(ns, ops, options, function(e, m) {\n    callback(e, m)\n  });\n}\n\ndefine.classMethod('insert', {callback: true, promise:false});\n\n// Update\nMongos.prototype.update = function(ns, ops, options, callback) {\n  this.s.mongos.update(ns, ops, options, callback);\n}\n\ndefine.classMethod('update', {callback: true, promise:false});\n\n// Remove\nMongos.prototype.remove = function(ns, ops, options, callback) {\n  this.s.mongos.remove(ns, ops, options, callback);\n}\n\ndefine.classMethod('remove', {callback: true, promise:false});\n\n// Destroyed\nMongos.prototype.isDestroyed = function() {\n  return this.s.mongos.isDestroyed();\n}\n\n// IsConnected\nMongos.prototype.isConnected = function() {\n  return this.s.mongos.isConnected();\n}\n\ndefine.classMethod('isConnected', {callback: false, promise:false, returns: [Boolean]});\n\n// Insert\nMongos.prototype.cursor = function(ns, cmd, options) {\n  options.disconnectHandler = this.s.store;\n  return this.s.mongos.cursor(ns, cmd, options);\n}\n\ndefine.classMethod('cursor', {callback: false, promise:false, returns: [Cursor, AggregationCursor, CommandCursor]});\n\nMongos.prototype.lastIsMaster = function() {\n  return this.s.mongos.lastIsMaster();\n}\n\n/**\n * Unref all sockets\n * @method\n */\nMongos.prototype.unref = function () {\n  return this.s.mongos.unref();\n}\n\nMongos.prototype.close = function(forceClosed) {\n  this.s.mongos.destroy({\n    force: typeof forceClosed == 'boolean' ? forceClosed : false,\n  });\n  // We need to wash out all stored processes\n  if(forceClosed == true) {\n    this.s.storeOptions.force = forceClosed;\n    this.s.store.flush();\n  }\n}\n\ndefine.classMethod('close', {callback: false, promise:false});\n\nMongos.prototype.auth = function() {\n  var args = Array.prototype.slice.call(arguments, 0);\n  this.s.mongos.auth.apply(this.s.mongos, args);\n}\n\ndefine.classMethod('auth', {callback: true, promise:false});\n\nMongos.prototype.logout = function() {\n  var args = Array.prototype.slice.call(arguments, 0);\n  this.s.mongos.logout.apply(this.s.mongos, args);\n}\n\ndefine.classMethod('logout', {callback: true, promise:false});\n\n/**\n * All raw connections\n * @method\n * @return {array}\n */\nMongos.prototype.connections = function() {\n  return this.s.mongos.connections();\n}\n\ndefine.classMethod('connections', {callback: false, promise:false, returns:[Array]});\n\n/**\n * A mongos connect event, used to verify that the connection is up and running\n *\n * @event Mongos#connect\n * @type {Mongos}\n */\n\n/**\n * The mongos high availability event\n *\n * @event Mongos#ha\n * @type {function}\n * @param {string} type The stage in the high availability event (start|end)\n * @param {boolean} data.norepeat This is a repeating high availability process or a single execution only\n * @param {number} data.id The id for this high availability request\n * @param {object} data.state An object containing the information about the current replicaset\n */\n\n/**\n * A server member left the mongos set\n *\n * @event Mongos#left\n * @type {function}\n * @param {string} type The type of member that left (primary|secondary|arbiter)\n * @param {Server} server The server object that left\n */\n\n/**\n * A server member joined the mongos set\n *\n * @event Mongos#joined\n * @type {function}\n * @param {string} type The type of member that joined (primary|secondary|arbiter)\n * @param {Server} server The server object that joined\n */\n\n/**\n * Mongos fullsetup event, emitted when all proxies in the topology have been connected to.\n *\n * @event Mongos#fullsetup\n * @type {Mongos}\n */\n\n/**\n * Mongos open event, emitted when mongos can start processing commands.\n *\n * @event Mongos#open\n * @type {Mongos}\n */\n\n/**\n * Mongos close event\n *\n * @event Mongos#close\n * @type {object}\n */\n\n/**\n * Mongos error event, emitted if there is an error listener.\n *\n * @event Mongos#error\n * @type {MongoError}\n */\n\n/**\n * Mongos timeout event\n *\n * @event Mongos#timeout\n * @type {object}\n */\n\n/**\n * Mongos parseError event\n *\n * @event Mongos#parseError\n * @type {object}\n */\n\nmodule.exports = Mongos;\n"]}