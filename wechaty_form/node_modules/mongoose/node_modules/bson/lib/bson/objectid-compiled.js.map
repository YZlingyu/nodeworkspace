{"version":3,"sources":["objectid.js"],"names":[],"mappings":"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","file":"objectid-compiled.js","sourcesContent":["/**\n * Machine id.\n *\n * Create a random 3-byte value (i.e. unique for this\n * process). Other drivers use a md5 of the machine id here, but\n * that would mean an asyc call to gethostname, so we don't bother.\n * @ignore\n */\nvar MACHINE_ID = parseInt(Math.random() * 0xFFFFFF, 10);\n\n// Regular expression that checks for hex value\nvar checkForHexRegExp = new RegExp(\"^[0-9a-fA-F]{24}$\");\nvar hasBufferType = false;\n\n// Check if buffer exists\ntry {\n  if(Buffer && Buffer.from) hasBufferType = true;\n} catch(err) {};\n\n/**\n* Create a new ObjectID instance\n*\n* @class\n* @param {(string|number)} id Can be a 24 byte hex string, 12 byte binary string or a Number.\n* @property {number} generationTime The generation time of this ObjectId instance\n* @return {ObjectID} instance of ObjectID.\n*/\nvar ObjectID = function ObjectID(id) {\n  // Duck-typing to support ObjectId from different npm packages\n  if(id instanceof ObjectID) return id;\n  if(!(this instanceof ObjectID)) return new ObjectID(id);\n\n  this._bsontype = 'ObjectID';\n\n  // The most common usecase (blank id, new objectId instance)\n  if(id == null || typeof id == 'number') {\n    // Generate a new id\n    this.id = this.generate(id);\n    // If we are caching the hex string\n    if(ObjectID.cacheHexString) this.__id = this.toString('hex');\n    // Return the object\n    return;\n  }\n\n  // Check if the passed in id is valid\n  var valid = ObjectID.isValid(id);\n\n  // Throw an error if it's not a valid setup\n  if(!valid && id != null){\n    throw new Error(\"Argument passed in must be a single String of 12 bytes or a string of 24 hex characters\");\n  } else if(valid && typeof id == 'string' && id.length == 24 && hasBufferType) {\n    return new ObjectID(new Buffer(id, 'hex'));\n  } else if(valid && typeof id == 'string' && id.length == 24) {\n    return ObjectID.createFromHexString(id);\n  } else if(id != null && id.length === 12) {\n    // assume 12 byte string\n    this.id = id;\n  } else if(id != null && id.toHexString) {\n    // Duck-typing to support ObjectId from different npm packages\n    return id;\n  } else {\n    throw new Error(\"Argument passed in must be a single String of 12 bytes or a string of 24 hex characters\");\n  }\n\n  if(ObjectID.cacheHexString) this.__id = this.toString('hex');\n};\n\n// Allow usage of ObjectId as well as ObjectID\nvar ObjectId = ObjectID;\n\n// Precomputed hex table enables speedy hex string conversion\nvar hexTable = [];\nfor (var i = 0; i < 256; i++) {\n  hexTable[i] = (i <= 15 ? '0' : '') + i.toString(16);\n}\n\n/**\n* Return the ObjectID id as a 24 byte hex string representation\n*\n* @method\n* @return {string} return the 24 byte hex string representation.\n*/\nObjectID.prototype.toHexString = function() {\n  if(ObjectID.cacheHexString && this.__id) return this.__id;\n\n  var hexString = '';\n  if(!this.id || !this.id.length) {\n    throw new Error('invalid ObjectId, ObjectId.id must be either a string or a Buffer, but is [' + JSON.stringify(this.id) + ']');\n  }\n\n  if(this.id instanceof _Buffer) {\n    hexString = convertToHex(this.id);\n    if(ObjectID.cacheHexString) this.__id = hexString;\n    return hexString;\n  }\n\n  for (var i = 0; i < this.id.length; i++) {\n    hexString += hexTable[this.id.charCodeAt(i)];\n  }\n\n  if(ObjectID.cacheHexString) this.__id = hexString;\n  return hexString;\n};\n\n/**\n* Update the ObjectID index used in generating new ObjectID's on the driver\n*\n* @method\n* @return {number} returns next index value.\n* @ignore\n*/\nObjectID.prototype.get_inc = function() {\n  return ObjectID.index = (ObjectID.index + 1) % 0xFFFFFF;\n};\n\n/**\n* Update the ObjectID index used in generating new ObjectID's on the driver\n*\n* @method\n* @return {number} returns next index value.\n* @ignore\n*/\nObjectID.prototype.getInc = function() {\n  return this.get_inc();\n};\n\n/**\n* Generate a 12 byte id buffer used in ObjectID's\n*\n* @method\n* @param {number} [time] optional parameter allowing to pass in a second based timestamp.\n* @return {Buffer} return the 12 byte id buffer string.\n*/\nObjectID.prototype.generate = function(time) {\n  if ('number' != typeof time) {\n    time = ~~(Date.now()/1000);\n  }\n\n  // Use pid\n  var pid = (typeof process === 'undefined' ? Math.floor(Math.random() * 100000) : process.pid) % 0xFFFF;\n  var inc = this.get_inc();\n  // Buffer used\n  var buffer = new Buffer(12);\n  // Encode time\n  buffer[3] = time & 0xff;\n  buffer[2] = (time >> 8) & 0xff;\n  buffer[1] = (time >> 16) & 0xff;\n  buffer[0] = (time >> 24) & 0xff;\n  // Encode machine\n  buffer[6] = MACHINE_ID & 0xff;\n  buffer[5] = (MACHINE_ID >> 8) & 0xff;\n  buffer[4] = (MACHINE_ID >> 16) & 0xff;\n  // Encode pid\n  buffer[8] = pid & 0xff;\n  buffer[7] = (pid >> 8) & 0xff;\n  // Encode index\n  buffer[11] = inc & 0xff;\n  buffer[10] = (inc >> 8) & 0xff;\n  buffer[9] = (inc >> 16) & 0xff;\n  // Return the buffer\n  return buffer;\n};\n\n/**\n* Converts the id into a 24 byte hex string for printing\n*\n* @param {String} format The Buffer toString format parameter.\n* @return {String} return the 24 byte hex string representation.\n* @ignore\n*/\nObjectID.prototype.toString = function(format) {\n  // Is the id a buffer then use the buffer toString method to return the format\n  if(this.id && this.id.copy) {\n    return this.id.toString(typeof format === 'string' ? format : 'hex');\n  }\n\n  // if(this.buffer )\n  return this.toHexString();\n};\n\n/**\n* Converts to a string representation of this Id.\n*\n* @return {String} return the 24 byte hex string representation.\n* @ignore\n*/\nObjectID.prototype.inspect = ObjectID.prototype.toString;\n\n/**\n* Converts to its JSON representation.\n*\n* @return {String} return the 24 byte hex string representation.\n* @ignore\n*/\nObjectID.prototype.toJSON = function() {\n  return this.toHexString();\n};\n\n/**\n* Compares the equality of this ObjectID with `otherID`.\n*\n* @method\n* @param {object} otherID ObjectID instance to compare against.\n* @return {boolean} the result of comparing two ObjectID's\n*/\nObjectID.prototype.equals = function equals (otherId) {\n  var id;\n\n  if(otherId instanceof ObjectID) {\n    return this.toString() == otherId.toString();\n  } else if(typeof otherId == 'string' && ObjectID.isValid(otherId) && otherId.length == 12 && this.id instanceof _Buffer) {\n    return otherId === this.id.toString('binary');\n  } else if(typeof otherId == 'string' && ObjectID.isValid(otherId) && otherId.length == 24) {\n    return otherId.toLowerCase() === this.toHexString();\n  } else if(typeof otherId == 'string' && ObjectID.isValid(otherId) && otherId.length == 12) {\n    return otherId === this.id;\n  } else if(otherId != null && (otherId instanceof ObjectID || otherId.toHexString)) {\n    return otherId.toHexString() === this.toHexString();\n  } else {\n    return false;\n  }\n}\n\n/**\n* Returns the generation date (accurate up to the second) that this ID was generated.\n*\n* @method\n* @return {date} the generation date\n*/\nObjectID.prototype.getTimestamp = function() {\n  var timestamp = new Date();\n  var time = this.id[3] | this.id[2] << 8 | this.id[1] << 16 | this.id[0] << 24;\n  timestamp.setTime(Math.floor(time) * 1000);\n  return timestamp;\n}\n\n/**\n* @ignore\n*/\nObjectID.index = ~~(Math.random() * 0xFFFFFF);\n\n/**\n* @ignore\n*/\nObjectID.createPk = function createPk () {\n  return new ObjectID();\n};\n\n/**\n* Creates an ObjectID from a second based number, with the rest of the ObjectID zeroed out. Used for comparisons or sorting the ObjectID.\n*\n* @method\n* @param {number} time an integer number representing a number of seconds.\n* @return {ObjectID} return the created ObjectID\n*/\nObjectID.createFromTime = function createFromTime (time) {\n  var buffer = new Buffer([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]);\n  // Encode time into first 4 bytes\n  buffer[3] = time & 0xff;\n  buffer[2] = (time >> 8) & 0xff;\n  buffer[1] = (time >> 16) & 0xff;\n  buffer[0] = (time >> 24) & 0xff;\n  // Return the new objectId\n  return new ObjectID(buffer);\n};\n\n// Lookup tables\nvar encodeLookup = '0123456789abcdef'.split('')\nvar decodeLookup = []\nvar i = 0\nwhile (i < 10) decodeLookup[0x30 + i] = i++\nwhile (i < 16) decodeLookup[0x41 - 10 + i] = decodeLookup[0x61 - 10 + i] = i++\n\nvar _Buffer = Buffer;\nvar convertToHex = function(bytes) {\n  return bytes.toString('hex');\n}\n\n/**\n* Creates an ObjectID from a hex string representation of an ObjectID.\n*\n* @method\n* @param {string} hexString create a ObjectID from a passed in 24 byte hexstring.\n* @return {ObjectID} return the created ObjectID\n*/\nObjectID.createFromHexString = function createFromHexString (string) {\n  // Throw an error if it's not a valid setup\n  if(typeof string === 'undefined' || string != null && string.length != 24) {\n    throw new Error(\"Argument passed in must be a single String of 12 bytes or a string of 24 hex characters\");\n  }\n\n  // Use Buffer.from method if available\n  if(hasBufferType) return new ObjectID(new Buffer(string, 'hex'));\n\n  // Calculate lengths\n  var array = new _Buffer(12);\n  var n = 0;\n  var i = 0;\n\n  while (i < 24) {\n    array[n++] = decodeLookup[string.charCodeAt(i++)] << 4 | decodeLookup[string.charCodeAt(i++)]\n  }\n\n  return new ObjectID(array);\n};\n\n/**\n* Checks if a value is a valid bson ObjectId\n*\n* @method\n* @return {boolean} return true if the value is a valid bson ObjectId, return false otherwise.\n*/\nObjectID.isValid = function isValid(id) {\n  if(id == null) return false;\n\n  if(typeof id == 'number') {\n    return true;\n  }\n\n  if(typeof id == 'string') {\n    return id.length == 12 || (id.length == 24 && checkForHexRegExp.test(id));\n  }\n\n  if(id instanceof ObjectID) {\n    return true;\n  }\n\n  if(id instanceof _Buffer) {\n    return true;\n  }\n\n  // Duck-Typing detection of ObjectId like objects\n  if(id.toHexString) {\n    return id.id.length == 12 || (id.id.length == 24 && checkForHexRegExp.test(id.id));\n  }\n\n  return false;\n};\n\n/**\n* @ignore\n*/\nObject.defineProperty(ObjectID.prototype, \"generationTime\", {\n   enumerable: true\n , get: function () {\n     return this.id[3] | this.id[2] << 8 | this.id[1] << 16 | this.id[0] << 24;\n   }\n , set: function (value) {\n     // Encode time into first 4 bytes\n     this.id[3] = value & 0xff;\n     this.id[2] = (value >> 8) & 0xff;\n     this.id[1] = (value >> 16) & 0xff;\n     this.id[0] = (value >> 24) & 0xff;\n   }\n});\n\n/**\n * Expose.\n */\nmodule.exports = ObjectID;\nmodule.exports.ObjectID = ObjectID;\nmodule.exports.ObjectId = ObjectID;\n"]}