{"version":3,"sources":["test.js"],"names":[],"mappings":"AAAA,IAAI,UAAU,QAAQ,2BAAR,CAAd;AAAA,IACE,iBAAiB,QAAQ,mCAAR,CADnB;;AAGA;AACA,IAAI,SAAS,IAAI,OAAJ,CAAY,CAAC;AACxB,QAAM,WADkB,EACL,MAAM;AADD,CAAD,EAEtB;AACD,QAAM,WADL,EACkB,MAAM;AADxB,CAFsB,CAAZ,EAIT;AACF,WAAS;AADP,CAJS,CAAb;;AAQA,SAAS,cAAT,CAAwB,OAAxB,EAAiC,EAAjC,EAAqC;AACnC,MAAI,QAAQ,GAAZ;;AAEA,OAAI,IAAI,IAAI,CAAZ,EAAe,IAAI,GAAnB,EAAwB,GAAxB,EAA6B;AAC3B;AACA,QAAI,SAAS,QAAQ,MAAR,CAAe,WAAf,EAA4B;AACrC,YAAM,WAD+B;AAErC,aAAO,EAAC,GAAE,CAAH;AAF8B,KAA5B,EAGV,EAAC,gBAAgB,IAAI,cAAJ,CAAmB,WAAnB,CAAjB,EAHU,CAAb;;AAKA;AACA,WAAO,IAAP,CAAY,UAAS,GAAT,EAAc,GAAd,EAAmB;AAC7B,cAAQ,QAAQ,CAAhB;AACA,UAAG,GAAH,EAAQ,QAAQ,GAAR,CAAY,GAAZ;AACR,UAAG,SAAS,CAAZ,EAAe,OAAO,IAAP;AAChB,KAJD;AAKD;AACF;;AAED,OAAO,EAAP,CAAU,SAAV,EAAqB,UAAS,OAAT,EAAkB;AACrC,UAAQ,GAAR,CAAY,sCAAZ;AACA;AACA,UAAQ,IAAR,CAAa,aAAb,EAA4B,OAA5B,EAAqC,MAArC,EAA6C,MAA7C,EAAqD,UAAS,GAAT,EAAc,CAAd,EAAiB;AACpE,YAAQ,GAAR,CAAY,sCAAZ;AACA;AACA;;AAEA,YAAQ,MAAR,CAAe,WAAf,EAA4B,CAAC,EAAC,GAAE,CAAH,EAAD,CAA5B,EAAqC,UAAS,GAAT,EAAc,CAAd,EAAiB;AACpD,cAAQ,GAAR,CAAY,sCAAZ;AACA,cAAQ,GAAR,CAAY,GAAZ;AACA,UAAG,CAAH,EAAK,QAAQ,GAAR,CAAY,EAAE,MAAd;AACL,UAAI,OAAO,IAAX;;AAEA,cAAQ,EAAR,CAAW,QAAX,EAAqB,UAAS,EAAT,EAAa,OAAb,EAAsB;AACzC,YAAG,QAAQ,QAAQ,IAAnB,EAAyB;AACvB,kBAAQ,GAAR,CAAY,2BAA2B,EAA3B,GAAgC,MAAhC,GAAyC,QAAQ,IAA7D;AACA,yBAAe,OAAf,EAAwB,YAAW,CAClC,CADD;AAED;AACF,OAND;;AAQA;AACA;AACA,qBAAe,OAAf,EAAwB,YAAW;AACjC,gBAAQ,GAAR,CAAY,kBAAZ;AACA;AACA,YAAI,IAAI,QAAQ,CAAR,CAAU,eAAV,CAA0B,WAA1B,CAAsC,CAAtC,CAAR;AACA,eAAO,EAAE,IAAT;AACA,UAAE,OAAF,CAAU,EAAC,WAAU,IAAX,EAAV;AACA;;AAEA;AACA;AACD,OAVD;AAWD,KA3BD;AA4BD,GAjCD;AAkCD,CArCD;;AAuCA,OAAO,OAAP","file":"test-compiled.js","sourcesContent":["var ReplSet = require('./lib2/topologies/replset'),\n  ReadPreference = require('./lib2/topologies/read_preference');\n\n// Attempt to connect\nvar server = new ReplSet([{\n  host: 'localhost', port: 31000\n}, {\n  host: 'localhost', port: 31001\n}], {\n  setName: 'rs'\n});\n\nfunction executeCursors(_server, cb) {\n  var count = 100;\n\n  for(var i = 0; i < 100; i++) {\n    // Execute the write\n    var cursor = _server.cursor('test.test', {\n        find: 'test.test'\n      , query: {a:1}\n    }, {readPreference: new ReadPreference('secondary')});\n\n    // Get the first document\n    cursor.next(function(err, doc) {\n      count = count - 1;\n      if(err) console.dir(err)\n      if(count == 0) return cb();\n    });\n  }\n}\n\nserver.on('connect', function(_server) {\n  console.log(\"---------------------------------- 0\")\n  // Attempt authentication\n  _server.auth('scram-sha-1', 'admin', 'root', 'root', function(err, r) {\n    console.log(\"---------------------------------- 1\")\n    // console.dir(err)\n    // console.dir(r)\n\n    _server.insert('test.test', [{a:1}], function(err, r) {\n      console.log(\"---------------------------------- 2\")\n      console.dir(err)\n      if(r)console.dir(r.result)\n      var name = null;\n\n      _server.on('joined', function(_t, _server) {\n        if(name == _server.name) {\n          console.log(\"=========== joined :: \" + _t + \" :: \" + _server.name)\n          executeCursors(_server, function() {\n          });\n        }\n      })\n\n      // var s = _server.s.replicaSetState.secondaries[0];\n      // s.destroy({emitClose:true});\n      executeCursors(_server, function() {\n        console.log(\"============== 0\")\n        // Attempt to force a server reconnect\n        var s = _server.s.replicaSetState.secondaries[0];\n        name = s.name;\n        s.destroy({emitClose:true});\n        // console.log(\"============== 1\")\n\n        // _server.destroy();\n        // test.done();\n      });\n    });\n  });\n});\n\nserver.connect();\n"]}