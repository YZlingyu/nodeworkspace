{"version":3,"sources":["2_4_support.js"],"names":[],"mappings":"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","file":"2_4_support-compiled.js","sourcesContent":["\"use strict\";\n\nvar Insert = require('./commands').Insert\n  , Update = require('./commands').Update\n  , Remove = require('./commands').Remove\n  , copy = require('../connection/utils').copy\n  , retrieveBSON = require('../connection/utils').retrieveBSON\n  , KillCursor = require('../connection/commands').KillCursor\n  , GetMore = require('../connection/commands').GetMore\n  , Query = require('../connection/commands').Query\n  , f = require('util').format\n  , CommandResult = require('../connection/command_result')\n  , MongoError = require('../error')\n  , getReadPreference = require('./shared').getReadPreference;\n\nvar BSON = retrieveBSON(),\n  Long = BSON.Long;\n\n// Write concern fields\nvar writeConcernFields = ['w', 'wtimeout', 'j', 'fsync'];\n\nvar WireProtocol = function() {}\n\n//\n// Needs to support legacy mass insert as well as ordered/unordered legacy\n// emulation\n//\nWireProtocol.prototype.insert = function(pool, ismaster, ns, bson, ops, options, callback) {\n  options = options || {};\n  // Default is ordered execution\n  var ordered = typeof options.ordered == 'boolean' ? options.ordered : true;\n  ops = Array.isArray(ops) ? ops :[ops];\n\n  // If we have more than a 1000 ops fails\n  if(ops.length > 1000) return callback(new MongoError(\"exceeded maximum write batch size of 1000\"));\n\n  // Write concern\n  var writeConcern = options.writeConcern || {w:1};\n\n  // We are unordered\n  if(!ordered || writeConcern.w == 0) {\n    return executeUnordered('insert', Insert, ismaster, ns, bson, pool, ops, options, callback);\n  }\n\n  return executeOrdered('insert', Insert, ismaster, ns, bson, pool, ops, options, callback);\n}\n\nWireProtocol.prototype.update = function(pool, ismaster, ns, bson, ops, options, callback) {\n  options = options || {};\n  // Default is ordered execution\n  var ordered = typeof options.ordered == 'boolean' ? options.ordered : true;\n  ops = Array.isArray(ops) ? ops :[ops];\n\n  // Write concern\n  var writeConcern = options.writeConcern || {w:1};\n\n  // We are unordered\n  if(!ordered || writeConcern.w == 0) {\n    return executeUnordered('update', Update, ismaster, ns, bson, pool, ops, options, callback);\n  }\n\n  return executeOrdered('update', Update, ismaster, ns, bson, pool, ops, options, callback);\n}\n\nWireProtocol.prototype.remove = function(pool, ismaster, ns, bson, ops, options, callback) {\n  options = options || {};\n  // Default is ordered execution\n  var ordered = typeof options.ordered == 'boolean' ? options.ordered : true;\n  ops = Array.isArray(ops) ? ops :[ops];\n\n  // Write concern\n  var writeConcern = options.writeConcern || {w:1};\n\n  // We are unordered\n  if(!ordered || writeConcern.w == 0) {\n    return executeUnordered('remove', Remove, ismaster, ns, bson, pool, ops, options, callback);\n  }\n\n  return executeOrdered('remove', Remove, ismaster, ns, bson, pool, ops, options, callback);\n}\n\nWireProtocol.prototype.killCursor = function(bson, ns, cursorId, pool, callback) {\n  // Create a kill cursor command\n  var killCursor = new KillCursor(bson, [cursorId]);\n  // Execute the kill cursor command\n  if(pool && pool.isConnected()) {\n    pool.write(killCursor, {\n      immediateRelease:true, noResponse: true\n    });\n  }\n\n  // Callback\n  if(typeof callback == 'function') callback(null, null);\n}\n\nWireProtocol.prototype.getMore = function(bson, ns, cursorState, batchSize, raw, connection, options, callback) {\n  // Create getMore command\n  var getMore = new GetMore(bson, ns, cursorState.cursorId, {numberToReturn: batchSize});\n\n  // Query callback\n  var queryCallback = function(err, result) {\n    if(err) return callback(err);\n    // Get the raw message\n    var r = result.message;\n\n    // If we have a timed out query or a cursor that was killed\n    if((r.responseFlags & (1 << 0)) != 0) {\n      return callback(new MongoError(\"cursor does not exist, was killed or timed out\"), null);\n    }\n\n    // Ensure we have a Long valie cursor id\n    var cursorId = typeof r.cursorId == 'number'\n      ? Long.fromNumber(r.cursorId)\n      : r.cursorId;\n\n    // Set all the values\n    cursorState.documents = r.documents;\n    cursorState.cursorId = cursorId;\n\n    // Return\n    callback(null, null, r.connection);\n  }\n\n  // Contains any query options\n  var queryOptions = {};\n\n  // If we have a raw query decorate the function\n  if(raw) {\n    queryOptions.raw = raw;\n  }\n\n  // Check if we need to promote longs\n  if(typeof cursorState.promoteLongs == 'boolean') {\n    queryOptions.promoteLongs = cursorState.promoteLongs;\n  }\n\n  if(typeof cursorState.promoteValues == 'boolean') {\n    queryOptions.promoteValues = cursorState.promoteValues;\n  }\n\n  if(typeof cursorState.promoteBuffers == 'boolean') {\n    queryOptions.promoteBuffers = cursorState.promoteBuffers;\n  }\n\n  // Write out the getMore command\n  connection.write(getMore, queryOptions, queryCallback);\n}\n\nWireProtocol.prototype.command = function(bson, ns, cmd, cursorState, topology, options) {\n  // Establish type of command\n  if(cmd.find) {\n    return setupClassicFind(bson, ns, cmd, cursorState, topology, options)\n  } else if(cursorState.cursorId != null) {\n    return;\n  } else if(cmd) {\n    return setupCommand(bson, ns, cmd, cursorState, topology, options);\n  } else {\n    throw new MongoError(f(\"command %s does not return a cursor\", JSON.stringify(cmd)));\n  }\n}\n\n//\n// Execute a find command\nvar setupClassicFind = function(bson, ns, cmd, cursorState, topology, options) {\n  // Ensure we have at least some options\n  options = options || {};\n  // Get the readPreference\n  var readPreference = getReadPreference(cmd, options);\n  // Set the optional batchSize\n  cursorState.batchSize = cmd.batchSize || cursorState.batchSize;\n  var numberToReturn = 0;\n\n  // Unpack the limit and batchSize values\n  if(cursorState.limit == 0) {\n    numberToReturn = cursorState.batchSize;\n  } else if(cursorState.limit < 0 || cursorState.limit < cursorState.batchSize || (cursorState.limit > 0 && cursorState.batchSize == 0)) {\n    numberToReturn = cursorState.limit;\n  } else {\n    numberToReturn = cursorState.batchSize;\n  }\n\n  var numberToSkip = cursorState.skip || 0;\n  // Build actual find command\n  var findCmd = {};\n  // Using special modifier\n  var usesSpecialModifier = false;\n\n  // We have a Mongos topology, check if we need to add a readPreference\n  if(topology.type == 'mongos' && readPreference) {\n    findCmd['$readPreference'] = readPreference.toJSON();\n    usesSpecialModifier = true;\n  }\n\n  // Add special modifiers to the query\n  if(cmd.sort) findCmd['orderby'] = cmd.sort, usesSpecialModifier = true;\n  if(cmd.hint) findCmd['$hint'] = cmd.hint, usesSpecialModifier = true;\n  if(cmd.snapshot) findCmd['$snapshot'] = cmd.snapshot, usesSpecialModifier = true;\n  if(cmd.returnKey) findCmd['$returnKey'] = cmd.returnKey, usesSpecialModifier = true;\n  if(cmd.maxScan) findCmd['$maxScan'] = cmd.maxScan, usesSpecialModifier = true;\n  if(cmd.min) findCmd['$min'] = cmd.min, usesSpecialModifier = true;\n  if(cmd.max) findCmd['$max'] = cmd.max, usesSpecialModifier = true;\n  if(cmd.showDiskLoc) findCmd['$showDiskLoc'] = cmd.showDiskLoc, usesSpecialModifier = true;\n  if(cmd.comment) findCmd['$comment'] = cmd.comment, usesSpecialModifier = true;\n  if(cmd.maxTimeMS) findCmd['$maxTimeMS'] = cmd.maxTimeMS, usesSpecialModifier = true;\n\n  if(cmd.explain) {\n\t// nToReturn must be 0 (match all) or negative (match N and close cursor)\n\t// nToReturn > 0 will give explain results equivalent to limit(0)\n    numberToReturn = -Math.abs(cmd.limit || 0);\n    usesSpecialModifier = true;\n    findCmd['$explain'] = true;\n  }\n\n  // If we have a special modifier\n  if(usesSpecialModifier) {\n    findCmd['$query'] = cmd.query;\n  } else {\n    findCmd = cmd.query;\n  }\n\n  // Throw on majority readConcern passed in\n  if(cmd.readConcern && cmd.readConcern.level != 'local') {\n    throw new MongoError(f('server find command does not support a readConcern level of %s', cmd.readConcern.level));\n  }\n\n  // Remove readConcern, ensure no failing commands\n  if(cmd.readConcern) {\n    cmd = copy(cmd);\n    delete cmd['readConcern'];\n  }\n\n  // Set up the serialize and ignoreUndefined fields\n  var serializeFunctions = typeof options.serializeFunctions == 'boolean'\n    ? options.serializeFunctions : false;\n  var ignoreUndefined = typeof options.ignoreUndefined == 'boolean'\n    ? options.ignoreUndefined : false;\n\n  // Build Query object\n  var query = new Query(bson, ns, findCmd, {\n      numberToSkip: numberToSkip, numberToReturn: numberToReturn\n    , checkKeys: false, returnFieldSelector: cmd.fields\n    , serializeFunctions: serializeFunctions, ignoreUndefined: ignoreUndefined\n  });\n\n  // Set query flags\n  query.slaveOk = readPreference.slaveOk();\n\n  // Set up the option bits for wire protocol\n  if(typeof cmd.tailable == 'boolean') query.tailable = cmd.tailable;\n  if(typeof cmd.oplogReplay == 'boolean') query.oplogReplay = cmd.oplogReplay;\n  if(typeof cmd.noCursorTimeout == 'boolean') query.noCursorTimeout = cmd.noCursorTimeout;\n  if(typeof cmd.awaitData == 'boolean') query.awaitData = cmd.awaitData;\n  if(typeof cmd.partial == 'boolean') query.partial = cmd.partial;\n  // Return the query\n  return query;\n}\n\n//\n// Set up a command cursor\nvar setupCommand = function(bson, ns, cmd, cursorState, topology, options) {\n  // Set empty options object\n  options = options || {}\n  // Get the readPreference\n  var readPreference = getReadPreference(cmd, options);\n  // Final query\n  var finalCmd = {};\n  for(var name in cmd) {\n    finalCmd[name] = cmd[name];\n  }\n\n  // Build command namespace\n  var parts = ns.split(/\\./);\n\n  // Throw on majority readConcern passed in\n  if(cmd.readConcern && cmd.readConcern.level != 'local') {\n    throw new MongoError(f('server %s command does not support a readConcern level of %s', JSON.stringify(cmd), cmd.readConcern.level));\n  }\n\n  // Remove readConcern, ensure no failing commands\n  if(cmd.readConcern) delete cmd['readConcern'];\n\n  // Serialize functions\n  var serializeFunctions = typeof options.serializeFunctions == 'boolean'\n    ? options.serializeFunctions : false;\n\n  // Set up the serialize and ignoreUndefined fields\n  var ignoreUndefined = typeof options.ignoreUndefined == 'boolean'\n    ? options.ignoreUndefined : false;\n\n  // We have a Mongos topology, check if we need to add a readPreference\n  if(topology.type == 'mongos'\n    && readPreference\n    && readPreference.preference != 'primary') {\n    finalCmd = {\n      '$query': finalCmd,\n      '$readPreference': readPreference.toJSON()\n    };\n  }\n\n  // Build Query object\n  var query = new Query(bson, f('%s.$cmd', parts.shift()), finalCmd, {\n      numberToSkip: 0, numberToReturn: -1\n    , checkKeys: false, serializeFunctions: serializeFunctions\n    , ignoreUndefined: ignoreUndefined\n  });\n\n  // Set query flags\n  query.slaveOk = readPreference.slaveOk();\n\n  // Return the query\n  return query;\n}\n\nvar hasWriteConcern = function(writeConcern) {\n  if(writeConcern.w\n    || writeConcern.wtimeout\n    || writeConcern.j == true\n    || writeConcern.fsync == true\n    || Object.keys(writeConcern).length == 0) {\n    return true;\n  }\n  return false;\n}\n\nvar cloneWriteConcern = function(writeConcern) {\n  var wc = {};\n  if(writeConcern.w != null) wc.w = writeConcern.w;\n  if(writeConcern.wtimeout != null) wc.wtimeout = writeConcern.wtimeout;\n  if(writeConcern.j != null) wc.j = writeConcern.j;\n  if(writeConcern.fsync != null) wc.fsync = writeConcern.fsync;\n  return wc;\n}\n\n//\n// Aggregate up all the results\n//\nvar aggregateWriteOperationResults = function(opType, ops, results, connection) {\n  var finalResult = { ok: 1, n: 0 }\n  if(opType == 'update') {\n    finalResult.nModified = 0;\n  }\n\n  // Map all the results coming back\n  for(var i = 0; i < results.length; i++) {\n    var result = results[i];\n    var op = ops[i];\n\n    if((result.upserted || (result.updatedExisting == false)) && finalResult.upserted == null) {\n      finalResult.upserted = [];\n    }\n\n    // Push the upserted document to the list of upserted values\n    if(result.upserted) {\n      finalResult.upserted.push({index: i, _id: result.upserted});\n    }\n\n    // We have an upsert where we passed in a _id\n    if(result.updatedExisting == false && result.n == 1 && result.upserted == null) {\n      finalResult.upserted.push({index: i, _id: op.q._id});\n    } else if(result.updatedExisting == true) {\n      finalResult.nModified += result.n;\n    }\n\n    // We have an insert command\n    if(result.ok == 1 && opType == 'insert' && result.err == null) {\n      finalResult.n = finalResult.n + 1;\n    }\n\n    // We have a command error\n    if(result != null && result.ok == 0 || result.err || result.errmsg) {\n      if(result.ok == 0) finalResult.ok = 0;\n      finalResult.code = result.code;\n      finalResult.errmsg = result.errmsg || result.err || result.errMsg;\n\n      // Check if we have a write error\n      if(result.code == 11000\n        || result.code == 11001\n        || result.code == 12582\n        || result.code == 16544\n        || result.code == 16538\n        || result.code == 16542\n        || result.code == 14\n        || result.code == 13511) {\n        if(finalResult.writeErrors == null) finalResult.writeErrors = [];\n        finalResult.writeErrors.push({\n            index: i\n          , code: result.code\n          , errmsg: result.errmsg || result.err || result.errMsg\n        });\n      } else {\n        finalResult.writeConcernError = {\n            code: result.code\n          , errmsg: result.errmsg || result.err || result.errMsg\n        }\n      }\n    } else if(typeof result.n == 'number') {\n      finalResult.n += result.n;\n    } else {\n      finalResult.n += 1;\n    }\n\n    // Result as expected\n    if(result != null && result.lastOp) finalResult.lastOp = result.lastOp;\n  }\n\n  // Return finalResult aggregated results\n  return new CommandResult(finalResult, connection);\n}\n\n//\n// Execute all inserts in an ordered manner\n//\nvar executeOrdered = function(opType ,command, ismaster, ns, bson, pool, ops, options, callback) {\n  var _ops = ops.slice(0);\n  // Collect all the getLastErrors\n  var getLastErrors = [];\n  // Execute an operation\n  var executeOp = function(list, _callback) {\n    // No more items in the list\n    if(list.length == 0) {\n      return process.nextTick(function() {\n        _callback(null, aggregateWriteOperationResults(opType, ops, getLastErrors, null));\n      });\n    }\n\n    // Get the first operation\n    var doc = list.shift();\n    // Create an insert command\n    var op = new command(Query.getRequestId(), ismaster, bson, ns, [doc], options);\n    // Write concern\n    var optionWriteConcern = options.writeConcern || {w:1};\n    // Final write concern\n    var writeConcern = cloneWriteConcern(optionWriteConcern);\n\n    // Get the db name\n    var db = ns.split('.').shift();\n\n    try {\n      // Add binary message to list of commands to execute\n      var commands = [op];\n\n      // Add getLastOrdered\n      var getLastErrorCmd = {getlasterror: 1};\n      // Merge all the fields\n      for(var i = 0; i < writeConcernFields.length; i++) {\n        if(writeConcern[writeConcernFields[i]] != null) {\n          getLastErrorCmd[writeConcernFields[i]] = writeConcern[writeConcernFields[i]];\n        }\n      }\n\n      // Create a getLastError command\n      var getLastErrorOp = new Query(bson, f(\"%s.$cmd\", db), getLastErrorCmd, {numberToReturn: -1});\n      // Add getLastError command to list of ops to execute\n      commands.push(getLastErrorOp);\n\n      // getLastError callback\n      var getLastErrorCallback = function(err, result) {\n        if(err) return callback(err);\n        // Get the document\n        var doc = result.result;\n        // Save the getLastError document\n        getLastErrors.push(doc);\n\n        // If we have an error terminate\n        if(doc.ok == 0 || doc.err || doc.errmsg) {\n          return callback(null, aggregateWriteOperationResults(opType, ops, getLastErrors, result.connection));\n        }\n\n        // Execute the next op in the list\n        executeOp(list, callback);\n      }\n\n      // Write both commands out at the same time\n      pool.write(commands, getLastErrorCallback);\n    } catch(err) {\n      // We have a serialization error, rewrite as a write error to have same behavior as modern\n      // write commands\n      getLastErrors.push({ ok: 1, errmsg: typeof err == 'string' ? err : err.message, code: 14 });\n      // Return due to an error\n      process.nextTick(function() {\n        _callback(null, aggregateWriteOperationResults(opType, ops, getLastErrors, null));\n      });\n    }\n  }\n\n  // Execute the operations\n  executeOp(_ops, callback);\n}\n\nvar executeUnordered = function(opType, command, ismaster, ns, bson, pool, ops, options, callback) {\n  // Total operations to write\n  var totalOps = ops.length;\n  // Collect all the getLastErrors\n  var getLastErrors = [];\n  // Write concern\n  var optionWriteConcern = options.writeConcern || {w:1};\n  // Final write concern\n  var writeConcern = cloneWriteConcern(optionWriteConcern);\n  // Driver level error\n  var error;\n\n  // Execute all the operations\n  for(var i = 0; i < ops.length; i++) {\n    // Create an insert command\n    var op = new command(Query.getRequestId(), ismaster, bson, ns, [ops[i]], options);\n    // Get db name\n    var db = ns.split('.').shift();\n\n    try {\n      // Add binary message to list of commands to execute\n      var commands = [op];\n\n      // If write concern 0 don't fire getLastError\n      if(hasWriteConcern(writeConcern)) {\n        var getLastErrorCmd = {getlasterror: 1};\n        // Merge all the fields\n        for(var j = 0; j < writeConcernFields.length; j++) {\n          if(writeConcern[writeConcernFields[j]] != null)\n            getLastErrorCmd[writeConcernFields[j]] = writeConcern[writeConcernFields[j]];\n        }\n\n        // Create a getLastError command\n        var getLastErrorOp = new Query(bson, f(\"%s.$cmd\", db), getLastErrorCmd, {numberToReturn: -1});\n        // Add getLastError command to list of ops to execute\n        commands.push(getLastErrorOp);\n\n        // Give the result from getLastError the right index\n        var callbackOp = function(_index) {\n          return function(err, result) {\n            if(err) error = err;\n            // Update the number of operations executed\n            totalOps = totalOps - 1;\n            // Save the getLastError document\n            if(!err) getLastErrors[_index] = result.result;\n            // Check if we are done\n            if(totalOps == 0) {\n              process.nextTick(function() {\n                if(error) return callback(error);\n                callback(null, aggregateWriteOperationResults(opType, ops, getLastErrors, result.connection));\n              });\n            }\n          }\n        }\n\n        // Write both commands out at the same time\n        pool.write(commands, callbackOp(i));\n      } else {\n        pool.write(commands, {immediateRelease:true, noResponse:true});\n      }\n    } catch(err) {\n      // Update the number of operations executed\n      totalOps = totalOps - 1;\n      // We have a serialization error, rewrite as a write error to have same behavior as modern\n      // write commands\n      getLastErrors[i] = { ok: 1, errmsg: typeof err == 'string' ? err : err.message, code: 14 };\n      // Check if we are done\n      if(totalOps == 0) {\n        callback(null, aggregateWriteOperationResults(opType, ops, getLastErrors, null));\n      }\n    }\n  }\n\n  // Empty w:0 return\n  if(writeConcern\n    && writeConcern.w == 0 && callback) {\n    callback(null, new CommandResult({ok:1}, null));\n  }\n}\n\nmodule.exports = WireProtocol;\n"]}