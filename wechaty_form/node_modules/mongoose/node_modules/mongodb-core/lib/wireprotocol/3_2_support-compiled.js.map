{"version":3,"sources":["3_2_support.js"],"names":[],"mappings":"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","file":"3_2_support-compiled.js","sourcesContent":["\"use strict\";\n\nvar Query = require('../connection/commands').Query\n  , retrieveBSON = require('../connection/utils').retrieveBSON\n  , f = require('util').format\n  , MongoError = require('../error')\n  , getReadPreference = require('./shared').getReadPreference;\n\nvar BSON = retrieveBSON(),\n  Long = BSON.Long;\n\nvar WireProtocol = function(legacyWireProtocol) {\n  this.legacyWireProtocol = legacyWireProtocol;\n}\n\n//\n// Execute a write operation\nvar executeWrite = function(pool, bson, type, opsField, ns, ops, options, callback) {\n  if(ops.length == 0) throw new MongoError(\"insert must contain at least one document\");\n  if(typeof options == 'function') {\n    callback = options;\n    options = {};\n    options = options || {};\n  }\n\n  // Split the ns up to get db and collection\n  var p = ns.split(\".\");\n  var d = p.shift();\n  // Options\n  var ordered = typeof options.ordered == 'boolean' ? options.ordered : true;\n  var writeConcern = options.writeConcern;\n\n  // return skeleton\n  var writeCommand = {};\n  writeCommand[type] = p.join('.');\n  writeCommand[opsField] = ops;\n  writeCommand.ordered = ordered;\n\n  // Did we specify a write concern\n  if(writeConcern && Object.keys(writeConcern).length > 0) {\n    writeCommand.writeConcern = writeConcern;\n  }\n\n  // If we have collation passed in\n  if(options.collation) {\n    for(var i = 0; i < writeCommand[opsField].length; i++) {\n      if(!writeCommand[opsField][i].collation) {\n        writeCommand[opsField][i].collation = options.collation;\n      }\n    }\n  }\n\n  // Do we have bypassDocumentValidation set, then enable it on the write command\n  if(typeof options.bypassDocumentValidation == 'boolean') {\n    writeCommand.bypassDocumentValidation = options.bypassDocumentValidation;\n  }\n\n  // Options object\n  var opts = { command: true };\n  var queryOptions = { checkKeys : false, numberToSkip: 0, numberToReturn: 1 };\n  if(type == 'insert') queryOptions.checkKeys = true;\n  if(typeof options.checkKeys == 'boolean') queryOptions.checkKeys = options.checkKeys;\n\n  // Ensure we support serialization of functions\n  if(options.serializeFunctions) queryOptions.serializeFunctions = options.serializeFunctions;\n  // Do not serialize the undefined fields\n  if(options.ignoreUndefined) queryOptions.ignoreUndefined = options.ignoreUndefined;\n\n  try {\n    // Create write command\n    var cmd = new Query(bson, f(\"%s.$cmd\", d), writeCommand, queryOptions);\n    // Execute command\n    pool.write(cmd, opts, callback);\n  } catch(err) {\n    callback(err);\n  }\n}\n\n//\n// Needs to support legacy mass insert as well as ordered/unordered legacy\n// emulation\n//\nWireProtocol.prototype.insert = function(pool, ismaster, ns, bson, ops, options, callback) {\n  executeWrite(pool, bson, 'insert', 'documents', ns, ops, options, callback);\n}\n\nWireProtocol.prototype.update = function(pool, ismaster, ns, bson, ops, options, callback) {\n  executeWrite(pool, bson, 'update', 'updates', ns, ops, options, callback);\n}\n\nWireProtocol.prototype.remove = function(pool, ismaster, ns, bson, ops, options, callback) {\n  executeWrite(pool, bson, 'delete', 'deletes', ns, ops, options, callback);\n}\n\nWireProtocol.prototype.killCursor = function(bson, ns, cursorId, pool, callback) {\n  // Build command namespace\n  var parts = ns.split(/\\./);\n  // Command namespace\n  var commandns = f('%s.$cmd', parts.shift());\n  // Create getMore command\n  var killcursorCmd = {\n    killCursors: parts.join('.'),\n    cursors: [cursorId]\n  }\n\n  // Build Query object\n  var query = new Query(bson, commandns, killcursorCmd, {\n      numberToSkip: 0, numberToReturn: -1\n    , checkKeys: false, returnFieldSelector: null\n  });\n\n  // Set query flags\n  query.slaveOk = true;\n\n  // Kill cursor callback\n  var killCursorCallback = function(err, result) {\n    if(err) {\n      if(typeof callback != 'function') return;\n      return callback(err);\n    }\n\n    // Result\n    var r = result.message;\n    // If we have a timed out query or a cursor that was killed\n    if((r.responseFlags & (1 << 0)) != 0) {\n      if(typeof callback != 'function') return;\n      return callback(new MongoError(\"cursor killed or timed out\"), null);\n    }\n\n    if(!Array.isArray(r.documents) || r.documents.length == 0) {\n      if(typeof callback != 'function') return;\n      return callback(new MongoError(f('invalid killCursors result returned for cursor id %s', cursorId)));\n    }\n\n    // Return the result\n    if(typeof callback == 'function') {\n      callback(null, r.documents[0]);\n    }\n  }\n\n  // Execute the kill cursor command\n  if(pool && pool.isConnected()) {\n    pool.write(query, {\n      command: true\n    }, killCursorCallback);\n  }\n}\n\nWireProtocol.prototype.getMore = function(bson, ns, cursorState, batchSize, raw, connection, options, callback) {\n  options = options || {};\n  // Build command namespace\n  var parts = ns.split(/\\./);\n  // Command namespace\n  var commandns = f('%s.$cmd', parts.shift());\n\n  // Create getMore command\n  var getMoreCmd = {\n    getMore: cursorState.cursorId,\n    collection: parts.join('.'),\n    batchSize: Math.abs(batchSize)\n  }\n\n  if(cursorState.cmd.tailable\n    && typeof cursorState.cmd.maxAwaitTimeMS == 'number') {\n    getMoreCmd.maxTimeMS = cursorState.cmd.maxAwaitTimeMS;\n  }\n\n  // Build Query object\n  var query = new Query(bson, commandns, getMoreCmd, {\n      numberToSkip: 0, numberToReturn: -1\n    , checkKeys: false, returnFieldSelector: null\n  });\n\n  // Set query flags\n  query.slaveOk = true;\n\n  // Query callback\n  var queryCallback = function(err, result) {\n    if(err) return callback(err);\n    // Get the raw message\n    var r = result.message;\n\n    // If we have a timed out query or a cursor that was killed\n    if((r.responseFlags & (1 << 0)) != 0) {\n      return callback(new MongoError(\"cursor killed or timed out\"), null);\n    }\n\n    // Raw, return all the extracted documents\n    if(raw) {\n      cursorState.documents = r.documents;\n      cursorState.cursorId = r.cursorId;\n      return callback(null, r.documents);\n    }\n\n    // We have an error detected\n    if(r.documents[0].ok == 0) {\n      return callback(MongoError.create(r.documents[0]));\n    }\n\n    // Ensure we have a Long valid cursor id\n    var cursorId = typeof r.documents[0].cursor.id == 'number'\n      ? Long.fromNumber(r.documents[0].cursor.id)\n      : r.documents[0].cursor.id;\n\n    // Set all the values\n    cursorState.documents = r.documents[0].cursor.nextBatch;\n    cursorState.cursorId = cursorId;\n\n    // Return the result\n    callback(null, r.documents[0], r.connection);\n  }\n\n  // Query options\n  var queryOptions = { command: true };\n\n  // If we have a raw query decorate the function\n  if(raw) {\n    queryOptions.raw = raw;\n  }\n\n  // Add the result field needed\n  queryOptions.documentsReturnedIn = 'nextBatch';\n\n  // Check if we need to promote longs\n  if(typeof cursorState.promoteLongs == 'boolean') {\n    queryOptions.promoteLongs = cursorState.promoteLongs;\n  }\n\n  if(typeof cursorState.promoteValues == 'boolean') {\n    queryOptions.promoteValues = cursorState.promoteValues;\n  }\n\n  if(typeof cursorState.promoteBuffers == 'boolean') {\n    queryOptions.promoteBuffers = cursorState.promoteBuffers;\n  }\n\n  // Write out the getMore command\n  connection.write(query, queryOptions, queryCallback);\n}\n\nWireProtocol.prototype.command = function(bson, ns, cmd, cursorState, topology, options) {\n  options = options || {}\n  // Check if this is a wire protocol command or not\n  var wireProtocolCommand = typeof options.wireProtocolCommand == 'boolean' ? options.wireProtocolCommand : true;\n\n  // Establish type of command\n  if(cmd.find && wireProtocolCommand) {\n    // Create the find command\n    var query = executeFindCommand(bson, ns, cmd, cursorState, topology, options)\n    // Mark the cmd as virtual\n    cmd.virtual = false;\n    // Signal the documents are in the firstBatch value\n    query.documentsReturnedIn = 'firstBatch';\n    // Return the query\n    return query;\n  } else if(cursorState.cursorId != null) {\n    return;\n  } else if(cmd) {\n    return setupCommand(bson, ns, cmd, cursorState, topology, options);\n  } else {\n    throw new MongoError(f(\"command %s does not return a cursor\", JSON.stringify(cmd)));\n  }\n}\n\n// // Command\n// {\n//     find: ns\n//   , query: <object>\n//   , limit: <n>\n//   , fields: <object>\n//   , skip: <n>\n//   , hint: <string>\n//   , explain: <boolean>\n//   , snapshot: <boolean>\n//   , batchSize: <n>\n//   , returnKey: <boolean>\n//   , maxScan: <n>\n//   , min: <n>\n//   , max: <n>\n//   , showDiskLoc: <boolean>\n//   , comment: <string>\n//   , maxTimeMS: <n>\n//   , raw: <boolean>\n//   , readPreference: <ReadPreference>\n//   , tailable: <boolean>\n//   , oplogReplay: <boolean>\n//   , noCursorTimeout: <boolean>\n//   , awaitdata: <boolean>\n//   , exhaust: <boolean>\n//   , partial: <boolean>\n// }\n\n// FIND/GETMORE SPEC\n// {\n//     “find”: <string>,\n//     “filter”: { ... },\n//     “sort”: { ... },\n//     “projection”: { ... },\n//     “hint”: { ... },\n//     “skip”: <int>,\n//     “limit”: <int>,\n//     “batchSize”: <int>,\n//     “singleBatch”: <bool>,\n//     “comment”: <string>,\n//     “maxScan”: <int>,\n//     “maxTimeMS”: <int>,\n//     “max”: { ... },\n//     “min”: { ... },\n//     “returnKey”: <bool>,\n//     “showRecordId”: <bool>,\n//     “snapshot”: <bool>,\n//     “tailable”: <bool>,\n//     “oplogReplay”: <bool>,\n//     “noCursorTimeout”: <bool>,\n//     “awaitData”: <bool>,\n//     “partial”: <bool>,\n//     “$readPreference”: { ... }\n// }\n\n//\n// Execute a find command\nvar executeFindCommand = function(bson, ns, cmd, cursorState, topology, options) {\n  // Ensure we have at least some options\n  options = options || {};\n  // Get the readPreference\n  var readPreference = getReadPreference(cmd, options);\n  // Set the optional batchSize\n  cursorState.batchSize = cmd.batchSize || cursorState.batchSize;\n\n  // Build command namespace\n  var parts = ns.split(/\\./);\n  // Command namespace\n  var commandns = f('%s.$cmd', parts.shift());\n\n  // Build actual find command\n  var findCmd = {\n    find: parts.join('.')\n  };\n\n  // I we provided a filter\n  if(cmd.query) {\n    // Check if the user is passing in the $query parameter\n    if(cmd.query['$query']) {\n      findCmd.filter = cmd.query['$query'];\n    } else {\n      findCmd.filter = cmd.query;\n    }\n  }\n\n  // Sort value\n  var sortValue = cmd.sort;\n\n  // Handle issue of sort being an Array\n  if(Array.isArray(sortValue)) {\n    var sortObject = {};\n\n    if(sortValue.length > 0 && !Array.isArray(sortValue[0])) {\n      var sortDirection = sortValue[1];\n      // Translate the sort order text\n      if(sortDirection == 'asc') {\n        sortDirection = 1;\n      } else if(sortDirection == 'desc') {\n        sortDirection = -1;\n      }\n\n      // Set the sort order\n      sortObject[sortValue[0]] = sortDirection;\n    } else {\n      for(var i = 0; i < sortValue.length; i++) {\n        sortDirection = sortValue[i][1];\n        // Translate the sort order text\n        if(sortDirection == 'asc') {\n          sortDirection = 1;\n        } else if(sortDirection == 'desc') {\n          sortDirection = -1;\n        }\n\n        // Set the sort order\n        sortObject[sortValue[i][0]] = sortDirection;\n      }\n    }\n\n    sortValue = sortObject;\n  }\n\n  // Add sort to command\n  if(cmd.sort) findCmd.sort = sortValue;\n  // Add a projection to the command\n  if(cmd.fields) findCmd.projection = cmd.fields;\n  // Add a hint to the command\n  if(cmd.hint) findCmd.hint = cmd.hint;\n  // Add a skip\n  if(cmd.skip) findCmd.skip = cmd.skip;\n  // Add a limit\n  if(cmd.limit) findCmd.limit = cmd.limit;\n\n  // Check if we wish to have a singleBatch\n  if(cmd.limit < 0) {\n    findCmd.limit = Math.abs(cmd.limit);\n    findCmd.singleBatch = true;\n  }\n\n  // Add a batchSize\n  if(typeof cmd.batchSize == 'number') {\n    if (cmd.batchSize < 0) {\n      if (cmd.limit != 0 && Math.abs(cmd.batchSize) < Math.abs(cmd.limit)) {\n        findCmd.limit = Math.abs(cmd.batchSize);\n      }\n\n      findCmd.singleBatch = true;\n    }\n\n    findCmd.batchSize = Math.abs(cmd.batchSize);\n  }\n\n  // If we have comment set\n  if(cmd.comment) findCmd.comment = cmd.comment;\n\n  // If we have maxScan\n  if(cmd.maxScan) findCmd.maxScan = cmd.maxScan;\n\n  // If we have maxTimeMS set\n  if(cmd.maxTimeMS) findCmd.maxTimeMS = cmd.maxTimeMS;\n\n  // If we have min\n  if(cmd.min) findCmd.min = cmd.min;\n\n  // If we have max\n  if(cmd.max) findCmd.max = cmd.max;\n\n  // If we have returnKey set\n  if(cmd.returnKey) findCmd.returnKey = cmd.returnKey;\n\n  // If we have showDiskLoc set\n  if(cmd.showDiskLoc) findCmd.showRecordId = cmd.showDiskLoc;\n\n  // If we have snapshot set\n  if(cmd.snapshot) findCmd.snapshot = cmd.snapshot;\n\n  // If we have tailable set\n  if(cmd.tailable) findCmd.tailable = cmd.tailable;\n\n  // If we have oplogReplay set\n  if(cmd.oplogReplay) findCmd.oplogReplay = cmd.oplogReplay;\n\n  // If we have noCursorTimeout set\n  if(cmd.noCursorTimeout) findCmd.noCursorTimeout = cmd.noCursorTimeout;\n\n  // If we have awaitData set\n  if(cmd.awaitData) findCmd.awaitData = cmd.awaitData;\n  if(cmd.awaitdata) findCmd.awaitData = cmd.awaitdata;\n\n  // If we have partial set\n  if(cmd.partial) findCmd.partial = cmd.partial;\n\n  // If we have collation passed in\n  if(cmd.collation) findCmd.collation = cmd.collation;\n\n  // If we have explain, we need to rewrite the find command\n  // to wrap it in the explain command\n  if(cmd.explain) {\n    findCmd = {\n      explain: findCmd\n    }\n  }\n\n  // Did we provide a readConcern\n  if(cmd.readConcern) findCmd.readConcern = cmd.readConcern;\n\n  // Set up the serialize and ignoreUndefined fields\n  var serializeFunctions = typeof options.serializeFunctions == 'boolean'\n    ? options.serializeFunctions : false;\n  var ignoreUndefined = typeof options.ignoreUndefined == 'boolean'\n    ? options.ignoreUndefined : false;\n\n  // We have a Mongos topology, check if we need to add a readPreference\n  if(topology.type == 'mongos'\n    && readPreference\n    && readPreference.preference != 'primary') {\n    findCmd = {\n      '$query': findCmd,\n      '$readPreference': readPreference.toJSON()\n    };\n  }\n\n  // Build Query object\n  var query = new Query(bson, commandns, findCmd, {\n      numberToSkip: 0, numberToReturn: 1\n    , checkKeys: false, returnFieldSelector: null\n    , serializeFunctions: serializeFunctions, ignoreUndefined: ignoreUndefined\n  });\n\n  // Set query flags\n  query.slaveOk = readPreference.slaveOk();\n\n  // Return the query\n  return query;\n}\n\n//\n// Set up a command cursor\nvar setupCommand = function(bson, ns, cmd, cursorState, topology, options) {\n  // Set empty options object\n  options = options || {}\n  // Get the readPreference\n  var readPreference = getReadPreference(cmd, options);\n\n  // Final query\n  var finalCmd = {};\n  for(var name in cmd) {\n    finalCmd[name] = cmd[name];\n  }\n\n  // Build command namespace\n  var parts = ns.split(/\\./);\n\n  // Serialize functions\n  var serializeFunctions = typeof options.serializeFunctions == 'boolean'\n    ? options.serializeFunctions : false;\n\n  // Set up the serialize and ignoreUndefined fields\n  var ignoreUndefined = typeof options.ignoreUndefined == 'boolean'\n    ? options.ignoreUndefined : false;\n\n  // We have a Mongos topology, check if we need to add a readPreference\n  if(topology.type == 'mongos'\n    && readPreference\n    && readPreference.preference != 'primary') {\n    finalCmd = {\n      '$query': finalCmd,\n      '$readPreference': readPreference.toJSON()\n    };\n  }\n\n  // Build Query object\n  var query = new Query(bson, f('%s.$cmd', parts.shift()), finalCmd, {\n      numberToSkip: 0, numberToReturn: -1\n    , checkKeys: false, serializeFunctions: serializeFunctions\n    , ignoreUndefined: ignoreUndefined\n  });\n\n  // Set query flags\n  query.slaveOk = readPreference.slaveOk();\n\n  // Return the query\n  return query;\n}\n\nmodule.exports = WireProtocol;\n"]}