{"version":3,"sources":["shared.js"],"names":[],"mappings":"AAAA;;AAEA,IAAI,iBAAiB,QAAQ,+BAAR,CAArB;AAAA,IACE,aAAa,QAAQ,UAAR,CADf;;AAGA,IAAI,oBAAoB,UAAS,GAAT,EAAc,OAAd,EAAuB;AAC7C;AACA,MAAI,iBAAiB,IAAI,cAAJ,IAAsB,IAAI,cAAJ,CAAmB,SAAnB,CAA3C;AACA;AACA,MAAG,QAAQ,cAAX,EAA2B;AACzB,qBAAiB,QAAQ,cAAzB;AACD;;AAED,MAAG,OAAO,cAAP,IAAyB,QAA5B,EAAsC;AACpC,qBAAiB,IAAI,cAAJ,CAAmB,cAAnB,CAAjB;AACD;;AAED,MAAG,EAAE,0BAA0B,cAA5B,CAAH,EAAgD;AAC9C,UAAM,IAAI,UAAJ,CAAe,kDAAf,CAAN;AACD;;AAED,SAAO,cAAP;AACD,CAjBD;;AAmBA,OAAO,OAAP,GAAiB;AACf,qBAAmB;AADJ,CAAjB","file":"shared-compiled.js","sourcesContent":["\"use strict\"\n\nvar ReadPreference = require('../topologies/read_preference'),\n  MongoError = require('../error');\n\nvar getReadPreference = function(cmd, options) {\n  // Default to command version of the readPreference\n  var readPreference = cmd.readPreference || new ReadPreference('primary');\n  // If we have an option readPreference override the command one\n  if(options.readPreference) {\n    readPreference = options.readPreference;\n  }\n\n  if(typeof readPreference == 'string') {\n    readPreference = new ReadPreference(readPreference);\n  }\n\n  if(!(readPreference instanceof ReadPreference)) {\n    throw new MongoError('readPreference must be a ReadPreference instance');\n  }\n\n  return readPreference;\n}\n\nmodule.exports = {\n  getReadPreference: getReadPreference\n}\n"]}