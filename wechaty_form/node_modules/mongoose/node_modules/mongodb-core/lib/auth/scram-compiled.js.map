{"version":3,"sources":["scram.js"],"names":[],"mappings":"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","file":"scram-compiled.js","sourcesContent":["\"use strict\";\n\nvar f = require('util').format\n  , crypto = require('crypto')\n  , retrieveBSON = require('../connection/utils').retrieveBSON\n  , Query = require('../connection/commands').Query\n  , MongoError = require('../error');\n\nvar BSON = retrieveBSON(),\n  Binary = BSON.Binary;\n\nvar AuthSession = function(db, username, password) {\n  this.db = db;\n  this.username = username;\n  this.password = password;\n}\n\nAuthSession.prototype.equal = function(session) {\n  return session.db == this.db\n    && session.username == this.username\n    && session.password == this.password;\n}\n\nvar id = 0;\n\n/**\n * Creates a new ScramSHA1 authentication mechanism\n * @class\n * @return {ScramSHA1} A cursor instance\n */\nvar ScramSHA1 = function(bson) {\n  this.bson = bson;\n  this.authStore = [];\n  this.id = id++;\n}\n\nvar parsePayload = function(payload) {\n  var dict = {};\n  var parts = payload.split(',');\n\n  for(var i = 0; i < parts.length; i++) {\n    var valueParts = parts[i].split('=');\n    dict[valueParts[0]] = valueParts[1];\n  }\n\n  return dict;\n}\n\nvar passwordDigest = function(username, password) {\n  if(typeof username != 'string') throw new MongoError(\"username must be a string\");\n  if(typeof password != 'string') throw new MongoError(\"password must be a string\");\n  if(password.length == 0) throw new MongoError(\"password cannot be empty\");\n  // Use node md5 generator\n  var md5 = crypto.createHash('md5');\n  // Generate keys used for authentication\n  md5.update(username + \":mongo:\" + password, 'utf8');\n  return md5.digest('hex');\n}\n\n// XOR two buffers\nvar xor = function(a, b) {\n  if (!Buffer.isBuffer(a)) a = new Buffer(a)\n  if (!Buffer.isBuffer(b)) b = new Buffer(b)\n  var res = []\n  if (a.length > b.length) {\n    for (var i = 0; i < b.length; i++) {\n      res.push(a[i] ^ b[i])\n    }\n  } else {\n    for (i = 0; i < a.length; i++) {\n      res.push(a[i] ^ b[i])\n    }\n  }\n  return new Buffer(res);\n}\n\n// Create a final digest\nvar hi = function(data, salt, iterations) {\n  // Create digest\n  var digest = function(msg) {\n    var hmac = crypto.createHmac('sha1', data);\n    hmac.update(msg);\n    return new Buffer(hmac.digest('base64'), 'base64');\n  }\n\n  // Create variables\n  salt = Buffer.concat([salt, new Buffer('\\x00\\x00\\x00\\x01')])\n  var ui = digest(salt);\n  var u1 = ui;\n\n  for(var i = 0; i < iterations - 1; i++) {\n    u1 = digest(u1);\n    ui = xor(ui, u1);\n  }\n\n  return ui;\n}\n\n/**\n * Authenticate\n * @method\n * @param {{Server}|{ReplSet}|{Mongos}} server Topology the authentication method is being called on\n * @param {[]Connections} connections Connections to authenticate using this authenticator\n * @param {string} db Name of the database\n * @param {string} username Username\n * @param {string} password Password\n * @param {authResultCallback} callback The callback to return the result from the authentication\n * @return {object}\n */\nScramSHA1.prototype.auth = function(server, connections, db, username, password, callback) {\n  var self = this;\n  // Total connections\n  var count = connections.length;\n  if(count == 0) return callback(null, null);\n\n  // Valid connections\n  var numberOfValidConnections = 0;\n  var errorObject = null;\n\n  // Execute MongoCR\n  var executeScram = function(connection) {\n    // Clean up the user\n    username = username.replace('=', \"=3D\").replace(',', '=2C');\n\n    // Create a random nonce\n    var nonce = crypto.randomBytes(24).toString('base64');\n    // var nonce = 'MsQUY9iw0T9fx2MUEz6LZPwGuhVvWAhc'\n    var firstBare = f(\"n=%s,r=%s\", username, nonce);\n\n    // Build command structure\n    var cmd = {\n        saslStart: 1\n      , mechanism: 'SCRAM-SHA-1'\n      , payload: new Binary(f(\"n,,%s\", firstBare))\n      , autoAuthorize: 1\n    }\n\n    // Handle the error\n    var handleError = function(err, r) {\n      if(err) {\n        numberOfValidConnections = numberOfValidConnections - 1;\n        errorObject = err; return false;\n      } else if(r.result['$err']) {\n        errorObject = r.result; return false;\n      } else if(r.result['errmsg']) {\n        errorObject = r.result; return false;\n      } else {\n        numberOfValidConnections = numberOfValidConnections + 1;\n      }\n\n      return true\n    }\n\n    // Finish up\n    var finish = function(_count, _numberOfValidConnections) {\n      if(_count == 0 && _numberOfValidConnections > 0) {\n        // Store the auth details\n        addAuthSession(self.authStore, new AuthSession(db, username, password));\n        // Return correct authentication\n        return callback(null, true);\n      } else if(_count == 0) {\n        if(errorObject == null) errorObject = new MongoError(f(\"failed to authenticate using scram\"));\n        return callback(errorObject, false);\n      }\n    }\n\n    var handleEnd = function(_err, _r) {\n      // Handle any error\n      handleError(_err, _r)\n      // Adjust the number of connections\n      count = count - 1;\n      // Execute the finish\n      finish(count, numberOfValidConnections);\n    }\n\n    // Write the commmand on the connection\n    server(connection, new Query(self.bson, f(\"%s.$cmd\", db), cmd, {\n      numberToSkip: 0, numberToReturn: 1\n    }), function(err, r) {\n      // Do we have an error, handle it\n      if(handleError(err, r) == false) {\n        count = count - 1;\n\n        if(count == 0 && numberOfValidConnections > 0) {\n          // Store the auth details\n          addAuthSession(self.authStore, new AuthSession(db, username, password));\n          // Return correct authentication\n          return callback(null, true);\n        } else if(count == 0) {\n          if(errorObject == null) errorObject = new MongoError(f(\"failed to authenticate using scram\"));\n          return callback(errorObject, false);\n        }\n\n        return;\n      }\n\n      // Get the dictionary\n      var dict = parsePayload(r.result.payload.value())\n\n      // Unpack dictionary\n      var iterations = parseInt(dict.i, 10);\n      var salt = dict.s;\n      var rnonce = dict.r;\n\n      // Set up start of proof\n      var withoutProof = f(\"c=biws,r=%s\", rnonce);\n      var passwordDig = passwordDigest(username, password);\n      var saltedPassword = hi(passwordDig\n          , new Buffer(salt, 'base64')\n          , iterations);\n\n      // Create the client key\n      var hmac = crypto.createHmac('sha1', saltedPassword);\n      hmac.update(new Buffer(\"Client Key\"));\n      var clientKey = new Buffer(hmac.digest('base64'), 'base64');\n\n      // Create the stored key\n      var hash = crypto.createHash('sha1');\n      hash.update(clientKey);\n      var storedKey = new Buffer(hash.digest('base64'), 'base64');\n\n      // Create the authentication message\n      var authMsg = [firstBare, r.result.payload.value().toString('base64'), withoutProof].join(',');\n\n      // Create client signature\n      hmac = crypto.createHmac('sha1', storedKey);\n      hmac.update(new Buffer(authMsg));\n      var clientSig = new Buffer(hmac.digest('base64'), 'base64');\n\n      // Create client proof\n      var clientProof = f(\"p=%s\", new Buffer(xor(clientKey, clientSig)).toString('base64'));\n\n      // Create client final\n      var clientFinal = [withoutProof, clientProof].join(',');\n\n      // Generate server key\n      hmac = crypto.createHmac('sha1', saltedPassword);\n      hmac.update(new Buffer('Server Key'))\n      var serverKey = new Buffer(hmac.digest('base64'), 'base64');\n\n      // Generate server signature\n      hmac = crypto.createHmac('sha1', serverKey);\n      hmac.update(new Buffer(authMsg))\n\n      //\n      // Create continue message\n      var cmd = {\n          saslContinue: 1\n        , conversationId: r.result.conversationId\n        , payload: new Binary(new Buffer(clientFinal))\n      }\n\n      //\n      // Execute sasl continue\n      // Write the commmand on the connection\n      server(connection, new Query(self.bson, f(\"%s.$cmd\", db), cmd, {\n        numberToSkip: 0, numberToReturn: 1\n      }), function(err, r) {\n        if(r && r.result.done == false) {\n          var cmd = {\n              saslContinue: 1\n            , conversationId: r.result.conversationId\n            , payload: new Buffer(0)\n          }\n\n          // Write the commmand on the connection\n          server(connection, new Query(self.bson, f(\"%s.$cmd\", db), cmd, {\n            numberToSkip: 0, numberToReturn: 1\n          }), function(err, r) {\n            handleEnd(err, r);\n          });\n        } else {\n          handleEnd(err, r);\n        }\n      });\n    });\n  }\n\n  var _execute = function(_connection) {\n    process.nextTick(function() {\n      executeScram(_connection);\n    });\n  }\n\n  // For each connection we need to authenticate\n  while(connections.length > 0) {\n    _execute(connections.shift());\n  }\n}\n\n// Add to store only if it does not exist\nvar addAuthSession = function(authStore, session) {\n  var found = false;\n\n  for(var i = 0; i < authStore.length; i++) {\n    if(authStore[i].equal(session)) {\n      found = true;\n      break;\n    }\n  }\n\n  if(!found) authStore.push(session);\n}\n\n/**\n * Remove authStore credentials\n * @method\n * @param {string} db Name of database we are removing authStore details about\n * @return {object}\n */\nScramSHA1.prototype.logout = function(dbName) {\n  this.authStore = this.authStore.filter(function(x) {\n    return x.db != dbName;\n  });\n}\n\n/**\n * Re authenticate pool\n * @method\n * @param {{Server}|{ReplSet}|{Mongos}} server Topology the authentication method is being called on\n * @param {[]Connections} connections Connections to authenticate using this authenticator\n * @param {authResultCallback} callback The callback to return the result from the authentication\n * @return {object}\n */\nScramSHA1.prototype.reauthenticate = function(server, connections, callback) {\n  var authStore = this.authStore.slice(0);\n  var count = authStore.length;\n  // No connections\n  if(count == 0) return callback(null, null);\n  // Iterate over all the auth details stored\n  for(var i = 0; i < authStore.length; i++) {\n    this.auth(server, connections, authStore[i].db, authStore[i].username, authStore[i].password, function(err) {\n      count = count - 1;\n      // Done re-authenticating\n      if(count == 0) {\n        callback(err, null);\n      }\n    });\n  }\n}\n\n\nmodule.exports = ScramSHA1;\n"]}