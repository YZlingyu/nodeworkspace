{"version":3,"sources":["gssapi.js"],"names":[],"mappings":"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","file":"gssapi-compiled.js","sourcesContent":["\"use strict\";\n\nvar f = require('util').format\n  , require_optional = require('require_optional')\n  , Query = require('../connection/commands').Query\n  , MongoError = require('../error');\n\nvar AuthSession = function(db, username, password, options) {\n  this.db = db;\n  this.username = username;\n  this.password = password;\n  this.options = options;\n}\n\nAuthSession.prototype.equal = function(session) {\n  return session.db == this.db\n    && session.username == this.username\n    && session.password == this.password;\n}\n\n// Kerberos class\nvar Kerberos = null;\nvar MongoAuthProcess = null;\n\n// Try to grab the Kerberos class\ntry {\n  Kerberos = require_optional('kerberos').Kerberos;\n  // Authentication process for Mongo\n  MongoAuthProcess = require_optional('kerberos').processes.MongoAuthProcess;\n} catch(err) {  \n}\n\n/**\n * Creates a new GSSAPI authentication mechanism\n * @class\n * @return {GSSAPI} A cursor instance\n */\nvar GSSAPI = function(bson) {\n  this.bson = bson;\n  this.authStore = [];\n}\n\n/**\n * Authenticate\n * @method\n * @param {{Server}|{ReplSet}|{Mongos}} server Topology the authentication method is being called on\n * @param {[]Connections} connections Connections to authenticate using this authenticator\n * @param {string} db Name of the database\n * @param {string} username Username\n * @param {string} password Password\n * @param {authResultCallback} callback The callback to return the result from the authentication\n * @return {object}\n */\nGSSAPI.prototype.auth = function(server, connections, db, username, password, options, callback) {\n  var self = this;\n  // We don't have the Kerberos library\n  if(Kerberos == null) return callback(new Error(\"Kerberos library is not installed\"));\n  var gssapiServiceName = options['gssapiServiceName'] || 'mongodb';\n  // Total connections\n  var count = connections.length;\n  if(count == 0) return callback(null, null);\n\n  // Valid connections\n  var numberOfValidConnections = 0;\n  var errorObject = null;\n\n  // For each connection we need to authenticate\n  while(connections.length > 0) {\n    // Execute MongoCR\n    var execute = function(connection) {\n      // Start Auth process for a connection\n      GSSAPIInitialize(self, db, username, password, db, gssapiServiceName, server, connection, options, function(err, r) {\n        // Adjust count\n        count = count - 1;\n\n        // If we have an error\n        if(err) {\n          errorObject = err;\n        } else if(r.result['$err']) {\n          errorObject = r.result;\n        } else if(r.result['errmsg']) {\n          errorObject = r.result;\n        } else {\n          numberOfValidConnections = numberOfValidConnections + 1;\n        }\n\n        // We have authenticated all connections\n        if(count == 0 && numberOfValidConnections > 0) {\n          // Store the auth details\n          addAuthSession(self.authStore, new AuthSession(db, username, password, options));\n          // Return correct authentication\n          callback(null, true);\n        } else if(count == 0) {\n          if(errorObject == null) errorObject = new MongoError(f(\"failed to authenticate using mongocr\"));\n          callback(errorObject, false);\n        }\n      });\n    }\n\n    var _execute = function(_connection) {\n      process.nextTick(function() {\n        execute(_connection);\n      });\n    }\n\n    _execute(connections.shift());\n  }\n}\n\n//\n// Initialize step\nvar GSSAPIInitialize = function(self, db, username, password, authdb, gssapiServiceName, server, connection, options, callback) {\n  // Create authenticator\n  var mongo_auth_process = new MongoAuthProcess(connection.host, connection.port, gssapiServiceName, options);\n\n  // Perform initialization\n  mongo_auth_process.init(username, password, function(err) {\n    if(err) return callback(err, false);\n\n    // Perform the first step\n    mongo_auth_process.transition('', function(err, payload) {\n      if(err) return callback(err, false);\n\n      // Call the next db step\n      MongoDBGSSAPIFirstStep(self, mongo_auth_process, payload, db, username, password, authdb, server, connection, callback);\n    });\n  });\n}\n\n//\n// Perform first step against mongodb\nvar MongoDBGSSAPIFirstStep = function(self, mongo_auth_process, payload, db, username, password, authdb, server, connection, callback) {\n  // Build the sasl start command\n  var command = {\n      saslStart: 1\n    , mechanism: 'GSSAPI'\n    , payload: payload\n    , autoAuthorize: 1\n  };\n\n  // Write the commmand on the connection\n  server(connection, new Query(self.bson, \"$external.$cmd\", command, {\n    numberToSkip: 0, numberToReturn: 1\n  }), function(err, r) {\n    if(err) return callback(err, false);\n    var doc = r.result;\n    // Execute mongodb transition\n    mongo_auth_process.transition(r.result.payload, function(err, payload) {\n      if(err) return callback(err, false);\n\n      // MongoDB API Second Step\n      MongoDBGSSAPISecondStep(self, mongo_auth_process, payload, doc, db, username, password, authdb, server, connection, callback);\n    });\n  });\n}\n\n//\n// Perform first step against mongodb\nvar MongoDBGSSAPISecondStep = function(self, mongo_auth_process, payload, doc, db, username, password, authdb, server, connection, callback) {\n  // Build Authentication command to send to MongoDB\n  var command = {\n      saslContinue: 1\n    , conversationId: doc.conversationId\n    , payload: payload\n  };\n\n  // Execute the command\n  // Write the commmand on the connection\n  server(connection, new Query(self.bson, \"$external.$cmd\", command, {\n    numberToSkip: 0, numberToReturn: 1\n  }), function(err, r) {\n    if(err) return callback(err, false);\n    var doc = r.result;\n    // Call next transition for kerberos\n    mongo_auth_process.transition(doc.payload, function(err, payload) {\n      if(err) return callback(err, false);\n\n      // Call the last and third step\n      MongoDBGSSAPIThirdStep(self, mongo_auth_process, payload, doc, db, username, password, authdb, server, connection, callback);\n    });\n  });\n}\n\nvar MongoDBGSSAPIThirdStep = function(self, mongo_auth_process, payload, doc, db, username, password, authdb, server, connection, callback) {\n  // Build final command\n  var command = {\n      saslContinue: 1\n    , conversationId: doc.conversationId\n    , payload: payload\n  };\n\n  // Execute the command\n  server(connection, new Query(self.bson, \"$external.$cmd\", command, {\n    numberToSkip: 0, numberToReturn: 1\n  }), function(err, r) {\n    if(err) return callback(err, false);\n    mongo_auth_process.transition(null, function(err) {\n      if(err) return callback(err, null);\n      callback(null, r);\n    });\n  });\n}\n\n// Add to store only if it does not exist\nvar addAuthSession = function(authStore, session) {\n  var found = false;\n\n  for(var i = 0; i < authStore.length; i++) {\n    if(authStore[i].equal(session)) {\n      found = true;\n      break;\n    }\n  }\n\n  if(!found) authStore.push(session);\n}\n\n/**\n * Remove authStore credentials\n * @method\n * @param {string} db Name of database we are removing authStore details about\n * @return {object}\n */\nGSSAPI.prototype.logout = function(dbName) {\n  this.authStore = this.authStore.filter(function(x) {\n    return x.db != dbName;\n  });\n}\n\n/**\n * Re authenticate pool\n * @method\n * @param {{Server}|{ReplSet}|{Mongos}} server Topology the authentication method is being called on\n * @param {[]Connections} connections Connections to authenticate using this authenticator\n * @param {authResultCallback} callback The callback to return the result from the authentication\n * @return {object}\n */\nGSSAPI.prototype.reauthenticate = function(server, connections, callback) {\n  var authStore = this.authStore.slice(0);\n  var count = authStore.length;\n  if(count == 0) return callback(null, null);\n  // Iterate over all the auth details stored\n  for(var i = 0; i < authStore.length; i++) {\n    this.auth(server, connections, authStore[i].db, authStore[i].username, authStore[i].password, authStore[i].options, function(err) {\n      count = count - 1;\n      // Done re-authenticating\n      if(count == 0) {\n        callback(err, null);\n      }\n    });\n  }\n}\n\n/**\n * This is a result from a authentication strategy\n *\n * @callback authResultCallback\n * @param {error} error An error object. Set to null if no error present\n * @param {boolean} result The result of the authentication process\n */\n\nmodule.exports = GSSAPI;\n"]}