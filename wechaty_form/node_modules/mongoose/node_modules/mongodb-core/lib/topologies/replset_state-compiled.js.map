{"version":3,"sources":["replset_state.js"],"names":[],"mappings":"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","file":"replset_state-compiled.js","sourcesContent":["\"use strict\"\n\nvar inherits = require('util').inherits,\n  f = require('util').format,\n  EventEmitter = require('events').EventEmitter,\n  Logger = require('../connection/logger'),\n  ReadPreference = require('./read_preference'),\n  MongoError = require('../error');\n\nvar TopologyType = {\n  'Single': 'Single', 'ReplicaSetNoPrimary': 'ReplicaSetNoPrimary',\n  'ReplicaSetWithPrimary': 'ReplicaSetWithPrimary', 'Sharded': 'Sharded',\n  'Unknown': 'Unknown'\n};\n\nvar ServerType = {\n  'Standalone': 'Standalone', 'Mongos': 'Mongos', 'PossiblePrimary': 'PossiblePrimary',\n  'RSPrimary': 'RSPrimary', 'RSSecondary': 'RSSecondary', 'RSArbiter': 'RSArbiter',\n  'RSOther': 'RSOther', 'RSGhost': 'RSGhost', 'Unknown': 'Unknown'\n};\n\nvar ReplSetState = function(options) {\n  options = options || {};\n  // Add event listener\n  EventEmitter.call(this);\n  // Topology state\n  this.topologyType = TopologyType.ReplicaSetNoPrimary;\n  this.setName = options.setName;\n\n  // Server set\n  this.set = {};\n\n  // Unpacked options\n  this.id = options.id;\n  this.setName = options.setName;\n\n  // Replicaset logger\n  this.logger = options.logger || Logger('ReplSet', options);\n\n  // Server selection index\n  this.index = 0;\n  // Acceptable latency\n  this.acceptableLatency = options.acceptableLatency || 15;\n\n  // heartbeatFrequencyMS\n  this.heartbeatFrequencyMS = options.heartbeatFrequencyMS || 10000;\n\n  // Server side\n  this.primary = null;\n  this.secondaries = [];\n  this.arbiters = [];\n  this.passives = [];\n  this.ghosts = [];\n  // Current unknown hosts\n  this.unknownServers = [];\n  // In set status\n  this.set = {};\n  // Status\n  this.maxElectionId = null;\n  this.maxSetVersion = 0;\n  // Description of the Replicaset\n  this.replicasetDescription = {\n    \"topologyType\": \"Unknown\", \"servers\": []\n  };\n}\n\ninherits(ReplSetState, EventEmitter);\n\nReplSetState.prototype.hasPrimaryAndSecondary = function() {\n  return this.primary != null && this.secondaries.length > 0;\n}\n\nReplSetState.prototype.hasPrimaryOrSecondary = function() {\n  return this.hasPrimary() || this.hasSecondary();\n}\n\nReplSetState.prototype.hasPrimary = function() {\n  return this.primary != null;\n}\n\nReplSetState.prototype.hasSecondary = function() {\n  return this.secondaries.length > 0;\n}\n\nReplSetState.prototype.get = function(host) {\n  var servers = this.allServers();\n\n  for(var i = 0; i < servers.length; i++) {\n    if(servers[i].name.toLowerCase() === host.toLowerCase()) {\n      return servers[i];\n    }\n  }\n\n  return null;\n}\n\nReplSetState.prototype.allServers = function(options) {\n  options = options || {};\n  var servers = this.primary ? [this.primary] : [];\n  servers = servers.concat(this.secondaries);\n  if(!options.ignoreArbiters) servers = servers.concat(this.arbiters);\n  servers = servers.concat(this.passives);\n  return servers;\n}\n\nReplSetState.prototype.destroy = function(options) {\n  // Destroy all sockets\n  if(this.primary) this.primary.destroy(options);\n  this.secondaries.forEach(function(x) { x.destroy(options); });\n  this.arbiters.forEach(function(x) { x.destroy(options); });\n  this.passives.forEach(function(x) { x.destroy(options); });\n  this.ghosts.forEach(function(x) { x.destroy(options); });\n  // Clear out the complete state\n  this.secondaries = [];\n  this.arbiters = [];\n  this.passives = [];\n  this.ghosts = [];\n  this.unknownServers = [];\n  this.set = {};\n}\n\nReplSetState.prototype.remove = function(server, options) {\n  options = options || {};\n\n  // Get the server name and lowerCase it\n  var serverName = server.name.toLowerCase();\n\n  // Only remove if the current server is not connected\n  var servers = this.primary ? [this.primary] : [];\n  servers = servers.concat(this.secondaries);\n  servers = servers.concat(this.arbiters);\n  servers = servers.concat(this.passives);\n\n  // Check if it's active and this is just a failed connection attempt\n  for(var i = 0; i < servers.length; i++) {\n    if(!options.force\n      && servers[i].equals(server)\n      && servers[i].isConnected\n      && servers[i].isConnected()) {\n      return;\n    }\n  }\n\n  // If we have it in the set remove it\n  if(this.set[serverName]) {\n    this.set[serverName].type = ServerType.Unknown;\n    this.set[serverName].electionId = null;\n    this.set[serverName].setName = null;\n    this.set[serverName].setVersion = null;\n  }\n\n  // Remove type\n  var removeType = null;\n\n  // Remove from any lists\n  if(this.primary && this.primary.equals(server)) {\n    this.primary = null;\n    this.topologyType = TopologyType.ReplicaSetNoPrimary;\n    removeType = 'primary';\n  }\n\n  // Remove from any other server lists\n  removeType = removeFrom(server, this.secondaries) ? 'secondary' : removeType;\n  removeType = removeFrom(server, this.arbiters) ? 'arbiter' : removeType;\n  removeType = removeFrom(server, this.passives) ? 'secondary' : removeType;\n  removeFrom(server, this.ghosts);\n  removeFrom(server, this.unknownServers);\n\n  // Push to unknownServers\n  this.unknownServers.push(serverName);\n\n  // Do we have a removeType\n  if(removeType) {\n    this.emit('left', removeType, server);\n  }\n}\n\nReplSetState.prototype.update = function(server) {\n  var self = this;\n  // Get the current ismaster\n  var ismaster = server.lastIsMaster();\n\n  // Get the server name and lowerCase it\n  var serverName = server.name.toLowerCase();\n\n  //\n  // Add any hosts\n  //\n  if(ismaster) {\n    // Join all the possible new hosts\n    var hosts = Array.isArray(ismaster.hosts) ? ismaster.hosts : [];\n    hosts = hosts.concat(Array.isArray(ismaster.arbiters) ? ismaster.arbiters : []);\n    hosts = hosts.concat(Array.isArray(ismaster.passives) ? ismaster.passives : []);\n    hosts = hosts.map(function(s) { return s.toLowerCase() });\n\n    // Add all hosts as unknownServers\n    for(var i = 0; i < hosts.length; i++) {\n      // Add to the list of unknown server\n      if(this.unknownServers.indexOf(hosts[i]) == -1\n        && (!this.set[hosts[i]] || this.set[hosts[i]].type == ServerType.Unknown)) {\n        this.unknownServers.push(hosts[i].toLowerCase());\n      }\n\n      if(!this.set[hosts[i]]) {\n        this.set[hosts[i]] = {\n          type: ServerType.Unknown,\n          electionId: null,\n          setName: null,\n          setVersion: null\n        }\n      }\n    }\n  }\n\n  //\n  // Unknown server\n  //\n  if(!ismaster && !inList(ismaster, server, this.unknownServers)) {\n    self.set[serverName] = {\n      type: ServerType.Unknown, setVersion: null, electionId: null, setName: null\n    }\n    // Update set information about the server instance\n    self.set[serverName].type = ServerType.Unknown;\n    self.set[serverName].electionId = ismaster ? ismaster.electionId : ismaster;\n    self.set[serverName].setName = ismaster ? ismaster.setName : ismaster;\n    self.set[serverName].setVersion = ismaster ? ismaster.setVersion : ismaster;\n\n    if(self.unknownServers.indexOf(server.name) == -1) {\n      self.unknownServers.push(serverName);\n    }\n\n    // Set the topology\n    return false;\n  }\n\n  //\n  // Is this a mongos\n  //\n  if(ismaster && ismaster.msg == 'isdbgrid') {\n    return false;\n  }\n\n  // A RSOther instance\n  if((ismaster.setName && ismaster.hidden)\n    || (ismaster.setName && !ismaster.ismaster && !ismaster.secondary && !ismaster.arbiterOnly && !ismaster.passive)) {\n    self.set[serverName] = {\n      type: ServerType.RSOther, setVersion: null,\n      electionId: null, setName: ismaster.setName\n    }\n    // Set the topology\n    this.topologyType = this.primary ? TopologyType.ReplicaSetWithPrimary : TopologyType.ReplicaSetNoPrimary;\n    if(ismaster.setName) this.setName = ismaster.setName;\n    return false;\n  }\n\n  // A RSGhost instance\n  if(ismaster.isreplicaset) {\n    self.set[serverName] = {\n      type: ServerType.RSGhost, setVersion: null,\n      electionId: null, setName: null\n    }\n\n    // Set the topology\n    this.topologyType = this.primary ? TopologyType.ReplicaSetWithPrimary : TopologyType.ReplicaSetNoPrimary;\n    if(ismaster.setName) this.setName = ismaster.setName;\n\n    // Set the topology\n    return false;\n  }\n\n  //\n  // Standalone server, destroy and return\n  //\n  if(ismaster && ismaster.ismaster && !ismaster.setName) {\n    this.topologyType = this.primary ? TopologyType.ReplicaSetWithPrimary : TopologyType.Unknown;\n    this.remove(server, {force:true});\n    return false;\n  }\n\n  //\n  // Server in maintanance mode\n  //\n  if(ismaster && !ismaster.ismaster && !ismaster.secondary && !ismaster.arbiterOnly) {\n    this.remove(server, {force:true});\n    return false;\n  }\n\n  //\n  // If the .me field does not match the passed in server\n  //\n  if(ismaster.me && ismaster.me.toLowerCase() != serverName) {\n    if(this.logger.isWarn()) {\n      this.logger.warn(f('the seedlist server was removed due to its address %s not matching its ismaster.me address %s', server.name, ismaster.me));\n    }\n\n    // Delete from the set\n    delete this.set[serverName];\n    // Delete unknown servers\n    removeFrom(server, self.unknownServers);\n\n    // Destroy the instance\n    server.destroy();\n\n    // Set the type of topology we have\n    if(this.primary && !this.primary.equals(server)) {\n      this.topologyType = TopologyType.ReplicaSetWithPrimary;\n    } else {\n      this.topologyType = TopologyType.ReplicaSetNoPrimary;\n    }\n\n    //\n    // We have a potential primary\n    //\n    if(!this.primary && ismaster.primary) {\n      this.set[ismaster.primary.toLowerCase()] = {\n        type: ServerType.PossiblePrimary,\n        setName: null,\n        electionId: null,\n        setVersion: null,\n      }\n    }\n\n    return false;\n  }\n\n  //\n  // Primary handling\n  //\n  if(!this.primary && ismaster.ismaster && ismaster.setName) {\n    var ismasterElectionId = server.lastIsMaster().electionId;\n    if(this.setName && this.setName != ismaster.setName) {\n      this.topologyType = TopologyType.ReplicaSetNoPrimary;\n      return new MongoError(f('setName from ismaster does not match provided connection setName [%s] != [%s]', ismaster.setName, this.setName));\n    }\n\n    if(!this.maxElectionId && ismasterElectionId) {\n      this.maxElectionId = ismasterElectionId;\n    } else if(this.maxElectionId && ismasterElectionId) {\n      var result = compareObjectIds(this.maxElectionId, ismasterElectionId);\n      // Get the electionIds\n      var ismasterSetVersion = server.lastIsMaster().setVersion;\n\n      if(result == 1) {\n        this.topologyType = TopologyType.ReplicaSetNoPrimary;\n        return false;\n      } else if(result == 0 && ismasterSetVersion) {\n        if(ismasterSetVersion < this.maxSetVersion) {\n          this.topologyType = TopologyType.ReplicaSetNoPrimary;\n          return false;\n        }\n      }\n\n      this.maxSetVersion = ismasterSetVersion;\n      this.maxElectionId = ismasterElectionId;\n    }\n\n    // Hande normalization of server names\n    var normalizedHosts = ismaster.hosts.map(function(x) { return x.toLowerCase() });\n    var locationIndex = normalizedHosts.indexOf(serverName);\n\n    // Validate that the server exists in the host list\n    if(locationIndex != -1) {\n      self.primary = server;\n      self.set[serverName] = {\n        type: ServerType.RSPrimary,\n        setVersion: ismaster.setVersion,\n        electionId: ismaster.electionId,\n        setName: ismaster.setName\n      }\n\n      // Set the topology\n      this.topologyType = TopologyType.ReplicaSetWithPrimary;\n      if(ismaster.setName) this.setName = ismaster.setName;\n      removeFrom(server, self.unknownServers);\n      removeFrom(server, self.secondaries);\n      removeFrom(server, self.passives);\n      self.emit('joined', 'primary', server);\n    } else {\n      this.topologyType = TopologyType.ReplicaSetNoPrimary;\n    }\n\n    emitTopologyDescriptionChanged(self);\n    return true;\n  } else if(ismaster.ismaster && ismaster.setName) {\n    // Get the electionIds\n    var currentElectionId = self.set[self.primary.name.toLowerCase()].electionId;\n    var currentSetVersion = self.set[self.primary.name.toLowerCase()].setVersion;\n    var currentSetName = self.set[self.primary.name.toLowerCase()].setName;\n    ismasterElectionId = server.lastIsMaster().electionId;\n    ismasterSetVersion = server.lastIsMaster().setVersion;\n    var ismasterSetName = server.lastIsMaster().setName;\n\n    // Is it the same server instance\n    if(this.primary.equals(server)\n      && currentSetName == ismasterSetName) {\n        return false;\n    }\n\n    // If we do not have the same rs name\n    if(currentSetName && currentSetName != ismasterSetName) {\n      if(!this.primary.equals(server)) {\n        this.topologyType = TopologyType.ReplicaSetWithPrimary;\n      } else {\n        this.topologyType = TopologyType.ReplicaSetNoPrimary;\n      }\n\n      return false;\n    }\n\n    // Check if we need to replace the server\n    if(currentElectionId && ismasterElectionId) {\n      result = compareObjectIds(currentElectionId, ismasterElectionId);\n\n      if(result == 1) {\n        return false;\n      } else if(result == 0 && (currentSetVersion > ismasterSetVersion)) {\n        return false;\n      }\n    } else if(!currentElectionId && ismasterElectionId\n      && ismasterSetVersion) {\n        if(ismasterSetVersion < this.maxSetVersion) {\n          return false;\n        }\n    }\n\n    if(!this.maxElectionId && ismasterElectionId) {\n      this.maxElectionId = ismasterElectionId;\n    } else if(this.maxElectionId && ismasterElectionId) {\n      result = compareObjectIds(this.maxElectionId, ismasterElectionId);\n\n      if(result == 1) {\n        return false;\n      } else if(result == 0 && currentSetVersion && ismasterSetVersion) {\n        if(ismasterSetVersion < this.maxSetVersion) {\n          return false;\n        }\n      } else {\n        if(ismasterSetVersion < this.maxSetVersion) {\n          return false;\n        }\n      }\n\n      this.maxElectionId = ismasterElectionId;\n      this.maxSetVersion = ismasterSetVersion;\n    } else {\n      this.maxSetVersion = ismasterSetVersion;\n    }\n\n    // Modify the entry to unknown\n    self.set[self.primary.name.toLowerCase()] = {\n      type: ServerType.Unknown, setVersion: null,\n      electionId: null, setName: null\n    }\n\n    // Signal primary left\n    self.emit('left', 'primary', this.primary);\n    // Destroy the instance\n    self.primary.destroy();\n    // Set the new instance\n    self.primary = server;\n    // Set the set information\n    self.set[serverName] = {\n      type: ServerType.RSPrimary, setVersion: ismaster.setVersion,\n      electionId: ismaster.electionId, setName: ismaster.setName\n    }\n\n    // Set the topology\n    this.topologyType = TopologyType.ReplicaSetWithPrimary;\n    if(ismaster.setName) this.setName = ismaster.setName;\n    removeFrom(server, self.unknownServers);\n    removeFrom(server, self.secondaries);\n    removeFrom(server, self.passives);\n    self.emit('joined', 'primary', server);\n    emitTopologyDescriptionChanged(self);\n    return true;\n  }\n\n  // A possible instance\n  if(!this.primary && ismaster.primary) {\n    self.set[ismaster.primary.toLowerCase()] = {\n      type: ServerType.PossiblePrimary, setVersion: null,\n      electionId: null, setName: null\n    }\n  }\n\n  //\n  // Secondary handling\n  //\n  if(ismaster.secondary && ismaster.setName\n    && !inList(ismaster, server, this.secondaries)\n    && this.setName && this.setName == ismaster.setName) {\n    addToList(self, ServerType.RSSecondary, ismaster, server, this.secondaries);\n    // Set the topology\n    this.topologyType = this.primary ? TopologyType.ReplicaSetWithPrimary : TopologyType.ReplicaSetNoPrimary;\n    if(ismaster.setName) this.setName = ismaster.setName;\n    removeFrom(server, self.unknownServers);\n\n    // Remove primary\n    if(this.primary\n      && this.primary.name.toLowerCase() == serverName) {\n        server.destroy();\n        this.primary = null;\n        self.emit('left', 'primary', server);\n    }\n\n    self.emit('joined', 'secondary', server);\n    emitTopologyDescriptionChanged(self);\n    return true;\n  }\n\n  //\n  // Arbiter handling\n  //\n  if(ismaster.arbiterOnly && ismaster.setName\n    && !inList(ismaster, server, this.arbiters)\n    && this.setName && this.setName == ismaster.setName) {\n    addToList(self, ServerType.RSArbiter, ismaster, server, this.arbiters);\n    // Set the topology\n    this.topologyType = this.primary ? TopologyType.ReplicaSetWithPrimary : TopologyType.ReplicaSetNoPrimary;\n    if(ismaster.setName) this.setName = ismaster.setName;\n    removeFrom(server, self.unknownServers);\n    self.emit('joined', 'arbiter', server);\n    emitTopologyDescriptionChanged(self);\n    return true;\n  }\n\n  //\n  // Passive handling\n  //\n  if(ismaster.passive && ismaster.setName\n    && !inList(ismaster, server, this.passives)\n    && this.setName && this.setName == ismaster.setName) {\n    addToList(self, ServerType.RSSecondary, ismaster, server, this.passives);\n    // Set the topology\n    this.topologyType = this.primary ? TopologyType.ReplicaSetWithPrimary : TopologyType.ReplicaSetNoPrimary;\n    if(ismaster.setName) this.setName = ismaster.setName;\n    removeFrom(server, self.unknownServers);\n\n    // Remove primary\n    if(this.primary\n      && this.primary.name.toLowerCase() == serverName) {\n        server.destroy();\n        this.primary = null;\n        self.emit('left', 'primary', server);\n    }\n\n    self.emit('joined', 'secondary', server);\n    emitTopologyDescriptionChanged(self);\n    return true;\n  }\n\n  //\n  // Remove the primary\n  //\n  if(this.set[serverName] && this.set[serverName].type == ServerType.RSPrimary) {\n    self.emit('left', 'primary', this.primary);\n    this.primary.destroy();\n    this.primary = null;\n    this.topologyType = TopologyType.ReplicaSetNoPrimary;\n    return false;\n  }\n\n  this.topologyType = this.primary ? TopologyType.ReplicaSetWithPrimary : TopologyType.ReplicaSetNoPrimary;\n  return false;\n}\n\n/**\n * Recalculate single server max staleness\n * @method\n */\nReplSetState.prototype.updateServerMaxStaleness = function(server, haInterval) {\n  // Locate the max secondary lastwrite\n  var max = 0;\n  // Go over all secondaries\n  for(var i = 0; i < this.secondaries.length; i++) {\n    max = Math.max(max, this.secondaries[i].lastWriteDate);\n  }\n\n  // Perform this servers staleness calculation\n  if(server.ismaster.maxWireVersion >= 5\n    && server.ismaster.secondary\n    && this.hasPrimary()) {\n    server.staleness = (server.lastUpdateTime - server.lastWriteDate)\n      - (this.primary.lastUpdateTime - this.primary.lastWriteDate)\n      + haInterval;\n  } else if(server.ismaster.maxWireVersion >= 5\n    && server.ismaster.secondary){\n    server.staleness = max - server.lastWriteDate + haInterval;\n  }\n}\n\n/**\n * Recalculate all the stalness values for secodaries\n * @method\n */\nReplSetState.prototype.updateSecondariesMaxStaleness = function(haInterval) {\n  for(var i = 0; i < this.secondaries.length; i++) {\n    this.updateServerMaxStaleness(this.secondaries[i], haInterval);\n  }\n}\n\n/**\n * Pick a server by the passed in ReadPreference\n * @method\n * @param {ReadPreference} readPreference The ReadPreference instance to use\n */\nReplSetState.prototype.pickServer = function(readPreference) {\n  // If no read Preference set to primary by default\n  readPreference = readPreference || ReadPreference.primary;\n\n  // maxStalenessSeconds is not allowed with a primary read\n  if(readPreference.preference == 'primary' && readPreference.maxStalenessSeconds != null) {\n    return new MongoError('primary readPreference incompatible with maxStalenessSeconds');\n  }\n\n  // Check if we have any non compatible servers for maxStalenessSeconds\n  var allservers = this.primary ? [this.primary] : [];\n  allservers = allservers.concat(this.secondaries);\n\n  // Does any of the servers not support the right wire protocol version\n  // for maxStalenessSeconds when maxStalenessSeconds specified on readPreference. Then error out\n  if(readPreference.maxStalenessSeconds != null) {\n    for(var i = 0; i < allservers.length; i++) {\n      if(allservers[i].ismaster.maxWireVersion < 5) {\n        return new MongoError('maxStalenessSeconds not supported by at least one of the replicaset members');\n      }\n    }\n  }\n\n  // Do we have the nearest readPreference\n  if(readPreference.preference == 'nearest' && readPreference.maxStalenessSeconds == null) {\n    return pickNearest(this, readPreference);\n  } else if(readPreference.preference == 'nearest' && readPreference.maxStalenessSeconds != null) {\n    return pickNearestMaxStalenessSeconds(this, readPreference);\n  }\n\n  // Get all the secondaries\n  var secondaries = this.secondaries;\n\n  // Check if we can satisfy and of the basic read Preferences\n  if(readPreference.equals(ReadPreference.secondary)\n    && secondaries.length == 0) {\n      return new MongoError(\"no secondary server available\");\n    }\n\n  if(readPreference.equals(ReadPreference.secondaryPreferred)\n    && secondaries.length == 0\n    && this.primary == null) {\n      return new MongoError(\"no secondary or primary server available\");\n    }\n\n  if(readPreference.equals(ReadPreference.primary)\n    && this.primary == null) {\n      return new MongoError(\"no primary server available\");\n    }\n\n  // Secondary preferred or just secondaries\n  if(readPreference.equals(ReadPreference.secondaryPreferred)\n    || readPreference.equals(ReadPreference.secondary)) {\n\n    if(secondaries.length > 0 && readPreference.maxStalenessSeconds == null) {\n      // Pick nearest of any other servers available\n      var server = pickNearest(this, readPreference);\n      // No server in the window return primary\n      if(server) {\n        return server;\n      }\n    } else if(secondaries.length > 0 && readPreference.maxStalenessSeconds != null) {\n      // Pick nearest of any other servers available\n      server = pickNearestMaxStalenessSeconds(this, readPreference);\n      // No server in the window return primary\n      if(server) {\n        return server;\n      }\n    }\n\n    if(readPreference.equals(ReadPreference.secondaryPreferred)){\n      return this.primary;\n    }\n\n    return null;\n  }\n\n  // Primary preferred\n  if(readPreference.equals(ReadPreference.primaryPreferred)) {\n    server = null;\n\n    // We prefer the primary if it's available\n    if(this.primary) {\n      return this.primary;\n    }\n\n    // Pick a secondary\n    if(secondaries.length > 0 && readPreference.maxStalenessSeconds == null) {\n      server = pickNearest(this, readPreference);\n    } else if(secondaries.length > 0 && readPreference.maxStalenessSeconds != null) {\n      server = pickNearestMaxStalenessSeconds(this, readPreference);\n    }\n\n    //  Did we find a server\n    if(server) return server;\n  }\n\n  // Return the primary\n  return this.primary;\n}\n\n//\n// Filter serves by tags\nvar filterByTags = function(readPreference, servers) {\n  if(readPreference.tags == null) return servers;\n  var filteredServers = [];\n  var tagsArray = Array.isArray(readPreference.tags) ? readPreference.tags : [readPreference.tags];\n\n  // Iterate over the tags\n  for(var j = 0; j < tagsArray.length; j++) {\n    var tags = tagsArray[j];\n\n    // Iterate over all the servers\n    for(var i = 0; i < servers.length; i++) {\n      var serverTag = servers[i].lastIsMaster().tags || {};\n\n      // Did we find the a matching server\n      var found = true;\n      // Check if the server is valid\n      for(var name in tags) {\n        if(serverTag[name] != tags[name]) {\n          found = false;\n        }\n      }\n\n      // Add to candidate list\n      if(found) {\n        filteredServers.push(servers[i]);\n      }\n    }\n  }\n\n  // Returned filtered servers\n  return filteredServers;\n}\n\nfunction pickNearestMaxStalenessSeconds(self, readPreference) {\n  // Only get primary and secondaries as seeds\n  var servers = [];\n  var heartbeatFrequencyMS = self.heartbeatFrequencyMS;\n\n  // Get the maxStalenessMS\n  var maxStalenessMS = readPreference.maxStalenessSeconds * 1000;\n\n  // Check if the maxStalenessMS > 90 seconds\n  if(maxStalenessMS < 90 * 1000) {\n    return new MongoError('maxStalenessSeconds must be set to at least 90 seconds');\n  }\n\n  // Add primary to list if not a secondary read preference\n  if(self.primary && readPreference.preference != 'secondary') {\n    servers.push(self.primary);\n  }\n\n  // Add all the secondaries\n  for(var i = 0; i < self.secondaries.length; i++) {\n    servers.push(self.secondaries[i]);\n  }\n\n  // Filter by tags\n  servers = filterByTags(readPreference, servers);\n\n  //\n  // Locate lowest time (picked servers are lowest time + acceptable Latency margin)\n  // var lowest = servers.length > 0 ? servers[0].lastIsMasterMS : 0;\n\n  // Filter by latency\n  servers = servers.filter(function(s) {\n    return s.staleness <= maxStalenessMS;\n  });\n\n  // Sort by time\n  servers.sort(function(a, b) {\n    // return a.time > b.time;\n    return a.lastIsMasterMS > b.lastIsMasterMS\n  });\n\n  // No servers, default to primary\n  if(servers.length == 0) {\n    return null\n  }\n\n  // Ensure index does not overflow the number of available servers\n  self.index = self.index % servers.length;\n\n  // Get the server\n  var server = servers[self.index];\n  // Add to the index\n  self.index = self.index + 1;\n  // Return the first server of the sorted and filtered list\n  return server;\n}\n\nfunction pickNearest(self, readPreference) {\n  // Only get primary and secondaries as seeds\n  var servers = [];\n\n  // Add primary to list if not a secondary read preference\n  if(self.primary && readPreference.preference != 'secondary') {\n    servers.push(self.primary);\n  }\n\n  // Add all the secondaries\n  for(var i = 0; i < self.secondaries.length; i++) {\n    servers.push(self.secondaries[i]);\n  }\n\n  // Filter by tags\n  servers = filterByTags(readPreference, servers);\n\n  // Sort by time\n  servers.sort(function(a, b) {\n    // return a.time > b.time;\n    return a.lastIsMasterMS > b.lastIsMasterMS\n  });\n\n  // Locate lowest time (picked servers are lowest time + acceptable Latency margin)\n  var lowest = servers.length > 0 ? servers[0].lastIsMasterMS : 0;\n\n  // Filter by latency\n  servers = servers.filter(function(s) {\n    return s.lastIsMasterMS <= lowest + self.acceptableLatency;\n  });\n\n  // No servers, default to primary\n  if(servers.length == 0) {\n    return null\n  }\n\n  // Ensure index does not overflow the number of available servers\n  self.index = self.index % servers.length;\n  // Get the server\n  var server = servers[self.index];\n  // Add to the index\n  self.index = self.index + 1;\n  // Return the first server of the sorted and filtered list\n  return server;\n}\n\nfunction inList(ismaster, server, list) {\n  for(var i = 0; i < list.length; i++) {\n    if(list[i] && list[i].name\n      && list[i].name.toLowerCase() == server.name.toLowerCase()) return true;\n  }\n\n  return false;\n}\n\nfunction addToList(self, type, ismaster, server, list) {\n  var serverName = server.name.toLowerCase();\n  // Update set information about the server instance\n  self.set[serverName].type = type;\n  self.set[serverName].electionId = ismaster ? ismaster.electionId : ismaster;\n  self.set[serverName].setName = ismaster ? ismaster.setName : ismaster;\n  self.set[serverName].setVersion = ismaster ? ismaster.setVersion : ismaster;\n  // Add to the list\n  list.push(server);\n}\n\nfunction compareObjectIds(id1, id2) {\n  var a = new Buffer(id1.toHexString(), 'hex');\n  var b = new Buffer(id2.toHexString(), 'hex');\n\n  if(a === b) {\n    return 0;\n  }\n\n  if(typeof Buffer.compare === 'function') {\n    return Buffer.compare(a, b);\n  }\n\n  var x = a.length;\n  var y = b.length;\n  var len = Math.min(x, y);\n\n  for (var i = 0; i < len; i++) {\n    if (a[i] !== b[i]) {\n      break;\n    }\n  }\n\n  if (i !== len) {\n    x = a[i];\n    y = b[i];\n  }\n\n  return x < y ? -1 : y < x ? 1 : 0;\n}\n\nfunction removeFrom(server, list) {\n  for(var i = 0; i < list.length; i++) {\n    if(list[i].equals && list[i].equals(server)) {\n      list.splice(i, 1);\n      return true;\n    } else if(typeof list[i] == 'string'\n      && list[i].toLowerCase() == server.name.toLowerCase()) {\n        list.splice(i, 1);\n        return true;\n    }\n  }\n\n  return false;\n}\n\nfunction emitTopologyDescriptionChanged(self) {\n  if(self.listeners('topologyDescriptionChanged').length > 0) {\n    var topology = 'Unknown';\n    var setName = self.setName;\n\n    if(self.hasPrimaryAndSecondary()) {\n      topology = 'ReplicaSetWithPrimary';\n    } else if(!self.hasPrimary() && self.hasSecondary()) {\n      topology = 'ReplicaSetNoPrimary';\n    }\n\n    // Generate description\n    var description = {\n      topologyType: topology,\n      setName: setName,\n      servers: []\n    }\n\n    // Add the primary to the list\n    if(self.hasPrimary()) {\n      var desc = self.primary.getDescription();\n      desc.type = 'RSPrimary';\n      description.servers.push(desc);\n    }\n\n    // Add all the secondaries\n    description.servers = description.servers.concat(self.secondaries.map(function(x) {\n      var description = x.getDescription();\n      description.type = 'RSSecondary';\n      return description;\n    }));\n\n    // Add all the arbiters\n    description.servers = description.servers.concat(self.arbiters.map(function(x) {\n      var description = x.getDescription();\n      description.type = 'RSArbiter';\n      return description;\n    }));\n\n    // Add all the passives\n    description.servers = description.servers.concat(self.passives.map(function(x) {\n      var description = x.getDescription();\n      description.type = 'RSSecondary';\n      return description;\n    }));\n\n    // Create the result\n    var result = {\n      topologyId: self.id,\n      previousDescription: self.replicasetDescription,\n      newDescription: description,\n      diff: diff(self.replicasetDescription, description)\n    };\n\n    // Emit the topologyDescription change\n    self.emit('topologyDescriptionChanged', result);\n\n    // Set the new description\n    self.replicasetDescription = description;\n  }\n}\n\nfunction diff(previous, current) {\n  // Difference document\n  var diff = {\n    servers: []\n  }\n\n  // Previous entry\n  if(!previous) {\n    previous = { servers: [] };\n  }\n\n  // Got through all the servers\n  for(var i = 0; i < previous.servers.length; i++) {\n    var prevServer = previous.servers[i];\n\n    // Go through all current servers\n    for(var j = 0; j < current.servers.length; j++) {\n      var currServer = current.servers[j];\n\n      // Matching server\n      if(prevServer.address.toLowerCase() === currServer.address.toLowerCase()) {\n        // We had a change in state\n        if(prevServer.type != currServer.type) {\n          diff.servers.push({\n            address: prevServer.address,\n            from: prevServer.type,\n            to: currServer.type\n          });\n        }\n      }\n    }\n  }\n\n  // Return difference\n  return diff;\n}\n\nmodule.exports = ReplSetState;\n"]}