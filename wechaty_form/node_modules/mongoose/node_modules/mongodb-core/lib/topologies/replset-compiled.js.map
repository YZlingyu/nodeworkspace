{"version":3,"sources":["replset.js"],"names":[],"mappings":"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","file":"replset-compiled.js","sourcesContent":["\"use strict\"\n\nvar inherits = require('util').inherits,\n  f = require('util').format,\n  EventEmitter = require('events').EventEmitter,\n  ReadPreference = require('./read_preference'),\n  BasicCursor = require('../cursor'),\n  retrieveBSON = require('../connection/utils').retrieveBSON,\n  Logger = require('../connection/logger'),\n  MongoError = require('../error'),\n  Server = require('./server'),\n  ReplSetState = require('./replset_state'),\n  assign = require('./shared').assign,\n  clone = require('./shared').clone,\n  createClientInfo = require('./shared').createClientInfo;\n\nvar MongoCR = require('../auth/mongocr')\n  , X509 = require('../auth/x509')\n  , Plain = require('../auth/plain')\n  , GSSAPI = require('../auth/gssapi')\n  , SSPI = require('../auth/sspi')\n  , ScramSHA1 = require('../auth/scram');\n\nvar BSON = retrieveBSON();\n\n//\n// States\nvar DISCONNECTED = 'disconnected';\nvar CONNECTING = 'connecting';\nvar CONNECTED = 'connected';\nvar UNREFERENCED = 'unreferenced';\nvar DESTROYED = 'destroyed';\n\nfunction stateTransition(self, newState) {\n  var legalTransitions = {\n    'disconnected': [CONNECTING, DESTROYED, DISCONNECTED],\n    'connecting': [CONNECTING, DESTROYED, CONNECTED, DISCONNECTED],\n    'connected': [CONNECTED, DISCONNECTED, DESTROYED, UNREFERENCED],\n    'unreferenced': [UNREFERENCED, DESTROYED],\n    'destroyed': [DESTROYED]\n  }\n\n  // Get current state\n  var legalStates = legalTransitions[self.state];\n  if(legalStates && legalStates.indexOf(newState) != -1) {\n    self.state = newState;\n  } else {\n    self.s.logger.error(f('Pool with id [%s] failed attempted illegal state transition from [%s] to [%s] only following state allowed [%s]'\n      , self.id, self.state, newState, legalStates));\n  }\n}\n\n//\n// ReplSet instance id\nvar id = 1;\nvar handlers = ['connect', 'close', 'error', 'timeout', 'parseError'];\n\n/**\n * Creates a new Replset instance\n * @class\n * @param {array} seedlist A list of seeds for the replicaset\n * @param {boolean} options.setName The Replicaset set name\n * @param {boolean} [options.secondaryOnlyConnectionAllowed=false] Allow connection to a secondary only replicaset\n * @param {number} [options.haInterval=10000] The High availability period for replicaset inquiry\n * @param {boolean} [options.emitError=false] Server will emit errors events\n * @param {Cursor} [options.cursorFactory=Cursor] The cursor factory class used for all query cursors\n * @param {number} [options.size=5] Server connection pool size\n * @param {boolean} [options.keepAlive=true] TCP Connection keep alive enabled\n * @param {number} [options.keepAliveInitialDelay=0] Initial delay before TCP keep alive enabled\n * @param {boolean} [options.noDelay=true] TCP Connection no delay\n * @param {number} [options.connectionTimeout=10000] TCP Connection timeout setting\n * @param {number} [options.socketTimeout=0] TCP Socket timeout setting\n * @param {boolean} [options.singleBufferSerializtion=true] Serialize into single buffer, trade of peak memory for serialization speed\n * @param {boolean} [options.ssl=false] Use SSL for connection\n * @param {boolean|function} [options.checkServerIdentity=true] Ensure we check server identify during SSL, set to false to disable checking. Only works for Node 0.12.x or higher. You can pass in a boolean or your own checkServerIdentity override function.\n * @param {Buffer} [options.ca] SSL Certificate store binary buffer\n * @param {Buffer} [options.crl] SSL Certificate revocation store binary buffer\n * @param {Buffer} [options.cert] SSL Certificate binary buffer\n * @param {Buffer} [options.key] SSL Key file binary buffer\n * @param {string} [options.passphrase] SSL Certificate pass phrase\n * @param {string} [options.servername=null] String containing the server name requested via TLS SNI.\n * @param {boolean} [options.rejectUnauthorized=true] Reject unauthorized server certificates\n * @param {boolean} [options.promoteLongs=true] Convert Long values from the db into Numbers if they fit into 53 bits\n * @param {boolean} [options.promoteValues=true] Promotes BSON values to native types where possible, set to false to only receive wrapper types.\n * @param {boolean} [options.promoteBuffers=false] Promotes Binary BSON values to native Node Buffers.\n * @param {number} [options.pingInterval=5000] Ping interval to check the response time to the different servers\n * @param {number} [options.localThresholdMS=15] Cutoff latency point in MS for Replicaset member selection\n * @param {boolean} [options.domainsEnabled=false] Enable the wrapping of the callback in the current domain, disabled by default to avoid perf hit.\n * @return {ReplSet} A cursor instance\n * @fires ReplSet#connect\n * @fires ReplSet#ha\n * @fires ReplSet#joined\n * @fires ReplSet#left\n * @fires ReplSet#failed\n * @fires ReplSet#fullsetup\n * @fires ReplSet#all\n * @fires ReplSet#error\n * @fires ReplSet#serverHeartbeatStarted\n * @fires ReplSet#serverHeartbeatSucceeded\n * @fires ReplSet#serverHeartbeatFailed\n * @fires ReplSet#topologyOpening\n * @fires ReplSet#topologyClosed\n * @fires ReplSet#topologyDescriptionChanged\n * @property {string} type the topology type.\n * @property {string} parserType the parser type used (c++ or js).\n */\nvar ReplSet = function(seedlist, options) {\n  var self = this;\n  options = options || {};\n\n  // Validate seedlist\n  if(!Array.isArray(seedlist)) throw new MongoError(\"seedlist must be an array\");\n  // Validate list\n  if(seedlist.length == 0) throw new MongoError(\"seedlist must contain at least one entry\");\n  // Validate entries\n  seedlist.forEach(function(e) {\n    if(typeof e.host != 'string' || typeof e.port != 'number')\n      throw new MongoError(\"seedlist entry must contain a host and port\");\n  });\n\n  // Add event listener\n  EventEmitter.call(this);\n\n  // Get replSet Id\n  this.id = id++;\n\n  // Get the localThresholdMS\n  var localThresholdMS = options.localThresholdMS || 15;\n  // Backward compatibility\n  if(options.acceptableLatency) localThresholdMS = options.acceptableLatency;\n\n  // Create a logger\n  var logger = Logger('ReplSet', options);\n\n  // Internal state\n  this.s = {\n    options: assign({}, options),\n    // BSON instance\n    bson: options.bson || new BSON([BSON.Binary, BSON.Code, BSON.DBRef, BSON.Decimal128,\n      BSON.Double, BSON.Int32, BSON.Long, BSON.Map, BSON.MaxKey, BSON.MinKey,\n      BSON.ObjectId, BSON.BSONRegExp, BSON.Symbol, BSON.Timestamp]),\n    // Factory overrides\n    Cursor: options.cursorFactory || BasicCursor,\n    // Logger instance\n    logger: logger,\n    // Seedlist\n    seedlist: seedlist,\n    // Replicaset state\n    replicaSetState: new ReplSetState({\n      id: this.id, setName: options.setName,\n      acceptableLatency: localThresholdMS,\n      heartbeatFrequencyMS: options.haInterval ? options.haInterval : 10000,\n      logger: logger\n    }),\n    // Current servers we are connecting to\n    connectingServers: [],\n    // Ha interval\n    haInterval: options.haInterval ? options.haInterval : 10000,\n    // Minimum heartbeat frequency used if we detect a server close\n    minHeartbeatFrequencyMS: 500,\n    // Disconnect handler\n    disconnectHandler: options.disconnectHandler,\n    // Server selection index\n    index: 0,\n    // Connect function options passed in\n    connectOptions: {},\n    // Are we running in debug mode\n    debug: typeof options.debug == 'boolean' ? options.debug : false,\n    // Client info\n    clientInfo: createClientInfo(options),\n    // Authentication context\n    authenticationContexts: [],\n  }\n\n  // Add handler for topology change\n  this.s.replicaSetState.on('topologyDescriptionChanged', function(r) { self.emit('topologyDescriptionChanged', r); });\n\n  // Log info warning if the socketTimeout < haInterval as it will cause\n  // a lot of recycled connections to happen.\n  if(this.s.logger.isWarn()\n    && this.s.options.socketTimeout != 0\n    && this.s.options.socketTimeout < this.s.haInterval) {\n      this.s.logger.warn(f('warning socketTimeout %s is less than haInterval %s. This might cause unnecessary server reconnections due to socket timeouts'\n        , this.s.options.socketTimeout, this.s.haInterval));\n  }\n\n  // All the authProviders\n  this.authProviders = options.authProviders || {\n      'mongocr': new MongoCR(this.s.bson), 'x509': new X509(this.s.bson)\n    , 'plain': new Plain(this.s.bson), 'gssapi': new GSSAPI(this.s.bson)\n    , 'sspi': new SSPI(this.s.bson), 'scram-sha-1': new ScramSHA1(this.s.bson)\n  }\n\n  // Add forwarding of events from state handler\n  var types = ['joined', 'left'];\n  types.forEach(function(x) {\n    self.s.replicaSetState.on(x, function(t, s) {\n      self.emit(x, t, s);\n    });\n  });\n\n  // Connect stat\n  this.initialConnectState = {\n    connect: false, fullsetup: false, all: false\n  }\n\n  // Disconnected state\n  this.state = DISCONNECTED;\n  this.haTimeoutId = null;\n  // Are we authenticating\n  this.authenticating = false;\n  // Last ismaster\n  this.ismaster = null;\n  // Contains the intervalId\n  this.intervalIds = [];\n}\n\ninherits(ReplSet, EventEmitter);\n\nObject.defineProperty(ReplSet.prototype, 'type', {\n  enumerable:true, get: function() { return 'replset'; }\n});\n\nObject.defineProperty(ReplSet.prototype, 'parserType', {\n  enumerable:true, get: function() {\n    return BSON.native ? \"c++\" : \"js\";\n  }\n});\n\nfunction rexecuteOperations(self) {\n  // If we have a primary and a disconnect handler, execute\n  // buffered operations\n  if(self.s.replicaSetState.hasPrimaryAndSecondary() && self.s.disconnectHandler) {\n    self.s.disconnectHandler.execute();\n  } else if(self.s.replicaSetState.hasPrimary() && self.s.disconnectHandler) {\n    self.s.disconnectHandler.execute({ executePrimary:true });\n  } else if(self.s.replicaSetState.hasSecondary() && self.s.disconnectHandler) {\n    self.s.disconnectHandler.execute({ executeSecondary:true });\n  }\n}\n\nfunction connectNewServers(self, servers, callback) {\n  // Count lefts\n  var count = servers.length;\n  var error = null;\n\n  // Handle events\n  var _handleEvent = function(self, event) {\n    return function(err) {\n      var _self = this;\n      count = count - 1;\n\n      // Destroyed\n      if(self.state == DESTROYED || self.state == UNREFERENCED) {\n        return this.destroy();\n      }\n\n      if(event == 'connect' && !self.authenticating) {\n        // Destroyed\n        if(self.state == DESTROYED || self.state == UNREFERENCED) {\n          return _self.destroy();\n        }\n\n        // Do we have authentication contexts that need to be applied\n        applyAuthenticationContexts(self, _self, function() {\n          // Destroy the instance\n          if(self.state == DESTROYED || self.state == UNREFERENCED) {\n            return _self.destroy();\n          }\n\n          // Update the state\n          var result = self.s.replicaSetState.update(_self);\n          // Update the state with the new server\n          if(result) {\n            // Primary lastIsMaster store it\n            if(_self.lastIsMaster() && _self.lastIsMaster().ismaster) {\n              self.ismaster = _self.lastIsMaster();\n            }\n\n            // Remove the handlers\n            for(var i = 0; i < handlers.length; i++) {\n              _self.removeAllListeners(handlers[i]);\n            }\n\n            // Add stable state handlers\n            _self.on('error', handleEvent(self, 'error'));\n            _self.on('close', handleEvent(self, 'close'));\n            _self.on('timeout', handleEvent(self, 'timeout'));\n            _self.on('parseError', handleEvent(self, 'parseError'));\n\n            // Rexecute any stalled operation\n            rexecuteOperations(self);\n          } else {\n            _self.destroy();\n          }\n        });\n      } else if(event == 'connect' && self.authenticating) {\n        this.destroy();\n      } else if(event == 'error') {\n        error = err;\n      }\n\n      // Rexecute any stalled operation\n      rexecuteOperations(self);\n\n      // Are we done finish up callback\n      if(count == 0) { callback(error); }\n    }\n  }\n\n  // No new servers\n  if(count == 0) return callback();\n\n  // Execute method\n  function execute(_server, i) {\n    setTimeout(function() {\n      // Destroyed\n      if(self.state == DESTROYED || self.state == UNREFERENCED) {\n        return;\n      }\n\n      // Create a new server instance\n      var server = new Server(assign({}, self.s.options, {\n        host: _server.split(':')[0],\n        port: parseInt(_server.split(':')[1], 10)\n      }, {\n        authProviders: self.authProviders, reconnect:false, monitoring: false, inTopology: true\n      }, {\n        clientInfo: clone(self.s.clientInfo)\n      }));\n\n      // Add temp handlers\n      server.once('connect', _handleEvent(self, 'connect'));\n      server.once('close', _handleEvent(self, 'close'));\n      server.once('timeout', _handleEvent(self, 'timeout'));\n      server.once('error', _handleEvent(self, 'error'));\n      server.once('parseError', _handleEvent(self, 'parseError'));\n\n      // SDAM Monitoring events\n      server.on('serverOpening', function(e) { self.emit('serverOpening', e); });\n      server.on('serverDescriptionChanged', function(e) { self.emit('serverDescriptionChanged', e); });\n      server.on('serverClosed', function(e) { self.emit('serverClosed', e); });\n      server.connect(self.s.connectOptions);\n    }, i);\n  }\n\n  // Create new instances\n  for(var i = 0; i < servers.length; i++) {\n    execute(servers[i], i);\n  }\n}\n\n// Ping the server\nvar pingServer = function(self, server, cb) {\n  // Measure running time\n  var start = new Date().getTime();\n\n  // Emit the server heartbeat start\n  emitSDAMEvent(self, 'serverHeartbeatStarted', { connectionId: server.name });\n\n  // Execute ismaster\n  // Set the socketTimeout for a monitoring message to a low number\n  // Ensuring ismaster calls are timed out quickly\n  server.command('admin.$cmd', {\n    ismaster:true\n  }, {\n    monitoring: true,\n    socketTimeout: self.s.options.connectionTimeout || 2000,\n  }, function(err, r) {\n    if(self.state == DESTROYED || self.state == UNREFERENCED) {\n      server.destroy();\n      return cb(err, r);\n    }\n\n    // Calculate latency\n    var latencyMS = new Date().getTime() - start;\n    // Set the last updatedTime\n    var hrTime = process.hrtime();\n    // Calculate the last update time\n    server.lastUpdateTime = hrTime[0] * 1000 + Math.round(hrTime[1]/1000);\n\n    // We had an error, remove it from the state\n    if(err) {\n      // Emit the server heartbeat failure\n      emitSDAMEvent(self, 'serverHeartbeatFailed', { durationMS: latencyMS, failure: err, connectionId: server.name });\n\n      // Remove server from the state\n      self.s.replicaSetState.remove(server);\n    } else {\n      // Update the server ismaster\n      server.ismaster = r.result;\n\n      // Check if we have a lastWriteDate convert it to MS\n      // and store on the server instance for later use\n      if(server.ismaster.lastWrite && server.ismaster.lastWrite.lastWriteDate) {\n        server.lastWriteDate = server.ismaster.lastWrite.lastWriteDate.getTime();\n      }\n\n      // Do we have a brand new server\n      if(server.lastIsMasterMS == -1) {\n        server.lastIsMasterMS = latencyMS;\n      } else if(server.lastIsMasterMS) {\n        // After the first measurement, average RTT MUST be computed using an\n        // exponentially-weighted moving average formula, with a weighting factor (alpha) of 0.2.\n        // If the prior average is denoted old_rtt, then the new average (new_rtt) is\n        // computed from a new RTT measurement (x) using the following formula:\n        // alpha = 0.2\n        // new_rtt = alpha * x + (1 - alpha) * old_rtt\n        server.lastIsMasterMS = 0.2 * latencyMS + (1 - 0.2) * server.lastIsMasterMS;\n      }\n\n      if(self.s.replicaSetState.update(server)) {\n        // Primary lastIsMaster store it\n        if(server.lastIsMaster() && server.lastIsMaster().ismaster) {\n          self.ismaster = server.lastIsMaster();\n        }\n      }\n\n      // Server heart beat event\n      emitSDAMEvent(self, 'serverHeartbeatSucceeded', { durationMS: latencyMS, reply: r.result, connectionId: server.name });\n    }\n\n    // Calculate the stalness for this server\n    self.s.replicaSetState.updateServerMaxStaleness(server, self.s.haInterval);\n\n    // Callback\n    cb(err, r);\n  });\n}\n\nfunction topologyMonitor(self, options) {\n  if(self.state == DESTROYED || self.state == UNREFERENCED) return;\n  options = options || {};\n\n  var servers = Object.keys(self.s.replicaSetState.set);\n\n  // Get the haInterval\n  var _process = options.haInterval ? setTimeout : setInterval;\n  var _haInterval = options.haInterval ? options.haInterval : self.s.haInterval;\n\n  // Count of initial sweep servers to check\n  var count = servers.length;\n\n  // Each server is monitored in parallel in their own timeout loop\n  var monitorServer = function(_host, _self, _options) {\n    var intervalId = _process(function() {\n      if(self.state == DESTROYED || self.state == UNREFERENCED) {\n        clearInterval(intervalId);\n        return;\n      }\n\n      // Adjust the count\n      count = count - 1;\n\n      // Do we already have server connection available for this host\n      var _server = _self.s.replicaSetState.get(_host);\n\n      // Check if we have a known server connection and reuse\n      if(_server) {\n        return pingServer(_self, _server, function(err) {\n          if(self.state == DESTROYED || self.state == UNREFERENCED) {\n            clearInterval(intervalId);\n            return;\n          }\n\n          // Initial sweep\n          if(_process === setTimeout) {\n            if(_self.state == CONNECTING && (\n              (\n                self.s.replicaSetState.hasSecondary()\n                && self.s.options.secondaryOnlyConnectionAllowed\n              )\n              || self.s.replicaSetState.hasPrimary()\n            )) {\n              _self.state = CONNECTED;\n\n              // Emit connected sign\n              process.nextTick(function() {\n                self.emit('connect', self);\n              });\n\n              // Start topology interval check\n              topologyMonitor(_self, {});\n            }\n          } else {\n            if(_self.state == DISCONNECTED && (\n              (\n                self.s.replicaSetState.hasSecondary()\n                && self.s.options.secondaryOnlyConnectionAllowed\n              )\n              || self.s.replicaSetState.hasPrimary()\n            )) {\n              _self.state = CONNECTED;\n\n              // Rexecute any stalled operation\n              rexecuteOperations(self);\n\n              // Emit connected sign\n              process.nextTick(function() {\n                self.emit('reconnect', self);\n              });\n            }\n          }\n\n          if(self.initialConnectState.connect\n            && !self.initialConnectState.fullsetup\n            && self.s.replicaSetState.hasPrimaryAndSecondary()) {\n              // Set initial connect state\n              self.initialConnectState.fullsetup = true;\n              self.initialConnectState.all = true;\n\n              process.nextTick(function() {\n                self.emit('fullsetup', self);\n                self.emit('all', self);\n              });\n          }\n        });\n      }\n    }, _haInterval);\n\n    // Add the intervalId to our list of intervalIds\n    self.intervalIds.push(intervalId);\n  }\n\n  if(_process === setTimeout) {\n    return connectNewServers(self, self.s.replicaSetState.unknownServers, function(err) {\n      if(!self.s.replicaSetState.hasPrimary() && !self.s.options.secondaryOnlyConnectionAllowed) {\n        if(err) return self.emit('error', err);\n        self.emit('error', new MongoError('no primary found in replicaset'));\n        return self.destroy();\n      } else if(!self.s.replicaSetState.hasSecondary() && self.s.options.secondaryOnlyConnectionAllowed) {\n        if(err) return self.emit('error', err);\n        self.emit('error', new MongoError('no secondary found in replicaset'));\n        return self.destroy();\n      }\n\n      for(var i = 0; i < servers.length; i++) {\n        monitorServer(servers[i], self, options);\n      }\n    });\n  } else {\n    for(var i = 0; i < servers.length; i++) {\n      monitorServer(servers[i], self, options);\n    }\n  }\n\n  // Run the reconnect process\n  function executeReconnect(self) {\n    return function() {\n      if(self.state == DESTROYED || self.state == UNREFERENCED) {\n        return;\n      }\n\n      connectNewServers(self, self.s.replicaSetState.unknownServers, function() {\n        if(self.s.replicaSetState.hasPrimary()) {\n          self.intervalIds.push(setTimeout(executeReconnect(self), _haInterval));\n        } else {\n          self.intervalIds.push(setTimeout(executeReconnect(self), self.s.minHeartbeatFrequencyMS));\n        }\n      });\n    }\n  }\n\n  // Decide what kind of interval to use\n  var intervalTime = !self.s.replicaSetState.hasPrimary()\n    ? self.s.minHeartbeatFrequencyMS\n    : _haInterval\n\n  self.intervalIds.push(setTimeout(executeReconnect(self), intervalTime));\n}\n\nfunction addServerToList(list, server) {\n  for(var i = 0; i < list.length; i++) {\n    if(list[i].name.toLowerCase() === server.name.toLowerCase()) return true;\n  }\n\n  list.push(server);\n}\n\nfunction handleEvent(self, event) {\n  return function() {\n    if(self.state == DESTROYED || self.state == UNREFERENCED) return;\n    // Debug log\n    if(self.s.logger.isDebug()) {\n      self.s.logger.debug(f('handleEvent %s from server %s in replset with id %s', event, this.name, self.id));\n    }\n\n    // Remove from the replicaset state\n    self.s.replicaSetState.remove(this);\n\n    // Are we in a destroyed state return\n    if(self.state == DESTROYED || self.state == UNREFERENCED) return;\n\n    // If no primary and secondary available\n    if(!self.s.replicaSetState.hasPrimary()\n      && !self.s.replicaSetState.hasSecondary()\n      && self.s.options.secondaryOnlyConnectionAllowed) {\n      stateTransition(self, DISCONNECTED);\n    } else if(!self.s.replicaSetState.hasPrimary()) {\n      stateTransition(self, DISCONNECTED);\n    }\n\n    addServerToList(self.s.connectingServers, this);\n  }\n}\n\nfunction applyAuthenticationContexts(self, server, callback) {\n  if(self.s.authenticationContexts.length == 0) {\n    return callback();\n  }\n\n  // Do not apply any auth contexts if it's an arbiter\n  if(server.lastIsMaster() && server.lastIsMaster().arbiterOnly) {\n    return callback();\n  }\n\n  // Copy contexts to ensure no modificiation in the middle of\n  // auth process.\n  var authContexts = self.s.authenticationContexts.slice(0);\n\n  // Apply one of the contexts\n  function applyAuth(authContexts, server, callback) {\n    if(authContexts.length == 0) return callback();\n    // Get the first auth context\n    var authContext = authContexts.shift();\n    // Copy the params\n    var customAuthContext = authContext.slice(0);\n    // Push our callback handler\n    customAuthContext.push(function(err) {\n      applyAuth(authContexts, server, callback);\n    });\n\n    // Attempt authentication\n    server.auth.apply(server, customAuthContext)\n  }\n\n  // Apply all auth contexts\n  applyAuth(authContexts, server, callback);\n}\n\nfunction handleInitialConnectEvent(self, event) {\n  return function() {\n    var _this = this;\n    // Debug log\n    if(self.s.logger.isDebug()) {\n      self.s.logger.debug(f('handleInitialConnectEvent %s from server %s in replset with id %s', event, this.name, self.id));\n    }\n\n    // Destroy the instance\n    if(self.state == DESTROYED || self.state == UNREFERENCED) {\n      return this.destroy();\n    }\n\n    // Check the type of server\n    if(event == 'connect') {\n      // Do we have authentication contexts that need to be applied\n      applyAuthenticationContexts(self, _this, function() {\n        // Destroy the instance\n        if(self.state == DESTROYED || self.state == UNREFERENCED) {\n          return _this.destroy();\n        }\n\n        // Update the state\n        var result = self.s.replicaSetState.update(_this);\n        if(result == true) {\n          // Primary lastIsMaster store it\n          if(_this.lastIsMaster() && _this.lastIsMaster().ismaster) {\n            self.ismaster = _this.lastIsMaster();\n          }\n\n          // Debug log\n          if(self.s.logger.isDebug()) {\n            self.s.logger.debug(f('handleInitialConnectEvent %s from server %s in replset with id %s has state [%s]', event, _this.name, self.id, JSON.stringify(self.s.replicaSetState.set)));\n          }\n\n          // Remove the handlers\n          for(var i = 0; i < handlers.length; i++) {\n            _this.removeAllListeners(handlers[i]);\n          }\n\n          // Add stable state handlers\n          _this.on('error', handleEvent(self, 'error'));\n          _this.on('close', handleEvent(self, 'close'));\n          _this.on('timeout', handleEvent(self, 'timeout'));\n          _this.on('parseError', handleEvent(self, 'parseError'));\n\n          // Do we have a primary or primaryAndSecondary\n          if(self.state === CONNECTING && self.s.replicaSetState.hasPrimary()\n            || (self.s.replicaSetState.hasSecondary() && self.s.options.secondaryOnlyConnectionAllowed)) {\n            // We are connected\n            self.state = CONNECTED;\n\n            // Set initial connect state\n            self.initialConnectState.connect = true;\n            // Emit connect event\n            process.nextTick(function() {\n              self.emit('connect', self);\n            });\n\n            topologyMonitor(self, {});\n          }\n        } else if(result instanceof MongoError) {\n          _this.destroy();\n          self.destroy();\n          return self.emit('error', result);\n        } else {\n          _this.destroy();\n        }\n      });\n    } else {\n      // Emit failure to connect\n      self.emit('failed', this);\n\n      addServerToList(self.s.connectingServers, this);\n      // Remove from the state\n      self.s.replicaSetState.remove(this);\n    }\n\n    if(self.initialConnectState.connect\n      && !self.initialConnectState.fullsetup\n      && self.s.replicaSetState.hasPrimaryAndSecondary()) {\n        // Set initial connect state\n        self.initialConnectState.fullsetup = true;\n        self.initialConnectState.all = true;\n\n        process.nextTick(function() {\n          self.emit('fullsetup', self);\n          self.emit('all', self);\n        });\n    }\n\n    // Remove from the list from connectingServers\n    for(var i = 0; i < self.s.connectingServers.length; i++) {\n      if(self.s.connectingServers[i].equals(this)) {\n        self.s.connectingServers.splice(i, 1);\n      }\n    }\n\n    // Trigger topologyMonitor\n    if(self.s.connectingServers.length == 0 && self.state == CONNECTING) {\n      topologyMonitor(self, {haInterval: 1});\n    }\n  };\n}\n\nfunction connectServers(self, servers) {\n  // Update connectingServers\n  self.s.connectingServers = self.s.connectingServers.concat(servers);\n\n  // Index used to interleaf the server connects, avoiding\n  // runtime issues on io constrained vm's\n  var timeoutInterval = 0;\n\n  function connect(server, timeoutInterval) {\n    setTimeout(function() {\n      // Add the server to the state\n      if(self.s.replicaSetState.update(server)) {\n        // Primary lastIsMaster store it\n        if(server.lastIsMaster() && server.lastIsMaster().ismaster) {\n          self.ismaster = server.lastIsMaster();\n        }\n      }\n\n      // Add event handlers\n      server.once('close', handleInitialConnectEvent(self, 'close'));\n      server.once('timeout', handleInitialConnectEvent(self, 'timeout'));\n      server.once('parseError', handleInitialConnectEvent(self, 'parseError'));\n      server.once('error', handleInitialConnectEvent(self, 'error'));\n      server.once('connect', handleInitialConnectEvent(self, 'connect'));\n      // SDAM Monitoring events\n      server.on('serverOpening', function(e) { self.emit('serverOpening', e); });\n      server.on('serverDescriptionChanged', function(e) { self.emit('serverDescriptionChanged', e); });\n      server.on('serverClosed', function(e) { self.emit('serverClosed', e); });\n      // Start connection\n      server.connect(self.s.connectOptions);\n    }, timeoutInterval);\n  }\n\n  // Start all the servers\n  while(servers.length > 0) {\n    connect(servers.shift(), timeoutInterval++);\n  }\n}\n\n/**\n * Emit event if it exists\n * @method\n */\nfunction emitSDAMEvent(self, event, description) {\n  if(self.listeners(event).length > 0) {\n    self.emit(event, description);\n  }\n}\n\n/**\n * Initiate server connect\n * @method\n * @param {array} [options.auth=null] Array of auth options to apply on connect\n */\nReplSet.prototype.connect = function(options) {\n  var self = this;\n  // Add any connect level options to the internal state\n  this.s.connectOptions = options || {};\n  // Set connecting state\n  stateTransition(this, CONNECTING);\n  // Create server instances\n  var servers = this.s.seedlist.map(function(x) {\n    return new Server(assign({}, self.s.options, x, {\n      authProviders: self.authProviders, reconnect:false, monitoring:false, inTopology: true\n    }, {\n      clientInfo: clone(self.s.clientInfo)\n    }));\n  });\n\n  // Error out as high availbility interval must be < than socketTimeout\n  if(this.s.options.socketTimeout > 0 && this.s.options.socketTimeout <= this.s.options.haInterval) {\n    return self.emit('error', new MongoError(f(\"haInterval [%s] MS must be set to less than socketTimeout [%s] MS\"\n      , this.s.options.haInterval, this.s.options.socketTimeout)));\n  }\n\n  // Emit the topology opening event\n  emitSDAMEvent(this, 'topologyOpening', { topologyId: this.id });\n  // Start all server connections\n  connectServers(self, servers);\n}\n\n/**\n * Destroy the server connection\n * @param {boolean} [options.force=false] Force destroy the pool\n * @method\n */\nReplSet.prototype.destroy = function(options) {\n  options = options || {};\n  // Transition state\n  stateTransition(this, DESTROYED);\n  // Clear out any monitoring process\n  if(this.haTimeoutId) clearTimeout(this.haTimeoutId);\n  // Destroy the replicaset\n  this.s.replicaSetState.destroy(options);\n  // Clear out authentication contexts\n  this.s.authenticationContexts = [];\n\n  // Destroy all connecting servers\n  this.s.connectingServers.forEach(function(x) {\n    x.destroy(options);\n  });\n\n  // Clear out all monitoring\n  for(var i = 0; i < this.intervalIds.length; i++) {\n    clearInterval(this.intervalIds[i]);\n    clearTimeout(this.intervalIds[i]);\n  }\n\n  // Reset list of intervalIds\n  this.intervalIds = [];\n\n  // Emit toplogy closing event\n  emitSDAMEvent(this, 'topologyClosed', { topologyId: this.id });\n}\n\n/**\n * Unref all connections belong to this server\n * @method\n */\nReplSet.prototype.unref = function() {\n  // Transition state\n  stateTransition(this, UNREFERENCED);\n\n  this.s.replicaSetState.allServers().forEach(function(x) {\n    x.unref();\n  });\n\n  clearTimeout(this.haTimeoutId);\n}\n\n/**\n * Returns the last known ismaster document for this server\n * @method\n * @return {object}\n */\nReplSet.prototype.lastIsMaster = function() {\n  // If secondaryOnlyConnectionAllowed and no primary but secondary\n  // return the secondaries ismaster result.\n  if (this.s.options.secondaryOnlyConnectionAllowed\n    && !this.s.replicaSetState.hasPrimary()\n    && this.s.replicaSetState.hasSecondary()) {\n      return this.s.replicaSetState.secondaries[0].lastIsMaster();\n    }\n\n  return this.s.replicaSetState.primary\n    ? this.s.replicaSetState.primary.lastIsMaster() : this.ismaster;\n}\n\n/**\n * All raw connections\n * @method\n * @return {Connection[]}\n */\nReplSet.prototype.connections = function() {\n  var servers = this.s.replicaSetState.allServers();\n  var connections = [];\n  for(var i = 0; i < servers.length; i++) {\n    connections = connections.concat(servers[i].connections());\n  }\n\n  return connections;\n}\n\n/**\n * Figure out if the server is connected\n * @method\n * @param {ReadPreference} [options.readPreference] Specify read preference if command supports it\n * @return {boolean}\n */\nReplSet.prototype.isConnected = function(options) {\n  options = options || {};\n\n  // If we are authenticating signal not connected\n  // To avoid interleaving of operations\n  if(this.authenticating) return false;\n\n  // If we specified a read preference check if we are connected to something\n  // than can satisfy this\n  if(options.readPreference\n    && options.readPreference.equals(ReadPreference.secondary)) {\n    return this.s.replicaSetState.hasSecondary();\n  }\n\n  if(options.readPreference\n    && options.readPreference.equals(ReadPreference.primary)) {\n    return this.s.replicaSetState.hasPrimary();\n  }\n\n  if(options.readPreference\n    && options.readPreference.equals(ReadPreference.primaryPreferred)) {\n    return this.s.replicaSetState.hasSecondary() || this.s.replicaSetState.hasPrimary();\n  }\n\n  if(options.readPreference\n    && options.readPreference.equals(ReadPreference.secondaryPreferred)) {\n    return this.s.replicaSetState.hasSecondary() || this.s.replicaSetState.hasPrimary();\n  }\n\n  if(this.s.options.secondaryOnlyConnectionAllowed\n    && this.s.replicaSetState.hasSecondary()) {\n      return true;\n  }\n\n  return this.s.replicaSetState.hasPrimary();\n}\n\n/**\n * Figure out if the replicaset instance was destroyed by calling destroy\n * @method\n * @return {boolean}\n */\nReplSet.prototype.isDestroyed = function() {\n  return this.state == DESTROYED;\n}\n\n/**\n * Get server\n * @method\n * @param {ReadPreference} [options.readPreference] Specify read preference if command supports it\n * @return {Server}\n */\nReplSet.prototype.getServer = function(options) {\n  // Ensure we have no options\n  options = options || {};\n  // Pick the right server baspickServerd on readPreference\n  var server = this.s.replicaSetState.pickServer(options.readPreference);\n  if(this.s.debug) this.emit('pickedServer', options.readPreference, server);\n  return server;\n}\n\n/**\n * Get a direct connection\n * @method\n * @param {ReadPreference} [options.readPreference] Specify read preference if command supports it\n * @return {Connection}\n */\nReplSet.prototype.getConnection = function(options) {\n  var server = this.getServer(options);\n  if(server) return server.getConnection();\n}\n\n/**\n * Get all connected servers\n * @method\n * @return {Server[]}\n */\nReplSet.prototype.getServers = function() {\n  return this.s.replicaSetState.allServers();\n}\n\n//\n// Execute write operation\nvar executeWriteOperation = function(self, op, ns, ops, options, callback) {\n  if(typeof options == 'function') callback = options, options = {}, options = options || {};\n  // Ensure we have no options\n  options = options || {};\n\n  // No server returned we had an error\n  if(self.s.replicaSetState.primary == null) {\n    return callback(new MongoError(\"no primary server found\"));\n  }\n\n  // Execute the command\n  self.s.replicaSetState.primary[op](ns, ops, options, callback);\n}\n\n/**\n * Insert one or more documents\n * @method\n * @param {string} ns The MongoDB fully qualified namespace (ex: db1.collection1)\n * @param {array} ops An array of documents to insert\n * @param {boolean} [options.ordered=true] Execute in order or out of order\n * @param {object} [options.writeConcern={}] Write concern for the operation\n * @param {Boolean} [options.serializeFunctions=false] Specify if functions on an object should be serialized.\n * @param {Boolean} [options.ignoreUndefined=false] Specify if the BSON serializer should ignore undefined fields.\n * @param {opResultCallback} callback A callback function\n */\nReplSet.prototype.insert = function(ns, ops, options, callback) {\n  if(typeof options == 'function') callback = options, options = {}, options = options || {};\n  if(this.state == DESTROYED) return callback(new MongoError(f('topology was destroyed')));\n\n  // Not connected but we have a disconnecthandler\n  if(!this.s.replicaSetState.hasPrimary() && this.s.disconnectHandler != null) {\n    return this.s.disconnectHandler.add('insert', ns, ops, options, callback);\n  }\n\n  // Execute write operation\n  executeWriteOperation(this, 'insert', ns, ops, options, callback);\n}\n\n/**\n * Perform one or more update operations\n * @method\n * @param {string} ns The MongoDB fully qualified namespace (ex: db1.collection1)\n * @param {array} ops An array of updates\n * @param {boolean} [options.ordered=true] Execute in order or out of order\n * @param {object} [options.writeConcern={}] Write concern for the operation\n * @param {Boolean} [options.serializeFunctions=false] Specify if functions on an object should be serialized.\n * @param {Boolean} [options.ignoreUndefined=false] Specify if the BSON serializer should ignore undefined fields.\n * @param {opResultCallback} callback A callback function\n */\nReplSet.prototype.update = function(ns, ops, options, callback) {\n  if(typeof options == 'function') callback = options, options = {}, options = options || {};\n  if(this.state == DESTROYED) return callback(new MongoError(f('topology was destroyed')));\n\n  // Not connected but we have a disconnecthandler\n  if(!this.s.replicaSetState.hasPrimary() && this.s.disconnectHandler != null) {\n    return this.s.disconnectHandler.add('update', ns, ops, options, callback);\n  }\n\n  // Execute write operation\n  executeWriteOperation(this, 'update', ns, ops, options, callback);\n}\n\n/**\n * Perform one or more remove operations\n * @method\n * @param {string} ns The MongoDB fully qualified namespace (ex: db1.collection1)\n * @param {array} ops An array of removes\n * @param {boolean} [options.ordered=true] Execute in order or out of order\n * @param {object} [options.writeConcern={}] Write concern for the operation\n * @param {Boolean} [options.serializeFunctions=false] Specify if functions on an object should be serialized.\n * @param {Boolean} [options.ignoreUndefined=false] Specify if the BSON serializer should ignore undefined fields.\n * @param {opResultCallback} callback A callback function\n */\nReplSet.prototype.remove = function(ns, ops, options, callback) {\n  if(typeof options == 'function') callback = options, options = {}, options = options || {};\n  if(this.state == DESTROYED) return callback(new MongoError(f('topology was destroyed')));\n\n  // Not connected but we have a disconnecthandler\n  if(!this.s.replicaSetState.hasPrimary() && this.s.disconnectHandler != null) {\n    return this.s.disconnectHandler.add('remove', ns, ops, options, callback);\n  }\n\n  // Execute write operation\n  executeWriteOperation(this, 'remove', ns, ops, options, callback);\n}\n\n/**\n * Execute a command\n * @method\n * @param {string} ns The MongoDB fully qualified namespace (ex: db1.collection1)\n * @param {object} cmd The command hash\n * @param {ReadPreference} [options.readPreference] Specify read preference if command supports it\n * @param {Connection} [options.connection] Specify connection object to execute command against\n * @param {Boolean} [options.serializeFunctions=false] Specify if functions on an object should be serialized.\n * @param {Boolean} [options.ignoreUndefined=false] Specify if the BSON serializer should ignore undefined fields.\n * @param {opResultCallback} callback A callback function\n */\nReplSet.prototype.command = function(ns, cmd, options, callback) {\n  if(typeof options == 'function') callback = options, options = {}, options = options || {};\n  if(this.state == DESTROYED) return callback(new MongoError(f('topology was destroyed')));\n  var self = this;\n\n  // Establish readPreference\n  var readPreference = options.readPreference ? options.readPreference : ReadPreference.primary;\n\n  // If the readPreference is primary and we have no primary, store it\n  if(readPreference.preference == 'primary' && !this.s.replicaSetState.hasPrimary() && this.s.disconnectHandler != null) {\n    return this.s.disconnectHandler.add('command', ns, cmd, options, callback);\n  } else if(readPreference.preference == 'secondary' && !this.s.replicaSetState.hasSecondary() && this.s.disconnectHandler != null) {\n    return this.s.disconnectHandler.add('command', ns, cmd, options, callback);\n  } else if(readPreference.preference != 'primary' && !this.s.replicaSetState.hasSecondary() && !this.s.replicaSetState.hasPrimary() && this.s.disconnectHandler != null) {\n    return this.s.disconnectHandler.add('command', ns, cmd, options, callback);\n  }\n\n  // Pick a server\n  var server = this.s.replicaSetState.pickServer(readPreference);\n  // We received an error, return it\n  if(!(server instanceof Server)) return callback(server);\n  // Emit debug event\n  if(self.s.debug) self.emit('pickedServer', ReadPreference.primary, server);\n\n  // No server returned we had an error\n  if(server == null) {\n    return callback(new MongoError(f(\"no server found that matches the provided readPreference %s\", readPreference)));\n  }\n\n  // Execute the command\n  server.command(ns, cmd, options, callback);\n}\n\n/**\n * Authenticate using a specified mechanism\n * @method\n * @param {string} mechanism The Auth mechanism we are invoking\n * @param {string} db The db we are invoking the mechanism against\n * @param {...object} param Parameters for the specific mechanism\n * @param {authResultCallback} callback A callback function\n */\nReplSet.prototype.auth = function(mechanism, db) {\n  var allArgs = Array.prototype.slice.call(arguments, 0).slice(0);\n  var self = this;\n  var args = Array.prototype.slice.call(arguments, 2);\n  var callback = args.pop();\n  var currentContextIndex = 0;\n\n  // If we don't have the mechanism fail\n  if(this.authProviders[mechanism] == null && mechanism != 'default') {\n    return callback(new MongoError(f(\"auth provider %s does not exist\", mechanism)));\n  }\n\n  // Are we already authenticating, throw\n  if(this.authenticating) {\n    return callback(new MongoError('authentication or logout allready in process'));\n  }\n\n  // Topology is not connected, save the call in the provided store to be\n  // Executed at some point when the handler deems it's reconnected\n  if(self.s.disconnectHandler != null) {\n    if(!self.s.replicaSetState.hasPrimary() && !self.s.options.secondaryOnlyConnectionAllowed) {\n      return self.s.disconnectHandler.add('auth', db, allArgs, {}, callback);\n    } else if(!self.s.replicaSetState.hasSecondary() && self.s.options.secondaryOnlyConnectionAllowed) {\n      return self.s.disconnectHandler.add('auth', db, allArgs, {}, callback);\n    }\n  }\n\n  // Set to authenticating\n  this.authenticating = true;\n  // All errors\n  var errors = [];\n\n  // Get all the servers\n  var servers = this.s.replicaSetState.allServers();\n  // No servers return\n  if(servers.length == 0) {\n    this.authenticating = false;\n    callback(null, true);\n  }\n\n  // Authenticate\n  function auth(server) {\n    // Arguments without a callback\n    var argsWithoutCallback = [mechanism, db].concat(args.slice(0));\n    // Create arguments\n    var finalArguments = argsWithoutCallback.concat([function(err) {\n      count = count - 1;\n      // Save all the errors\n      if(err) errors.push({name: server.name, err: err});\n      // We are done\n      if(count == 0) {\n        // Auth is done\n        self.authenticating = false;\n\n        // Return the auth error\n        if(errors.length) {\n          // Remove the entry from the stored authentication contexts\n          self.s.authenticationContexts.splice(currentContextIndex, 0);\n          // Return error\n          return callback(MongoError.create({\n            message: 'authentication fail', errors: errors\n          }), false);\n        }\n\n        // Successfully authenticated session\n        callback(null, self);\n      }\n    }]);\n\n    if(!server.lastIsMaster().arbiterOnly) {\n      // Execute the auth only against non arbiter servers\n      server.auth.apply(server, finalArguments);\n    } else {\n      // If we are authenticating against an arbiter just ignore it\n      finalArguments.pop()(null);\n    }\n  }\n\n  // Get total count\n  var count = servers.length;\n\n  // Save current context index\n  currentContextIndex = this.s.authenticationContexts.length;\n\n  // Store the auth context and return the last index\n  this.s.authenticationContexts.push([mechanism, db].concat(args.slice(0)));\n\n  // Authenticate against all servers\n  while(servers.length > 0) {\n    auth(servers.shift());\n  }\n}\n\n/**\n * Logout from a database\n * @method\n * @param {string} db The db we are logging out from\n * @param {authResultCallback} callback A callback function\n */\nReplSet.prototype.logout = function(dbName, callback) {\n  var self = this;\n  // Are we authenticating or logging out, throw\n  if(this.authenticating) {\n    throw new MongoError('authentication or logout allready in process');\n  }\n\n  // Ensure no new members are processed while logging out\n  this.authenticating = true;\n\n  // Remove from all auth providers (avoid any reaplication of the auth details)\n  var providers = Object.keys(this.authProviders);\n  for(var i = 0; i < providers.length; i++) {\n    this.authProviders[providers[i]].logout(dbName);\n  }\n\n  // Clear out any contexts associated with the db\n  self.s.authenticationContexts = self.s.authenticationContexts.filter(function(context) {\n    return context[1] !== dbName;\n  });\n\n  // Now logout all the servers\n  var servers = this.s.replicaSetState.allServers();\n  var count = servers.length;\n  if(count == 0) return callback();\n  var errors = [];\n\n  function logoutServer(_server, cb) {\n    _server.logout(dbName, function(err) {\n      if(err) errors.push({name: _server.name, err: err});\n      cb();\n    });\n  }\n\n  // Execute logout on all server instances\n  for(i = 0; i < servers.length; i++) {\n    logoutServer(servers[i], function() {\n      count = count - 1;\n\n      if(count == 0) {\n        // Do not block new operations\n        self.authenticating = false;\n        // If we have one or more errors\n        if(errors.length) return callback(MongoError.create({\n          message: f('logout failed against db %s', dbName), errors: errors\n        }), false);\n\n        // No errors\n        callback();\n      }\n    })\n  }\n}\n\n/**\n * Perform one or more remove operations\n * @method\n * @param {string} ns The MongoDB fully qualified namespace (ex: db1.collection1)\n * @param {{object}|{Long}} cmd Can be either a command returning a cursor or a cursorId\n * @param {object} [options.batchSize=0] Batchsize for the operation\n * @param {array} [options.documents=[]] Initial documents list for cursor\n * @param {ReadPreference} [options.readPreference] Specify read preference if command supports it\n * @param {Boolean} [options.serializeFunctions=false] Specify if functions on an object should be serialized.\n * @param {Boolean} [options.ignoreUndefined=false] Specify if the BSON serializer should ignore undefined fields.\n * @param {opResultCallback} callback A callback function\n */\nReplSet.prototype.cursor = function(ns, cmd, cursorOptions) {\n  cursorOptions = cursorOptions || {};\n  var FinalCursor = cursorOptions.cursorFactory || this.s.Cursor;\n  return new FinalCursor(this.s.bson, ns, cmd, cursorOptions, this, this.s.options);\n}\n\n/**\n * A replset connect event, used to verify that the connection is up and running\n *\n * @event ReplSet#connect\n * @type {ReplSet}\n */\n\n/**\n * A replset reconnect event, used to verify that the topology reconnected\n *\n * @event ReplSet#reconnect\n * @type {ReplSet}\n */\n\n/**\n * A replset fullsetup event, used to signal that all topology members have been contacted.\n *\n * @event ReplSet#fullsetup\n * @type {ReplSet}\n */\n\n/**\n * A replset all event, used to signal that all topology members have been contacted.\n *\n * @event ReplSet#all\n * @type {ReplSet}\n */\n\n/**\n * A replset failed event, used to signal that initial replset connection failed.\n *\n * @event ReplSet#failed\n * @type {ReplSet}\n */\n\n/**\n * A server member left the replicaset\n *\n * @event ReplSet#left\n * @type {function}\n * @param {string} type The type of member that left (primary|secondary|arbiter)\n * @param {Server} server The server object that left\n */\n\n/**\n * A server member joined the replicaset\n *\n * @event ReplSet#joined\n * @type {function}\n * @param {string} type The type of member that joined (primary|secondary|arbiter)\n * @param {Server} server The server object that joined\n */\n\n/**\n * A server opening SDAM monitoring event\n *\n * @event ReplSet#serverOpening\n * @type {object}\n */\n\n/**\n * A server closed SDAM monitoring event\n *\n * @event ReplSet#serverClosed\n * @type {object}\n */\n\n/**\n * A server description SDAM change monitoring event\n *\n * @event ReplSet#serverDescriptionChanged\n * @type {object}\n */\n\n/**\n * A topology open SDAM event\n *\n * @event ReplSet#topologyOpening\n * @type {object}\n */\n\n/**\n * A topology closed SDAM event\n *\n * @event ReplSet#topologyClosed\n * @type {object}\n */\n\n/**\n * A topology structure SDAM change event\n *\n * @event ReplSet#topologyDescriptionChanged\n * @type {object}\n */\n\n/**\n * A topology serverHeartbeatStarted SDAM event\n *\n * @event ReplSet#serverHeartbeatStarted\n * @type {object}\n */\n\n/**\n * A topology serverHeartbeatFailed SDAM event\n *\n * @event ReplSet#serverHeartbeatFailed\n * @type {object}\n */\n\n/**\n * A topology serverHeartbeatSucceeded SDAM change event\n *\n * @event ReplSet#serverHeartbeatSucceeded\n * @type {object}\n */\n\nmodule.exports = ReplSet;\n"]}