{"version":3,"sources":["connection.js"],"names":[],"mappings":"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","file":"connection-compiled.js","sourcesContent":["\"use strict\";\n\nvar inherits = require('util').inherits\n  , EventEmitter = require('events').EventEmitter\n  , net = require('net')\n  , tls = require('tls')\n  , crypto = require('crypto')\n  , f = require('util').format\n  , debugOptions = require('./utils').debugOptions\n  , Response = require('./commands').Response\n  , MongoError = require('../error')\n  , Logger = require('./logger');\n\nvar _id = 0;\nvar debugFields = ['host', 'port', 'size', 'keepAlive', 'keepAliveInitialDelay', 'noDelay'\n  , 'connectionTimeout', 'socketTimeout', 'singleBufferSerializtion', 'ssl', 'ca', 'crl', 'cert'\n  , 'rejectUnauthorized', 'promoteLongs', 'promoteValues', 'promoteBuffers', 'checkServerIdentity'];\nvar connectionAccounting = false;\nvar connections = {};\n\n/**\n * Creates a new Connection instance\n * @class\n * @param {string} options.host The server host\n * @param {number} options.port The server port\n * @param {boolean} [options.keepAlive=true] TCP Connection keep alive enabled\n * @param {number} [options.keepAliveInitialDelay=0] Initial delay before TCP keep alive enabled\n * @param {boolean} [options.noDelay=true] TCP Connection no delay\n * @param {number} [options.connectionTimeout=0] TCP Connection timeout setting\n * @param {number} [options.socketTimeout=0] TCP Socket timeout setting\n * @param {boolean} [options.singleBufferSerializtion=true] Serialize into single buffer, trade of peak memory for serialization speed\n * @param {boolean} [options.ssl=false] Use SSL for connection\n * @param {boolean|function} [options.checkServerIdentity=true] Ensure we check server identify during SSL, set to false to disable checking. Only works for Node 0.12.x or higher. You can pass in a boolean or your own checkServerIdentity override function.\n * @param {Buffer} [options.ca] SSL Certificate store binary buffer\n * @param {Buffer} [options.crl] SSL Certificate revocation store binary buffer\n * @param {Buffer} [options.cert] SSL Certificate binary buffer\n * @param {Buffer} [options.key] SSL Key file binary buffer\n * @param {string} [options.passphrase] SSL Certificate pass phrase\n * @param {boolean} [options.rejectUnauthorized=true] Reject unauthorized server certificates\n * @param {boolean} [options.promoteLongs=true] Convert Long values from the db into Numbers if they fit into 53 bits\n * @param {boolean} [options.promoteValues=true] Promotes BSON values to native types where possible, set to false to only receive wrapper types.\n * @param {boolean} [options.promoteBuffers=false] Promotes Binary BSON values to native Node Buffers.\n * @fires Connection#connect\n * @fires Connection#close\n * @fires Connection#error\n * @fires Connection#timeout\n * @fires Connection#parseError\n * @return {Connection} A cursor instance\n */\nvar Connection = function(messageHandler, options) {\n  // Add event listener\n  EventEmitter.call(this);\n  // Set empty if no options passed\n  this.options = options || {};\n  // Identification information\n  this.id = _id++;\n  // Logger instance\n  this.logger = Logger('Connection', options);\n  // No bson parser passed in\n  if(!options.bson) throw new Error(\"must pass in valid bson parser\");\n  // Get bson parser\n  this.bson = options.bson;\n  // Grouping tag used for debugging purposes\n  this.tag = options.tag;\n  // Message handler\n  this.messageHandler = messageHandler;\n\n  // Max BSON message size\n  this.maxBsonMessageSize = options.maxBsonMessageSize || (1024 * 1024 * 16 * 4);\n  // Debug information\n  if(this.logger.isDebug()) this.logger.debug(f('creating connection %s with options [%s]', this.id, JSON.stringify(debugOptions(debugFields, options))));\n\n  // Default options\n  this.port = options.port || 27017;\n  this.host = options.host || 'localhost';\n  this.keepAlive = typeof options.keepAlive == 'boolean' ? options.keepAlive : true;\n  this.keepAliveInitialDelay = options.keepAliveInitialDelay || 0;\n  this.noDelay = typeof options.noDelay == 'boolean' ? options.noDelay : true;\n  this.connectionTimeout = options.connectionTimeout || 0;\n  this.socketTimeout = options.socketTimeout || 0;\n\n  // If connection was destroyed\n  this.destroyed = false;\n\n  // Check if we have a domain socket\n  this.domainSocket = this.host.indexOf('\\/') != -1;\n\n  // Serialize commands using function\n  this.singleBufferSerializtion = typeof options.singleBufferSerializtion == 'boolean' ? options.singleBufferSerializtion : true;\n  this.serializationFunction = this.singleBufferSerializtion ? 'toBinUnified' : 'toBin';\n\n  // SSL options\n  this.ca = options.ca || null;\n  this.crl = options.crl || null;\n  this.cert = options.cert || null;\n  this.key = options.key || null;\n  this.passphrase = options.passphrase || null;\n  this.ssl = typeof options.ssl == 'boolean' ? options.ssl : false;\n  this.rejectUnauthorized = typeof options.rejectUnauthorized == 'boolean' ? options.rejectUnauthorized : true;\n  this.checkServerIdentity = typeof options.checkServerIdentity == 'boolean'\n    || typeof options.checkServerIdentity == 'function' ? options.checkServerIdentity : true;\n\n  // If ssl not enabled\n  if(!this.ssl) this.rejectUnauthorized = false;\n\n  // Response options\n  this.responseOptions = {\n    promoteLongs: typeof options.promoteLongs == 'boolean' ?  options.promoteLongs : true,\n    promoteValues: typeof options.promoteValues == 'boolean' ? options.promoteValues : true,\n    promoteBuffers: typeof options.promoteBuffers == 'boolean' ? options.promoteBuffers: false\n  }\n\n  // Flushing\n  this.flushing = false;\n  this.queue = [];\n\n  // Internal state\n  this.connection = null;\n  this.writeStream = null;\n\n  // Create hash method\n  var hash = crypto.createHash('sha1');\n  hash.update(f('%s:%s', this.host, this.port));\n\n  // Create a hash name\n  this.hashedName = hash.digest('hex');\n\n  // All operations in flight on the connection\n  this.workItems = [];\n}\n\ninherits(Connection, EventEmitter);\n\nConnection.prototype.setSocketTimeout = function(value) {\n  if(this.connection) {\n    this.connection.setTimeout(value);\n  }\n}\n\nConnection.prototype.resetSocketTimeout = function() {\n  if(this.connection) {\n    this.connection.setTimeout(this.socketTimeout);\n  }\n}\n\nConnection.enableConnectionAccounting = function() {\n  connectionAccounting = true;\n  connections = {};\n}\n\nConnection.disableConnectionAccounting = function() {\n  connectionAccounting = false;\n}\n\nConnection.connections = function() {\n  return connections;\n}\n\nfunction deleteConnection(id) {\n  // console.log(\"=== deleted connection \" + id + \" :: \" + (connections[id] ? connections[id].port : ''))\n  delete connections[id];\n}\n\nfunction addConnection(id, connection) {\n  // console.log(\"=== added connection \" + id + \" :: \" + connection.port)\n  connections[id] = connection;\n}\n\n//\n// Connection handlers\nvar errorHandler = function(self) {\n  return function(err) {\n    if(connectionAccounting) deleteConnection(self.id);\n    // Debug information\n    if(self.logger.isDebug()) self.logger.debug(f('connection %s for [%s:%s] errored out with [%s]', self.id, self.host, self.port, JSON.stringify(err)));\n    // Emit the error\n    if(self.listeners('error').length > 0) self.emit(\"error\", MongoError.create(err), self);\n  }\n}\n\nvar timeoutHandler = function(self) {\n  return function() {\n    if(connectionAccounting) deleteConnection(self.id);\n    // Debug information\n    if(self.logger.isDebug()) self.logger.debug(f('connection %s for [%s:%s] timed out', self.id, self.host, self.port));\n    // Emit timeout error\n    self.emit(\"timeout\"\n      , MongoError.create(f(\"connection %s to %s:%s timed out\", self.id, self.host, self.port))\n      , self);\n  }\n}\n\nvar closeHandler = function(self) {\n  return function(hadError) {\n    if(connectionAccounting) deleteConnection(self.id);\n    // Debug information\n    if(self.logger.isDebug()) self.logger.debug(f('connection %s with for [%s:%s] closed', self.id, self.host, self.port));\n\n    // Emit close event\n    if(!hadError) {\n      self.emit(\"close\"\n        , MongoError.create(f(\"connection %s to %s:%s closed\", self.id, self.host, self.port))\n        , self);\n    }\n  }\n}\n\nvar dataHandler = function(self) {\n  return function(data) {\n    // Parse until we are done with the data\n    while(data.length > 0) {\n      // If we still have bytes to read on the current message\n      if(self.bytesRead > 0 && self.sizeOfMessage > 0) {\n        // Calculate the amount of remaining bytes\n        var remainingBytesToRead = self.sizeOfMessage - self.bytesRead;\n        // Check if the current chunk contains the rest of the message\n        if(remainingBytesToRead > data.length) {\n          // Copy the new data into the exiting buffer (should have been allocated when we know the message size)\n          data.copy(self.buffer, self.bytesRead);\n          // Adjust the number of bytes read so it point to the correct index in the buffer\n          self.bytesRead = self.bytesRead + data.length;\n\n          // Reset state of buffer\n          data = new Buffer(0);\n        } else {\n          // Copy the missing part of the data into our current buffer\n          data.copy(self.buffer, self.bytesRead, 0, remainingBytesToRead);\n          // Slice the overflow into a new buffer that we will then re-parse\n          data = data.slice(remainingBytesToRead);\n\n          // Emit current complete message\n          try {\n            var emitBuffer = self.buffer;\n            // Reset state of buffer\n            self.buffer = null;\n            self.sizeOfMessage = 0;\n            self.bytesRead = 0;\n            self.stubBuffer = null;\n            // Emit the buffer\n            self.messageHandler(new Response(self.bson, emitBuffer, self.responseOptions), self);\n          } catch(err) {\n            var errorObject = {err:\"socketHandler\", trace:err, bin:self.buffer, parseState:{\n              sizeOfMessage:self.sizeOfMessage,\n              bytesRead:self.bytesRead,\n              stubBuffer:self.stubBuffer}};\n            // We got a parse Error fire it off then keep going\n            self.emit(\"parseError\", errorObject, self);\n          }\n        }\n      } else {\n        // Stub buffer is kept in case we don't get enough bytes to determine the\n        // size of the message (< 4 bytes)\n        if(self.stubBuffer != null && self.stubBuffer.length > 0) {\n          // If we have enough bytes to determine the message size let's do it\n          if(self.stubBuffer.length + data.length > 4) {\n            // Prepad the data\n            var newData = new Buffer(self.stubBuffer.length + data.length);\n            self.stubBuffer.copy(newData, 0);\n            data.copy(newData, self.stubBuffer.length);\n            // Reassign for parsing\n            data = newData;\n\n            // Reset state of buffer\n            self.buffer = null;\n            self.sizeOfMessage = 0;\n            self.bytesRead = 0;\n            self.stubBuffer = null;\n\n          } else {\n\n            // Add the the bytes to the stub buffer\n            var newStubBuffer = new Buffer(self.stubBuffer.length + data.length);\n            // Copy existing stub buffer\n            self.stubBuffer.copy(newStubBuffer, 0);\n            // Copy missing part of the data\n            data.copy(newStubBuffer, self.stubBuffer.length);\n            // Exit parsing loop\n            data = new Buffer(0);\n          }\n        } else {\n          if(data.length > 4) {\n            // Retrieve the message size\n            // var sizeOfMessage = data.readUInt32LE(0);\n            var sizeOfMessage = data[0] | data[1] << 8 | data[2] << 16 | data[3] << 24;\n            // If we have a negative sizeOfMessage emit error and return\n            if(sizeOfMessage < 0 || sizeOfMessage > self.maxBsonMessageSize) {\n              errorObject = {err:\"socketHandler\", trace:'', bin:self.buffer, parseState:{\n                sizeOfMessage: sizeOfMessage,\n                bytesRead: self.bytesRead,\n                stubBuffer: self.stubBuffer}};\n              // We got a parse Error fire it off then keep going\n              self.emit(\"parseError\", errorObject, self);\n              return;\n            }\n\n            // Ensure that the size of message is larger than 0 and less than the max allowed\n            if(sizeOfMessage > 4 && sizeOfMessage < self.maxBsonMessageSize && sizeOfMessage > data.length) {\n              self.buffer = new Buffer(sizeOfMessage);\n              // Copy all the data into the buffer\n              data.copy(self.buffer, 0);\n              // Update bytes read\n              self.bytesRead = data.length;\n              // Update sizeOfMessage\n              self.sizeOfMessage = sizeOfMessage;\n              // Ensure stub buffer is null\n              self.stubBuffer = null;\n              // Exit parsing loop\n              data = new Buffer(0);\n\n            } else if(sizeOfMessage > 4 && sizeOfMessage < self.maxBsonMessageSize && sizeOfMessage == data.length) {\n              try {\n                emitBuffer = data;\n                // Reset state of buffer\n                self.buffer = null;\n                self.sizeOfMessage = 0;\n                self.bytesRead = 0;\n                self.stubBuffer = null;\n                // Exit parsing loop\n                data = new Buffer(0);\n                // Emit the message\n                self.messageHandler(new Response(self.bson, emitBuffer, self.responseOptions), self);\n              } catch (err) {\n                self.emit(\"parseError\", err, self);\n              }\n            } else if(sizeOfMessage <= 4 || sizeOfMessage > self.maxBsonMessageSize) {\n              errorObject = {err:\"socketHandler\", trace:null, bin:data, parseState:{\n                sizeOfMessage:sizeOfMessage,\n                bytesRead:0,\n                buffer:null,\n                stubBuffer:null}};\n              // We got a parse Error fire it off then keep going\n              self.emit(\"parseError\", errorObject, self);\n\n              // Clear out the state of the parser\n              self.buffer = null;\n              self.sizeOfMessage = 0;\n              self.bytesRead = 0;\n              self.stubBuffer = null;\n              // Exit parsing loop\n              data = new Buffer(0);\n            } else {\n              emitBuffer = data.slice(0, sizeOfMessage);\n              // Reset state of buffer\n              self.buffer = null;\n              self.sizeOfMessage = 0;\n              self.bytesRead = 0;\n              self.stubBuffer = null;\n              // Copy rest of message\n              data = data.slice(sizeOfMessage);\n              // Emit the message\n              self.messageHandler(new Response(self.bson, emitBuffer, self.responseOptions), self);\n            }\n          } else {\n            // Create a buffer that contains the space for the non-complete message\n            self.stubBuffer = new Buffer(data.length)\n            // Copy the data to the stub buffer\n            data.copy(self.stubBuffer, 0);\n            // Exit parsing loop\n            data = new Buffer(0);\n          }\n        }\n      }\n    }\n  }\n}\n\n// List of socket level valid ssl options\nvar legalSslSocketOptions = ['pfx', 'key', 'passphrase', 'cert', 'ca', 'ciphers'\n  , 'NPNProtocols', 'ALPNProtocols', 'servername'\n  , 'secureProtocol', 'secureContext', 'session'\n  , 'minDHSize'];\n\nfunction merge(options1, options2) {\n  // Merge in any allowed ssl options\n  for(var name in options2) {\n    if(options2[name] != null && legalSslSocketOptions.indexOf(name) != -1) {\n      options1[name] = options2[name];\n    }\n  }\n}\n\n/**\n * Connect\n * @method\n */\nConnection.prototype.connect = function(_options) {\n  var self = this;\n  _options = _options || {};\n  // Set the connections\n  if(connectionAccounting) addConnection(this.id, this);\n  // Check if we are overriding the promoteLongs\n  if(typeof _options.promoteLongs == 'boolean') {\n    self.responseOptions.promoteLongs = _options.promoteLongs;\n    self.responseOptions.promoteValues = _options.promoteValues;\n    self.responseOptions.promoteBuffers = _options.promoteBuffers;\n  }\n\n  // Create new connection instance\n  self.connection = self.domainSocket\n    ? net.createConnection(self.host)\n    : net.createConnection(self.port, self.host);\n\n  // Set the options for the connection\n  self.connection.setKeepAlive(self.keepAlive, self.keepAliveInitialDelay);\n  self.connection.setTimeout(self.connectionTimeout);\n  self.connection.setNoDelay(self.noDelay);\n\n  // If we have ssl enabled\n  if(self.ssl) {\n    var sslOptions = {\n        socket: self.connection\n      , rejectUnauthorized: self.rejectUnauthorized\n    }\n\n    // Merge in options\n    merge(sslOptions, this.options);\n    merge(sslOptions, _options);\n\n    // Set options for ssl\n    if(self.ca) sslOptions.ca = self.ca;\n    if(self.crl) sslOptions.crl = self.crl;\n    if(self.cert) sslOptions.cert = self.cert;\n    if(self.key) sslOptions.key = self.key;\n    if(self.passphrase) sslOptions.passphrase = self.passphrase;\n\n    // Override checkServerIdentity behavior\n    if(self.checkServerIdentity == false) {\n      // Skip the identiy check by retuning undefined as per node documents\n      // https://nodejs.org/api/tls.html#tls_tls_connect_options_callback\n      sslOptions.checkServerIdentity = function() {\n        return undefined;\n      }\n    } else if(typeof self.checkServerIdentity == 'function') {\n      sslOptions.checkServerIdentity = self.checkServerIdentity;\n    }\n\n    // Set default sni servername to be the same as host\n    if(sslOptions.servername == null) {\n      sslOptions.servername = self.host;\n    }\n\n    // Attempt SSL connection\n    self.connection = tls.connect(self.port, self.host, sslOptions, function() {\n      // Error on auth or skip\n      if(self.connection.authorizationError && self.rejectUnauthorized) {\n        return self.emit(\"error\", self.connection.authorizationError, self, {ssl:true});\n      }\n\n      // Set socket timeout instead of connection timeout\n      self.connection.setTimeout(self.socketTimeout);\n      // We are done emit connect\n      self.emit('connect', self);\n    });\n    self.connection.setTimeout(self.connectionTimeout);\n  } else {\n    self.connection.on('connect', function() {\n      // Set socket timeout instead of connection timeout\n      self.connection.setTimeout(self.socketTimeout);\n      // Emit connect event\n      self.emit('connect', self);\n    });\n  }\n\n  // Add handlers for events\n  self.connection.once('error', errorHandler(self));\n  self.connection.once('timeout', timeoutHandler(self));\n  self.connection.once('close', closeHandler(self));\n  self.connection.on('data', dataHandler(self));\n}\n\n/**\n * Unref this connection\n * @method\n * @return {boolean}\n */\nConnection.prototype.unref = function() {\n  if (this.connection) this.connection.unref();\n  else {\n    var self = this;\n    this.once('connect', function() {\n      self.connection.unref();\n    });\n  }\n}\n\n/**\n * Destroy connection\n * @method\n */\nConnection.prototype.destroy = function() {\n  // Set the connections\n  if(connectionAccounting) deleteConnection(this.id);\n  if(this.connection) {\n    // Catch posssible exception thrown by node 0.10.x\n    try { this.connection.end(); } catch (err) {}\n    // Destroy connection\n    this.connection.destroy();\n  }\n\n  this.destroyed = true;\n}\n\n/**\n * Write to connection\n * @method\n * @param {Command} command Command to write out need to implement toBin and toBinUnified\n */\nConnection.prototype.write = function(buffer) {\n  var i;\n  // Debug Log\n  if(this.logger.isDebug()) {\n    if(!Array.isArray(buffer)) {\n      this.logger.debug(f('writing buffer [%s] to %s:%s', buffer.toString('hex'), this.host, this.port));\n    } else {\n      for(i = 0; i < buffer.length; i++)\n        this.logger.debug(f('writing buffer [%s] to %s:%s', buffer[i].toString('hex'), this.host, this.port));\n    }\n  }\n\n  // Write out the command\n  if(!Array.isArray(buffer)) return this.connection.write(buffer, 'binary');\n  // Iterate over all buffers and write them in order to the socket\n  for(i = 0; i < buffer.length; i++) this.connection.write(buffer[i], 'binary');\n}\n\n/**\n * Return id of connection as a string\n * @method\n * @return {string}\n */\nConnection.prototype.toString = function() {\n  return \"\" + this.id;\n}\n\n/**\n * Return json object of connection\n * @method\n * @return {object}\n */\nConnection.prototype.toJSON = function() {\n  return {id: this.id, host: this.host, port: this.port};\n}\n\n/**\n * Is the connection connected\n * @method\n * @return {boolean}\n */\nConnection.prototype.isConnected = function() {\n  if(this.destroyed) return false;\n  return !this.connection.destroyed && this.connection.writable;\n}\n\n/**\n * A server connect event, used to verify that the connection is up and running\n *\n * @event Connection#connect\n * @type {Connection}\n */\n\n/**\n * The server connection closed, all pool connections closed\n *\n * @event Connection#close\n * @type {Connection}\n */\n\n/**\n * The server connection caused an error, all pool connections closed\n *\n * @event Connection#error\n * @type {Connection}\n */\n\n/**\n * The server connection timed out, all pool connections closed\n *\n * @event Connection#timeout\n * @type {Connection}\n */\n\n/**\n * The driver experienced an invalid message, all pool connections closed\n *\n * @event Connection#parseError\n * @type {Connection}\n */\n\nmodule.exports = Connection;\n"]}