{"version":3,"sources":["logger.js"],"names":[],"mappings":"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","file":"logger-compiled.js","sourcesContent":["\"use strict\";\n\nvar f = require('util').format\n  , MongoError = require('../error');\n\n// Filters for classes\nvar classFilters = {};\nvar filteredClasses = {};\nvar level = null;\n// Save the process id\nvar pid = process.pid;\n// current logger\nvar currentLogger = null;\n\n/**\n * Creates a new Logger instance\n * @class\n * @param {string} className The Class name associated with the logging instance\n * @param {object} [options=null] Optional settings.\n * @param {Function} [options.logger=null] Custom logger function;\n * @param {string} [options.loggerLevel=error] Override default global log level.\n * @return {Logger} a Logger instance.\n */\nvar Logger = function(className, options) {\n  if(!(this instanceof Logger)) return new Logger(className, options);\n  options = options || {};\n\n  // Current reference\n  this.className = className;\n\n  // Current logger\n  if(options.logger) {\n    currentLogger = options.logger;\n  } else if(currentLogger == null) {\n    currentLogger = console.log;\n  }\n\n  // Set level of logging, default is error\n  if(options.loggerLevel) {\n    level = options.loggerLevel || 'error';\n  }\n\n  // Add all class names\n  if(filteredClasses[this.className] == null) classFilters[this.className] =  true;\n}\n\n/**\n * Log a message at the debug level\n * @method\n * @param {string} message The message to log\n * @param {object} object additional meta data to log\n * @return {null}\n */\nLogger.prototype.debug = function(message, object) {\n  if(this.isDebug()\n    && ((Object.keys(filteredClasses).length > 0 && filteredClasses[this.className])\n      || (Object.keys(filteredClasses).length == 0 && classFilters[this.className]))) {\n    var dateTime = new Date().getTime();\n    var msg = f(\"[%s-%s:%s] %s %s\", 'DEBUG', this.className, pid, dateTime, message);\n    var state = {\n      type: 'debug', message: message, className: this.className, pid: pid, date: dateTime\n    };\n    if(object) state.meta = object;\n    currentLogger(msg, state);\n  }\n}\n\n/**\n * Log a message at the warn level\n * @method\n * @param {string} message The message to log\n * @param {object} object additional meta data to log\n * @return {null}\n */\nLogger.prototype.warn = function(message, object) {\n  if(this.isWarn()\n    && ((Object.keys(filteredClasses).length > 0 && filteredClasses[this.className])\n      || (Object.keys(filteredClasses).length == 0 && classFilters[this.className]))) {\n    var dateTime = new Date().getTime();\n    var msg = f(\"[%s-%s:%s] %s %s\", 'WARN', this.className, pid, dateTime, message);\n    var state = {\n      type: 'warn', message: message, className: this.className, pid: pid, date: dateTime\n    };\n    if(object) state.meta = object;\n    currentLogger(msg, state);\n  }\n},\n\n/**\n * Log a message at the info level\n * @method\n * @param {string} message The message to log\n * @param {object} object additional meta data to log\n * @return {null}\n */\nLogger.prototype.info = function(message, object) {\n  if(this.isInfo()\n    && ((Object.keys(filteredClasses).length > 0 && filteredClasses[this.className])\n      || (Object.keys(filteredClasses).length == 0 && classFilters[this.className]))) {\n    var dateTime = new Date().getTime();\n    var msg = f(\"[%s-%s:%s] %s %s\", 'INFO', this.className, pid, dateTime, message);\n    var state = {\n      type: 'info', message: message, className: this.className, pid: pid, date: dateTime\n    };\n    if(object) state.meta = object;\n    currentLogger(msg, state);\n  }\n},\n\n/**\n * Log a message at the error level\n * @method\n * @param {string} message The message to log\n * @param {object} object additional meta data to log\n * @return {null}\n */\nLogger.prototype.error = function(message, object) {\n  if(this.isError()\n    && ((Object.keys(filteredClasses).length > 0 && filteredClasses[this.className])\n      || (Object.keys(filteredClasses).length == 0 && classFilters[this.className]))) {\n    var dateTime = new Date().getTime();\n    var msg = f(\"[%s-%s:%s] %s %s\", 'ERROR', this.className, pid, dateTime, message);\n    var state = {\n      type: 'error', message: message, className: this.className, pid: pid, date: dateTime\n    };\n    if(object) state.meta = object;\n    currentLogger(msg, state);\n  }\n},\n\n/**\n * Is the logger set at info level\n * @method\n * @return {boolean}\n */\nLogger.prototype.isInfo = function() {\n  return level == 'info' || level == 'debug';\n},\n\n/**\n * Is the logger set at error level\n * @method\n * @return {boolean}\n */\nLogger.prototype.isError = function() {\n  return level == 'error' || level == 'info' || level == 'debug';\n},\n\n/**\n * Is the logger set at error level\n * @method\n * @return {boolean}\n */\nLogger.prototype.isWarn = function() {\n  return level == 'error' || level == 'warn' || level == 'info' || level == 'debug';\n},\n\n/**\n * Is the logger set at debug level\n * @method\n * @return {boolean}\n */\nLogger.prototype.isDebug = function() {\n  return level == 'debug';\n}\n\n/**\n * Resets the logger to default settings, error and no filtered classes\n * @method\n * @return {null}\n */\nLogger.reset = function() {\n  level = 'error';\n  filteredClasses = {};\n}\n\n/**\n * Get the current logger function\n * @method\n * @return {function}\n */\nLogger.currentLogger = function() {\n  return currentLogger;\n}\n\n/**\n * Set the current logger function\n * @method\n * @param {function} logger Logger function.\n * @return {null}\n */\nLogger.setCurrentLogger = function(logger) {\n  if(typeof logger != 'function') throw new MongoError(\"current logger must be a function\");\n  currentLogger = logger;\n}\n\n/**\n * Set what classes to log.\n * @method\n * @param {string} type The type of filter (currently only class)\n * @param {string[]} values The filters to apply\n * @return {null}\n */\nLogger.filter = function(type, values) {\n  if(type == 'class' && Array.isArray(values)) {\n    filteredClasses = {};\n\n    values.forEach(function(x) {\n      filteredClasses[x] = true;\n    });\n  }\n}\n\n/**\n * Set the current log level\n * @method\n * @param {string} level Set current log level (debug, info, error)\n * @return {null}\n */\nLogger.setLevel = function(_level) {\n  if(_level != 'info' && _level != 'error' && _level != 'debug' && _level != 'warn') {\n    throw new Error(f(\"%s is an illegal logging level\", _level));\n  }\n\n  level = _level;\n}\n\nmodule.exports = Logger;\n"]}