{"version":3,"sources":["statemachine.js"],"names":[],"mappings":";AACA;;;;AAIA,IAAI,QAAQ,QAAQ,SAAR,CAAZ;;AAEA;;;;;;;AAOA,IAAI,eAAe,OAAO,OAAP,GAAiB,UAAU,SAAS,YAAT,GAAwB,CACrE,CADD;;AAGA;;;;;;;;;;;;;;AAcA,aAAa,IAAb,GAAoB,YAAW;AAC7B,MAAI,SAAS,MAAM,IAAN,CAAW,SAAX,CAAb;;AAEA,MAAI,OAAO,YAAW;AACpB,iBAAa,KAAb,CAAmB,IAAnB,EAAyB,SAAzB;AACA,SAAK,KAAL,GAAa,EAAb;AACA,SAAK,MAAL,GAAc,EAAd;AACA,SAAK,UAAL,GAAkB,MAAlB;;AAEA,QAAI,IAAI,OAAO,MAAf;AAAA,QACI,KADJ;;AAGA,WAAO,GAAP,EAAY;AACV,cAAQ,OAAO,CAAP,CAAR;AACA,WAAK,MAAL,CAAY,KAAZ,IAAqB,EAArB;AACD;AACF,GAbD;;AAeA,OAAK,SAAL,GAAiB,IAAI,YAAJ,EAAjB;;AAEA,SAAO,OAAP,CAAe,UAAS,KAAT,EAAgB;AAC7B;AACA,SAAK,SAAL,CAAe,KAAf,IAAwB,UAAS,IAAT,EAAe;AACrC,WAAK,YAAL,CAAkB,IAAlB,EAAwB,KAAxB;AACD,KAFD;AAGD,GALD;;AAOA,SAAO,IAAP;AACD,CA5BD;;AA8BA;;;;;;;;;;AAUA,aAAa,SAAb,CAAuB,YAAvB,GAAsC,SAAS,YAAT,CAAsB,IAAtB,EAA4B,SAA5B,EAAuC;AAC3E,MAAI,aAAa,KAAK,MAAL,CAAY,KAAK,KAAL,CAAW,IAAX,CAAZ,CAAjB;AACA,MAAI,UAAJ,EAAgB,OAAO,WAAW,IAAX,CAAP;;AAEhB,OAAK,KAAL,CAAW,IAAX,IAAmB,SAAnB;AACA,OAAK,MAAL,CAAY,SAAZ,EAAuB,IAAvB,IAA+B,IAA/B;AACD,CAND;;AAQA;;;;AAIA,aAAa,SAAb,CAAuB,KAAvB,GAA+B,SAAS,KAAT,CAAe,KAAf,EAAsB;AACnD,MAAI,OAAO,OAAO,IAAP,CAAY,KAAK,MAAL,CAAY,KAAZ,CAAZ,CAAX;AAAA,MACI,IAAI,KAAK,MADb;AAAA,MAEI,IAFJ;;AAIA,SAAO,GAAP,EAAY;AACV,WAAO,KAAK,CAAL,CAAP;AACA,WAAO,KAAK,MAAL,CAAY,KAAZ,EAAmB,IAAnB,CAAP;AACA,WAAO,KAAK,KAAL,CAAW,IAAX,CAAP;AACD;AACF,CAVD;;AAYA;;;;;;;;AAQA,aAAa,SAAb,CAAuB,IAAvB,GAA8B,SAAS,IAAT,GAAgB;AAC5C,MAAI,QAAQ,IAAZ;AACA,MAAI,OAAO,UAAU,MAAV,GAAmB,SAAnB,GAA+B,KAAK,UAA/C;AACA,SAAO,MAAM,SAAN,CAAgB,IAAhB,CAAqB,IAArB,CAA0B,IAA1B,EAAgC,UAAS,KAAT,EAAgB;AACrD,WAAO,OAAO,IAAP,CAAY,MAAM,MAAN,CAAa,KAAb,CAAZ,EAAiC,MAAxC;AACD,GAFM,CAAP;AAGD,CAND;;AAQA;;;;;;;;;AASA,aAAa,SAAb,CAAuB,KAAvB,GAA+B,SAAS,KAAT,CAAe,UAAf,EAA2B;AACxD,SAAO,YAAW;AAChB,QAAI,UAAU,UAAU,MAAxB;AAAA,QACI,SAAS,MAAM,IAAN,CAAW,SAAX,EAAsB,CAAtB,EAAyB,UAAU,CAAnC,CADb;AAAA,QAEI,WAAW,UAAU,UAAU,CAApB,CAFf;;AAIA,QAAI,CAAC,OAAO,MAAZ,EAAoB,SAAS,KAAK,UAAd;;AAEpB,QAAI,QAAQ,IAAZ;;AAEA,QAAI,QAAQ,OAAO,MAAP,CAAc,UAAS,KAAT,EAAgB,KAAhB,EAAuB;AAC/C,aAAO,MAAM,MAAN,CAAa,OAAO,IAAP,CAAY,MAAM,MAAN,CAAa,KAAb,CAAZ,CAAb,CAAP;AACD,KAFW,EAET,EAFS,CAAZ;;AAIA,WAAO,MAAM,UAAN,EAAkB,UAAS,IAAT,EAAe,CAAf,EAAkB,KAAlB,EAAyB;AAChD,aAAO,SAAS,IAAT,EAAe,CAAf,EAAkB,KAAlB,CAAP;AACD,KAFM,CAAP;AAGD,GAhBD;AAiBD,CAlBD;;AAoBA;;;;;;;;;;;;;;AAcA,aAAa,SAAb,CAAuB,OAAvB,GAAiC,SAAS,OAAT,GAAmB;AAClD,OAAK,OAAL,GAAe,KAAK,KAAL,CAAW,SAAX,CAAf;AACA,SAAO,KAAK,OAAL,CAAa,KAAb,CAAmB,IAAnB,EAAyB,SAAzB,CAAP;AACD,CAHD;;AAKA;;;;;;;;;;;;;;;AAeA,aAAa,SAAb,CAAuB,GAAvB,GAA6B,SAAS,GAAT,GAAe;AAC1C,OAAK,GAAL,GAAW,KAAK,KAAL,CAAW,KAAX,CAAX;AACA,SAAO,KAAK,GAAL,CAAS,KAAT,CAAe,IAAf,EAAqB,SAArB,CAAP;AACD,CAHD","file":"statemachine-compiled.js","sourcesContent":["\n/*!\n * Module dependencies.\n */\n\nvar utils = require('./utils');\n\n/*!\n * StateMachine represents a minimal `interface` for the\n * constructors it builds via StateMachine.ctor(...).\n *\n * @api private\n */\n\nvar StateMachine = module.exports = exports = function StateMachine() {\n};\n\n/*!\n * StateMachine.ctor('state1', 'state2', ...)\n * A factory method for subclassing StateMachine.\n * The arguments are a list of states. For each state,\n * the constructor's prototype gets state transition\n * methods named after each state. These transition methods\n * place their path argument into the given state.\n *\n * @param {String} state\n * @param {String} [state]\n * @return {Function} subclass constructor\n * @private\n */\n\nStateMachine.ctor = function() {\n  var states = utils.args(arguments);\n\n  var ctor = function() {\n    StateMachine.apply(this, arguments);\n    this.paths = {};\n    this.states = {};\n    this.stateNames = states;\n\n    var i = states.length,\n        state;\n\n    while (i--) {\n      state = states[i];\n      this.states[state] = {};\n    }\n  };\n\n  ctor.prototype = new StateMachine();\n\n  states.forEach(function(state) {\n    // Changes the `path`'s state to `state`.\n    ctor.prototype[state] = function(path) {\n      this._changeState(path, state);\n    };\n  });\n\n  return ctor;\n};\n\n/*!\n * This function is wrapped by the state change functions:\n *\n * - `require(path)`\n * - `modify(path)`\n * - `init(path)`\n *\n * @api private\n */\n\nStateMachine.prototype._changeState = function _changeState(path, nextState) {\n  var prevBucket = this.states[this.paths[path]];\n  if (prevBucket) delete prevBucket[path];\n\n  this.paths[path] = nextState;\n  this.states[nextState][path] = true;\n};\n\n/*!\n * ignore\n */\n\nStateMachine.prototype.clear = function clear(state) {\n  var keys = Object.keys(this.states[state]),\n      i = keys.length,\n      path;\n\n  while (i--) {\n    path = keys[i];\n    delete this.states[state][path];\n    delete this.paths[path];\n  }\n};\n\n/*!\n * Checks to see if at least one path is in the states passed in via `arguments`\n * e.g., this.some('required', 'inited')\n *\n * @param {String} state that we want to check for.\n * @private\n */\n\nStateMachine.prototype.some = function some() {\n  var _this = this;\n  var what = arguments.length ? arguments : this.stateNames;\n  return Array.prototype.some.call(what, function(state) {\n    return Object.keys(_this.states[state]).length;\n  });\n};\n\n/*!\n * This function builds the functions that get assigned to `forEach` and `map`,\n * since both of those methods share a lot of the same logic.\n *\n * @param {String} iterMethod is either 'forEach' or 'map'\n * @return {Function}\n * @api private\n */\n\nStateMachine.prototype._iter = function _iter(iterMethod) {\n  return function() {\n    var numArgs = arguments.length,\n        states = utils.args(arguments, 0, numArgs - 1),\n        callback = arguments[numArgs - 1];\n\n    if (!states.length) states = this.stateNames;\n\n    var _this = this;\n\n    var paths = states.reduce(function(paths, state) {\n      return paths.concat(Object.keys(_this.states[state]));\n    }, []);\n\n    return paths[iterMethod](function(path, i, paths) {\n      return callback(path, i, paths);\n    });\n  };\n};\n\n/*!\n * Iterates over the paths that belong to one of the parameter states.\n *\n * The function profile can look like:\n * this.forEach(state1, fn);         // iterates over all paths in state1\n * this.forEach(state1, state2, fn); // iterates over all paths in state1 or state2\n * this.forEach(fn);                 // iterates over all paths in all states\n *\n * @param {String} [state]\n * @param {String} [state]\n * @param {Function} callback\n * @private\n */\n\nStateMachine.prototype.forEach = function forEach() {\n  this.forEach = this._iter('forEach');\n  return this.forEach.apply(this, arguments);\n};\n\n/*!\n * Maps over the paths that belong to one of the parameter states.\n *\n * The function profile can look like:\n * this.forEach(state1, fn);         // iterates over all paths in state1\n * this.forEach(state1, state2, fn); // iterates over all paths in state1 or state2\n * this.forEach(fn);                 // iterates over all paths in all states\n *\n * @param {String} [state]\n * @param {String} [state]\n * @param {Function} callback\n * @return {Array}\n * @private\n */\n\nStateMachine.prototype.map = function map() {\n  this.map = this._iter('map');\n  return this.map.apply(this, arguments);\n};\n"]}