{"version":3,"sources":["cast.js"],"names":[],"mappings":"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","file":"cast-compiled.js","sourcesContent":["/*!\n * Module dependencies.\n */\n\nvar StrictModeError = require('./error/strict');\nvar Types = require('./schema/index');\nvar utils = require('./utils');\n\nvar ALLOWED_GEOWITHIN_GEOJSON_TYPES = ['Polygon', 'MultiPolygon'];\n\n/**\n * Handles internal casting for queries\n *\n * @param {Schema} schema\n * @param {Object} obj Object to cast\n * @param {Object} options the query options\n * @api private\n */\nmodule.exports = function cast(schema, obj, options) {\n  var paths = Object.keys(obj),\n      i = paths.length,\n      _keys,\n      any$conditionals,\n      schematype,\n      nested,\n      path,\n      type,\n      val;\n\n  while (i--) {\n    path = paths[i];\n    val = obj[path];\n\n    if (path === '$or' || path === '$nor' || path === '$and') {\n      var k = val.length;\n\n      while (k--) {\n        val[k] = cast(schema, val[k]);\n      }\n    } else if (path === '$where') {\n      type = typeof val;\n\n      if (type !== 'string' && type !== 'function') {\n        throw new Error('Must have a string or function for $where');\n      }\n\n      if (type === 'function') {\n        obj[path] = val.toString();\n      }\n\n      continue;\n    } else if (path === '$elemMatch') {\n      val = cast(schema, val);\n    } else {\n      if (!schema) {\n        // no casting for Mixed types\n        continue;\n      }\n\n      schematype = schema.path(path);\n\n      if (!schematype) {\n        // Handle potential embedded array queries\n        var split = path.split('.'),\n            j = split.length,\n            pathFirstHalf,\n            pathLastHalf,\n            remainingConds;\n\n        // Find the part of the var path that is a path of the Schema\n        while (j--) {\n          pathFirstHalf = split.slice(0, j).join('.');\n          schematype = schema.path(pathFirstHalf);\n          if (schematype) {\n            break;\n          }\n        }\n\n        // If a substring of the input path resolves to an actual real path...\n        if (schematype) {\n          // Apply the casting; similar code for $elemMatch in schema/array.js\n          if (schematype.caster && schematype.caster.schema) {\n            remainingConds = {};\n            pathLastHalf = split.slice(j).join('.');\n            remainingConds[pathLastHalf] = val;\n            obj[path] = cast(schematype.caster.schema, remainingConds)[pathLastHalf];\n          } else {\n            obj[path] = val;\n          }\n          continue;\n        }\n\n        if (utils.isObject(val)) {\n          // handle geo schemas that use object notation\n          // { loc: { long: Number, lat: Number }\n\n          var geo = '';\n          if (val.$near) {\n            geo = '$near';\n          } else if (val.$nearSphere) {\n            geo = '$nearSphere';\n          } else if (val.$within) {\n            geo = '$within';\n          } else if (val.$geoIntersects) {\n            geo = '$geoIntersects';\n          } else if (val.$geoWithin) {\n            geo = '$geoWithin';\n          }\n\n          if (geo) {\n            var numbertype = new Types.Number('__QueryCasting__');\n            var value = val[geo];\n\n            if (val.$maxDistance != null) {\n              val.$maxDistance = numbertype.castForQuery(val.$maxDistance);\n            }\n            if (val.$minDistance != null) {\n              val.$minDistance = numbertype.castForQuery(val.$minDistance);\n            }\n\n            if (geo === '$within') {\n              var withinType = value.$center\n                  || value.$centerSphere\n                  || value.$box\n                  || value.$polygon;\n\n              if (!withinType) {\n                throw new Error('Bad $within paramater: ' + JSON.stringify(val));\n              }\n\n              value = withinType;\n            } else if (geo === '$near' &&\n                typeof value.type === 'string' && Array.isArray(value.coordinates)) {\n              // geojson; cast the coordinates\n              value = value.coordinates;\n            } else if ((geo === '$near' || geo === '$nearSphere' || geo === '$geoIntersects') &&\n                value.$geometry && typeof value.$geometry.type === 'string' &&\n                Array.isArray(value.$geometry.coordinates)) {\n              if (value.$maxDistance != null) {\n                value.$maxDistance = numbertype.castForQuery(value.$maxDistance);\n              }\n              if (value.$minDistance != null) {\n                value.$minDistance = numbertype.castForQuery(value.$minDistance);\n              }\n              if (utils.isMongooseObject(value.$geometry)) {\n                value.$geometry = value.$geometry.toObject({\n                  transform: false,\n                  virtuals: false\n                });\n              }\n              value = value.$geometry.coordinates;\n            } else if (geo === '$geoWithin') {\n              if (value.$geometry) {\n                if (utils.isMongooseObject(value.$geometry)) {\n                  value.$geometry = value.$geometry.toObject({ virtuals: false });\n                }\n                var geoWithinType = value.$geometry.type;\n                if (ALLOWED_GEOWITHIN_GEOJSON_TYPES.indexOf(geoWithinType) === -1) {\n                  throw new Error('Invalid geoJSON type for $geoWithin \"' +\n                    geoWithinType + '\", must be \"Polygon\" or \"MultiPolygon\"');\n                }\n                value = value.$geometry.coordinates;\n              } else {\n                value = value.$box || value.$polygon || value.$center ||\n                  value.$centerSphere;\n                if (utils.isMongooseObject(value)) {\n                  value = value.toObject({ virtuals: false });\n                }\n              }\n            }\n\n            _cast(value, numbertype);\n          }\n        }\n\n        if (options && options.upsert && options.strict) {\n          if (options.strict === 'throw') {\n            throw new StrictModeError(path);\n          }\n          throw new StrictModeError(path, 'Path \"' + path + '\" is not in ' +\n            'schema, strict mode is `true`, and upsert is `true`.');\n        }\n      } else if (val === null || val === undefined) {\n        obj[path] = null;\n        continue;\n      } else if (val.constructor.name === 'Object') {\n        any$conditionals = Object.keys(val).some(function(k) {\n          return k.charAt(0) === '$' && k !== '$id' && k !== '$ref';\n        });\n\n        if (!any$conditionals) {\n          obj[path] = schematype.castForQuery(val);\n        } else {\n          var ks = Object.keys(val),\n              $cond;\n\n          k = ks.length;\n\n          while (k--) {\n            $cond = ks[k];\n            nested = val[$cond];\n\n            if ($cond === '$not') {\n              if (nested && schematype && !schematype.caster) {\n                _keys = Object.keys(nested);\n                if (_keys.length && _keys[0].charAt(0) === '$') {\n                  for (var key in nested) {\n                    nested[key] = schematype.castForQuery(key, nested[key]);\n                  }\n                } else {\n                  val[$cond] = schematype.castForQuery($cond, nested);\n                }\n                continue;\n              }\n              cast(schematype.caster ? schematype.caster.schema : schema, nested);\n            } else {\n              val[$cond] = schematype.castForQuery($cond, nested);\n            }\n          }\n        }\n      } else if (val.constructor.name === 'Array' && ['Buffer', 'Array'].indexOf(schematype.instance) === -1) {\n        var casted = [];\n        for (var valIndex = 0; valIndex < val.length; valIndex++) {\n          casted.push(schematype.castForQuery(val[valIndex]));\n        }\n\n        obj[path] = { $in: casted };\n      } else {\n        obj[path] = schematype.castForQuery(val);\n      }\n    }\n  }\n\n  return obj;\n};\n\nfunction _cast(val, numbertype) {\n  if (Array.isArray(val)) {\n    val.forEach(function(item, i) {\n      if (Array.isArray(item) || utils.isObject(item)) {\n        return _cast(item, numbertype);\n      }\n      val[i] = numbertype.castForQuery(item);\n    });\n  } else {\n    var nearKeys = Object.keys(val);\n    var nearLen = nearKeys.length;\n    while (nearLen--) {\n      var nkey = nearKeys[nearLen];\n      var item = val[nkey];\n      if (Array.isArray(item) || utils.isObject(item)) {\n        _cast(item, numbertype);\n        val[nkey] = item;\n      } else {\n        val[nkey] = numbertype.castForQuery(item);\n      }\n    }\n  }\n}\n"]}