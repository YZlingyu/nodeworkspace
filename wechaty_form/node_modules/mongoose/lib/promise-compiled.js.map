{"version":3,"sources":["promise.js"],"names":[],"mappings":"AAAA;;;;AAIA,IAAI,WAAW,QAAQ,UAAR,CAAf;AACA,IAAI,OAAO,QAAQ,MAAR,CAAX;;AAEA;;;;;;;;;;;;;;;;;;;;;;AAsBA,SAAS,OAAT,CAAiB,EAAjB,EAAqB;AACnB,WAAS,IAAT,CAAc,IAAd,EAAoB,EAApB;AACD;;AAED;;;;;;;AAOA,QAAQ,GAAR,GAAc,UAAS,QAAT,EAAmB;AAC/B,MAAI,UAAU,IAAI,OAAJ,EAAd;;AAEA;AACA,WACE,YAAW;AACT,YAAQ,QAAR,CAAiB,KAAjB,CAAuB,OAAvB,EAAgC,SAAhC;AACD,GAHH,EAIE,UAAS,CAAT,EAAY;AACV,YAAQ,KAAR,CAAc,CAAd;AACD,GANH;;AAQA,SAAO,OAAP;AACD,CAbD;;AAeA;;;;AAIA,QAAQ,SAAR,GAAoB,OAAO,MAAP,CAAc,SAAS,SAAvB,EAAkC;AACpD,eAAa;AACX,WAAO,OADI;AAEX,gBAAY,KAFD;AAGX,cAAU,IAHC;AAIX,kBAAc;AAJH;AADuC,CAAlC,CAApB;;AASA;;;;AAIA,QAAQ,SAAR,CAAkB,IAAlB,GAAyB,KAAK,SAAL,CAAe,QAAQ,SAAR,CAAkB,IAAjC,EACvB,6EACA,4CADA,GAEA,0CAHuB,CAAzB;;AAKA;;;;;;;;;;AAUA,QAAQ,SAAR,CAAkB,KAAlB,GAA0B,UAAS,QAAT,EAAmB;AAC3C,SAAO,KAAK,IAAL,CAAU,IAAV,EAAgB,QAAhB,CAAP;AACD,CAFD;;AAIA;;;;AAIA,QAAQ,OAAR,GAAkB,UAAlB;AACA,QAAQ,OAAR,GAAkB,KAAlB;;AAEA;;;;;;;;;;;;;;AAcA;;;;;;;;;;;;;AAaA;;;;;;;;;;;;AAYA,QAAQ,SAAR,CAAkB,KAAlB,GAA0B,UAAS,GAAT,EAAc;AACtC,MAAI,EAAE,eAAe,KAAjB,CAAJ,EAA6B;AAC3B,QAAI,eAAe,MAAnB,EAA2B;AACzB,YAAM,KAAK,OAAL,CAAa,GAAb,CAAN;AACD;AACD,UAAM,IAAI,KAAJ,CAAU,GAAV,CAAN;AACD;AACD,SAAO,KAAK,MAAL,CAAY,GAAZ,CAAP;AACD,CARD;;AAUA;;;;;;;;;;;;;;;AAeA,QAAQ,SAAR,CAAkB,OAAlB,GAA4B,UAAS,GAAT,EAAc;AACxC,MAAI,GAAJ,EAAS,OAAO,KAAK,KAAL,CAAW,GAAX,CAAP;AACT,SAAO,KAAK,OAAL,CAAa,KAAb,CAAmB,IAAnB,EAAyB,MAAM,SAAN,CAAgB,KAAhB,CAAsB,IAAtB,CAA2B,SAA3B,EAAsC,CAAtC,CAAzB,CAAP;AACD,CAHD;;AAKA;;;;;;;;;;;;;;;;;;;;AAoBA,QAAQ,SAAR,CAAkB,OAAlB,GAA4B,QAAQ,SAAR,CAAkB,SAA9C;;AAEA;;;;;;;;;;;AAWA;;;;;;;;;;;;;;AAcA,QAAQ,SAAR,CAAkB,QAAlB,GAA6B,SAAS,SAAT,CAAmB,OAAhD;;AAEA;;;;;;;;;;;;;;AAcA,QAAQ,SAAR,CAAkB,WAAlB,GAAgC,QAAQ,SAAR,CAAkB,SAAlD;;AAEA;;;;;;;;;;;;;;AAcA,QAAQ,SAAR,CAAkB,UAAlB,GAA+B,QAAQ,SAAR,CAAkB,QAAjD;;AAEA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAiCA;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA4BA;;;;AAIA,OAAO,OAAP,GAAiB,OAAjB","file":"promise-compiled.js","sourcesContent":["/*!\n * Module dependencies\n */\n\nvar MPromise = require('mpromise');\nvar util = require('util');\n\n/**\n * Promise constructor.\n *\n * Promises are returned from executed queries. Example:\n *\n *     var query = Candy.find({ bar: true });\n *     var promise = query.exec();\n *\n * DEPRECATED. Mongoose 5.0 will use native promises by default (or bluebird,\n * if native promises are not present) but still\n * support plugging in your own ES6-compatible promises library. Mongoose 5.0\n * will **not** support mpromise.\n *\n * @param {Function} fn a function which will be called when the promise is resolved that accepts `fn(err, ...){}` as signature\n * @inherits mpromise https://github.com/aheckmann/mpromise\n * @inherits NodeJS EventEmitter http://nodejs.org/api/events.html#events_class_events_eventemitter\n * @event `err`: Emits when the promise is rejected\n * @event `complete`: Emits when the promise is fulfilled\n * @api public\n * @deprecated\n */\n\nfunction Promise(fn) {\n  MPromise.call(this, fn);\n}\n\n/**\n * ES6-style promise constructor wrapper around mpromise.\n *\n * @param {Function} resolver\n * @return {Promise} new promise\n * @api public\n */\nPromise.ES6 = function(resolver) {\n  var promise = new Promise();\n\n  // No try/catch for backwards compatibility\n  resolver(\n    function() {\n      promise.complete.apply(promise, arguments);\n    },\n    function(e) {\n      promise.error(e);\n    });\n\n  return promise;\n};\n\n/*!\n * Inherit from mpromise\n */\n\nPromise.prototype = Object.create(MPromise.prototype, {\n  constructor: {\n    value: Promise,\n    enumerable: false,\n    writable: true,\n    configurable: true\n  }\n});\n\n/*!\n * ignore\n */\n\nPromise.prototype.then = util.deprecate(Promise.prototype.then,\n  'Mongoose: mpromise (mongoose\\'s default promise library) is deprecated, ' +\n  'plug in your own promise library instead: ' +\n  'http://mongoosejs.com/docs/promises.html');\n\n/**\n * ES6-style `.catch()` shorthand\n *\n * @method catch\n * @memberOf Promise\n * @param {Function} onReject\n * @return {Promise}\n * @api public\n */\n\nPromise.prototype.catch = function(onReject) {\n  return this.then(null, onReject);\n};\n\n/*!\n * Override event names for backward compatibility.\n */\n\nPromise.SUCCESS = 'complete';\nPromise.FAILURE = 'err';\n\n/**\n * Adds `listener` to the `event`.\n *\n * If `event` is either the success or failure event and the event has already been emitted, the`listener` is called immediately and passed the results of the original emitted event.\n *\n * @see mpromise#on https://github.com/aheckmann/mpromise#on\n * @method on\n * @memberOf Promise\n * @param {String} event\n * @param {Function} listener\n * @return {Promise} this\n * @api public\n */\n\n/**\n * Rejects this promise with `reason`.\n *\n * If the promise has already been fulfilled or rejected, not action is taken.\n *\n * @see mpromise#reject https://github.com/aheckmann/mpromise#reject\n * @method reject\n * @memberOf Promise\n * @param {Object|String|Error} reason\n * @return {Promise} this\n * @api public\n */\n\n/**\n * Rejects this promise with `err`.\n *\n * If the promise has already been fulfilled or rejected, not action is taken.\n *\n * Differs from [#reject](#promise_Promise-reject) by first casting `err` to an `Error` if it is not `instanceof Error`.\n *\n * @api public\n * @param {Error|String} err\n * @return {Promise} this\n */\n\nPromise.prototype.error = function(err) {\n  if (!(err instanceof Error)) {\n    if (err instanceof Object) {\n      err = util.inspect(err);\n    }\n    err = new Error(err);\n  }\n  return this.reject(err);\n};\n\n/**\n * Resolves this promise to a rejected state if `err` is passed or a fulfilled state if no `err` is passed.\n *\n * If the promise has already been fulfilled or rejected, not action is taken.\n *\n * `err` will be cast to an Error if not already instanceof Error.\n *\n * _NOTE: overrides [mpromise#resolve](https://github.com/aheckmann/mpromise#resolve) to provide error casting._\n *\n * @param {Error} [err] error or null\n * @param {Object} [val] value to fulfill the promise with\n * @api public\n * @deprecated\n */\n\nPromise.prototype.resolve = function(err) {\n  if (err) return this.error(err);\n  return this.fulfill.apply(this, Array.prototype.slice.call(arguments, 1));\n};\n\n/**\n * Adds a single function as a listener to both err and complete.\n *\n * It will be executed with traditional node.js argument position when the promise is resolved.\n *\n *     promise.addBack(function (err, args...) {\n *       if (err) return handleError(err);\n *       console.log('success');\n *     })\n *\n * Alias of [mpromise#onResolve](https://github.com/aheckmann/mpromise#onresolve).\n *\n * _Deprecated. Use `onResolve` instead._\n *\n * @method addBack\n * @param {Function} listener\n * @return {Promise} this\n * @deprecated\n */\n\nPromise.prototype.addBack = Promise.prototype.onResolve;\n\n/**\n * Fulfills this promise with passed arguments.\n *\n * @method fulfill\n * @receiver Promise\n * @see https://github.com/aheckmann/mpromise#fulfill\n * @param {any} args\n * @api public\n * @deprecated\n */\n\n/**\n * Fulfills this promise with passed arguments.\n *\n * Alias of [mpromise#fulfill](https://github.com/aheckmann/mpromise#fulfill).\n *\n * _Deprecated. Use `fulfill` instead._\n *\n * @method complete\n * @receiver Promise\n * @param {any} args\n * @api public\n * @deprecated\n */\n\nPromise.prototype.complete = MPromise.prototype.fulfill;\n\n/**\n * Adds a listener to the `complete` (success) event.\n *\n * Alias of [mpromise#onFulfill](https://github.com/aheckmann/mpromise#onfulfill).\n *\n * _Deprecated. Use `onFulfill` instead._\n *\n * @method addCallback\n * @param {Function} listener\n * @return {Promise} this\n * @api public\n * @deprecated\n */\n\nPromise.prototype.addCallback = Promise.prototype.onFulfill;\n\n/**\n * Adds a listener to the `err` (rejected) event.\n *\n * Alias of [mpromise#onReject](https://github.com/aheckmann/mpromise#onreject).\n *\n * _Deprecated. Use `onReject` instead._\n *\n * @method addErrback\n * @param {Function} listener\n * @return {Promise} this\n * @api public\n * @deprecated\n */\n\nPromise.prototype.addErrback = Promise.prototype.onReject;\n\n/**\n * Creates a new promise and returns it. If `onFulfill` or `onReject` are passed, they are added as SUCCESS/ERROR callbacks to this promise after the nextTick.\n *\n * Conforms to [promises/A+](https://github.com/promises-aplus/promises-spec) specification.\n *\n * ####Example:\n *\n *     var promise = Meetups.find({ tags: 'javascript' }).select('_id').exec();\n *     promise.then(function (meetups) {\n *       var ids = meetups.map(function (m) {\n *         return m._id;\n *       });\n *       return People.find({ meetups: { $in: ids } }).exec();\n *     }).then(function (people) {\n *       if (people.length < 10000) {\n *         throw new Error('Too few people!!!');\n *       } else {\n *         throw new Error('Still need more people!!!');\n *       }\n *     }).then(null, function (err) {\n *       assert.ok(err instanceof Error);\n *     });\n *\n * @see promises-A+ https://github.com/promises-aplus/promises-spec\n * @see mpromise#then https://github.com/aheckmann/mpromise#then\n * @method then\n * @memberOf Promise\n * @param {Function} onFulFill\n * @param {Function} onReject\n * @return {Promise} newPromise\n * @deprecated\n */\n\n/**\n * Signifies that this promise was the last in a chain of `then()s`: if a handler passed to the call to `then` which produced this promise throws, the exception will go uncaught.\n *\n * ####Example:\n *\n *     var p = new Promise;\n *     p.then(function(){ throw new Error('shucks') });\n *     setTimeout(function () {\n *       p.fulfill();\n *       // error was caught and swallowed by the promise returned from\n *       // p.then(). we either have to always register handlers on\n *       // the returned promises or we can do the following...\n *     }, 10);\n *\n *     // this time we use .end() which prevents catching thrown errors\n *     var p = new Promise;\n *     var p2 = p.then(function(){ throw new Error('shucks') }).end(); // <--\n *     setTimeout(function () {\n *       p.fulfill(); // throws \"shucks\"\n *     }, 10);\n *\n * @api public\n * @see mpromise#end https://github.com/aheckmann/mpromise#end\n * @method end\n * @memberOf Promise\n * @deprecated\n */\n\n/*!\n * expose\n */\n\nmodule.exports = Promise;\n"]}