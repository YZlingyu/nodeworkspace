{"version":3,"sources":["browser.js"],"names":[],"mappings":"AAAA;;AAEA,IAAI,kBAAkB,QAAQ,oBAAR,CAAtB;;AAEA;;;;;;;AAOA,OAAO,cAAP,CAAsB,OAAtB,EAA+B,SAA/B,EAA0C;AACxC,OAAK,YAAW;AACd,WAAO,gBAAgB,GAAhB,EAAP;AACD,GAHuC;AAIxC,OAAK,UAAS,GAAT,EAAc;AACjB,oBAAgB,GAAhB,CAAoB,GAApB;AACD;AANuC,CAA1C;;AASA;;;;;;;AAOA,QAAQ,eAAR,GAA0B,eAA1B;;AAEA;;;;;;;AAOA,QAAQ,KAAR,GAAgB,QAAQ,SAAR,CAAhB;;AAEA;;;;;;;;;;;;;AAaA,QAAQ,MAAR,GAAiB,QAAQ,UAAR,CAAjB;;AAEA;;;;;;;;;;;;;;;;;;;;;;;;AAwBA,QAAQ,KAAR,GAAgB,QAAQ,SAAR,CAAhB;;AAEA;;;;;;AAMA,QAAQ,WAAR,GAAsB,QAAQ,eAAR,CAAtB;;AAEA;;;;;;;;;;;;AAYA,QAAQ,UAAR,GAAqB,QAAQ,iBAAR,CAArB;;AAEA;;;;;;;AAOA,QAAQ,KAAR,GAAgB,QAAQ,YAAR,CAAhB;;AAEA;;;;;;AAMA,QAAQ,QAAR,GAAmB,QAAQ,wBAAR,GAAnB;;AAEA;;;;AAIA,IAAI,OAAO,MAAP,KAAkB,WAAtB,EAAmC;AACjC,SAAO,QAAP,GAAkB,OAAO,OAAzB;AACA,SAAO,MAAP,GAAgB,MAAhB;AACD","file":"browser-compiled.js","sourcesContent":["/* eslint-env browser */\n\nvar PromiseProvider = require('./promise_provider');\n\n/**\n * The Mongoose [Promise](#promise_Promise) constructor.\n *\n * @method Promise\n * @api public\n */\n\nObject.defineProperty(exports, 'Promise', {\n  get: function() {\n    return PromiseProvider.get();\n  },\n  set: function(lib) {\n    PromiseProvider.set(lib);\n  }\n});\n\n/**\n * Storage layer for mongoose promises\n *\n * @method PromiseProvider\n * @api public\n */\n\nexports.PromiseProvider = PromiseProvider;\n\n/**\n * The [MongooseError](#error_MongooseError) constructor.\n *\n * @method Error\n * @api public\n */\n\nexports.Error = require('./error');\n\n/**\n * The Mongoose [Schema](#schema_Schema) constructor\n *\n * ####Example:\n *\n *     var mongoose = require('mongoose');\n *     var Schema = mongoose.Schema;\n *     var CatSchema = new Schema(..);\n *\n * @method Schema\n * @api public\n */\n\nexports.Schema = require('./schema');\n\n/**\n * The various Mongoose Types.\n *\n * ####Example:\n *\n *     var mongoose = require('mongoose');\n *     var array = mongoose.Types.Array;\n *\n * ####Types:\n *\n * - [ObjectId](#types-objectid-js)\n * - [Buffer](#types-buffer-js)\n * - [SubDocument](#types-embedded-js)\n * - [Array](#types-array-js)\n * - [DocumentArray](#types-documentarray-js)\n *\n * Using this exposed access to the `ObjectId` type, we can construct ids on demand.\n *\n *     var ObjectId = mongoose.Types.ObjectId;\n *     var id1 = new ObjectId;\n *\n * @property Types\n * @api public\n */\nexports.Types = require('./types');\n\n/**\n * The Mongoose [VirtualType](#virtualtype_VirtualType) constructor\n *\n * @method VirtualType\n * @api public\n */\nexports.VirtualType = require('./virtualtype');\n\n/**\n * The various Mongoose SchemaTypes.\n *\n * ####Note:\n *\n * _Alias of mongoose.Schema.Types for backwards compatibility._\n *\n * @property SchemaTypes\n * @see Schema.SchemaTypes #schema_Schema.Types\n * @api public\n */\n\nexports.SchemaType = require('./schematype.js');\n\n/**\n * Internal utils\n *\n * @property utils\n * @api private\n */\n\nexports.utils = require('./utils.js');\n\n/**\n * The Mongoose browser [Document](#document-js) constructor.\n *\n * @method Document\n * @api public\n */\nexports.Document = require('./document_provider.js')();\n\n/*!\n * Module exports.\n */\n\nif (typeof window !== 'undefined') {\n  window.mongoose = module.exports;\n  window.Buffer = Buffer;\n}\n"]}