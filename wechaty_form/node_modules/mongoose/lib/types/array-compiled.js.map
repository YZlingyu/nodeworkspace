{"version":3,"sources":["array.js"],"names":[],"mappings":"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","file":"array-compiled.js","sourcesContent":["/*!\n * Module dependencies.\n */\n\nvar EmbeddedDocument = require('./embedded');\nvar Document = require('../document');\nvar ObjectId = require('./objectid');\nvar utils = require('../utils');\nvar isMongooseObject = utils.isMongooseObject;\n\n/**\n * Mongoose Array constructor.\n *\n * ####NOTE:\n *\n * _Values always have to be passed to the constructor to initialize, otherwise `MongooseArray#push` will mark the array as modified._\n *\n * @param {Array} values\n * @param {String} path\n * @param {Document} doc parent document\n * @api private\n * @inherits Array\n * @see http://bit.ly/f6CnZU\n */\n\nfunction MongooseArray(values, path, doc) {\n  var arr = [].concat(values);\n\n  var keysMA = Object.keys(MongooseArray.mixin);\n  var numKeys = keysMA.length;\n  for (var i = 0; i < numKeys; ++i) {\n    arr[keysMA[i]] = MongooseArray.mixin[keysMA[i]];\n  }\n\n  arr._path = path;\n  arr.isMongooseArray = true;\n  arr.validators = [];\n  arr._atomics = {};\n  arr._schema = void 0;\n\n  // Because doc comes from the context of another function, doc === global\n  // can happen if there was a null somewhere up the chain (see #3020)\n  // RB Jun 17, 2015 updated to check for presence of expected paths instead\n  // to make more proof against unusual node environments\n  if (doc && doc instanceof Document) {\n    arr._parent = doc;\n    arr._schema = doc.schema.path(path);\n  }\n\n  return arr;\n}\n\nMongooseArray.mixin = {\n  /*!\n   * ignore\n   */\n  toBSON: function() {\n    return this.toObject({\n      transform: false,\n      virtuals: false,\n      _skipDepopulateTopLevel: true,\n      depopulate: true,\n      flattenDecimals: false\n    });\n  },\n\n  /**\n   * Stores a queue of atomic operations to perform\n   *\n   * @property _atomics\n   * @api private\n   */\n\n  _atomics: undefined,\n\n  /**\n   * Parent owner document\n   *\n   * @property _parent\n   * @api private\n   * @receiver MongooseArray\n   */\n\n  _parent: undefined,\n\n  /**\n   * Casts a member based on this arrays schema.\n   *\n   * @param {any} value\n   * @return value the casted value\n   * @method _cast\n   * @api private\n   * @receiver MongooseArray\n   */\n\n  _cast: function(value) {\n    var populated = false;\n    var Model;\n\n    if (this._parent) {\n      populated = this._parent.populated(this._path, true);\n    }\n\n    if (populated && value !== null && value !== undefined) {\n      // cast to the populated Models schema\n      Model = populated.options.model;\n\n      // only objects are permitted so we can safely assume that\n      // non-objects are to be interpreted as _id\n      if (Buffer.isBuffer(value) ||\n          value instanceof ObjectId || !utils.isObject(value)) {\n        value = {_id: value};\n      }\n\n      // gh-2399\n      // we should cast model only when it's not a discriminator\n      var isDisc = value.schema && value.schema.discriminatorMapping &&\n          value.schema.discriminatorMapping.key !== undefined;\n      if (!isDisc) {\n        value = new Model(value);\n      }\n      return this._schema.caster.applySetters(value, this._parent, true);\n    }\n\n    return this._schema.caster.applySetters(value, this._parent, false);\n  },\n\n  /**\n   * Marks this array as modified.\n   *\n   * If it bubbles up from an embedded document change, then it takes the following arguments (otherwise, takes 0 arguments)\n   *\n   * @param {EmbeddedDocument} embeddedDoc the embedded doc that invoked this method on the Array\n   * @param {String} embeddedPath the path which changed in the embeddedDoc\n   * @method _markModified\n   * @api private\n   * @receiver MongooseArray\n   */\n\n  _markModified: function(elem, embeddedPath) {\n    var parent = this._parent,\n        dirtyPath;\n\n    if (parent) {\n      dirtyPath = this._path;\n\n      if (arguments.length) {\n        if (embeddedPath != null) {\n          // an embedded doc bubbled up the change\n          dirtyPath = dirtyPath + '.' + this.indexOf(elem) + '.' + embeddedPath;\n        } else {\n          // directly set an index\n          dirtyPath = dirtyPath + '.' + elem;\n        }\n      }\n\n      parent.markModified(dirtyPath);\n    }\n\n    return this;\n  },\n\n  /**\n   * Register an atomic operation with the parent.\n   *\n   * @param {Array} op operation\n   * @param {any} val\n   * @method _registerAtomic\n   * @api private\n   * @receiver MongooseArray\n   */\n\n  _registerAtomic: function(op, val) {\n    if (op === '$set') {\n      // $set takes precedence over all other ops.\n      // mark entire array modified.\n      this._atomics = {$set: val};\n      return this;\n    }\n\n    var atomics = this._atomics;\n\n    // reset pop/shift after save\n    if (op === '$pop' && !('$pop' in atomics)) {\n      var _this = this;\n      this._parent.once('save', function() {\n        _this._popped = _this._shifted = null;\n      });\n    }\n\n    // check for impossible $atomic combos (Mongo denies more than one\n    // $atomic op on a single path\n    if (this._atomics.$set ||\n        Object.keys(atomics).length && !(op in atomics)) {\n      // a different op was previously registered.\n      // save the entire thing.\n      this._atomics = {$set: this};\n      return this;\n    }\n\n    var selector;\n\n    if (op === '$pullAll' || op === '$pushAll' || op === '$addToSet') {\n      atomics[op] || (atomics[op] = []);\n      atomics[op] = atomics[op].concat(val);\n    } else if (op === '$pullDocs') {\n      var pullOp = atomics['$pull'] || (atomics['$pull'] = {});\n      if (val[0] instanceof EmbeddedDocument) {\n        selector = pullOp['$or'] || (pullOp['$or'] = []);\n        Array.prototype.push.apply(selector, val.map(function(v) {\n          return v.toObject({transform: false, virtuals: false});\n        }));\n      } else {\n        selector = pullOp['_id'] || (pullOp['_id'] = {$in: []});\n        selector['$in'] = selector['$in'].concat(val);\n      }\n    } else {\n      atomics[op] = val;\n    }\n\n    return this;\n  },\n\n  /**\n   * Depopulates stored atomic operation values as necessary for direct insertion to MongoDB.\n   *\n   * If no atomics exist, we return all array values after conversion.\n   *\n   * @return {Array}\n   * @method $__getAtomics\n   * @memberOf MongooseArray\n   * @api private\n   */\n\n  $__getAtomics: function() {\n    var ret = [];\n    var keys = Object.keys(this._atomics);\n    var i = keys.length;\n\n    if (i === 0) {\n      ret[0] = ['$set', this.toObject({depopulate: 1, transform: false, _isNested: true, virtuals: false})];\n      return ret;\n    }\n\n    while (i--) {\n      var op = keys[i];\n      var val = this._atomics[op];\n\n      // the atomic values which are arrays are not MongooseArrays. we\n      // need to convert their elements as if they were MongooseArrays\n      // to handle populated arrays versus DocumentArrays properly.\n      if (isMongooseObject(val)) {\n        val = val.toObject({depopulate: 1, transform: false, _isNested: true, virtuals: false});\n      } else if (Array.isArray(val)) {\n        val = this.toObject.call(val, {depopulate: 1, transform: false, _isNested: true});\n      } else if (val.valueOf) {\n        val = val.valueOf();\n      }\n\n      if (op === '$addToSet') {\n        val = {$each: val};\n      }\n\n      ret.push([op, val]);\n    }\n\n    return ret;\n  },\n\n  /**\n   * Returns the number of pending atomic operations to send to the db for this array.\n   *\n   * @api private\n   * @return {Number}\n   * @method hasAtomics\n   * @receiver MongooseArray\n   */\n\n  hasAtomics: function hasAtomics() {\n    if (!(this._atomics && this._atomics.constructor.name === 'Object')) {\n      return 0;\n    }\n\n    return Object.keys(this._atomics).length;\n  },\n\n  /**\n   * Internal helper for .map()\n   *\n   * @api private\n   * @return {Number}\n   * @method _mapCast\n   * @receiver MongooseArray\n   */\n  _mapCast: function(val, index) {\n    return this._cast(val, this.length + index);\n  },\n\n  /**\n   * Wraps [`Array#push`](https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Array/push) with proper change tracking.\n   *\n   * @param {Object} [args...]\n   * @api public\n   * @method push\n   * @receiver MongooseArray\n   */\n\n  push: function() {\n    var values = [].map.call(arguments, this._mapCast, this);\n    values = this._schema.applySetters(values, this._parent, undefined,\n        undefined, {skipDocumentArrayCast: true});\n    var ret = [].push.apply(this, values);\n\n    // $pushAll might be fibbed (could be $push). But it makes it easier to\n    // handle what could have been $push, $pushAll combos\n    this._registerAtomic('$pushAll', values);\n    this._markModified();\n    return ret;\n  },\n\n  /**\n   * Pushes items to the array non-atomically.\n   *\n   * ####NOTE:\n   *\n   * _marks the entire array as modified, which if saved, will store it as a `$set` operation, potentially overwritting any changes that happen between when you retrieved the object and when you save it._\n   *\n   * @param {any} [args...]\n   * @api public\n   * @method nonAtomicPush\n   * @receiver MongooseArray\n   */\n\n  nonAtomicPush: function() {\n    var values = [].map.call(arguments, this._mapCast, this);\n    var ret = [].push.apply(this, values);\n    this._registerAtomic('$set', this);\n    this._markModified();\n    return ret;\n  },\n\n  /**\n   * Pops the array atomically at most one time per document `save()`.\n   *\n   * #### NOTE:\n   *\n   * _Calling this mulitple times on an array before saving sends the same command as calling it once._\n   * _This update is implemented using the MongoDB [$pop](http://www.mongodb.org/display/DOCS/Updating/#Updating-%24pop) method which enforces this restriction._\n   *\n   *      doc.array = [1,2,3];\n   *\n   *      var popped = doc.array.$pop();\n   *      console.log(popped); // 3\n   *      console.log(doc.array); // [1,2]\n   *\n   *      // no affect\n   *      popped = doc.array.$pop();\n   *      console.log(doc.array); // [1,2]\n   *\n   *      doc.save(function (err) {\n   *        if (err) return handleError(err);\n   *\n   *        // we saved, now $pop works again\n   *        popped = doc.array.$pop();\n   *        console.log(popped); // 2\n   *        console.log(doc.array); // [1]\n   *      })\n   *\n   * @api public\n   * @method $pop\n   * @memberOf MongooseArray\n   * @see mongodb http://www.mongodb.org/display/DOCS/Updating/#Updating-%24pop\n   * @method $pop\n   * @receiver MongooseArray\n   */\n\n  $pop: function() {\n    this._registerAtomic('$pop', 1);\n    this._markModified();\n\n    // only allow popping once\n    if (this._popped) {\n      return;\n    }\n    this._popped = true;\n\n    return [].pop.call(this);\n  },\n\n  /**\n   * Wraps [`Array#pop`](https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Array/pop) with proper change tracking.\n   *\n   * ####Note:\n   *\n   * _marks the entire array as modified which will pass the entire thing to $set potentially overwritting any changes that happen between when you retrieved the object and when you save it._\n   *\n   * @see MongooseArray#$pop #types_array_MongooseArray-%24pop\n   * @api public\n   * @method pop\n   * @receiver MongooseArray\n   */\n\n  pop: function() {\n    var ret = [].pop.call(this);\n    this._registerAtomic('$set', this);\n    this._markModified();\n    return ret;\n  },\n\n  /**\n   * Atomically shifts the array at most one time per document `save()`.\n   *\n   * ####NOTE:\n   *\n   * _Calling this mulitple times on an array before saving sends the same command as calling it once._\n   * _This update is implemented using the MongoDB [$pop](http://www.mongodb.org/display/DOCS/Updating/#Updating-%24pop) method which enforces this restriction._\n   *\n   *      doc.array = [1,2,3];\n   *\n   *      var shifted = doc.array.$shift();\n   *      console.log(shifted); // 1\n   *      console.log(doc.array); // [2,3]\n   *\n   *      // no affect\n   *      shifted = doc.array.$shift();\n   *      console.log(doc.array); // [2,3]\n   *\n   *      doc.save(function (err) {\n   *        if (err) return handleError(err);\n   *\n   *        // we saved, now $shift works again\n   *        shifted = doc.array.$shift();\n   *        console.log(shifted ); // 2\n   *        console.log(doc.array); // [3]\n   *      })\n   *\n   * @api public\n   * @memberOf MongooseArray\n   * @method $shift\n   * @see mongodb http://www.mongodb.org/display/DOCS/Updating/#Updating-%24pop\n   */\n\n  $shift: function $shift() {\n    this._registerAtomic('$pop', -1);\n    this._markModified();\n\n    // only allow shifting once\n    if (this._shifted) {\n      return;\n    }\n    this._shifted = true;\n\n    return [].shift.call(this);\n  },\n\n  /**\n   * Wraps [`Array#shift`](https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Array/unshift) with proper change tracking.\n   *\n   * ####Example:\n   *\n   *     doc.array = [2,3];\n   *     var res = doc.array.shift();\n   *     console.log(res) // 2\n   *     console.log(doc.array) // [3]\n   *\n   * ####Note:\n   *\n   * _marks the entire array as modified, which if saved, will store it as a `$set` operation, potentially overwritting any changes that happen between when you retrieved the object and when you save it._\n   *\n   * @api public\n   * @method shift\n   * @receiver MongooseArray\n   */\n\n  shift: function() {\n    var ret = [].shift.call(this);\n    this._registerAtomic('$set', this);\n    this._markModified();\n    return ret;\n  },\n\n  /**\n   * Pulls items from the array atomically. Equality is determined by casting\n   * the provided value to an embedded document and comparing using\n   * [the `Document.equals()` function.](./api.html#document_Document-equals)\n   *\n   * ####Examples:\n   *\n   *     doc.array.pull(ObjectId)\n   *     doc.array.pull({ _id: 'someId' })\n   *     doc.array.pull(36)\n   *     doc.array.pull('tag 1', 'tag 2')\n   *\n   * To remove a document from a subdocument array we may pass an object with a matching `_id`.\n   *\n   *     doc.subdocs.push({ _id: 4815162342 })\n   *     doc.subdocs.pull({ _id: 4815162342 }) // removed\n   *\n   * Or we may passing the _id directly and let mongoose take care of it.\n   *\n   *     doc.subdocs.push({ _id: 4815162342 })\n   *     doc.subdocs.pull(4815162342); // works\n   *\n   * The first pull call will result in a atomic operation on the database, if pull is called repeatedly without saving the document, a $set operation is used on the complete array instead, overwriting possible changes that happened on the database in the meantime.\n   *\n   * @param {any} [args...]\n   * @see mongodb http://www.mongodb.org/display/DOCS/Updating/#Updating-%24pull\n   * @api public\n   * @method pull\n   * @receiver MongooseArray\n   */\n\n  pull: function() {\n    var values = [].map.call(arguments, this._cast, this),\n        cur = this._parent.get(this._path),\n        i = cur.length,\n        mem;\n\n    while (i--) {\n      mem = cur[i];\n      if (mem instanceof Document) {\n        var some = values.some(function(v) {\n          return mem.equals(v);\n        });\n        if (some) {\n          [].splice.call(cur, i, 1);\n        }\n      } else if (~cur.indexOf.call(values, mem)) {\n        [].splice.call(cur, i, 1);\n      }\n    }\n\n    if (values[0] instanceof EmbeddedDocument) {\n      this._registerAtomic('$pullDocs', values.map(function(v) {\n        return v._id || v;\n      }));\n    } else {\n      this._registerAtomic('$pullAll', values);\n    }\n\n    this._markModified();\n    return this;\n  },\n\n  /**\n   * Wraps [`Array#splice`](https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Array/splice) with proper change tracking and casting.\n   *\n   * ####Note:\n   *\n   * _marks the entire array as modified, which if saved, will store it as a `$set` operation, potentially overwritting any changes that happen between when you retrieved the object and when you save it._\n   *\n   * @api public\n   * @method splice\n   * @receiver MongooseArray\n   */\n\n  splice: function splice() {\n    var ret, vals, i;\n\n    if (arguments.length) {\n      vals = [];\n      for (i = 0; i < arguments.length; ++i) {\n        vals[i] = i < 2\n            ? arguments[i]\n            : this._cast(arguments[i], arguments[0] + (i - 2));\n      }\n      ret = [].splice.apply(this, vals);\n      this._registerAtomic('$set', this);\n      this._markModified();\n    }\n\n    return ret;\n  },\n\n  /**\n   * Wraps [`Array#unshift`](https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Array/unshift) with proper change tracking.\n   *\n   * ####Note:\n   *\n   * _marks the entire array as modified, which if saved, will store it as a `$set` operation, potentially overwritting any changes that happen between when you retrieved the object and when you save it._\n   *\n   * @api public\n   * @method unshift\n   * @receiver MongooseArray\n   */\n\n  unshift: function() {\n    var values = [].map.call(arguments, this._cast, this);\n    values = this._schema.applySetters(values, this._parent);\n    [].unshift.apply(this, values);\n    this._registerAtomic('$set', this);\n    this._markModified();\n    return this.length;\n  },\n\n  /**\n   * Wraps [`Array#sort`](https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Array/sort) with proper change tracking.\n   *\n   * ####NOTE:\n   *\n   * _marks the entire array as modified, which if saved, will store it as a `$set` operation, potentially overwritting any changes that happen between when you retrieved the object and when you save it._\n   *\n   * @api public\n   * @method sort\n   * @receiver MongooseArray\n   */\n\n  sort: function() {\n    var ret = [].sort.apply(this, arguments);\n    this._registerAtomic('$set', this);\n    this._markModified();\n    return ret;\n  },\n\n  /**\n   * Adds values to the array if not already present.\n   *\n   * ####Example:\n   *\n   *     console.log(doc.array) // [2,3,4]\n   *     var added = doc.array.addToSet(4,5);\n   *     console.log(doc.array) // [2,3,4,5]\n   *     console.log(added)     // [5]\n   *\n   * @param {any} [args...]\n   * @return {Array} the values that were added\n   * @receiver MongooseArray\n   * @api public\n   * @method addToSet\n   */\n\n  addToSet: function addToSet() {\n    var values = [].map.call(arguments, this._mapCast, this);\n    values = this._schema.applySetters(values, this._parent);\n    var added = [];\n    var type = '';\n    if (values[0] instanceof EmbeddedDocument) {\n      type = 'doc';\n    } else if (values[0] instanceof Date) {\n      type = 'date';\n    }\n\n    values.forEach(function(v) {\n      var found;\n      switch (type) {\n        case 'doc':\n          found = this.some(function(doc) {\n            return doc.equals(v);\n          });\n          break;\n        case 'date':\n          var val = +v;\n          found = this.some(function(d) {\n            return +d === val;\n          });\n          break;\n        default:\n          found = ~this.indexOf(v);\n      }\n\n      if (!found) {\n        [].push.call(this, v);\n        this._registerAtomic('$addToSet', v);\n        this._markModified();\n        [].push.call(added, v);\n      }\n    }, this);\n\n    return added;\n  },\n\n  /**\n   * Sets the casted `val` at index `i` and marks the array modified.\n   *\n   * ####Example:\n   *\n   *     // given documents based on the following\n   *     var Doc = mongoose.model('Doc', new Schema({ array: [Number] }));\n   *\n   *     var doc = new Doc({ array: [2,3,4] })\n   *\n   *     console.log(doc.array) // [2,3,4]\n   *\n   *     doc.array.set(1,\"5\");\n   *     console.log(doc.array); // [2,5,4] // properly cast to number\n   *     doc.save() // the change is saved\n   *\n   *     // VS not using array#set\n   *     doc.array[1] = \"5\";\n   *     console.log(doc.array); // [2,\"5\",4] // no casting\n   *     doc.save() // change is not saved\n   *\n   * @return {Array} this\n   * @api public\n   * @method set\n   * @receiver MongooseArray\n   */\n\n  set: function set(i, val) {\n    var value = this._cast(val, i);\n    this[i] = value;\n    this._markModified(i);\n    return this;\n  },\n\n  /**\n   * Returns a native js Array.\n   *\n   * @param {Object} options\n   * @return {Array}\n   * @api public\n   * @method toObject\n   * @receiver MongooseArray\n   */\n\n  toObject: function(options) {\n    if (options && options.depopulate) {\n      options._isNested = true;\n      return this.map(function(doc) {\n        return doc instanceof Document\n            ? doc.toObject(options)\n            : doc;\n      });\n    }\n\n    return this.slice();\n  },\n\n  /**\n   * Helper for console.log\n   *\n   * @api public\n   * @method inspect\n   * @receiver MongooseArray\n   */\n\n  inspect: function() {\n    return JSON.stringify(this);\n  },\n\n  /**\n   * Return the index of `obj` or `-1` if not found.\n   *\n   * @param {Object} obj the item to look for\n   * @return {Number}\n   * @api public\n   * @method indexOf\n   * @receiver MongooseArray\n   */\n\n  indexOf: function indexOf(obj) {\n    if (obj instanceof ObjectId) {\n      obj = obj.toString();\n    }\n    for (var i = 0, len = this.length; i < len; ++i) {\n      if (obj == this[i]) {\n        return i;\n      }\n    }\n    return -1;\n  }\n};\n\n/**\n * Alias of [pull](#types_array_MongooseArray-pull)\n *\n * @see MongooseArray#pull #types_array_MongooseArray-pull\n * @see mongodb http://www.mongodb.org/display/DOCS/Updating/#Updating-%24pull\n * @api public\n * @memberOf MongooseArray\n * @method remove\n */\n\nMongooseArray.mixin.remove = MongooseArray.mixin.pull;\n\n/*!\n * Module exports.\n */\n\nmodule.exports = exports = MongooseArray;\n"]}