{"version":3,"sources":["connection.js"],"names":[],"mappings":"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","file":"connection-compiled.js","sourcesContent":["/*!\n * Module dependencies.\n */\n\nvar utils = require('./utils');\nvar EventEmitter = require('events').EventEmitter;\nvar driver = global.MONGOOSE_DRIVER_PATH || './drivers/node-mongodb-native';\nvar Schema = require('./schema');\nvar Collection = require(driver + '/collection');\nvar STATES = require('./connectionstate');\nvar MongooseError = require('./error');\nvar muri = require('muri');\nvar PromiseProvider = require('./promise_provider');\n\n/*!\n * Protocol prefix regexp.\n *\n * @api private\n */\n\nvar rgxProtocol = /^(?:.)+:\\/\\//;\n\n/*!\n * A list of authentication mechanisms that don't require a password for authentication.\n * This is used by the authMechanismDoesNotRequirePassword method.\n *\n * @api private\n */\nvar authMechanismsWhichDontRequirePassword = [\n  'MONGODB-X509'\n];\n\n/**\n * Connection constructor\n *\n * For practical reasons, a Connection equals a Db.\n *\n * @param {Mongoose} base a mongoose instance\n * @inherits NodeJS EventEmitter http://nodejs.org/api/events.html#events_class_events_eventemitter\n * @event `connecting`: Emitted when `connection.{open,openSet}()` is executed on this connection.\n * @event `connected`: Emitted when this connection successfully connects to the db. May be emitted _multiple_ times in `reconnected` scenarios.\n * @event `open`: Emitted after we `connected` and `onOpen` is executed on all of this connections models.\n * @event `disconnecting`: Emitted when `connection.close()` was executed.\n * @event `disconnected`: Emitted after getting disconnected from the db.\n * @event `close`: Emitted after we `disconnected` and `onClose` executed on all of this connections models.\n * @event `reconnected`: Emitted after we `connected` and subsequently `disconnected`, followed by successfully another successfull connection.\n * @event `error`: Emitted when an error occurs on this connection.\n * @event `fullsetup`: Emitted in a replica-set scenario, when primary and at least one seconaries specified in the connection string are connected.\n * @event `all`: Emitted in a replica-set scenario, when all nodes specified in the connection string are connected.\n * @api public\n */\n\nfunction Connection(base) {\n  this.base = base;\n  this.collections = {};\n  this.models = {};\n  this.config = {autoIndex: true};\n  this.replica = false;\n  this.hosts = null;\n  this.host = null;\n  this.port = null;\n  this.user = null;\n  this.pass = null;\n  this.name = null;\n  this.options = null;\n  this.otherDbs = [];\n  this._readyState = STATES.disconnected;\n  this._closeCalled = false;\n  this._hasOpened = false;\n}\n\n/*!\n * Inherit from EventEmitter\n */\n\nConnection.prototype.__proto__ = EventEmitter.prototype;\n\n/**\n * Connection ready state\n *\n * - 0 = disconnected\n * - 1 = connected\n * - 2 = connecting\n * - 3 = disconnecting\n *\n * Each state change emits its associated event name.\n *\n * ####Example\n *\n *     conn.on('connected', callback);\n *     conn.on('disconnected', callback);\n *\n * @property readyState\n * @api public\n */\n\nObject.defineProperty(Connection.prototype, 'readyState', {\n  get: function() {\n    return this._readyState;\n  },\n  set: function(val) {\n    if (!(val in STATES)) {\n      throw new Error('Invalid connection state: ' + val);\n    }\n\n    if (this._readyState !== val) {\n      this._readyState = val;\n      // loop over the otherDbs on this connection and change their state\n      for (var i = 0; i < this.otherDbs.length; i++) {\n        this.otherDbs[i].readyState = val;\n      }\n\n      if (STATES.connected === val) {\n        this._hasOpened = true;\n      }\n\n      this.emit(STATES[val]);\n    }\n  }\n});\n\n/**\n * A hash of the collections associated with this connection\n *\n * @property collections\n */\n\nConnection.prototype.collections;\n\n/**\n * The mongodb.Db instance, set when the connection is opened\n *\n * @property db\n */\n\nConnection.prototype.db;\n\n/**\n * A hash of the global options that are associated with this connection\n *\n * @property config\n */\n\nConnection.prototype.config;\n\n/*!\n * ignore\n */\n\nConnection.prototype._handleOpenArgs = function(host, database, port, options, callback) {\n  var err;\n\n  var parsed;\n\n  if (typeof database === 'string') {\n    switch (arguments.length) {\n      case 2:\n        port = 27017;\n        break;\n      case 3:\n        switch (typeof port) {\n          case 'function':\n            callback = port;\n            port = 27017;\n            break;\n          case 'object':\n            options = port;\n            port = 27017;\n            break;\n        }\n        break;\n      case 4:\n        if (typeof options === 'function') {\n          callback = options;\n          options = {};\n        }\n    }\n  } else {\n    switch (typeof database) {\n      case 'function':\n        callback = database;\n        database = undefined;\n        break;\n      case 'object':\n        options = database;\n        database = undefined;\n        callback = port;\n        break;\n    }\n\n    if (!rgxProtocol.test(host)) {\n      host = 'mongodb://' + host;\n    }\n\n    try {\n      parsed = muri(host);\n    } catch (error) {\n      this.error(error, callback);\n      throw error;\n    }\n\n    database = parsed.db;\n    host = parsed.hosts[0].host || parsed.hosts[0].ipc;\n    port = parsed.hosts[0].port || 27017;\n  }\n\n  this.options = this.parseOptions(options, parsed && parsed.options);\n\n  // make sure we can open\n  if (STATES.disconnected !== this.readyState) {\n    err = new Error('Trying to open unclosed connection.');\n    err.state = this.readyState;\n    this.error(err, callback);\n    throw err;\n  }\n\n  if (!host) {\n    err = new Error('Missing hostname.');\n    this.error(err, callback);\n    throw err;\n  }\n\n  if (!database) {\n    err = new Error('Missing database name.');\n    this.error(err, callback);\n    throw err;\n  }\n\n  // authentication\n  if (this.optionsProvideAuthenticationData(options)) {\n    this.user = options.user;\n    this.pass = options.pass;\n  } else if (parsed && parsed.auth) {\n    this.user = parsed.auth.user;\n    this.pass = parsed.auth.pass;\n\n    // Check hostname for user/pass\n  } else if (/@/.test(host) && /:/.test(host.split('@')[0])) {\n    host = host.split('@');\n    if (host.length > 2) {\n      err = new Error('Username and password must be URI encoded if they ' +\n        'contain \"@\", see http://bit.ly/2nRYRyq');\n      throw err;\n    }\n    var auth = host.shift().split(':');\n    if (auth.length > 2) {\n      err = new Error('Username and password must be URI encoded if they ' +\n        'contain \":\", see http://bit.ly/2nRYRyq');\n      throw err;\n    }\n    host = host.pop();\n    this.user = auth[0];\n    this.pass = auth[1];\n  } else {\n    this.user = this.pass = undefined;\n  }\n\n  // global configuration options\n  if (options && options.config) {\n    this.config.autoIndex = options.config.autoIndex !== false;\n  }\n\n  this.name = database;\n  this.host = host;\n  this.port = port;\n\n  return callback;\n};\n\n/**\n * Opens the connection to MongoDB.\n *\n * `options` is a hash with the following possible properties:\n *\n *     config  - passed to the connection config instance\n *     db      - passed to the connection db instance\n *     server  - passed to the connection server instance(s)\n *     replset - passed to the connection ReplSet instance\n *     user    - username for authentication\n *     pass    - password for authentication\n *     auth    - options for authentication (see http://mongodb.github.com/node-mongodb-native/api-generated/db.html#authenticate)\n *\n * ####Notes:\n *\n * Mongoose forces the db option `forceServerObjectId` false and cannot be overridden.\n * Mongoose defaults the server `auto_reconnect` options to true which can be overridden.\n * See the node-mongodb-native driver instance for options that it understands.\n *\n * _Options passed take precedence over options included in connection strings._\n *\n * @param {String} connection_string mongodb://uri or the host to which you are connecting\n * @param {String} [database] database name\n * @param {Number} [port] database port\n * @param {Object} [options] options\n * @param {Function} [callback]\n * @see node-mongodb-native https://github.com/mongodb/node-mongodb-native\n * @see http://mongodb.github.com/node-mongodb-native/api-generated/db.html#authenticate\n * @api public\n */\n\nConnection.prototype.open = function() {\n  var Promise = PromiseProvider.get();\n  var callback;\n\n  try {\n    callback = this._handleOpenArgs.apply(this, arguments);\n  } catch (error) {\n    return new Promise.ES6(function(resolve, reject) {\n      reject(error);\n    });\n  }\n\n  var _this = this;\n  var promise = new Promise.ES6(function(resolve, reject) {\n    _this._open(true, function(error) {\n      callback && callback(error);\n      if (error) {\n        // Error can be on same tick re: christkv/mongodb-core#157\n        setImmediate(function() {\n          reject(error);\n          if (!callback && !promise.$hasHandler) {\n            _this.emit('error', error);\n          }\n        });\n        return;\n      }\n      resolve();\n    });\n  });\n\n  // Monkey-patch `.then()` so if the promise is handled, we don't emit an\n  // `error` event.\n  var _then = promise.then;\n  promise.then = function(resolve, reject) {\n    promise.$hasHandler = true;\n    return _then.call(promise, resolve, reject);\n  };\n\n  return promise;\n};\n\n/*!\n * ignore\n */\n\nConnection.prototype._openWithoutPromise = function() {\n  var callback;\n\n  try {\n    callback = this._handleOpenArgs.apply(this, arguments);\n  } catch (error) {\n    // No need to do anything\n  }\n\n  var _this = this;\n  this._open(true, function(error) {\n    callback && callback(error);\n    if (error && !callback) {\n      // Error can be on same tick re: christkv/mongodb-core#157\n      setImmediate(function() {\n        _this.emit('error', error);\n      });\n      return;\n    }\n  });\n};\n\n/**\n * Helper for `dropDatabase()`.\n *\n * @param {Function} callback\n * @return {Promise}\n * @api public\n */\n\nConnection.prototype.dropDatabase = function(callback) {\n  var Promise = PromiseProvider.get();\n  var _this = this;\n  var promise = new Promise.ES6(function(resolve, reject) {\n    if (_this.readyState !== STATES.connected) {\n      _this.on('open', function() {\n        _this.db.dropDatabase(function(error) {\n          if (error) {\n            reject(error);\n          } else {\n            resolve();\n          }\n        });\n      });\n    } else {\n      _this.db.dropDatabase(function(error) {\n        if (error) {\n          reject(error);\n        } else {\n          resolve();\n        }\n      });\n    }\n  });\n  if (callback) {\n    promise.then(function() { callback(); }, callback);\n  }\n  return promise;\n};\n\n/*!\n * ignore\n */\n\nConnection.prototype._handleOpenSetArgs = function(uris, database, options, callback) {\n  if (!rgxProtocol.test(uris)) {\n    uris = 'mongodb://' + uris;\n  }\n\n  switch (arguments.length) {\n    case 3:\n      switch (typeof database) {\n        case 'string':\n          this.name = database;\n          break;\n        case 'object':\n          callback = options;\n          options = database;\n          database = null;\n          break;\n      }\n\n      if (typeof options === 'function') {\n        callback = options;\n        options = {};\n      }\n      break;\n    case 2:\n      switch (typeof database) {\n        case 'string':\n          this.name = database;\n          break;\n        case 'function':\n          callback = database;\n          database = null;\n          break;\n        case 'object':\n          options = database;\n          database = null;\n          break;\n      }\n  }\n\n  if (typeof database === 'string') {\n    this.name = database;\n  }\n\n  var parsed;\n  try {\n    parsed = muri(uris);\n  } catch (err) {\n    this.error(err, callback);\n    throw err;\n  }\n\n  if (!this.name) {\n    this.name = parsed.db;\n  }\n\n  this.hosts = parsed.hosts;\n  this.options = this.parseOptions(options, parsed && parsed.options);\n  this.replica = true;\n\n  if (!this.name) {\n    var err = new Error('No database name provided for replica set');\n    this.error(err, callback);\n    throw err;\n  }\n\n  // authentication\n  if (this.optionsProvideAuthenticationData(options)) {\n    this.user = options.user;\n    this.pass = options.pass;\n  } else if (parsed && parsed.auth) {\n    this.user = parsed.auth.user;\n    this.pass = parsed.auth.pass;\n  } else {\n    this.user = this.pass = undefined;\n  }\n\n  // global configuration options\n  if (options && options.config) {\n    this.config.autoIndex = options.config.autoIndex !== false;\n  }\n};\n\n/*!\n * ignore\n */\n\nConnection.prototype._openSetWithoutPromise = function(uris, database, options, callback) {\n  try {\n    callback = this._handleOpenSetArgs.apply(this, arguments);\n  } catch (err) {\n    // Nothing to do, `_handleOpenSetArgs` calls callback if error occurred\n    return;\n  }\n\n  var _this = this;\n  var emitted = false;\n  this._open(true, function(error) {\n    callback && callback(error);\n    if (error) {\n      if (!callback && !emitted) {\n        emitted = true;\n        _this.emit('error', error);\n      }\n      return;\n    }\n  });\n};\n\n/**\n * Opens the connection to a replica set.\n *\n * ####Example:\n *\n *     var db = mongoose.createConnection();\n *     db.openSet(\"mongodb://user:pwd@localhost:27020,localhost:27021,localhost:27012/mydb\");\n *\n * The database name and/or auth need only be included in one URI.\n * The `options` is a hash which is passed to the internal driver connection object.\n *\n * Valid `options`\n *\n *     db      - passed to the connection db instance\n *     server  - passed to the connection server instance(s)\n *     replset - passed to the connection ReplSetServer instance\n *     user    - username for authentication\n *     pass    - password for authentication\n *     auth    - options for authentication (see http://mongodb.github.com/node-mongodb-native/api-generated/db.html#authenticate)\n *     mongos  - Boolean - if true, enables High Availability support for mongos\n *\n * _Options passed take precedence over options included in connection strings._\n *\n * ####Notes:\n *\n * _If connecting to multiple mongos servers, set the `mongos` option to true._\n *\n *     conn.open('mongodb://mongosA:27501,mongosB:27501', { mongos: true }, cb);\n *\n * Mongoose forces the db option `forceServerObjectId` false and cannot be overridden.\n * Mongoose defaults the server `auto_reconnect` options to true which can be overridden.\n * See the node-mongodb-native driver instance for options that it understands.\n *\n * _Options passed take precedence over options included in connection strings._\n *\n * @param {String} uris MongoDB connection string\n * @param {String} [database] database name if not included in `uris`\n * @param {Object} [options] passed to the internal driver\n * @param {Function} [callback]\n * @see node-mongodb-native https://github.com/mongodb/node-mongodb-native\n * @see http://mongodb.github.com/node-mongodb-native/api-generated/db.html#authenticate\n * @api public\n */\n\nConnection.prototype.openSet = function(uris, database, options, callback) {\n  var Promise = PromiseProvider.get();\n\n  try {\n    callback = this._handleOpenSetArgs.apply(this, arguments);\n  } catch (err) {\n    return new Promise.ES6(function(resolve, reject) {\n      reject(err);\n    });\n  }\n\n  var _this = this;\n  var emitted = false;\n  var promise = new Promise.ES6(function(resolve, reject) {\n    _this._open(true, function(error) {\n      callback && callback(error);\n      if (error) {\n        reject(error);\n        if (!callback && !promise.$hasHandler && !emitted) {\n          emitted = true;\n          _this.emit('error', error);\n        }\n        return;\n      }\n      resolve();\n    });\n  });\n\n  // Monkey-patch `.then()` so if the promise is handled, we don't emit an\n  // `error` event.\n  var _then = promise.then;\n  promise.then = function(resolve, reject) {\n    promise.$hasHandler = true;\n    return _then.call(promise, resolve, reject);\n  };\n\n  return promise;\n};\n\n/**\n * error\n *\n * Graceful error handling, passes error to callback\n * if available, else emits error on the connection.\n *\n * @param {Error} err\n * @param {Function} callback optional\n * @api private\n */\n\nConnection.prototype.error = function(err, callback) {\n  if (callback) {\n    return callback(err);\n  }\n  this.emit('error', err);\n};\n\n/**\n * Handles opening the connection with the appropriate method based on connection type.\n *\n * @param {Function} callback\n * @api private\n */\n\nConnection.prototype._open = function(emit, callback) {\n  this.readyState = STATES.connecting;\n  this._closeCalled = false;\n\n  var _this = this;\n\n  var method = this.replica\n      ? 'doOpenSet'\n      : 'doOpen';\n\n  // open connection\n  this[method](function(err) {\n    if (err) {\n      _this.readyState = STATES.disconnected;\n      if (_this._hasOpened) {\n        if (callback) {\n          callback(err);\n        }\n      } else {\n        _this.error(err, emit && callback);\n      }\n      return;\n    }\n\n    _this.onOpen(callback);\n  });\n};\n\n/**\n * Called when the connection is opened\n *\n * @api private\n */\n\nConnection.prototype.onOpen = function(callback) {\n  var _this = this;\n\n  function open(err, isAuth) {\n    if (err) {\n      _this.readyState = isAuth ? STATES.unauthorized : STATES.disconnected;\n      _this.error(err, callback);\n      return;\n    }\n\n    _this.readyState = STATES.connected;\n\n    // avoid having the collection subscribe to our event emitter\n    // to prevent 0.3 warning\n    for (var i in _this.collections) {\n      if (utils.object.hasOwnProperty(_this.collections, i)) {\n        _this.collections[i].onOpen();\n      }\n    }\n\n    callback && callback();\n    _this.emit('open');\n  }\n\n  // re-authenticate if we're not already connected #3871\n  if (this._readyState !== STATES.connected && this.shouldAuthenticate()) {\n    _this.db.authenticate(_this.user, _this.pass, _this.options.auth, function(err) {\n      open(err, true);\n    });\n  } else {\n    open();\n  }\n};\n\n/**\n * Closes the connection\n *\n * @param {Function} [callback] optional\n * @return {Connection} self\n * @api public\n */\n\nConnection.prototype.close = function(callback) {\n  var _this = this;\n  var Promise = PromiseProvider.get();\n  return new Promise.ES6(function(resolve, reject) {\n    _this._close(function(error) {\n      callback && callback(error);\n      if (error) {\n        reject(error);\n        return;\n      }\n      resolve();\n    });\n  });\n};\n\n/**\n * Handles closing the connection\n *\n * @param {Function} callback\n * @api private\n */\nConnection.prototype._close = function(callback) {\n  var _this = this;\n  this._closeCalled = true;\n\n  switch (this.readyState) {\n    case 0: // disconnected\n      callback && callback();\n      break;\n\n    case 1: // connected\n    case 4: // unauthorized\n      this.readyState = STATES.disconnecting;\n      this.doClose(function(err) {\n        if (err) {\n          _this.error(err, callback);\n        } else {\n          _this.onClose();\n          callback && callback();\n        }\n      });\n      break;\n\n    case 2: // connecting\n      this.once('open', function() {\n        _this.close(callback);\n      });\n      break;\n\n    case 3: // disconnecting\n      if (!callback) {\n        break;\n      }\n      this.once('close', function() {\n        callback();\n      });\n      break;\n  }\n\n  return this;\n};\n\n/**\n * Called when the connection closes\n *\n * @api private\n */\n\nConnection.prototype.onClose = function() {\n  this.readyState = STATES.disconnected;\n\n  // avoid having the collection subscribe to our event emitter\n  // to prevent 0.3 warning\n  for (var i in this.collections) {\n    if (utils.object.hasOwnProperty(this.collections, i)) {\n      this.collections[i].onClose();\n    }\n  }\n\n  this.emit('close');\n};\n\n/**\n * Retrieves a collection, creating it if not cached.\n *\n * Not typically needed by applications. Just talk to your collection through your model.\n *\n * @param {String} name of the collection\n * @param {Object} [options] optional collection options\n * @return {Collection} collection instance\n * @api public\n */\n\nConnection.prototype.collection = function(name, options) {\n  if (!(name in this.collections)) {\n    this.collections[name] = new Collection(name, this, options);\n  }\n  return this.collections[name];\n};\n\n/**\n * Defines or retrieves a model.\n *\n *     var mongoose = require('mongoose');\n *     var db = mongoose.createConnection(..);\n *     db.model('Venue', new Schema(..));\n *     var Ticket = db.model('Ticket', new Schema(..));\n *     var Venue = db.model('Venue');\n *\n * _When no `collection` argument is passed, Mongoose produces a collection name by passing the model `name` to the [utils.toCollectionName](#utils_exports.toCollectionName) method. This method pluralizes the name. If you don't like this behavior, either pass a collection name or set your schemas collection name option._\n *\n * ####Example:\n *\n *     var schema = new Schema({ name: String }, { collection: 'actor' });\n *\n *     // or\n *\n *     schema.set('collection', 'actor');\n *\n *     // or\n *\n *     var collectionName = 'actor'\n *     var M = conn.model('Actor', schema, collectionName)\n *\n * @param {String} name the model name\n * @param {Schema} [schema] a schema. necessary when defining a model\n * @param {String} [collection] name of mongodb collection (optional) if not given it will be induced from model name\n * @see Mongoose#model #index_Mongoose-model\n * @return {Model} The compiled model\n * @api public\n */\n\nConnection.prototype.model = function(name, schema, collection) {\n  // collection name discovery\n  if (typeof schema === 'string') {\n    collection = schema;\n    schema = false;\n  }\n\n  if (utils.isObject(schema) && !schema.instanceOfSchema) {\n    schema = new Schema(schema);\n  }\n  if (schema && !schema.instanceOfSchema) {\n    throw new Error('The 2nd parameter to `mongoose.model()` should be a ' +\n      'schema or a POJO');\n  }\n\n  if (this.models[name] && !collection) {\n    // model exists but we are not subclassing with custom collection\n    if (schema && schema.instanceOfSchema && schema !== this.models[name].schema) {\n      throw new MongooseError.OverwriteModelError(name);\n    }\n    return this.models[name];\n  }\n\n  var opts = {cache: false, connection: this};\n  var model;\n\n  if (schema && schema.instanceOfSchema) {\n    // compile a model\n    model = this.base.model(name, schema, collection, opts);\n\n    // only the first model with this name is cached to allow\n    // for one-offs with custom collection names etc.\n    if (!this.models[name]) {\n      this.models[name] = model;\n    }\n\n    model.init();\n    return model;\n  }\n\n  if (this.models[name] && collection) {\n    // subclassing current model with alternate collection\n    model = this.models[name];\n    schema = model.prototype.schema;\n    var sub = model.__subclass(this, schema, collection);\n    // do not cache the sub model\n    return sub;\n  }\n\n  // lookup model in mongoose module\n  model = this.base.models[name];\n\n  if (!model) {\n    throw new MongooseError.MissingSchemaError(name);\n  }\n\n  if (this === model.prototype.db\n      && (!collection || collection === model.collection.name)) {\n    // model already uses this connection.\n\n    // only the first model with this name is cached to allow\n    // for one-offs with custom collection names etc.\n    if (!this.models[name]) {\n      this.models[name] = model;\n    }\n\n    return model;\n  }\n  this.models[name] = model.__subclass(this, schema, collection);\n  return this.models[name];\n};\n\n/**\n * Returns an array of model names created on this connection.\n * @api public\n * @return {Array}\n */\n\nConnection.prototype.modelNames = function() {\n  return Object.keys(this.models);\n};\n\n/**\n * @brief Returns if the connection requires authentication after it is opened. Generally if a\n * username and password are both provided than authentication is needed, but in some cases a\n * password is not required.\n * @api private\n * @return {Boolean} true if the connection should be authenticated after it is opened, otherwise false.\n */\nConnection.prototype.shouldAuthenticate = function() {\n  return (this.user !== null && this.user !== void 0) &&\n      ((this.pass !== null || this.pass !== void 0) || this.authMechanismDoesNotRequirePassword());\n};\n\n/**\n * @brief Returns a boolean value that specifies if the current authentication mechanism needs a\n * password to authenticate according to the auth objects passed into the open/openSet methods.\n * @api private\n * @return {Boolean} true if the authentication mechanism specified in the options object requires\n *  a password, otherwise false.\n */\nConnection.prototype.authMechanismDoesNotRequirePassword = function() {\n  if (this.options && this.options.auth) {\n    return authMechanismsWhichDontRequirePassword.indexOf(this.options.auth.authMechanism) >= 0;\n  }\n  return true;\n};\n\n/**\n * @brief Returns a boolean value that specifies if the provided objects object provides enough\n * data to authenticate with. Generally this is true if the username and password are both specified\n * but in some authentication methods, a password is not required for authentication so only a username\n * is required.\n * @param {Object} [options] the options object passed into the open/openSet methods.\n * @api private\n * @return {Boolean} true if the provided options object provides enough data to authenticate with,\n *   otherwise false.\n */\nConnection.prototype.optionsProvideAuthenticationData = function(options) {\n  return (options) &&\n      (options.user) &&\n      ((options.pass) || this.authMechanismDoesNotRequirePassword());\n};\n\n/*!\n * Module exports.\n */\n\nConnection.STATES = STATES;\nmodule.exports = Connection;\n"]}