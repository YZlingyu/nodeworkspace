{"version":3,"sources":["boolean.js"],"names":[],"mappings":"AAAA;;;;AAIA,IAAI,QAAQ,QAAQ,UAAR,CAAZ;;AAEA,IAAI,aAAa,QAAQ,eAAR,CAAjB;;AAEA;;;;;;;;;AASA,SAAS,aAAT,CAAuB,IAAvB,EAA6B,OAA7B,EAAsC;AACpC,aAAW,IAAX,CAAgB,IAAhB,EAAsB,IAAtB,EAA4B,OAA5B,EAAqC,SAArC;AACD;;AAED;;;;;;AAMA,cAAc,UAAd,GAA2B,SAA3B;;AAEA;;;AAGA,cAAc,SAAd,GAA0B,OAAO,MAAP,CAAc,WAAW,SAAzB,CAA1B;AACA,cAAc,SAAd,CAAwB,WAAxB,GAAsC,aAAtC;;AAEA;;;;;;;;;;AAUA,cAAc,SAAd,CAAwB,aAAxB,GAAwC,UAAS,KAAT,EAAgB;AACtD,SAAO,UAAU,IAAV,IAAkB,UAAU,KAAnC;AACD,CAFD;;AAIA;;;;;;;AAOA,cAAc,SAAd,CAAwB,IAAxB,GAA+B,UAAS,KAAT,EAAgB;AAC7C,MAAI,UAAU,IAAd,EAAoB;AAClB,WAAO,KAAP;AACD;AACD,MAAI,UAAU,GAAd,EAAmB;AACjB,WAAO,KAAP;AACD;AACD,MAAI,UAAU,MAAd,EAAsB;AACpB,WAAO,IAAP;AACD;AACD,MAAI,UAAU,OAAd,EAAuB;AACrB,WAAO,KAAP;AACD;AACD,SAAO,CAAC,CAAC,KAAT;AACD,CAdD;;AAgBA,cAAc,oBAAd,GACI,MAAM,OAAN,CAAc,WAAW,SAAX,CAAqB,oBAAnC,EAAyD,EAAzD,CADJ;;AAGA;;;;;;;;AAQA,cAAc,SAAd,CAAwB,YAAxB,GAAuC,UAAS,YAAT,EAAuB,GAAvB,EAA4B;AACjE,MAAI,OAAJ;AACA,MAAI,UAAU,MAAV,KAAqB,CAAzB,EAA4B;AAC1B,cAAU,cAAc,oBAAd,CAAmC,YAAnC,CAAV;;AAEA,QAAI,OAAJ,EAAa;AACX,aAAO,QAAQ,IAAR,CAAa,IAAb,EAAmB,GAAnB,CAAP;AACD;;AAED,WAAO,KAAK,IAAL,CAAU,GAAV,CAAP;AACD;;AAED,SAAO,KAAK,IAAL,CAAU,YAAV,CAAP;AACD,CAbD;;AAeA;;;;AAIA,OAAO,OAAP,GAAiB,aAAjB","file":"boolean-compiled.js","sourcesContent":["/*!\n * Module dependencies.\n */\n\nvar utils = require('../utils');\n\nvar SchemaType = require('../schematype');\n\n/**\n * Boolean SchemaType constructor.\n *\n * @param {String} path\n * @param {Object} options\n * @inherits SchemaType\n * @api public\n */\n\nfunction SchemaBoolean(path, options) {\n  SchemaType.call(this, path, options, 'Boolean');\n}\n\n/**\n * This schema type's name, to defend against minifiers that mangle\n * function names.\n *\n * @api public\n */\nSchemaBoolean.schemaName = 'Boolean';\n\n/*!\n * Inherits from SchemaType.\n */\nSchemaBoolean.prototype = Object.create(SchemaType.prototype);\nSchemaBoolean.prototype.constructor = SchemaBoolean;\n\n/**\n * Check if the given value satisfies a required validator. For a boolean\n * to satisfy a required validator, it must be strictly equal to true or to\n * false.\n *\n * @param {Any} value\n * @return {Boolean}\n * @api public\n */\n\nSchemaBoolean.prototype.checkRequired = function(value) {\n  return value === true || value === false;\n};\n\n/**\n * Casts to boolean\n *\n * @param {Object} value\n * @api private\n */\n\nSchemaBoolean.prototype.cast = function(value) {\n  if (value === null) {\n    return value;\n  }\n  if (value === '0') {\n    return false;\n  }\n  if (value === 'true') {\n    return true;\n  }\n  if (value === 'false') {\n    return false;\n  }\n  return !!value;\n};\n\nSchemaBoolean.$conditionalHandlers =\n    utils.options(SchemaType.prototype.$conditionalHandlers, {});\n\n/**\n * Casts contents for queries.\n *\n * @param {String} $conditional\n * @param {any} val\n * @api private\n */\n\nSchemaBoolean.prototype.castForQuery = function($conditional, val) {\n  var handler;\n  if (arguments.length === 2) {\n    handler = SchemaBoolean.$conditionalHandlers[$conditional];\n\n    if (handler) {\n      return handler.call(this, val);\n    }\n\n    return this.cast(val);\n  }\n\n  return this.cast($conditional);\n};\n\n/*!\n * Module exports.\n */\n\nmodule.exports = SchemaBoolean;\n"]}