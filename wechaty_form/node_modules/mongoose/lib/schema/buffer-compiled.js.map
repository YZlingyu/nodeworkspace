{"version":3,"sources":["buffer.js"],"names":[],"mappings":"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","file":"buffer-compiled.js","sourcesContent":["/*!\n * Module dependencies.\n */\n\nvar handleBitwiseOperator = require('./operators/bitwise');\nvar utils = require('../utils');\n\nvar MongooseBuffer = require('../types').Buffer;\nvar SchemaType = require('../schematype');\n\nvar Binary = MongooseBuffer.Binary;\nvar CastError = SchemaType.CastError;\nvar Document;\n\n/**\n * Buffer SchemaType constructor\n *\n * @param {String} key\n * @param {Object} options\n * @inherits SchemaType\n * @api public\n */\n\nfunction SchemaBuffer(key, options) {\n  SchemaType.call(this, key, options, 'Buffer');\n}\n\n/**\n * This schema type's name, to defend against minifiers that mangle\n * function names.\n *\n * @api public\n */\nSchemaBuffer.schemaName = 'Buffer';\n\n/*!\n * Inherits from SchemaType.\n */\nSchemaBuffer.prototype = Object.create(SchemaType.prototype);\nSchemaBuffer.prototype.constructor = SchemaBuffer;\n\n/**\n * Check if the given value satisfies a required validator. To satisfy a\n * required validator, a buffer must not be null or undefined and have\n * non-zero length.\n *\n * @param {Any} value\n * @param {Document} doc\n * @return {Boolean}\n * @api public\n */\n\nSchemaBuffer.prototype.checkRequired = function(value, doc) {\n  if (SchemaType._isRef(this, value, doc, true)) {\n    return !!value;\n  }\n  return !!(value && value.length);\n};\n\n/**\n * Casts contents\n *\n * @param {Object} value\n * @param {Document} doc document that triggers the casting\n * @param {Boolean} init\n * @api private\n */\n\nSchemaBuffer.prototype.cast = function(value, doc, init) {\n  var ret;\n  if (SchemaType._isRef(this, value, doc, init)) {\n    // wait! we may need to cast this to a document\n\n    if (value === null || value === undefined) {\n      return value;\n    }\n\n    // lazy load\n    Document || (Document = require('./../document'));\n\n    if (value instanceof Document) {\n      value.$__.wasPopulated = true;\n      return value;\n    }\n\n    // setting a populated path\n    if (Buffer.isBuffer(value)) {\n      return value;\n    } else if (!utils.isObject(value)) {\n      throw new CastError('buffer', value, this.path);\n    }\n\n    // Handle the case where user directly sets a populated\n    // path to a plain object; cast to the Model used in\n    // the population query.\n    var path = doc.$__fullPath(this.path);\n    var owner = doc.ownerDocument ? doc.ownerDocument() : doc;\n    var pop = owner.populated(path, true);\n    ret = new pop.options.model(value);\n    ret.$__.wasPopulated = true;\n    return ret;\n  }\n\n  // documents\n  if (value && value._id) {\n    value = value._id;\n  }\n\n  if (value && value.isMongooseBuffer) {\n    return value;\n  }\n\n  if (Buffer.isBuffer(value)) {\n    if (!value || !value.isMongooseBuffer) {\n      value = new MongooseBuffer(value, [this.path, doc]);\n    }\n\n    return value;\n  } else if (value instanceof Binary) {\n    ret = new MongooseBuffer(value.value(true), [this.path, doc]);\n    if (typeof value.sub_type !== 'number') {\n      throw new CastError('buffer', value, this.path);\n    }\n    ret._subtype = value.sub_type;\n    return ret;\n  }\n\n  if (value === null) {\n    return value;\n  }\n\n  var type = typeof value;\n  if (type === 'string' || type === 'number' || Array.isArray(value)) {\n    if (type === 'number') {\n      value = [value];\n    }\n    ret = new MongooseBuffer(value, [this.path, doc]);\n    return ret;\n  }\n\n  throw new CastError('buffer', value, this.path);\n};\n\n/*!\n * ignore\n */\nfunction handleSingle(val) {\n  return this.castForQuery(val);\n}\n\nSchemaBuffer.prototype.$conditionalHandlers =\n    utils.options(SchemaType.prototype.$conditionalHandlers, {\n      $bitsAllClear: handleBitwiseOperator,\n      $bitsAnyClear: handleBitwiseOperator,\n      $bitsAllSet: handleBitwiseOperator,\n      $bitsAnySet: handleBitwiseOperator,\n      $gt: handleSingle,\n      $gte: handleSingle,\n      $lt: handleSingle,\n      $lte: handleSingle\n    });\n\n/**\n * Casts contents for queries.\n *\n * @param {String} $conditional\n * @param {any} [value]\n * @api private\n */\n\nSchemaBuffer.prototype.castForQuery = function($conditional, val) {\n  var handler;\n  if (arguments.length === 2) {\n    handler = this.$conditionalHandlers[$conditional];\n    if (!handler) {\n      throw new Error('Can\\'t use ' + $conditional + ' with Buffer.');\n    }\n    return handler.call(this, val);\n  }\n  val = $conditional;\n  var casted = this.cast(val);\n  return casted ? casted.toObject({ transform: false, virtuals: false }) : casted;\n};\n\n/*!\n * Module exports.\n */\n\nmodule.exports = SchemaBuffer;\n"]}