{"version":3,"sources":["geospatial.js"],"names":[],"mappings":"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","file":"geospatial-compiled.js","sourcesContent":["/*!\n * Module requirements.\n */\n\nvar castArraysOfNumbers = require('./helpers').castArraysOfNumbers;\nvar castToNumber = require('./helpers').castToNumber;\n\n/*!\n * ignore\n */\n\nexports.cast$geoIntersects = cast$geoIntersects;\nexports.cast$near = cast$near;\nexports.cast$within = cast$within;\n\nfunction cast$near(val) {\n  var SchemaArray = require('../array');\n\n  if (Array.isArray(val)) {\n    castArraysOfNumbers(val, this);\n    return val;\n  }\n\n  _castMinMaxDistance(this, val);\n\n  if (val && val.$geometry) {\n    return cast$geometry(val, this);\n  }\n\n  return SchemaArray.prototype.castForQuery.call(this, val);\n}\n\nfunction cast$geometry(val, self) {\n  switch (val.$geometry.type) {\n    case 'Polygon':\n    case 'LineString':\n    case 'Point':\n      castArraysOfNumbers(val.$geometry.coordinates, self);\n      break;\n    default:\n      // ignore unknowns\n      break;\n  }\n\n  _castMinMaxDistance(this, val);\n\n  return val;\n}\n\nfunction cast$within(val) {\n  _castMinMaxDistance(this, val);\n\n  if (val.$box || val.$polygon) {\n    var type = val.$box ? '$box' : '$polygon';\n    val[type].forEach(function(arr) {\n      if (!Array.isArray(arr)) {\n        var msg = 'Invalid $within $box argument. '\n            + 'Expected an array, received ' + arr;\n        throw new TypeError(msg);\n      }\n      arr.forEach(function(v, i) {\n        arr[i] = castToNumber.call(this, v);\n      });\n    });\n  } else if (val.$center || val.$centerSphere) {\n    type = val.$center ? '$center' : '$centerSphere';\n    val[type].forEach(function(item, i) {\n      if (Array.isArray(item)) {\n        item.forEach(function(v, j) {\n          item[j] = castToNumber.call(this, v);\n        });\n      } else {\n        val[type][i] = castToNumber.call(this, item);\n      }\n    });\n  } else if (val.$geometry) {\n    cast$geometry(val, this);\n  }\n\n  return val;\n}\n\nfunction cast$geoIntersects(val) {\n  var geo = val.$geometry;\n  if (!geo) {\n    return;\n  }\n\n  cast$geometry(val, this);\n  return val;\n}\n\nfunction _castMinMaxDistance(self, val) {\n  if (val.$maxDistance) {\n    val.$maxDistance = castToNumber.call(self, val.$maxDistance);\n  }\n  if (val.$minDistance) {\n    val.$minDistance = castToNumber.call(self, val.$minDistance);\n  }\n}\n"]}