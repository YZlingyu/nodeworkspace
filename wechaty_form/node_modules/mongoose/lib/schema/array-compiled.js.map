{"version":3,"sources":["array.js"],"names":[],"mappings":"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","file":"array-compiled.js","sourcesContent":["/*!\n * Module dependencies.\n */\n\nvar $exists = require('./operators/exists');\nvar $type = require('./operators/type');\nvar SchemaType = require('../schematype');\nvar CastError = SchemaType.CastError;\nvar Types = {\n  Boolean: require('./boolean'),\n  Date: require('./date'),\n  Number: require('./number'),\n  String: require('./string'),\n  ObjectId: require('./objectid'),\n  Buffer: require('./buffer')\n};\nvar MongooseArray = require('../types').Array;\nvar EmbeddedDoc = require('../types').Embedded;\nvar Mixed = require('./mixed');\nvar cast = require('../cast');\nvar util = require('util');\nvar utils = require('../utils');\nvar castToNumber = require('./operators/helpers').castToNumber;\nvar geospatial = require('./operators/geospatial');\n\n/**\n * Array SchemaType constructor\n *\n * @param {String} key\n * @param {SchemaType} cast\n * @param {Object} options\n * @inherits SchemaType\n * @api public\n */\n\nfunction SchemaArray(key, cast, options, schemaOptions) {\n  var typeKey = 'type';\n  if (schemaOptions && schemaOptions.typeKey) {\n    typeKey = schemaOptions.typeKey;\n  }\n\n  if (cast) {\n    var castOptions = {};\n\n    if (utils.getFunctionName(cast.constructor) === 'Object') {\n      if (cast[typeKey]) {\n        // support { type: Woot }\n        castOptions = utils.clone(cast); // do not alter user arguments\n        delete castOptions[typeKey];\n        cast = cast[typeKey];\n      } else {\n        cast = Mixed;\n      }\n    }\n\n    // support { type: 'String' }\n    var name = typeof cast === 'string'\n        ? cast\n        : utils.getFunctionName(cast);\n\n    var caster = name in Types\n        ? Types[name]\n        : cast;\n\n    this.casterConstructor = caster;\n    if (typeof caster === 'function' && !caster.$isArraySubdocument) {\n      this.caster = new caster(null, castOptions);\n    } else {\n      this.caster = caster;\n    }\n\n    if (!(this.caster instanceof EmbeddedDoc)) {\n      this.caster.path = key;\n    }\n  }\n\n  this.$isMongooseArray = true;\n\n  SchemaType.call(this, key, options, 'Array');\n\n  var defaultArr;\n  var fn;\n\n  if (this.defaultValue != null) {\n    defaultArr = this.defaultValue;\n    fn = typeof defaultArr === 'function';\n  }\n\n  if (!('defaultValue' in this) || this.defaultValue !== void 0) {\n    this.default(function() {\n      var arr = [];\n      if (fn) {\n        arr = defaultArr();\n      } else if (defaultArr != null) {\n        arr = defaultArr;\n      }\n      // Leave it up to `cast()` to convert the array\n      return arr;\n    });\n  }\n}\n\n/**\n * This schema type's name, to defend against minifiers that mangle\n * function names.\n *\n * @api public\n */\nSchemaArray.schemaName = 'Array';\n\n/*!\n * Inherits from SchemaType.\n */\nSchemaArray.prototype = Object.create(SchemaType.prototype);\nSchemaArray.prototype.constructor = SchemaArray;\n\n/**\n * Check if the given value satisfies a required validator. The given value\n * must be not null nor undefined, and have a positive length.\n *\n * @param {Any} value\n * @return {Boolean}\n * @api public\n */\n\nSchemaArray.prototype.checkRequired = function(value) {\n  return !!(value && value.length);\n};\n\n/**\n * Overrides the getters application for the population special-case\n *\n * @param {Object} value\n * @param {Object} scope\n * @api private\n */\n\nSchemaArray.prototype.applyGetters = function(value, scope) {\n  if (this.caster.options && this.caster.options.ref) {\n    // means the object id was populated\n    return value;\n  }\n\n  return SchemaType.prototype.applyGetters.call(this, value, scope);\n};\n\n/**\n * Casts values for set().\n *\n * @param {Object} value\n * @param {Document} doc document that triggers the casting\n * @param {Boolean} init whether this is an initialization cast\n * @api private\n */\n\nSchemaArray.prototype.cast = function(value, doc, init) {\n  if (Array.isArray(value)) {\n    if (!value.length && doc) {\n      var indexes = doc.schema.indexedPaths();\n\n      for (var i = 0, l = indexes.length; i < l; ++i) {\n        var pathIndex = indexes[i][0][this.path];\n        if (pathIndex === '2dsphere' || pathIndex === '2d') {\n          return;\n        }\n      }\n    }\n\n    if (!(value && value.isMongooseArray)) {\n      value = new MongooseArray(value, this.path, doc);\n    } else if (value && value.isMongooseArray) {\n      // We need to create a new array, otherwise change tracking will\n      // update the old doc (gh-4449)\n      value = new MongooseArray(value, this.path, doc);\n    }\n\n    if (this.caster) {\n      try {\n        for (i = 0, l = value.length; i < l; i++) {\n          value[i] = this.caster.cast(value[i], doc, init);\n        }\n      } catch (e) {\n        // rethrow\n        throw new CastError('[' + e.kind + ']', util.inspect(value), this.path, e);\n      }\n    }\n\n    return value;\n  }\n  // gh-2442: if we're loading this from the db and its not an array, mark\n  // the whole array as modified.\n  if (!!doc && !!init) {\n    doc.markModified(this.path);\n  }\n  return this.cast([value], doc, init);\n};\n\n/**\n * Casts values for queries.\n *\n * @param {String} $conditional\n * @param {any} [value]\n * @api private\n */\n\nSchemaArray.prototype.castForQuery = function($conditional, value) {\n  var handler,\n      val;\n\n  if (arguments.length === 2) {\n    handler = this.$conditionalHandlers[$conditional];\n\n    if (!handler) {\n      throw new Error('Can\\'t use ' + $conditional + ' with Array.');\n    }\n\n    val = handler.call(this, value);\n  } else {\n    val = $conditional;\n    var Constructor = this.casterConstructor;\n\n    if (val &&\n        Constructor.discriminators &&\n        Constructor.schema.options.discriminatorKey &&\n        typeof val[Constructor.schema.options.discriminatorKey] === 'string' &&\n        Constructor.discriminators[val[Constructor.schema.options.discriminatorKey]]) {\n      Constructor = Constructor.discriminators[val[Constructor.schema.options.discriminatorKey]];\n    }\n\n    var proto = this.casterConstructor.prototype;\n    var method = proto && (proto.castForQuery || proto.cast);\n    if (!method && Constructor.castForQuery) {\n      method = Constructor.castForQuery;\n    }\n    var caster = this.caster;\n\n    if (Array.isArray(val)) {\n      val = val.map(function(v) {\n        if (utils.isObject(v) && v.$elemMatch) {\n          return v;\n        }\n        if (method) {\n          v = method.call(caster, v);\n          return v;\n        }\n        if (v != null) {\n          v = new Constructor(v);\n          return v;\n        }\n        return v;\n      });\n    } else if (method) {\n      val = method.call(caster, val);\n    } else if (val != null) {\n      val = new Constructor(val);\n    }\n  }\n\n  return val;\n};\n\nfunction cast$all(val) {\n  if (!Array.isArray(val)) {\n    val = [val];\n  }\n\n  val = val.map(function(v) {\n    if (utils.isObject(v)) {\n      var o = {};\n      o[this.path] = v;\n      return cast(this.casterConstructor.schema, o)[this.path];\n    }\n    return v;\n  }, this);\n\n  return this.castForQuery(val);\n}\n\nfunction cast$elemMatch(val) {\n  var keys = Object.keys(val);\n  var numKeys = keys.length;\n  var key;\n  var value;\n  for (var i = 0; i < numKeys; ++i) {\n    key = keys[i];\n    value = val[key];\n    if (key.indexOf('$') === 0 && value) {\n      val[key] = this.castForQuery(key, value);\n    }\n  }\n\n  return cast(this.casterConstructor.schema, val);\n}\n\nvar handle = SchemaArray.prototype.$conditionalHandlers = {};\n\nhandle.$all = cast$all;\nhandle.$options = String;\nhandle.$elemMatch = cast$elemMatch;\nhandle.$geoIntersects = geospatial.cast$geoIntersects;\nhandle.$or = handle.$and = function(val) {\n  if (!Array.isArray(val)) {\n    throw new TypeError('conditional $or/$and require array');\n  }\n\n  var ret = [];\n  for (var i = 0; i < val.length; ++i) {\n    ret.push(cast(this.casterConstructor.schema, val[i]));\n  }\n\n  return ret;\n};\n\nhandle.$near =\nhandle.$nearSphere = geospatial.cast$near;\n\nhandle.$within =\nhandle.$geoWithin = geospatial.cast$within;\n\nhandle.$size =\nhandle.$minDistance =\nhandle.$maxDistance = castToNumber;\n\nhandle.$exists = $exists;\nhandle.$type = $type;\n\nhandle.$eq =\nhandle.$gt =\nhandle.$gte =\nhandle.$in =\nhandle.$lt =\nhandle.$lte =\nhandle.$ne =\nhandle.$nin =\nhandle.$regex = SchemaArray.prototype.castForQuery;\n\n/*!\n * Module exports.\n */\n\nmodule.exports = SchemaArray;\n"]}