{"version":3,"sources":["query.js"],"names":[],"mappings":"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","file":"query-compiled.js","sourcesContent":["/*!\n * Module dependencies.\n */\n\nvar PromiseProvider = require('./promise_provider');\nvar QueryCursor = require('./querycursor');\nvar QueryStream = require('./querystream');\nvar cast = require('./cast');\nvar castUpdate = require('./services/query/castUpdate');\nvar helpers = require('./queryhelpers');\nvar mquery = require('mquery');\nvar readPref = require('./drivers').ReadPreference;\nvar setDefaultsOnInsert = require('./services/setDefaultsOnInsert');\nvar updateValidators = require('./services/updateValidators');\nvar util = require('util');\nvar utils = require('./utils');\n\n/**\n * Query constructor used for building queries.\n *\n * ####Example:\n *\n *     var query = new Query();\n *     query.setOptions({ lean : true });\n *     query.collection(model.collection);\n *     query.where('age').gte(21).exec(callback);\n *\n * @param {Object} [options]\n * @param {Object} [model]\n * @param {Object} [conditions]\n * @param {Object} [collection] Mongoose collection\n * @api private\n */\n\nfunction Query(conditions, options, model, collection) {\n  // this stuff is for dealing with custom queries created by #toConstructor\n  if (!this._mongooseOptions) {\n    this._mongooseOptions = {};\n  }\n\n  // this is the case where we have a CustomQuery, we need to check if we got\n  // options passed in, and if we did, merge them in\n  if (options) {\n    var keys = Object.keys(options);\n    for (var i = 0; i < keys.length; ++i) {\n      var k = keys[i];\n      this._mongooseOptions[k] = options[k];\n    }\n  }\n\n  if (collection) {\n    this.mongooseCollection = collection;\n  }\n\n  if (model) {\n    this.model = model;\n    this.schema = model.schema;\n  }\n\n  // this is needed because map reduce returns a model that can be queried, but\n  // all of the queries on said model should be lean\n  if (this.model && this.model._mapreduce) {\n    this.lean();\n  }\n\n  // inherit mquery\n  mquery.call(this, this.mongooseCollection, options);\n\n  if (conditions) {\n    this.find(conditions);\n  }\n\n  if (this.schema) {\n    var kareemOptions = {\n      useErrorHandlers: true,\n      numCallbackParams: 1\n    };\n    this._count = this.model.hooks.createWrapper('count',\n        Query.prototype._count, this, kareemOptions);\n    this._execUpdate = this.model.hooks.createWrapper('update',\n        Query.prototype._execUpdate, this, kareemOptions);\n    this._find = this.model.hooks.createWrapper('find',\n        Query.prototype._find, this, kareemOptions);\n    this._findOne = this.model.hooks.createWrapper('findOne',\n        Query.prototype._findOne, this, kareemOptions);\n    this._findOneAndRemove = this.model.hooks.createWrapper('findOneAndRemove',\n        Query.prototype._findOneAndRemove, this, kareemOptions);\n    this._findOneAndUpdate = this.model.hooks.createWrapper('findOneAndUpdate',\n        Query.prototype._findOneAndUpdate, this, kareemOptions);\n    this._replaceOne = this.model.hooks.createWrapper('replaceOne',\n        Query.prototype._replaceOne, this, kareemOptions);\n    this._updateMany = this.model.hooks.createWrapper('updateMany',\n        Query.prototype._updateMany, this, kareemOptions);\n    this._updateOne = this.model.hooks.createWrapper('updateOne',\n        Query.prototype._updateOne, this, kareemOptions);\n  }\n}\n\n/*!\n * inherit mquery\n */\n\nQuery.prototype = new mquery;\nQuery.prototype.constructor = Query;\nQuery.base = mquery.prototype;\n\n/**\n * Flag to opt out of using `$geoWithin`.\n *\n *     mongoose.Query.use$geoWithin = false;\n *\n * MongoDB 2.4 deprecated the use of `$within`, replacing it with `$geoWithin`. Mongoose uses `$geoWithin` by default (which is 100% backward compatible with $within). If you are running an older version of MongoDB, set this flag to `false` so your `within()` queries continue to work.\n *\n * @see http://docs.mongodb.org/manual/reference/operator/geoWithin/\n * @default true\n * @property use$geoWithin\n * @memberOf Query\n * @receiver Query\n * @api public\n */\n\nQuery.use$geoWithin = mquery.use$geoWithin;\n\n/**\n * Converts this query to a customized, reusable query constructor with all arguments and options retained.\n *\n * ####Example\n *\n *     // Create a query for adventure movies and read from the primary\n *     // node in the replica-set unless it is down, in which case we'll\n *     // read from a secondary node.\n *     var query = Movie.find({ tags: 'adventure' }).read('primaryPreferred');\n *\n *     // create a custom Query constructor based off these settings\n *     var Adventure = query.toConstructor();\n *\n *     // Adventure is now a subclass of mongoose.Query and works the same way but with the\n *     // default query parameters and options set.\n *     Adventure().exec(callback)\n *\n *     // further narrow down our query results while still using the previous settings\n *     Adventure().where({ name: /^Life/ }).exec(callback);\n *\n *     // since Adventure is a stand-alone constructor we can also add our own\n *     // helper methods and getters without impacting global queries\n *     Adventure.prototype.startsWith = function (prefix) {\n *       this.where({ name: new RegExp('^' + prefix) })\n *       return this;\n *     }\n *     Object.defineProperty(Adventure.prototype, 'highlyRated', {\n *       get: function () {\n *         this.where({ rating: { $gt: 4.5 }});\n *         return this;\n *       }\n *     })\n *     Adventure().highlyRated.startsWith('Life').exec(callback)\n *\n * New in 3.7.3\n *\n * @return {Query} subclass-of-Query\n * @api public\n */\n\nQuery.prototype.toConstructor = function toConstructor() {\n  var model = this.model;\n  var coll = this.mongooseCollection;\n\n  var CustomQuery = function(criteria, options) {\n    if (!(this instanceof CustomQuery)) {\n      return new CustomQuery(criteria, options);\n    }\n    this._mongooseOptions = utils.clone(p._mongooseOptions);\n    Query.call(this, criteria, options || null, model, coll);\n  };\n\n  util.inherits(CustomQuery, Query);\n\n  // set inherited defaults\n  var p = CustomQuery.prototype;\n\n  p.options = {};\n\n  p.setOptions(this.options);\n\n  p.op = this.op;\n  p._conditions = utils.clone(this._conditions, { retainKeyOrder: true });\n  p._fields = utils.clone(this._fields);\n  p._update = utils.clone(this._update);\n  p._path = this._path;\n  p._distinct = this._distinct;\n  p._collection = this._collection;\n  p._mongooseOptions = this._mongooseOptions;\n\n  return CustomQuery;\n};\n\n/**\n * Specifies a javascript function or expression to pass to MongoDBs query system.\n *\n * ####Example\n *\n *     query.$where('this.comments.length === 10 || this.name.length === 5')\n *\n *     // or\n *\n *     query.$where(function () {\n *       return this.comments.length === 10 || this.name.length === 5;\n *     })\n *\n * ####NOTE:\n *\n * Only use `$where` when you have a condition that cannot be met using other MongoDB operators like `$lt`.\n * **Be sure to read about all of [its caveats](http://docs.mongodb.org/manual/reference/operator/where/) before using.**\n *\n * @see $where http://docs.mongodb.org/manual/reference/operator/where/\n * @method $where\n * @param {String|Function} js javascript string or function\n * @return {Query} this\n * @memberOf Query\n * @method $where\n * @api public\n */\n\n/**\n * Specifies a `path` for use with chaining.\n *\n * ####Example\n *\n *     // instead of writing:\n *     User.find({age: {$gte: 21, $lte: 65}}, callback);\n *\n *     // we can instead write:\n *     User.where('age').gte(21).lte(65);\n *\n *     // passing query conditions is permitted\n *     User.find().where({ name: 'vonderful' })\n *\n *     // chaining\n *     User\n *     .where('age').gte(21).lte(65)\n *     .where('name', /^vonderful/i)\n *     .where('friends').slice(10)\n *     .exec(callback)\n *\n * @method where\n * @memberOf Query\n * @param {String|Object} [path]\n * @param {any} [val]\n * @return {Query} this\n * @api public\n */\n\n/**\n * Specifies the complementary comparison value for paths specified with `where()`\n *\n * ####Example\n *\n *     User.where('age').equals(49);\n *\n *     // is the same as\n *\n *     User.where('age', 49);\n *\n * @method equals\n * @memberOf Query\n * @param {Object} val\n * @return {Query} this\n * @api public\n */\n\n/**\n * Specifies arguments for an `$or` condition.\n *\n * ####Example\n *\n *     query.or([{ color: 'red' }, { status: 'emergency' }])\n *\n * @see $or http://docs.mongodb.org/manual/reference/operator/or/\n * @method or\n * @memberOf Query\n * @param {Array} array array of conditions\n * @return {Query} this\n * @api public\n */\n\n/**\n * Specifies arguments for a `$nor` condition.\n *\n * ####Example\n *\n *     query.nor([{ color: 'green' }, { status: 'ok' }])\n *\n * @see $nor http://docs.mongodb.org/manual/reference/operator/nor/\n * @method nor\n * @memberOf Query\n * @param {Array} array array of conditions\n * @return {Query} this\n * @api public\n */\n\n/**\n * Specifies arguments for a `$and` condition.\n *\n * ####Example\n *\n *     query.and([{ color: 'green' }, { status: 'ok' }])\n *\n * @method and\n * @memberOf Query\n * @see $and http://docs.mongodb.org/manual/reference/operator/and/\n * @param {Array} array array of conditions\n * @return {Query} this\n * @api public\n */\n\n/**\n * Specifies a $gt query condition.\n *\n * When called with one argument, the most recent path passed to `where()` is used.\n *\n * ####Example\n *\n *     Thing.find().where('age').gt(21)\n *\n *     // or\n *     Thing.find().gt('age', 21)\n *\n * @method gt\n * @memberOf Query\n * @param {String} [path]\n * @param {Number} val\n * @see $gt http://docs.mongodb.org/manual/reference/operator/gt/\n * @api public\n */\n\n/**\n * Specifies a $gte query condition.\n *\n * When called with one argument, the most recent path passed to `where()` is used.\n *\n * @method gte\n * @memberOf Query\n * @param {String} [path]\n * @param {Number} val\n * @see $gte http://docs.mongodb.org/manual/reference/operator/gte/\n * @api public\n */\n\n/**\n * Specifies a $lt query condition.\n *\n * When called with one argument, the most recent path passed to `where()` is used.\n *\n * @method lt\n * @memberOf Query\n * @param {String} [path]\n * @param {Number} val\n * @see $lt http://docs.mongodb.org/manual/reference/operator/lt/\n * @api public\n */\n\n/**\n * Specifies a $lte query condition.\n *\n * When called with one argument, the most recent path passed to `where()` is used.\n *\n * @method lte\n * @see $lte http://docs.mongodb.org/manual/reference/operator/lte/\n * @memberOf Query\n * @param {String} [path]\n * @param {Number} val\n * @api public\n */\n\n/**\n * Specifies a $ne query condition.\n *\n * When called with one argument, the most recent path passed to `where()` is used.\n *\n * @see $ne http://docs.mongodb.org/manual/reference/operator/ne/\n * @method ne\n * @memberOf Query\n * @param {String} [path]\n * @param {Number} val\n * @api public\n */\n\n/**\n * Specifies an $in query condition.\n *\n * When called with one argument, the most recent path passed to `where()` is used.\n *\n * @see $in http://docs.mongodb.org/manual/reference/operator/in/\n * @method in\n * @memberOf Query\n * @param {String} [path]\n * @param {Number} val\n * @api public\n */\n\n/**\n * Specifies an $nin query condition.\n *\n * When called with one argument, the most recent path passed to `where()` is used.\n *\n * @see $nin http://docs.mongodb.org/manual/reference/operator/nin/\n * @method nin\n * @memberOf Query\n * @param {String} [path]\n * @param {Number} val\n * @api public\n */\n\n/**\n * Specifies an $all query condition.\n *\n * When called with one argument, the most recent path passed to `where()` is used.\n *\n * @see $all http://docs.mongodb.org/manual/reference/operator/all/\n * @method all\n * @memberOf Query\n * @param {String} [path]\n * @param {Number} val\n * @api public\n */\n\n/**\n * Specifies a $size query condition.\n *\n * When called with one argument, the most recent path passed to `where()` is used.\n *\n * ####Example\n *\n *     MyModel.where('tags').size(0).exec(function (err, docs) {\n *       if (err) return handleError(err);\n *\n *       assert(Array.isArray(docs));\n *       console.log('documents with 0 tags', docs);\n *     })\n *\n * @see $size http://docs.mongodb.org/manual/reference/operator/size/\n * @method size\n * @memberOf Query\n * @param {String} [path]\n * @param {Number} val\n * @api public\n */\n\n/**\n * Specifies a $regex query condition.\n *\n * When called with one argument, the most recent path passed to `where()` is used.\n *\n * @see $regex http://docs.mongodb.org/manual/reference/operator/regex/\n * @method regex\n * @memberOf Query\n * @param {String} [path]\n * @param {String|RegExp} val\n * @api public\n */\n\n/**\n * Specifies a $maxDistance query condition.\n *\n * When called with one argument, the most recent path passed to `where()` is used.\n *\n * @see $maxDistance http://docs.mongodb.org/manual/reference/operator/maxDistance/\n * @method maxDistance\n * @memberOf Query\n * @param {String} [path]\n * @param {Number} val\n * @api public\n */\n\n/**\n * Specifies a `$mod` condition\n *\n * @method mod\n * @memberOf Query\n * @param {String} [path]\n * @param {Number} val\n * @return {Query} this\n * @see $mod http://docs.mongodb.org/manual/reference/operator/mod/\n * @api public\n */\n\n/**\n * Specifies an `$exists` condition\n *\n * ####Example\n *\n *     // { name: { $exists: true }}\n *     Thing.where('name').exists()\n *     Thing.where('name').exists(true)\n *     Thing.find().exists('name')\n *\n *     // { name: { $exists: false }}\n *     Thing.where('name').exists(false);\n *     Thing.find().exists('name', false);\n *\n * @method exists\n * @memberOf Query\n * @param {String} [path]\n * @param {Number} val\n * @return {Query} this\n * @see $exists http://docs.mongodb.org/manual/reference/operator/exists/\n * @api public\n */\n\n/**\n * Specifies an `$elemMatch` condition\n *\n * ####Example\n *\n *     query.elemMatch('comment', { author: 'autobot', votes: {$gte: 5}})\n *\n *     query.where('comment').elemMatch({ author: 'autobot', votes: {$gte: 5}})\n *\n *     query.elemMatch('comment', function (elem) {\n *       elem.where('author').equals('autobot');\n *       elem.where('votes').gte(5);\n *     })\n *\n *     query.where('comment').elemMatch(function (elem) {\n *       elem.where({ author: 'autobot' });\n *       elem.where('votes').gte(5);\n *     })\n *\n * @method elemMatch\n * @memberOf Query\n * @param {String|Object|Function} path\n * @param {Object|Function} criteria\n * @return {Query} this\n * @see $elemMatch http://docs.mongodb.org/manual/reference/operator/elemMatch/\n * @api public\n */\n\n/**\n * Defines a `$within` or `$geoWithin` argument for geo-spatial queries.\n *\n * ####Example\n *\n *     query.where(path).within().box()\n *     query.where(path).within().circle()\n *     query.where(path).within().geometry()\n *\n *     query.where('loc').within({ center: [50,50], radius: 10, unique: true, spherical: true });\n *     query.where('loc').within({ box: [[40.73, -73.9], [40.7, -73.988]] });\n *     query.where('loc').within({ polygon: [[],[],[],[]] });\n *\n *     query.where('loc').within([], [], []) // polygon\n *     query.where('loc').within([], []) // box\n *     query.where('loc').within({ type: 'LineString', coordinates: [...] }); // geometry\n *\n * **MUST** be used after `where()`.\n *\n * ####NOTE:\n *\n * As of Mongoose 3.7, `$geoWithin` is always used for queries. To change this behavior, see [Query.use$geoWithin](#query_Query-use%2524geoWithin).\n *\n * ####NOTE:\n *\n * In Mongoose 3.7, `within` changed from a getter to a function. If you need the old syntax, use [this](https://github.com/ebensing/mongoose-within).\n *\n * @method within\n * @see $polygon http://docs.mongodb.org/manual/reference/operator/polygon/\n * @see $box http://docs.mongodb.org/manual/reference/operator/box/\n * @see $geometry http://docs.mongodb.org/manual/reference/operator/geometry/\n * @see $center http://docs.mongodb.org/manual/reference/operator/center/\n * @see $centerSphere http://docs.mongodb.org/manual/reference/operator/centerSphere/\n * @memberOf Query\n * @return {Query} this\n * @api public\n */\n\n/**\n * Specifies a $slice projection for an array.\n *\n * ####Example\n *\n *     query.slice('comments', 5)\n *     query.slice('comments', -5)\n *     query.slice('comments', [10, 5])\n *     query.where('comments').slice(5)\n *     query.where('comments').slice([-10, 5])\n *\n * @method slice\n * @memberOf Query\n * @param {String} [path]\n * @param {Number} val number/range of elements to slice\n * @return {Query} this\n * @see mongodb http://www.mongodb.org/display/DOCS/Retrieving+a+Subset+of+Fields#RetrievingaSubsetofFields-RetrievingaSubrangeofArrayElements\n * @see $slice http://docs.mongodb.org/manual/reference/projection/slice/#prj._S_slice\n * @api public\n */\n\n/**\n * Specifies the maximum number of documents the query will return.\n *\n * ####Example\n *\n *     query.limit(20)\n *\n * ####Note\n *\n * Cannot be used with `distinct()`\n *\n * @method limit\n * @memberOf Query\n * @param {Number} val\n * @api public\n */\n\n/**\n * Specifies the number of documents to skip.\n *\n * ####Example\n *\n *     query.skip(100).limit(20)\n *\n * ####Note\n *\n * Cannot be used with `distinct()`\n *\n * @method skip\n * @memberOf Query\n * @param {Number} val\n * @see cursor.skip http://docs.mongodb.org/manual/reference/method/cursor.skip/\n * @api public\n */\n\n/**\n * Specifies the maxScan option.\n *\n * ####Example\n *\n *     query.maxScan(100)\n *\n * ####Note\n *\n * Cannot be used with `distinct()`\n *\n * @method maxScan\n * @memberOf Query\n * @param {Number} val\n * @see maxScan http://docs.mongodb.org/manual/reference/operator/maxScan/\n * @api public\n */\n\n/**\n * Specifies the batchSize option.\n *\n * ####Example\n *\n *     query.batchSize(100)\n *\n * ####Note\n *\n * Cannot be used with `distinct()`\n *\n * @method batchSize\n * @memberOf Query\n * @param {Number} val\n * @see batchSize http://docs.mongodb.org/manual/reference/method/cursor.batchSize/\n * @api public\n */\n\n/**\n * Specifies the `comment` option.\n *\n * ####Example\n *\n *     query.comment('login query')\n *\n * ####Note\n *\n * Cannot be used with `distinct()`\n *\n * @method comment\n * @memberOf Query\n * @param {Number} val\n * @see comment http://docs.mongodb.org/manual/reference/operator/comment/\n * @api public\n */\n\n/**\n * Specifies this query as a `snapshot` query.\n *\n * ####Example\n *\n *     query.snapshot() // true\n *     query.snapshot(true)\n *     query.snapshot(false)\n *\n * ####Note\n *\n * Cannot be used with `distinct()`\n *\n * @method snapshot\n * @memberOf Query\n * @see snapshot http://docs.mongodb.org/manual/reference/operator/snapshot/\n * @return {Query} this\n * @api public\n */\n\n/**\n * Sets query hints.\n *\n * ####Example\n *\n *     query.hint({ indexA: 1, indexB: -1})\n *\n * ####Note\n *\n * Cannot be used with `distinct()`\n *\n * @method hint\n * @memberOf Query\n * @param {Object} val a hint object\n * @return {Query} this\n * @see $hint http://docs.mongodb.org/manual/reference/operator/hint/\n * @api public\n */\n\n/**\n * Specifies which document fields to include or exclude (also known as the query \"projection\")\n *\n * When using string syntax, prefixing a path with `-` will flag that path as excluded. When a path does not have the `-` prefix, it is included. Lastly, if a path is prefixed with `+`, it forces inclusion of the path, which is useful for paths excluded at the [schema level](/docs/api.html#schematype_SchemaType-select).\n *\n * ####Example\n *\n *     // include a and b, exclude other fields\n *     query.select('a b');\n *\n *     // exclude c and d, include other fields\n *     query.select('-c -d');\n *\n *     // or you may use object notation, useful when\n *     // you have keys already prefixed with a \"-\"\n *     query.select({ a: 1, b: 1 });\n *     query.select({ c: 0, d: 0 });\n *\n *     // force inclusion of field excluded at schema level\n *     query.select('+path')\n *\n * ####NOTE:\n *\n * Cannot be used with `distinct()`.\n *\n * _v2 had slightly different syntax such as allowing arrays of field names. This support was removed in v3._\n *\n * @method select\n * @memberOf Query\n * @param {Object|String} arg\n * @return {Query} this\n * @see SchemaType\n * @api public\n */\n\n/**\n * _DEPRECATED_ Sets the slaveOk option.\n *\n * **Deprecated** in MongoDB 2.2 in favor of [read preferences](#query_Query-read).\n *\n * ####Example:\n *\n *     query.slaveOk() // true\n *     query.slaveOk(true)\n *     query.slaveOk(false)\n *\n * @method slaveOk\n * @memberOf Query\n * @deprecated use read() preferences instead if on mongodb >= 2.2\n * @param {Boolean} v defaults to true\n * @see mongodb http://docs.mongodb.org/manual/applications/replication/#read-preference\n * @see slaveOk http://docs.mongodb.org/manual/reference/method/rs.slaveOk/\n * @see read() #query_Query-read\n * @return {Query} this\n * @api public\n */\n\n/**\n * Determines the MongoDB nodes from which to read.\n *\n * ####Preferences:\n *\n *     primary - (default) Read from primary only. Operations will produce an error if primary is unavailable. Cannot be combined with tags.\n *     secondary            Read from secondary if available, otherwise error.\n *     primaryPreferred     Read from primary if available, otherwise a secondary.\n *     secondaryPreferred   Read from a secondary if available, otherwise read from the primary.\n *     nearest              All operations read from among the nearest candidates, but unlike other modes, this option will include both the primary and all secondaries in the random selection.\n *\n * Aliases\n *\n *     p   primary\n *     pp  primaryPreferred\n *     s   secondary\n *     sp  secondaryPreferred\n *     n   nearest\n *\n * ####Example:\n *\n *     new Query().read('primary')\n *     new Query().read('p')  // same as primary\n *\n *     new Query().read('primaryPreferred')\n *     new Query().read('pp') // same as primaryPreferred\n *\n *     new Query().read('secondary')\n *     new Query().read('s')  // same as secondary\n *\n *     new Query().read('secondaryPreferred')\n *     new Query().read('sp') // same as secondaryPreferred\n *\n *     new Query().read('nearest')\n *     new Query().read('n')  // same as nearest\n *\n *     // read from secondaries with matching tags\n *     new Query().read('s', [{ dc:'sf', s: 1 },{ dc:'ma', s: 2 }])\n *\n * Read more about how to use read preferrences [here](http://docs.mongodb.org/manual/applications/replication/#read-preference) and [here](http://mongodb.github.com/node-mongodb-native/driver-articles/anintroductionto1_1and2_2.html#read-preferences).\n *\n * @method read\n * @memberOf Query\n * @param {String} pref one of the listed preference options or aliases\n * @param {Array} [tags] optional tags for this query\n * @see mongodb http://docs.mongodb.org/manual/applications/replication/#read-preference\n * @see driver http://mongodb.github.com/node-mongodb-native/driver-articles/anintroductionto1_1and2_2.html#read-preferences\n * @return {Query} this\n * @api public\n */\n\nQuery.prototype.read = function read(pref, tags) {\n  // first cast into a ReadPreference object to support tags\n  var read = readPref.call(readPref, pref, tags);\n  return Query.base.read.call(this, read);\n};\n\n/**\n * Merges another Query or conditions object into this one.\n *\n * When a Query is passed, conditions, field selection and options are merged.\n *\n * New in 3.7.0\n *\n * @method merge\n * @memberOf Query\n * @param {Query|Object} source\n * @return {Query} this\n */\n\n/**\n * Sets query options.\n *\n * ####Options:\n *\n * - [tailable](http://www.mongodb.org/display/DOCS/Tailable+Cursors) *\n * - [sort](http://www.mongodb.org/display/DOCS/Advanced+Queries#AdvancedQueries-%7B%7Bsort(\\)%7D%7D) *\n * - [limit](http://www.mongodb.org/display/DOCS/Advanced+Queries#AdvancedQueries-%7B%7Blimit%28%29%7D%7D) *\n * - [skip](http://www.mongodb.org/display/DOCS/Advanced+Queries#AdvancedQueries-%7B%7Bskip%28%29%7D%7D) *\n * - [maxscan](https://docs.mongodb.org/v3.2/reference/operator/meta/maxScan/#metaOp._S_maxScan) *\n * - [batchSize](http://www.mongodb.org/display/DOCS/Advanced+Queries#AdvancedQueries-%7B%7BbatchSize%28%29%7D%7D) *\n * - [comment](http://www.mongodb.org/display/DOCS/Advanced+Queries#AdvancedQueries-%24comment) *\n * - [snapshot](http://www.mongodb.org/display/DOCS/Advanced+Queries#AdvancedQueries-%7B%7Bsnapshot%28%29%7D%7D) *\n * - [hint](http://www.mongodb.org/display/DOCS/Advanced+Queries#AdvancedQueries-%24hint) *\n * - [readPreference](http://docs.mongodb.org/manual/applications/replication/#read-preference) **\n * - [lean](./api.html#query_Query-lean) *\n * - [safe](http://www.mongodb.org/display/DOCS/getLastError+Command)\n *\n * _* denotes a query helper method is also available_\n * _** query helper method to set `readPreference` is `read()`_\n *\n * @param {Object} options\n * @api public\n */\n\nQuery.prototype.setOptions = function(options, overwrite) {\n  // overwrite is only for internal use\n  if (overwrite) {\n    // ensure that _mongooseOptions & options are two different objects\n    this._mongooseOptions = (options && utils.clone(options)) || {};\n    this.options = options || {};\n\n    if ('populate' in options) {\n      this.populate(this._mongooseOptions);\n    }\n    return this;\n  }\n\n  if (!(options && options.constructor.name === 'Object')) {\n    return this;\n  }\n\n  if (options && Array.isArray(options.populate)) {\n    var populate = options.populate;\n    delete options.populate;\n    var _numPopulate = populate.length;\n    for (var i = 0; i < _numPopulate; ++i) {\n      this.populate(populate[i]);\n    }\n  }\n\n  return Query.base.setOptions.call(this, options);\n};\n\n/**\n * Returns the current query conditions as a JSON object.\n *\n * ####Example:\n *\n *     var query = new Query();\n *     query.find({ a: 1 }).where('b').gt(2);\n *     query.getQuery(); // { a: 1, b: { $gt: 2 } }\n *\n * @return {Object} current query conditions\n * @api public\n */\n\nQuery.prototype.getQuery = function() {\n  return this._conditions;\n};\n\n/**\n * Returns the current update operations as a JSON object.\n *\n * ####Example:\n *\n *     var query = new Query();\n *     query.update({}, { $set: { a: 5 } });\n *     query.getUpdate(); // { $set: { a: 5 } }\n *\n * @return {Object} current update operations\n * @api public\n */\n\nQuery.prototype.getUpdate = function() {\n  return this._update;\n};\n\n/**\n * Returns fields selection for this query.\n *\n * @method _fieldsForExec\n * @return {Object}\n * @api private\n * @receiver Query\n */\n\n/**\n * Return an update document with corrected $set operations.\n *\n * @method _updateForExec\n * @api private\n * @receiver Query\n */\n\nQuery.prototype._updateForExec = function() {\n  var update = utils.clone(this._update, {\n    retainKeyOrder: true,\n    transform: false,\n    depopulate: true\n  });\n  var ops = Object.keys(update);\n  var i = ops.length;\n  var ret = {};\n\n  while (i--) {\n    var op = ops[i];\n\n    if (this.options.overwrite) {\n      ret[op] = update[op];\n      continue;\n    }\n\n    if ('$' !== op[0]) {\n      // fix up $set sugar\n      if (!ret.$set) {\n        if (update.$set) {\n          ret.$set = update.$set;\n        } else {\n          ret.$set = {};\n        }\n      }\n      ret.$set[op] = update[op];\n      ops.splice(i, 1);\n      if (!~ops.indexOf('$set')) ops.push('$set');\n    } else if ('$set' === op) {\n      if (!ret.$set) {\n        ret[op] = update[op];\n      }\n    } else {\n      ret[op] = update[op];\n    }\n  }\n\n  return ret;\n};\n\n/**\n * Makes sure _path is set.\n *\n * @method _ensurePath\n * @param {String} method\n * @api private\n * @receiver Query\n */\n\n/**\n * Determines if `conds` can be merged using `mquery().merge()`\n *\n * @method canMerge\n * @memberOf Query\n * @param {Object} conds\n * @return {Boolean}\n * @api private\n */\n\n/**\n * Returns default options for this query.\n *\n * @param {Model} model\n * @api private\n */\n\nQuery.prototype._optionsForExec = function(model) {\n  var options = Query.base._optionsForExec.call(this);\n\n  delete options.populate;\n  delete options.retainKeyOrder;\n  model = model || this.model;\n\n  if (!model) {\n    return options;\n  }\n\n  if (!('safe' in options) && model.schema.options.safe) {\n    options.safe = model.schema.options.safe;\n  }\n\n  if (!('readPreference' in options) && model.schema.options.read) {\n    options.readPreference = model.schema.options.read;\n  }\n\n  return options;\n};\n\n/**\n * Sets the lean option.\n *\n * Documents returned from queries with the `lean` option enabled are plain javascript objects, not [MongooseDocuments](#document-js). They have no `save` method, getters/setters or other Mongoose magic applied.\n *\n * ####Example:\n *\n *     new Query().lean() // true\n *     new Query().lean(true)\n *     new Query().lean(false)\n *\n *     Model.find().lean().exec(function (err, docs) {\n *       docs[0] instanceof mongoose.Document // false\n *     });\n *\n * This is a [great](https://groups.google.com/forum/#!topic/mongoose-orm/u2_DzDydcnA/discussion) option in high-performance read-only scenarios, especially when combined with [stream](#query_Query-stream).\n *\n * @param {Boolean} bool defaults to true\n * @return {Query} this\n * @api public\n */\n\nQuery.prototype.lean = function(v) {\n  this._mongooseOptions.lean = arguments.length ? !!v : true;\n  return this;\n};\n\n/**\n * Getter/setter around the current mongoose-specific options for this query\n * (populate, lean, etc.)\n *\n * @param {Object} options if specified, overwrites the current options\n * @returns {Object} the options\n * @api public\n */\n\nQuery.prototype.mongooseOptions = function(v) {\n  if (arguments.length > 0) {\n    this._mongooseOptions = v;\n  }\n  return this._mongooseOptions;\n};\n\n/**\n * Thunk around find()\n *\n * @param {Function} [callback]\n * @return {Query} this\n * @api private\n */\nQuery.prototype._find = function(callback) {\n  if (this._castError) {\n    callback(this._castError);\n    return this;\n  }\n\n  this._applyPaths();\n  this._fields = this._castFields(this._fields);\n\n  var fields = this._fieldsForExec();\n  var options = this._mongooseOptions;\n  var _this = this;\n\n  var cb = function(err, docs) {\n    if (err) {\n      return callback(err);\n    }\n\n    if (docs.length === 0) {\n      return callback(null, docs);\n    }\n\n    if (!options.populate) {\n      return options.lean === true\n          ? callback(null, docs)\n          : completeMany(_this.model, docs, fields, null, callback);\n    }\n\n    var pop = helpers.preparePopulationOptionsMQ(_this, options);\n    pop.__noPromise = true;\n    _this.model.populate(docs, pop, function(err, docs) {\n      if (err) return callback(err);\n      return options.lean === true\n          ? callback(null, docs)\n          : completeMany(_this.model, docs, fields, pop, callback);\n    });\n  };\n\n  return Query.base.find.call(this, {}, cb);\n};\n\n/**\n * Finds documents.\n *\n * When no `callback` is passed, the query is not executed. When the query is executed, the result will be an array of documents.\n *\n * ####Example\n *\n *     query.find({ name: 'Los Pollos Hermanos' }).find(callback)\n *\n * @param {Object} [criteria] mongodb selector\n * @param {Function} [callback]\n * @return {Query} this\n * @api public\n */\n\nQuery.prototype.find = function(conditions, callback) {\n  if (typeof conditions === 'function') {\n    callback = conditions;\n    conditions = {};\n  }\n\n  conditions = utils.toObject(conditions);\n\n  if (mquery.canMerge(conditions)) {\n    this.merge(conditions);\n  }\n\n  prepareDiscriminatorCriteria(this);\n\n  try {\n    this.cast(this.model);\n    this._castError = null;\n  } catch (err) {\n    this._castError = err;\n  }\n\n  // if we don't have a callback, then just return the query object\n  if (!callback) {\n    return Query.base.find.call(this);\n  }\n\n  this._find(callback);\n\n  return this;\n};\n\n/**\n * Merges another Query or conditions object into this one.\n *\n * When a Query is passed, conditions, field selection and options are merged.\n *\n * @param {Query|Object} source\n * @return {Query} this\n */\n\nQuery.prototype.merge = function(source) {\n  if (!source) {\n    return this;\n  }\n\n  var opts = { retainKeyOrder: this.options.retainKeyOrder, overwrite: true };\n\n  if (source instanceof Query) {\n    // if source has a feature, apply it to ourselves\n\n    if (source._conditions) {\n      utils.merge(this._conditions, source._conditions, opts);\n    }\n\n    if (source._fields) {\n      this._fields || (this._fields = {});\n      utils.merge(this._fields, source._fields, opts);\n    }\n\n    if (source.options) {\n      this.options || (this.options = {});\n      utils.merge(this.options, source.options, opts);\n    }\n\n    if (source._update) {\n      this._update || (this._update = {});\n      utils.mergeClone(this._update, source._update);\n    }\n\n    if (source._distinct) {\n      this._distinct = source._distinct;\n    }\n\n    return this;\n  }\n\n  // plain object\n  utils.merge(this._conditions, source, opts);\n\n  return this;\n};\n\n/*!\n * hydrates many documents\n *\n * @param {Model} model\n * @param {Array} docs\n * @param {Object} fields\n * @param {Query} self\n * @param {Array} [pop] array of paths used in population\n * @param {Function} callback\n */\n\nfunction completeMany(model, docs, fields, pop, callback) {\n  var arr = [];\n  var count = docs.length;\n  var len = count;\n  var opts = pop ?\n  {populated: pop}\n      : undefined;\n  function init(err) {\n    if (err) return callback(err);\n    --count || callback(null, arr);\n  }\n  for (var i = 0; i < len; ++i) {\n    arr[i] = helpers.createModel(model, docs[i], fields);\n    arr[i].init(docs[i], opts, init);\n  }\n}\n\n/**\n * Adds a collation to this op (MongoDB 3.4 and up)\n *\n * @param {Object} value\n * @return {Query} this\n * @see MongoDB docs https://docs.mongodb.com/manual/reference/method/cursor.collation/#cursor.collation\n * @api public\n */\n\nQuery.prototype.collation = function(value) {\n  if (this.options == null) {\n    this.options = {};\n  }\n  this.options.collation = value;\n  return this;\n};\n\n/**\n * Thunk around findOne()\n *\n * @param {Function} [callback]\n * @see findOne http://docs.mongodb.org/manual/reference/method/db.collection.findOne/\n * @api private\n */\n\nQuery.prototype._findOne = function(callback) {\n  if (this._castError) {\n    return callback(this._castError);\n  }\n\n  this._applyPaths();\n  this._fields = this._castFields(this._fields);\n\n  var options = this._mongooseOptions;\n  var projection = this._fieldsForExec();\n  var _this = this;\n\n  // don't pass in the conditions because we already merged them in\n  Query.base.findOne.call(_this, {}, function(err, doc) {\n    if (err) {\n      return callback(err);\n    }\n    if (!doc) {\n      return callback(null, null);\n    }\n\n    if (!options.populate) {\n      return options.lean === true\n          ? callback(null, doc)\n          : completeOne(_this.model, doc, null, {}, projection, null, callback);\n    }\n\n    var pop = helpers.preparePopulationOptionsMQ(_this, options);\n    pop.__noPromise = true;\n    _this.model.populate(doc, pop, function(err, doc) {\n      if (err) {\n        return callback(err);\n      }\n      return options.lean === true\n          ? callback(null, doc)\n          : completeOne(_this.model, doc, null, {}, projection, pop, callback);\n    });\n  });\n};\n\n/**\n * Declares the query a findOne operation. When executed, the first found document is passed to the callback.\n *\n * Passing a `callback` executes the query. The result of the query is a single document.\n *\n * * *Note:* `conditions` is optional, and if `conditions` is null or undefined,\n * mongoose will send an empty `findOne` command to MongoDB, which will return\n * an arbitrary document. If you're querying by `_id`, use `Model.findById()`\n * instead.\n *\n * ####Example\n *\n *     var query  = Kitten.where({ color: 'white' });\n *     query.findOne(function (err, kitten) {\n *       if (err) return handleError(err);\n *       if (kitten) {\n *         // doc may be null if no document matched\n *       }\n *     });\n *\n * @param {Object|Query} [criteria] mongodb selector\n * @param {Object} [projection] optional fields to return\n * @param {Function} [callback] optional params are (error, document)\n * @return {Query} this\n * @see findOne http://docs.mongodb.org/manual/reference/method/db.collection.findOne/\n * @see Query.select #query_Query-select\n * @api public\n */\n\nQuery.prototype.findOne = function(conditions, projection, options, callback) {\n  if (typeof conditions === 'function') {\n    callback = conditions;\n    conditions = null;\n    projection = null;\n    options = null;\n  } else if (typeof projection === 'function') {\n    callback = projection;\n    options = null;\n    projection = null;\n  } else if (typeof options === 'function') {\n    callback = options;\n    options = null;\n  }\n\n  // make sure we don't send in the whole Document to merge()\n  conditions = utils.toObject(conditions);\n\n  this.op = 'findOne';\n\n  if (options) {\n    this.setOptions(options);\n  }\n\n  if (projection) {\n    this.select(projection);\n  }\n\n  if (mquery.canMerge(conditions)) {\n    this.merge(conditions);\n  } else if (conditions != null) {\n    throw new Error('Invalid argument to findOne(): ' +\n      util.inspect(conditions));\n  }\n\n  prepareDiscriminatorCriteria(this);\n\n  try {\n    this.cast(this.model);\n    this._castError = null;\n  } catch (err) {\n    this._castError = err;\n  }\n\n  if (!callback) {\n    // already merged in the conditions, don't need to send them in.\n    return Query.base.findOne.call(this);\n  }\n\n  this._findOne(callback);\n\n  return this;\n};\n\n/**\n * Thunk around count()\n *\n * @param {Function} [callback]\n * @see count http://docs.mongodb.org/manual/reference/method/db.collection.count/\n * @api private\n */\n\nQuery.prototype._count = function(callback) {\n  try {\n    this.cast(this.model);\n  } catch (err) {\n    process.nextTick(function() {\n      callback(err);\n    });\n    return this;\n  }\n\n  var conds = this._conditions;\n  var options = this._optionsForExec();\n\n  this._collection.count(conds, options, utils.tick(callback));\n};\n\n/**\n * Specifying this query as a `count` query.\n *\n * Passing a `callback` executes the query.\n *\n * ####Example:\n *\n *     var countQuery = model.where({ 'color': 'black' }).count();\n *\n *     query.count({ color: 'black' }).count(callback)\n *\n *     query.count({ color: 'black' }, callback)\n *\n *     query.where('color', 'black').count(function (err, count) {\n *       if (err) return handleError(err);\n *       console.log('there are %d kittens', count);\n *     })\n *\n * @param {Object} [criteria] mongodb selector\n * @param {Function} [callback] optional params are (error, count)\n * @return {Query} this\n * @see count http://docs.mongodb.org/manual/reference/method/db.collection.count/\n * @api public\n */\n\nQuery.prototype.count = function(conditions, callback) {\n  if (typeof conditions === 'function') {\n    callback = conditions;\n    conditions = undefined;\n  }\n\n  if (mquery.canMerge(conditions)) {\n    this.merge(conditions);\n  }\n\n  this.op = 'count';\n  if (!callback) {\n    return this;\n  }\n\n  this._count(callback);\n\n  return this;\n};\n\n/**\n * Declares or executes a distict() operation.\n *\n * Passing a `callback` executes the query.\n *\n * ####Example\n *\n *     distinct(field, conditions, callback)\n *     distinct(field, conditions)\n *     distinct(field, callback)\n *     distinct(field)\n *     distinct(callback)\n *     distinct()\n *\n * @param {String} [field]\n * @param {Object|Query} [criteria]\n * @param {Function} [callback] optional params are (error, arr)\n * @return {Query} this\n * @see distinct http://docs.mongodb.org/manual/reference/method/db.collection.distinct/\n * @api public\n */\n\nQuery.prototype.distinct = function(field, conditions, callback) {\n  if (!callback) {\n    if (typeof conditions === 'function') {\n      callback = conditions;\n      conditions = undefined;\n    } else if (typeof field === 'function') {\n      callback = field;\n      field = undefined;\n      conditions = undefined;\n    }\n  }\n\n  conditions = utils.toObject(conditions);\n\n  if (mquery.canMerge(conditions)) {\n    this.merge(conditions);\n  }\n\n  try {\n    this.cast(this.model);\n  } catch (err) {\n    if (!callback) {\n      throw err;\n    }\n    callback(err);\n    return this;\n  }\n\n  return Query.base.distinct.call(this, {}, field, callback);\n};\n\n/**\n * Sets the sort order\n *\n * If an object is passed, values allowed are `asc`, `desc`, `ascending`, `descending`, `1`, and `-1`.\n *\n * If a string is passed, it must be a space delimited list of path names. The\n * sort order of each path is ascending unless the path name is prefixed with `-`\n * which will be treated as descending.\n *\n * ####Example\n *\n *     // sort by \"field\" ascending and \"test\" descending\n *     query.sort({ field: 'asc', test: -1 });\n *\n *     // equivalent\n *     query.sort('field -test');\n *\n * ####Note\n *\n * Cannot be used with `distinct()`\n *\n * @param {Object|String} arg\n * @return {Query} this\n * @see cursor.sort http://docs.mongodb.org/manual/reference/method/cursor.sort/\n * @api public\n */\n\nQuery.prototype.sort = function(arg) {\n  if (arguments.length > 1) {\n    throw new Error('sort() only takes 1 Argument');\n  }\n\n  return Query.base.sort.call(this, arg);\n};\n\n/**\n * Declare and/or execute this query as a remove() operation.\n *\n * ####Example\n *\n *     Model.remove({ artist: 'Anne Murray' }, callback)\n *\n * ####Note\n *\n * The operation is only executed when a callback is passed. To force execution without a callback, you must first call `remove()` and then execute it by using the `exec()` method.\n *\n *     // not executed\n *     var query = Model.find().remove({ name: 'Anne Murray' })\n *\n *     // executed\n *     query.remove({ name: 'Anne Murray' }, callback)\n *     query.remove({ name: 'Anne Murray' }).remove(callback)\n *\n *     // executed without a callback\n *     query.exec()\n *\n *     // summary\n *     query.remove(conds, fn); // executes\n *     query.remove(conds)\n *     query.remove(fn) // executes\n *     query.remove()\n *\n * @param {Object|Query} [criteria] mongodb selector\n * @param {Function} [callback] optional params are (error, writeOpResult)\n * @return {Query} this\n * @see writeOpResult http://mongodb.github.io/node-mongodb-native/2.2/api/Collection.html#~WriteOpResult\n * @see remove http://docs.mongodb.org/manual/reference/method/db.collection.remove/\n * @api public\n */\n\nQuery.prototype.remove = function(cond, callback) {\n  if (typeof cond === 'function') {\n    callback = cond;\n    cond = null;\n  }\n\n  var cb = typeof callback === 'function';\n\n  try {\n    this.cast(this.model);\n  } catch (err) {\n    if (cb) return process.nextTick(callback.bind(null, err));\n    return this;\n  }\n\n  return Query.base.remove.call(this, cond, callback);\n};\n\n/**\n * Declare and/or execute this query as a `deleteOne()` operation. Works like\n * remove, except it deletes at most one document regardless of the `justOne`\n * option.\n *\n * ####Example\n *\n *     Character.deleteOne({ name: 'Eddard Stark' }, callback)\n *     Character.deleteOne({ name: 'Eddard Stark' }).then(next)\n *\n * @param {Object|Query} [criteria] mongodb selector\n * @param {Function} [callback] optional params are (error, writeOpResult)\n * @return {Query} this\n * @see writeOpResult http://mongodb.github.io/node-mongodb-native/2.2/api/Collection.html#~WriteOpResult\n * @see remove http://docs.mongodb.org/manual/reference/method/db.collection.remove/\n * @api public\n */\n\nQuery.prototype.deleteOne = function(cond, callback) {\n  if (typeof cond === 'function') {\n    callback = cond;\n    cond = null;\n  }\n\n  var cb = typeof callback === 'function';\n\n  try {\n    this.cast(this.model);\n  } catch (err) {\n    if (cb) return process.nextTick(callback.bind(null, err));\n    return this;\n  }\n\n  return Query.base.deleteOne.call(this, cond, callback);\n};\n\n/**\n * Declare and/or execute this query as a `deleteMany()` operation. Works like\n * remove, except it deletes _every_ document that matches `criteria` in the\n * collection, regardless of the value of `justOne`.\n *\n * ####Example\n *\n *     Character.deleteMany({ name: /Stark/, age: { $gte: 18 } }, callback)\n *     Character.deleteMany({ name: /Stark/, age: { $gte: 18 } }).then(next)\n *\n * @param {Object|Query} [criteria] mongodb selector\n * @param {Function} [callback] optional params are (error, writeOpResult)\n * @return {Query} this\n * @see writeOpResult http://mongodb.github.io/node-mongodb-native/2.2/api/Collection.html#~WriteOpResult\n * @see remove http://docs.mongodb.org/manual/reference/method/db.collection.remove/\n * @api public\n */\n\nQuery.prototype.deleteMany = function(cond, callback) {\n  if (typeof cond === 'function') {\n    callback = cond;\n    cond = null;\n  }\n\n  var cb = typeof callback === 'function';\n\n  try {\n    this.cast(this.model);\n  } catch (err) {\n    if (cb) return process.nextTick(callback.bind(null, err));\n    return this;\n  }\n\n  return Query.base.deleteMany.call(this, cond, callback);\n};\n\n/*!\n * hydrates a document\n *\n * @param {Model} model\n * @param {Document} doc\n * @param {Object} res 3rd parameter to callback\n * @param {Object} fields\n * @param {Query} self\n * @param {Array} [pop] array of paths used in population\n * @param {Function} callback\n */\n\nfunction completeOne(model, doc, res, options, fields, pop, callback) {\n  var opts = pop ?\n  {populated: pop}\n      : undefined;\n\n  var casted = helpers.createModel(model, doc, fields);\n  casted.init(doc, opts, function(err) {\n    if (err) {\n      return callback(err);\n    }\n\n    if (options.rawResult) {\n      res.value = casted;\n      return callback(null, res);\n    }\n    if (options.passRawResult) {\n      return callback(null, casted, decorateResult(res));\n    }\n    callback(null, casted);\n  });\n}\n\n/*!\n * If the model is a discriminator type and not root, then add the key & value to the criteria.\n */\n\nfunction prepareDiscriminatorCriteria(query) {\n  if (!query || !query.model || !query.model.schema) {\n    return;\n  }\n\n  var schema = query.model.schema;\n\n  if (schema && schema.discriminatorMapping && !schema.discriminatorMapping.isRoot) {\n    query._conditions[schema.discriminatorMapping.key] = schema.discriminatorMapping.value;\n  }\n}\n\n/**\n * Issues a mongodb [findAndModify](http://www.mongodb.org/display/DOCS/findAndModify+Command) update command.\n *\n * Finds a matching document, updates it according to the `update` arg, passing any `options`, and returns the found document (if any) to the callback. The query executes immediately if `callback` is passed.\n *\n * ####Available options\n *\n * - `new`: bool - if true, return the modified document rather than the original. defaults to false (changed in 4.0)\n * - `upsert`: bool - creates the object if it doesn't exist. defaults to false.\n * - `fields`: {Object|String} - Field selection. Equivalent to `.select(fields).findOneAndUpdate()`\n * - `sort`: if multiple docs are found by the conditions, sets the sort order to choose which doc to update\n * - `maxTimeMS`: puts a time limit on the query - requires mongodb >= 2.6.0\n * - `runValidators`: if true, runs [update validators](/docs/validation.html#update-validators) on this command. Update validators validate the update operation against the model's schema.\n * - `setDefaultsOnInsert`: if this and `upsert` are true, mongoose will apply the [defaults](http://mongoosejs.com/docs/defaults.html) specified in the model's schema if a new document is created. This option only works on MongoDB >= 2.4 because it relies on [MongoDB's `$setOnInsert` operator](https://docs.mongodb.org/v2.4/reference/operator/update/setOnInsert/).\n * - `passRawResult`: if true, passes the [raw result from the MongoDB driver as the third callback parameter](http://mongodb.github.io/node-mongodb-native/2.0/api/Collection.html#findAndModify)\n * - `context` (string) if set to 'query' and `runValidators` is on, `this` will refer to the query in custom validator functions that update validation runs. Does nothing if `runValidators` is false.\n *\n * ####Callback Signature\n *     function(error, doc) {\n *       // error: any errors that occurred\n *       // doc: the document before updates are applied if `new: false`, or after updates if `new = true`\n *     }\n *\n * ####Examples\n *\n *     query.findOneAndUpdate(conditions, update, options, callback) // executes\n *     query.findOneAndUpdate(conditions, update, options)  // returns Query\n *     query.findOneAndUpdate(conditions, update, callback) // executes\n *     query.findOneAndUpdate(conditions, update)           // returns Query\n *     query.findOneAndUpdate(update, callback)             // returns Query\n *     query.findOneAndUpdate(update)                       // returns Query\n *     query.findOneAndUpdate(callback)                     // executes\n *     query.findOneAndUpdate()                             // returns Query\n *\n * @method findOneAndUpdate\n * @memberOf Query\n * @param {Object|Query} [query]\n * @param {Object} [doc]\n * @param {Object} [options]\n * @param {Boolean} [options.passRawResult] if true, passes the [raw result from the MongoDB driver as the third callback parameter](http://mongodb.github.io/node-mongodb-native/2.0/api/Collection.html#findAndModify)\n * @param {Boolean|String} [options.strict] overwrites the schema's [strict mode option](http://mongoosejs.com/docs/guide.html#strict)\n * @param {Function} [callback] optional params are (error, doc), _unless_ `passRawResult` is used, in which case params are (error, doc, writeOpResult)\n * @see mongodb http://www.mongodb.org/display/DOCS/findAndModify+Command\n * @see writeOpResult http://mongodb.github.io/node-mongodb-native/2.2/api/Collection.html#~WriteOpResult\n * @return {Query} this\n * @api public\n */\n\nQuery.prototype.findOneAndUpdate = function(criteria, doc, options, callback) {\n  this.op = 'findOneAndUpdate';\n  this._validate();\n\n  switch (arguments.length) {\n    case 3:\n      if (typeof options === 'function') {\n        callback = options;\n        options = {};\n      }\n      break;\n    case 2:\n      if (typeof doc === 'function') {\n        callback = doc;\n        doc = criteria;\n        criteria = undefined;\n      }\n      options = undefined;\n      break;\n    case 1:\n      if (typeof criteria === 'function') {\n        callback = criteria;\n        criteria = options = doc = undefined;\n      } else {\n        doc = criteria;\n        criteria = options = undefined;\n      }\n  }\n\n  if (mquery.canMerge(criteria)) {\n    this.merge(criteria);\n  }\n\n  // apply doc\n  if (doc) {\n    this._mergeUpdate(doc);\n  }\n\n  if (options) {\n    options = utils.clone(options, { retainKeyOrder: true });\n    if (options.projection) {\n      this.select(options.projection);\n      delete options.projection;\n    }\n    if (options.fields) {\n      this.select(options.fields);\n      delete options.fields;\n    }\n\n    this.setOptions(options);\n  }\n\n  if (!callback) {\n    return this;\n  }\n\n  return this._findOneAndUpdate(callback);\n};\n\n/*!\n * Thunk around findOneAndUpdate()\n *\n * @param {Function} [callback]\n * @api private\n */\n\nQuery.prototype._findOneAndUpdate = function(callback) {\n  this._findAndModify('update', callback);\n  return this;\n};\n\n/**\n * Issues a mongodb [findAndModify](http://www.mongodb.org/display/DOCS/findAndModify+Command) remove command.\n *\n * Finds a matching document, removes it, passing the found document (if any) to the callback. Executes immediately if `callback` is passed.\n *\n * ####Available options\n *\n * - `sort`: if multiple docs are found by the conditions, sets the sort order to choose which doc to update\n * - `maxTimeMS`: puts a time limit on the query - requires mongodb >= 2.6.0\n * - `passRawResult`: if true, passes the [raw result from the MongoDB driver as the third callback parameter](http://mongodb.github.io/node-mongodb-native/2.0/api/Collection.html#findAndModify)\n *\n * ####Callback Signature\n *     function(error, doc, result) {\n *       // error: any errors that occurred\n *       // doc: the document before updates are applied if `new: false`, or after updates if `new = true`\n *       // result: [raw result from the MongoDB driver](http://mongodb.github.io/node-mongodb-native/2.0/api/Collection.html#findAndModify)\n *     }\n *\n * ####Examples\n *\n *     A.where().findOneAndRemove(conditions, options, callback) // executes\n *     A.where().findOneAndRemove(conditions, options)  // return Query\n *     A.where().findOneAndRemove(conditions, callback) // executes\n *     A.where().findOneAndRemove(conditions) // returns Query\n *     A.where().findOneAndRemove(callback)   // executes\n *     A.where().findOneAndRemove()           // returns Query\n *\n * @method findOneAndRemove\n * @memberOf Query\n * @param {Object} [conditions]\n * @param {Object} [options]\n * @param {Boolean} [options.passRawResult] if true, passes the [raw result from the MongoDB driver as the third callback parameter](http://mongodb.github.io/node-mongodb-native/2.0/api/Collection.html#findAndModify)\n * @param {Boolean|String} [options.strict] overwrites the schema's [strict mode option](http://mongoosejs.com/docs/guide.html#strict)\n * @param {Function} [callback] optional params are (error, document)\n * @return {Query} this\n * @see mongodb http://www.mongodb.org/display/DOCS/findAndModify+Command\n * @api public\n */\n\nQuery.prototype.findOneAndRemove = function(conditions, options, callback) {\n  this.op = 'findOneAndRemove';\n  this._validate();\n\n  switch (arguments.length) {\n    case 2:\n      if (typeof options === 'function') {\n        callback = options;\n        options = {};\n      }\n      break;\n    case 1:\n      if (typeof conditions === 'function') {\n        callback = conditions;\n        conditions = undefined;\n        options = undefined;\n      }\n      break;\n  }\n\n  if (mquery.canMerge(conditions)) {\n    this.merge(conditions);\n  }\n\n  options && this.setOptions(options);\n\n  if (!callback) {\n    return this;\n  }\n\n  this._findOneAndRemove(callback);\n\n  return this;\n};\n\n/*!\n * Thunk around findOneAndRemove()\n *\n * @param {Function} [callback]\n * @return {Query} this\n * @api private\n */\nQuery.prototype._findOneAndRemove = function(callback) {\n  Query.base.findOneAndRemove.call(this, callback);\n};\n\n/*!\n * ignore\n */\n\nfunction decorateResult(res) {\n  if (res) {\n    res._kareemIgnore = true;\n  }\n  return res;\n}\n\n/*!\n * Override mquery.prototype._findAndModify to provide casting etc.\n *\n * @param {String} type - either \"remove\" or \"update\"\n * @param {Function} callback\n * @api private\n */\n\nQuery.prototype._findAndModify = function(type, callback) {\n  if (typeof callback !== 'function') {\n    throw new Error('Expected callback in _findAndModify');\n  }\n\n  var model = this.model;\n  var schema = model.schema;\n  var _this = this;\n  var castedQuery;\n  var castedDoc;\n  var fields;\n  var opts;\n  var doValidate;\n\n  castedQuery = castQuery(this);\n  if (castedQuery instanceof Error) {\n    return callback(castedQuery);\n  }\n\n  opts = this._optionsForExec(model);\n\n  if ('strict' in opts) {\n    this._mongooseOptions.strict = opts.strict;\n  }\n\n  if (type === 'remove') {\n    opts.remove = true;\n  } else {\n    if (!('new' in opts)) {\n      opts.new = false;\n    }\n    if (!('upsert' in opts)) {\n      opts.upsert = false;\n    }\n    if (opts.upsert || opts['new']) {\n      opts.remove = false;\n    }\n\n    castedDoc = castDoc(this, opts.overwrite);\n    castedDoc = setDefaultsOnInsert(this, schema, castedDoc, opts);\n    if (!castedDoc) {\n      if (opts.upsert) {\n        // still need to do the upsert to empty doc\n        var doc = utils.clone(castedQuery);\n        delete doc._id;\n        castedDoc = {$set: doc};\n      } else {\n        return this.findOne(callback);\n      }\n    } else if (castedDoc instanceof Error) {\n      return callback(castedDoc);\n    } else {\n      // In order to make MongoDB 2.6 happy (see\n      // https://jira.mongodb.org/browse/SERVER-12266 and related issues)\n      // if we have an actual update document but $set is empty, junk the $set.\n      if (castedDoc.$set && Object.keys(castedDoc.$set).length === 0) {\n        delete castedDoc.$set;\n      }\n    }\n\n    doValidate = updateValidators(this, schema, castedDoc, opts);\n  }\n\n  this._applyPaths();\n\n  var options = this._mongooseOptions;\n\n  if (this._fields) {\n    fields = utils.clone(this._fields);\n    opts.fields = this._castFields(fields);\n    if (opts.fields instanceof Error) {\n      return callback(opts.fields);\n    }\n  }\n\n  if (opts.sort) convertSortToArray(opts);\n\n  var cb = function(err, doc, res) {\n    if (err) {\n      return callback(err);\n    }\n\n    if (!doc || (utils.isObject(doc) && Object.keys(doc).length === 0)) {\n      if (opts.rawResult) {\n        return callback(null, res);\n      }\n      // opts.passRawResult will be deprecated soon\n      if (opts.passRawResult) {\n        return callback(null, null, decorateResult(res));\n      }\n      return callback(null, null);\n    }\n\n    if (!options.populate) {\n      if (options.lean === true) {\n        return _completeOneLean(doc, res, opts, callback);\n      }\n      return completeOne(_this.model, doc, res, opts, fields, null, callback);\n    }\n\n    var pop = helpers.preparePopulationOptionsMQ(_this, options);\n    pop.__noPromise = true;\n    _this.model.populate(doc, pop, function(err, doc) {\n      if (err) {\n        return callback(err);\n      }\n\n      if (options.lean === true) {\n        return _completeOneLean(doc, res, opts, callback);\n      }\n      return completeOne(_this.model, doc, res, opts, fields, pop, callback);\n    });\n  };\n\n  if (opts.runValidators && doValidate) {\n    var _callback = function(error) {\n      if (error) {\n        return callback(error);\n      }\n      _this._collection.findAndModify(castedQuery, castedDoc, opts, utils.tick(function(error, res) {\n        return cb(error, res ? res.value : res, res);\n      }));\n    };\n\n    try {\n      doValidate(_callback);\n    } catch (error) {\n      callback(error);\n    }\n  } else {\n    this._collection.findAndModify(castedQuery, castedDoc, opts, utils.tick(function(error, res) {\n      return cb(error, res ? res.value : res, res);\n    }));\n  }\n\n  return this;\n};\n\n/*!\n * ignore\n */\n\nfunction _completeOneLean(doc, res, opts, callback) {\n  if (opts.rawResult) {\n    return callback(null, res);\n  }\n  if (opts.passRawResult) {\n    return callback(null, doc, decorateResult(res));\n  }\n  return callback(null, doc);\n}\n\n/*!\n * Override mquery.prototype._mergeUpdate to handle mongoose objects in\n * updates.\n *\n * @param {Object} doc\n * @api private\n */\n\nQuery.prototype._mergeUpdate = function(doc) {\n  if (!this._update) this._update = {};\n  if (doc instanceof Query) {\n    if (doc._update) {\n      utils.mergeClone(this._update, doc._update);\n    }\n  } else {\n    utils.mergeClone(this._update, doc);\n  }\n};\n\n/*!\n * The mongodb driver 1.3.23 only supports the nested array sort\n * syntax. We must convert it or sorting findAndModify will not work.\n */\n\nfunction convertSortToArray(opts) {\n  if (Array.isArray(opts.sort)) {\n    return;\n  }\n  if (!utils.isObject(opts.sort)) {\n    return;\n  }\n\n  var sort = [];\n\n  for (var key in opts.sort) {\n    if (utils.object.hasOwnProperty(opts.sort, key)) {\n      sort.push([key, opts.sort[key]]);\n    }\n  }\n\n  opts.sort = sort;\n}\n\n/*!\n * Internal thunk for .update()\n *\n * @param {Function} callback\n * @see Model.update #model_Model.update\n * @api private\n */\nQuery.prototype._execUpdate = function(callback) {\n  var schema = this.model.schema;\n  var doValidate;\n  var _this;\n\n  var castedQuery = this._conditions;\n  var castedDoc = this._update;\n  var options = this.options;\n\n  if (this._castError) {\n    callback(this._castError);\n    return this;\n  }\n\n  if (this.options.runValidators) {\n    _this = this;\n    doValidate = updateValidators(this, schema, castedDoc, options);\n    var _callback = function(err) {\n      if (err) {\n        return callback(err);\n      }\n\n      Query.base.update.call(_this, castedQuery, castedDoc, options, callback);\n    };\n    try {\n      doValidate(_callback);\n    } catch (err) {\n      process.nextTick(function() {\n        callback(err);\n      });\n    }\n    return this;\n  }\n\n  Query.base.update.call(this, castedQuery, castedDoc, options, callback);\n  return this;\n};\n\n/*!\n * Internal thunk for .updateMany()\n *\n * @param {Function} callback\n * @see Model.update #model_Model.update\n * @api private\n */\nQuery.prototype._updateMany = function(callback) {\n  var schema = this.model.schema;\n  var doValidate;\n  var _this;\n\n  var castedQuery = this._conditions;\n  var castedDoc = this._update;\n  var options = this.options;\n\n  if (this._castError) {\n    callback(this._castError);\n    return this;\n  }\n\n  if (this.options.runValidators) {\n    _this = this;\n    doValidate = updateValidators(this, schema, castedDoc, options);\n    var _callback = function(err) {\n      if (err) {\n        return callback(err);\n      }\n\n      Query.base.updateMany.call(_this, castedQuery, castedDoc, options, callback);\n    };\n    try {\n      doValidate(_callback);\n    } catch (err) {\n      process.nextTick(function() {\n        callback(err);\n      });\n    }\n    return this;\n  }\n\n  Query.base.updateMany.call(this, castedQuery, castedDoc, options, callback);\n  return this;\n};\n\n/*!\n * Internal thunk for .updateOne()\n *\n * @param {Function} callback\n * @see Model.update #model_Model.update\n * @api private\n */\nQuery.prototype._updateOne = function(callback) {\n  var schema = this.model.schema;\n  var doValidate;\n  var _this;\n\n  var castedQuery = this._conditions;\n  var castedDoc = this._update;\n  var options = this.options;\n\n  if (this._castError) {\n    callback(this._castError);\n    return this;\n  }\n\n  if (this.options.runValidators) {\n    _this = this;\n    doValidate = updateValidators(this, schema, castedDoc, options);\n    var _callback = function(err) {\n      if (err) {\n        return callback(err);\n      }\n\n      Query.base.updateOne.call(_this, castedQuery, castedDoc, options, callback);\n    };\n    try {\n      doValidate(_callback);\n    } catch (err) {\n      process.nextTick(function() {\n        callback(err);\n      });\n    }\n    return this;\n  }\n\n  Query.base.updateOne.call(this, castedQuery, castedDoc, options, callback);\n  return this;\n};\n\n/*!\n * Internal thunk for .replaceOne()\n *\n * @param {Function} callback\n * @see Model.replaceOne #model_Model.replaceOne\n * @api private\n */\nQuery.prototype._replaceOne = function(callback) {\n  var schema = this.model.schema;\n  var doValidate;\n  var _this;\n\n  var castedQuery = this._conditions;\n  var castedDoc = this._update;\n  var options = this.options;\n\n  if (this._castError) {\n    callback(this._castError);\n    return this;\n  }\n\n  if (this.options.runValidators) {\n    _this = this;\n    doValidate = updateValidators(this, schema, castedDoc, options);\n    var _callback = function(err) {\n      if (err) {\n        return callback(err);\n      }\n\n      Query.base.updateMany.call(_this, castedQuery, castedDoc, options, callback);\n    };\n    try {\n      doValidate(_callback);\n    } catch (err) {\n      process.nextTick(function() {\n        callback(err);\n      });\n    }\n    return this;\n  }\n\n  Query.base.replaceOne.call(this, castedQuery, castedDoc, options, callback);\n  return this;\n};\n\n/**\n * Declare and/or execute this query as an update() operation.\n *\n * _All paths passed that are not $atomic operations will become $set ops._\n *\n * ####Example\n *\n *     Model.where({ _id: id }).update({ title: 'words' })\n *\n *     // becomes\n *\n *     Model.where({ _id: id }).update({ $set: { title: 'words' }})\n *\n * ####Valid options:\n *\n *  - `safe` (boolean) safe mode (defaults to value set in schema (true))\n *  - `upsert` (boolean) whether to create the doc if it doesn't match (false)\n *  - `multi` (boolean) whether multiple documents should be updated (false)\n *  - `runValidators`: if true, runs [update validators](/docs/validation.html#update-validators) on this command. Update validators validate the update operation against the model's schema.\n *  - `setDefaultsOnInsert`: if this and `upsert` are true, mongoose will apply the [defaults](http://mongoosejs.com/docs/defaults.html) specified in the model's schema if a new document is created. This option only works on MongoDB >= 2.4 because it relies on [MongoDB's `$setOnInsert` operator](https://docs.mongodb.org/v2.4/reference/operator/update/setOnInsert/).\n *  - `strict` (boolean) overrides the `strict` option for this update\n *  - `overwrite` (boolean) disables update-only mode, allowing you to overwrite the doc (false)\n *  - `context` (string) if set to 'query' and `runValidators` is on, `this` will refer to the query in custom validator functions that update validation runs. Does nothing if `runValidators` is false.\n *\n * ####Note\n *\n * Passing an empty object `{}` as the doc will result in a no-op unless the `overwrite` option is passed. Without the `overwrite` option set, the update operation will be ignored and the callback executed without sending the command to MongoDB so as to prevent accidently overwritting documents in the collection.\n *\n * ####Note\n *\n * The operation is only executed when a callback is passed. To force execution without a callback, we must first call update() and then execute it by using the `exec()` method.\n *\n *     var q = Model.where({ _id: id });\n *     q.update({ $set: { name: 'bob' }}).update(); // not executed\n *\n *     q.update({ $set: { name: 'bob' }}).exec(); // executed\n *\n *     // keys that are not $atomic ops become $set.\n *     // this executes the same command as the previous example.\n *     q.update({ name: 'bob' }).exec();\n *\n *     // overwriting with empty docs\n *     var q = Model.where({ _id: id }).setOptions({ overwrite: true })\n *     q.update({ }, callback); // executes\n *\n *     // multi update with overwrite to empty doc\n *     var q = Model.where({ _id: id });\n *     q.setOptions({ multi: true, overwrite: true })\n *     q.update({ });\n *     q.update(callback); // executed\n *\n *     // multi updates\n *     Model.where()\n *          .update({ name: /^match/ }, { $set: { arr: [] }}, { multi: true }, callback)\n *\n *     // more multi updates\n *     Model.where()\n *          .setOptions({ multi: true })\n *          .update({ $set: { arr: [] }}, callback)\n *\n *     // single update by default\n *     Model.where({ email: 'address@example.com' })\n *          .update({ $inc: { counter: 1 }}, callback)\n *\n * API summary\n *\n *     update(criteria, doc, options, cb) // executes\n *     update(criteria, doc, options)\n *     update(criteria, doc, cb) // executes\n *     update(criteria, doc)\n *     update(doc, cb) // executes\n *     update(doc)\n *     update(cb) // executes\n *     update(true) // executes\n *     update()\n *\n * @param {Object} [criteria]\n * @param {Object} [doc] the update command\n * @param {Object} [options]\n * @param {Function} [callback] optional, params are (error, writeOpResult)\n * @return {Query} this\n * @see Model.update #model_Model.update\n * @see update http://docs.mongodb.org/manual/reference/method/db.collection.update/\n * @see writeOpResult http://mongodb.github.io/node-mongodb-native/2.2/api/Collection.html#~WriteOpResult\n * @api public\n */\n\nQuery.prototype.update = function(conditions, doc, options, callback) {\n  if (typeof options === 'function') {\n    // .update(conditions, doc, callback)\n    callback = options;\n    options = null;\n  } else if (typeof doc === 'function') {\n    // .update(doc, callback);\n    callback = doc;\n    doc = conditions;\n    conditions = {};\n    options = null;\n  } else if (typeof conditions === 'function') {\n    // .update(callback)\n    callback = conditions;\n    conditions = undefined;\n    doc = undefined;\n    options = undefined;\n  } else if (typeof conditions === 'object' && !doc && !options && !callback) {\n    // .update(doc)\n    doc = conditions;\n    conditions = undefined;\n    options = undefined;\n    callback = undefined;\n  }\n\n  return _update(this, 'update', conditions, doc, options, callback);\n};\n\n/**\n * Declare and/or execute this query as an updateMany() operation. Same as\n * `update()`, except MongoDB will update _all_ documents that match\n * `criteria` (as opposed to just the first one) regardless of the value of\n * the `multi` option.\n *\n * **Note** updateMany will _not_ fire update middleware. Use `pre('updateMany')`\n * and `post('updateMany')` instead.\n *\n * @param {Object} [criteria]\n * @param {Object} [doc] the update command\n * @param {Object} [options]\n * @param {Function} [callback] optional params are (error, writeOpResult)\n * @return {Query} this\n * @see Model.update #model_Model.update\n * @see update http://docs.mongodb.org/manual/reference/method/db.collection.update/\n * @see writeOpResult http://mongodb.github.io/node-mongodb-native/2.2/api/Collection.html#~WriteOpResult\n * @api public\n */\n\nQuery.prototype.updateMany = function(conditions, doc, options, callback) {\n  if (typeof options === 'function') {\n    // .update(conditions, doc, callback)\n    callback = options;\n    options = null;\n  } else if (typeof doc === 'function') {\n    // .update(doc, callback);\n    callback = doc;\n    doc = conditions;\n    conditions = {};\n    options = null;\n  } else if (typeof conditions === 'function') {\n    // .update(callback)\n    callback = conditions;\n    conditions = undefined;\n    doc = undefined;\n    options = undefined;\n  } else if (typeof conditions === 'object' && !doc && !options && !callback) {\n    // .update(doc)\n    doc = conditions;\n    conditions = undefined;\n    options = undefined;\n    callback = undefined;\n  }\n\n  return _update(this, 'updateMany', conditions, doc, options, callback);\n};\n\n/**\n * Declare and/or execute this query as an updateOne() operation. Same as\n * `update()`, except MongoDB will update _only_ the first document that\n * matches `criteria` regardless of the value of the `multi` option.\n *\n * **Note** updateOne will _not_ fire update middleware. Use `pre('updateOne')`\n * and `post('updateOne')` instead.\n *\n * @param {Object} [criteria]\n * @param {Object} [doc] the update command\n * @param {Object} [options]\n * @param {Function} [callback] params are (error, writeOpResult)\n * @return {Query} this\n * @see Model.update #model_Model.update\n * @see update http://docs.mongodb.org/manual/reference/method/db.collection.update/\n * @see writeOpResult http://mongodb.github.io/node-mongodb-native/2.2/api/Collection.html#~WriteOpResult\n * @api public\n */\n\nQuery.prototype.updateOne = function(conditions, doc, options, callback) {\n  if (typeof options === 'function') {\n    // .update(conditions, doc, callback)\n    callback = options;\n    options = null;\n  } else if (typeof doc === 'function') {\n    // .update(doc, callback);\n    callback = doc;\n    doc = conditions;\n    conditions = {};\n    options = null;\n  } else if (typeof conditions === 'function') {\n    // .update(callback)\n    callback = conditions;\n    conditions = undefined;\n    doc = undefined;\n    options = undefined;\n  } else if (typeof conditions === 'object' && !doc && !options && !callback) {\n    // .update(doc)\n    doc = conditions;\n    conditions = undefined;\n    options = undefined;\n    callback = undefined;\n  }\n\n  return _update(this, 'updateOne', conditions, doc, options, callback);\n};\n\n/**\n * Declare and/or execute this query as a replaceOne() operation. Same as\n * `update()`, except MongoDB will replace the existing document and will\n * not accept any atomic operators (`$set`, etc.)\n *\n * **Note** replaceOne will _not_ fire update middleware. Use `pre('replaceOne')`\n * and `post('replaceOne')` instead.\n *\n * @param {Object} [criteria]\n * @param {Object} [doc] the update command\n * @param {Object} [options]\n * @param {Function} [callback] optional params are (error, writeOpResult)\n * @return {Query} this\n * @see Model.update #model_Model.update\n * @see update http://docs.mongodb.org/manual/reference/method/db.collection.update/\n * @see writeOpResult http://mongodb.github.io/node-mongodb-native/2.2/api/Collection.html#~WriteOpResult\n * @api public\n */\n\nQuery.prototype.replaceOne = function(conditions, doc, options, callback) {\n  if (typeof options === 'function') {\n    // .update(conditions, doc, callback)\n    callback = options;\n    options = null;\n  } else if (typeof doc === 'function') {\n    // .update(doc, callback);\n    callback = doc;\n    doc = conditions;\n    conditions = {};\n    options = null;\n  } else if (typeof conditions === 'function') {\n    // .update(callback)\n    callback = conditions;\n    conditions = undefined;\n    doc = undefined;\n    options = undefined;\n  } else if (typeof conditions === 'object' && !doc && !options && !callback) {\n    // .update(doc)\n    doc = conditions;\n    conditions = undefined;\n    options = undefined;\n    callback = undefined;\n  }\n\n  this.setOptions({ overwrite: true });\n  return _update(this, 'replaceOne', conditions, doc, options, callback);\n};\n\n/*!\n * Internal helper for update, updateMany, updateOne, replaceOne\n */\n\nfunction _update(query, op, conditions, doc, options, callback) {\n  // make sure we don't send in the whole Document to merge()\n  query.op = op;\n  conditions = utils.toObject(conditions);\n\n  var oldCb = callback;\n  if (oldCb) {\n    if (typeof oldCb === 'function') {\n      callback = function(error, result) {\n        oldCb(error, result ? result.result : {ok: 0, n: 0, nModified: 0});\n      };\n    } else {\n      throw new Error('Invalid callback() argument.');\n    }\n  }\n\n  // strict is an option used in the update checking, make sure it gets set\n  if (options) {\n    if ('strict' in options) {\n      query._mongooseOptions.strict = options.strict;\n    }\n  }\n\n  // if doc is undefined at this point, this means this function is being\n  // executed by exec(not always see below). Grab the update doc from here in\n  // order to validate\n  // This could also be somebody calling update() or update({}). Probably not a\n  // common use case, check for _update to make sure we don't do anything bad\n  if (!doc && query._update) {\n    doc = query._updateForExec();\n  }\n\n  if (mquery.canMerge(conditions)) {\n    query.merge(conditions);\n  }\n\n  // validate the selector part of the query\n  var castedQuery = castQuery(query);\n  if (castedQuery instanceof Error) {\n    query._castError = castedQuery;\n    if (callback) {\n      callback(castedQuery);\n      return query;\n    } else if (!options || !options.dontThrowCastError) {\n      throw castedQuery;\n    }\n  }\n\n  // validate the update part of the query\n  var castedDoc;\n  try {\n    var $options = {retainKeyOrder: true};\n    if (options && options.minimize) {\n      $options.minimize = true;\n    }\n    castedDoc = query._castUpdate(utils.clone(doc, $options),\n      (options && options.overwrite) || op === 'replaceOne');\n  } catch (err) {\n    query._castError = castedQuery;\n    if (callback) {\n      callback(err);\n      return query;\n    } else if (!options || !options.dontThrowCastError) {\n      throw err;\n    }\n  }\n\n  castedDoc = setDefaultsOnInsert(query, query.schema, castedDoc, options);\n  if (!castedDoc) {\n    // Make sure promises know that this is still an update, see gh-2796\n    query.op = op;\n    callback && callback(null);\n    return query;\n  }\n\n  if (utils.isObject(options)) {\n    query.setOptions(options);\n  }\n\n  if (!query._update) {\n    query._update = castedDoc;\n  }\n\n  // Hooks\n  if (callback) {\n    if (op === 'update') {\n      return query._execUpdate(callback);\n    }\n    return query['_' + op](callback);\n  }\n\n  return Query.base[op].call(query, castedQuery, castedDoc, options, callback);\n}\n\n/**\n * Executes the query\n *\n * ####Examples:\n *\n *     var promise = query.exec();\n *     var promise = query.exec('update');\n *\n *     query.exec(callback);\n *     query.exec('find', callback);\n *\n * @param {String|Function} [operation]\n * @param {Function} [callback] optional params depend on the function being called\n * @return {Promise}\n * @api public\n */\n\nQuery.prototype.exec = function exec(op, callback) {\n  var Promise = PromiseProvider.get();\n  var _this = this;\n\n  if (typeof op === 'function') {\n    callback = op;\n    op = null;\n  } else if (typeof op === 'string') {\n    this.op = op;\n  }\n\n  var _results;\n  var promise = new Promise.ES6(function(resolve, reject) {\n    if (!_this.op) {\n      resolve();\n      return;\n    }\n\n    _this[_this.op].call(_this, function(error, res) {\n      if (error) {\n        reject(error);\n        return;\n      }\n      _results = arguments;\n      resolve(res);\n    });\n  });\n\n  if (callback) {\n    promise.then(\n      function() {\n        callback.apply(null, _results);\n        return null;\n      },\n      function(error) {\n        callback(error);\n      }).\n      catch(function(error) {\n        // If we made it here, we must have an error in the callback re:\n        // gh-4500, so we need to emit.\n        setImmediate(function() {\n          _this.model.emit('error', error);\n        });\n      });\n  }\n\n  return promise;\n};\n\n/**\n * Executes the query returning a `Promise` which will be\n * resolved with either the doc(s) or rejected with the error.\n *\n * @param {Function} [resolve]\n * @param {Function} [reject]\n * @return {Promise}\n * @api public\n */\n\nQuery.prototype.then = function(resolve, reject) {\n  return this.exec().then(resolve, reject);\n};\n\n/**\n * Executes the query returning a `Promise` which will be\n * resolved with either the doc(s) or rejected with the error.\n * Like `.then()`, but only takes a rejection handler.\n *\n * @param {Function} [reject]\n * @return {Promise}\n * @api public\n */\n\nQuery.prototype.catch = function(reject) {\n  return this.exec().then(null, reject);\n};\n\n/*!\n * Casts obj for an update command.\n *\n * @param {Object} obj\n * @return {Object} obj after casting its values\n * @api private\n */\n\nQuery.prototype._castUpdate = function _castUpdate(obj, overwrite) {\n  var strict;\n  if ('strict' in this._mongooseOptions) {\n    strict = this._mongooseOptions.strict;\n  } else if (this.schema && this.schema.options) {\n    strict = this.schema.options.strict;\n  } else {\n    strict = true;\n  }\n  return castUpdate(this.schema, obj, {\n    overwrite: overwrite,\n    strict: strict\n  });\n};\n\n/*!\n * castQuery\n * @api private\n */\n\nfunction castQuery(query) {\n  try {\n    return query.cast(query.model);\n  } catch (err) {\n    return err;\n  }\n}\n\n/*!\n * castDoc\n * @api private\n */\n\nfunction castDoc(query, overwrite) {\n  try {\n    return query._castUpdate(query._update, overwrite);\n  } catch (err) {\n    return err;\n  }\n}\n\n/**\n * Specifies paths which should be populated with other documents.\n *\n * ####Example:\n *\n *     Kitten.findOne().populate('owner').exec(function (err, kitten) {\n *       console.log(kitten.owner.name) // Max\n *     })\n *\n *     Kitten.find().populate({\n *         path: 'owner'\n *       , select: 'name'\n *       , match: { color: 'black' }\n *       , options: { sort: { name: -1 }}\n *     }).exec(function (err, kittens) {\n *       console.log(kittens[0].owner.name) // Zoopa\n *     })\n *\n *     // alternatively\n *     Kitten.find().populate('owner', 'name', null, {sort: { name: -1 }}).exec(function (err, kittens) {\n *       console.log(kittens[0].owner.name) // Zoopa\n *     })\n *\n * Paths are populated after the query executes and a response is received. A separate query is then executed for each path specified for population. After a response for each query has also been returned, the results are passed to the callback.\n *\n * @param {Object|String} path either the path to populate or an object specifying all parameters\n * @param {Object|String} [select] Field selection for the population query\n * @param {Model} [model] The model you wish to use for population. If not specified, populate will look up the model by the name in the Schema's `ref` field.\n * @param {Object} [match] Conditions for the population query\n * @param {Object} [options] Options for the population query (sort, etc)\n * @see population ./populate.html\n * @see Query#select #query_Query-select\n * @see Model.populate #model_Model.populate\n * @return {Query} this\n * @api public\n */\n\nQuery.prototype.populate = function() {\n  if (arguments.length === 0) {\n    return this;\n  }\n\n  var res = utils.populate.apply(null, arguments);\n  var opts = this._mongooseOptions;\n\n  if (!utils.isObject(opts.populate)) {\n    opts.populate = {};\n  }\n\n  var pop = opts.populate;\n\n  for (var i = 0; i < res.length; ++i) {\n    var path = res[i].path;\n    if (pop[path] && pop[path].populate && res[i].populate) {\n      res[i].populate = pop[path].populate.concat(res[i].populate);\n    }\n    pop[res[i].path] = res[i];\n  }\n\n  return this;\n};\n\n/**\n * Casts this query to the schema of `model`\n *\n * ####Note\n *\n * If `obj` is present, it is cast instead of this query.\n *\n * @param {Model} model\n * @param {Object} [obj]\n * @return {Object}\n * @api public\n */\n\nQuery.prototype.cast = function(model, obj) {\n  obj || (obj = this._conditions);\n\n  try {\n    return cast(model.schema, obj, {\n      upsert: this.options && this.options.upsert,\n      strict: (this.options && this.options.strict) ||\n        (model.schema.options && model.schema.options.strict)\n    });\n  } catch (err) {\n    // CastError, assign model\n    if (typeof err.setModel === 'function') {\n      err.setModel(model);\n    }\n    throw err;\n  }\n};\n\n/**\n * Casts selected field arguments for field selection with mongo 2.2\n *\n *     query.select({ ids: { $elemMatch: { $in: [hexString] }})\n *\n * @param {Object} fields\n * @see https://github.com/Automattic/mongoose/issues/1091\n * @see http://docs.mongodb.org/manual/reference/projection/elemMatch/\n * @api private\n */\n\nQuery.prototype._castFields = function _castFields(fields) {\n  var selected,\n      elemMatchKeys,\n      keys,\n      key,\n      out,\n      i;\n\n  if (fields) {\n    keys = Object.keys(fields);\n    elemMatchKeys = [];\n    i = keys.length;\n\n    // collect $elemMatch args\n    while (i--) {\n      key = keys[i];\n      if (fields[key].$elemMatch) {\n        selected || (selected = {});\n        selected[key] = fields[key];\n        elemMatchKeys.push(key);\n      }\n    }\n  }\n\n  if (selected) {\n    // they passed $elemMatch, cast em\n    try {\n      out = this.cast(this.model, selected);\n    } catch (err) {\n      return err;\n    }\n\n    // apply the casted field args\n    i = elemMatchKeys.length;\n    while (i--) {\n      key = elemMatchKeys[i];\n      fields[key] = out[key];\n    }\n  }\n\n  return fields;\n};\n\n/**\n * Applies schematype selected options to this query.\n * @api private\n */\n\nQuery.prototype._applyPaths = function applyPaths() {\n  this._fields = this._fields || {};\n  helpers.applyPaths(this._fields, this.model.schema);\n};\n\n/**\n * Returns a Node.js 0.8 style [read stream](http://nodejs.org/docs/v0.8.21/api/stream.html#stream_readable_stream) interface.\n *\n * ####Example\n *\n *     // follows the nodejs 0.8 stream api\n *     Thing.find({ name: /^hello/ }).stream().pipe(res)\n *\n *     // manual streaming\n *     var stream = Thing.find({ name: /^hello/ }).stream();\n *\n *     stream.on('data', function (doc) {\n *       // do something with the mongoose document\n *     }).on('error', function (err) {\n *       // handle the error\n *     }).on('close', function () {\n *       // the stream is closed\n *     });\n *\n * ####Valid options\n *\n *   - `transform`: optional function which accepts a mongoose document. The return value of the function will be emitted on `data`.\n *\n * ####Example\n *\n *     // JSON.stringify all documents before emitting\n *     var stream = Thing.find().stream({ transform: JSON.stringify });\n *     stream.pipe(writeStream);\n *\n * @return {QueryStream}\n * @param {Object} [options]\n * @see QueryStream\n * @api public\n */\n\nQuery.prototype.stream = function stream(opts) {\n  this._applyPaths();\n  this._fields = this._castFields(this._fields);\n  return new QueryStream(this, opts);\n};\nQuery.prototype.stream = util.deprecate(Query.prototype.stream, 'Mongoose: ' +\n  'Query.prototype.stream() is deprecated in mongoose >= 4.5.0, ' +\n  'use Query.prototype.cursor() instead');\n\n/**\n * Returns a wrapper around a [mongodb driver cursor](http://mongodb.github.io/node-mongodb-native/2.1/api/Cursor.html).\n * A QueryCursor exposes a [Streams3](https://strongloop.com/strongblog/whats-new-io-js-beta-streams3/)-compatible\n * interface, as well as a `.next()` function.\n *\n * The `.cursor()` function triggers pre find hooks, but **not** post find hooks.\n *\n * ####Example\n *\n *     // There are 2 ways to use a cursor. First, as a stream:\n *     Thing.\n *       find({ name: /^hello/ }).\n *       cursor().\n *       on('data', function(doc) { console.log(doc); }).\n *       on('end', function() { console.log('Done!'); });\n *\n *     // Or you can use `.next()` to manually get the next doc in the stream.\n *     // `.next()` returns a promise, so you can use promises or callbacks.\n *     var cursor = Thing.find({ name: /^hello/ }).cursor();\n *     cursor.next(function(error, doc) {\n *       console.log(doc);\n *     });\n *\n *     // Because `.next()` returns a promise, you can use co\n *     // to easily iterate through all documents without loading them\n *     // all into memory.\n *     co(function*() {\n *       const cursor = Thing.find({ name: /^hello/ }).cursor();\n *       for (let doc = yield cursor.next(); doc != null; doc = yield cursor.next()) {\n *         console.log(doc);\n *       }\n *     });\n *\n * ####Valid options\n *\n *   - `transform`: optional function which accepts a mongoose document. The return value of the function will be emitted on `data` and returned by `.next()`.\n *\n * @return {QueryCursor}\n * @param {Object} [options]\n * @see QueryCursor\n * @api public\n */\n\nQuery.prototype.cursor = function cursor(opts) {\n  this._applyPaths();\n  this._fields = this._castFields(this._fields);\n  this.setOptions({ fields: this._fieldsForExec() });\n  if (opts) {\n    this.setOptions(opts);\n  }\n\n  try {\n    this.cast(this.model);\n  } catch (err) {\n    return (new QueryCursor(this, this.options))._markError(err);\n  }\n\n  return new QueryCursor(this, this.options);\n};\n\n// the rest of these are basically to support older Mongoose syntax with mquery\n\n/**\n * _DEPRECATED_ Alias of `maxScan`\n *\n * @deprecated\n * @see maxScan #query_Query-maxScan\n * @method maxscan\n * @memberOf Query\n */\n\nQuery.prototype.maxscan = Query.base.maxScan;\n\n/**\n * Sets the tailable option (for use with capped collections).\n *\n * ####Example\n *\n *     query.tailable() // true\n *     query.tailable(true)\n *     query.tailable(false)\n *\n * ####Note\n *\n * Cannot be used with `distinct()`\n *\n * @param {Boolean} bool defaults to true\n * @param {Object} [opts] options to set\n * @param {Number} [opts.numberOfRetries] if cursor is exhausted, retry this many times before giving up\n * @param {Number} [opts.tailableRetryInterval] if cursor is exhausted, wait this many milliseconds before retrying\n * @see tailable http://docs.mongodb.org/manual/tutorial/create-tailable-cursor/\n * @api public\n */\n\nQuery.prototype.tailable = function(val, opts) {\n  // we need to support the tailable({ awaitdata : true }) as well as the\n  // tailable(true, {awaitdata :true}) syntax that mquery does not support\n  if (val && val.constructor.name === 'Object') {\n    opts = val;\n    val = true;\n  }\n\n  if (val === undefined) {\n    val = true;\n  }\n\n  if (opts && typeof opts === 'object') {\n    for (var key in opts) {\n      if (key === 'awaitdata') {\n        // For backwards compatibility\n        this.options[key] = !!opts[key];\n      } else {\n        this.options[key] = opts[key];\n      }\n    }\n  }\n\n  return Query.base.tailable.call(this, val);\n};\n\n/**\n * Declares an intersects query for `geometry()`.\n *\n * ####Example\n *\n *     query.where('path').intersects().geometry({\n *         type: 'LineString'\n *       , coordinates: [[180.0, 11.0], [180, 9.0]]\n *     })\n *\n *     query.where('path').intersects({\n *         type: 'LineString'\n *       , coordinates: [[180.0, 11.0], [180, 9.0]]\n *     })\n *\n * ####NOTE:\n *\n * **MUST** be used after `where()`.\n *\n * ####NOTE:\n *\n * In Mongoose 3.7, `intersects` changed from a getter to a function. If you need the old syntax, use [this](https://github.com/ebensing/mongoose-within).\n *\n * @method intersects\n * @memberOf Query\n * @param {Object} [arg]\n * @return {Query} this\n * @see $geometry http://docs.mongodb.org/manual/reference/operator/geometry/\n * @see geoIntersects http://docs.mongodb.org/manual/reference/operator/geoIntersects/\n * @api public\n */\n\n/**\n * Specifies a `$geometry` condition\n *\n * ####Example\n *\n *     var polyA = [[[ 10, 20 ], [ 10, 40 ], [ 30, 40 ], [ 30, 20 ]]]\n *     query.where('loc').within().geometry({ type: 'Polygon', coordinates: polyA })\n *\n *     // or\n *     var polyB = [[ 0, 0 ], [ 1, 1 ]]\n *     query.where('loc').within().geometry({ type: 'LineString', coordinates: polyB })\n *\n *     // or\n *     var polyC = [ 0, 0 ]\n *     query.where('loc').within().geometry({ type: 'Point', coordinates: polyC })\n *\n *     // or\n *     query.where('loc').intersects().geometry({ type: 'Point', coordinates: polyC })\n *\n * The argument is assigned to the most recent path passed to `where()`.\n *\n * ####NOTE:\n *\n * `geometry()` **must** come after either `intersects()` or `within()`.\n *\n * The `object` argument must contain `type` and `coordinates` properties.\n * - type {String}\n * - coordinates {Array}\n *\n * @method geometry\n * @memberOf Query\n * @param {Object} object Must contain a `type` property which is a String and a `coordinates` property which is an Array. See the examples.\n * @return {Query} this\n * @see $geometry http://docs.mongodb.org/manual/reference/operator/geometry/\n * @see http://docs.mongodb.org/manual/release-notes/2.4/#new-geospatial-indexes-with-geojson-and-improved-spherical-geometry\n * @see http://www.mongodb.org/display/DOCS/Geospatial+Indexing\n * @api public\n */\n\n/**\n * Specifies a `$near` or `$nearSphere` condition\n *\n * These operators return documents sorted by distance.\n *\n * ####Example\n *\n *     query.where('loc').near({ center: [10, 10] });\n *     query.where('loc').near({ center: [10, 10], maxDistance: 5 });\n *     query.where('loc').near({ center: [10, 10], maxDistance: 5, spherical: true });\n *     query.near('loc', { center: [10, 10], maxDistance: 5 });\n *\n * @method near\n * @memberOf Query\n * @param {String} [path]\n * @param {Object} val\n * @return {Query} this\n * @see $near http://docs.mongodb.org/manual/reference/operator/near/\n * @see $nearSphere http://docs.mongodb.org/manual/reference/operator/nearSphere/\n * @see $maxDistance http://docs.mongodb.org/manual/reference/operator/maxDistance/\n * @see http://www.mongodb.org/display/DOCS/Geospatial+Indexing\n * @api public\n */\n\n/*!\n * Overwriting mquery is needed to support a couple different near() forms found in older\n * versions of mongoose\n * near([1,1])\n * near(1,1)\n * near(field, [1,2])\n * near(field, 1, 2)\n * In addition to all of the normal forms supported by mquery\n */\n\nQuery.prototype.near = function() {\n  var params = [];\n  var sphere = this._mongooseOptions.nearSphere;\n\n  // TODO refactor\n\n  if (arguments.length === 1) {\n    if (Array.isArray(arguments[0])) {\n      params.push({center: arguments[0], spherical: sphere});\n    } else if (typeof arguments[0] === 'string') {\n      // just passing a path\n      params.push(arguments[0]);\n    } else if (utils.isObject(arguments[0])) {\n      if (typeof arguments[0].spherical !== 'boolean') {\n        arguments[0].spherical = sphere;\n      }\n      params.push(arguments[0]);\n    } else {\n      throw new TypeError('invalid argument');\n    }\n  } else if (arguments.length === 2) {\n    if (typeof arguments[0] === 'number' && typeof arguments[1] === 'number') {\n      params.push({center: [arguments[0], arguments[1]], spherical: sphere});\n    } else if (typeof arguments[0] === 'string' && Array.isArray(arguments[1])) {\n      params.push(arguments[0]);\n      params.push({center: arguments[1], spherical: sphere});\n    } else if (typeof arguments[0] === 'string' && utils.isObject(arguments[1])) {\n      params.push(arguments[0]);\n      if (typeof arguments[1].spherical !== 'boolean') {\n        arguments[1].spherical = sphere;\n      }\n      params.push(arguments[1]);\n    } else {\n      throw new TypeError('invalid argument');\n    }\n  } else if (arguments.length === 3) {\n    if (typeof arguments[0] === 'string' && typeof arguments[1] === 'number'\n        && typeof arguments[2] === 'number') {\n      params.push(arguments[0]);\n      params.push({center: [arguments[1], arguments[2]], spherical: sphere});\n    } else {\n      throw new TypeError('invalid argument');\n    }\n  } else {\n    throw new TypeError('invalid argument');\n  }\n\n  return Query.base.near.apply(this, params);\n};\n\n/**\n * _DEPRECATED_ Specifies a `$nearSphere` condition\n *\n * ####Example\n *\n *     query.where('loc').nearSphere({ center: [10, 10], maxDistance: 5 });\n *\n * **Deprecated.** Use `query.near()` instead with the `spherical` option set to `true`.\n *\n * ####Example\n *\n *     query.where('loc').near({ center: [10, 10], spherical: true });\n *\n * @deprecated\n * @see near() #query_Query-near\n * @see $near http://docs.mongodb.org/manual/reference/operator/near/\n * @see $nearSphere http://docs.mongodb.org/manual/reference/operator/nearSphere/\n * @see $maxDistance http://docs.mongodb.org/manual/reference/operator/maxDistance/\n */\n\nQuery.prototype.nearSphere = function() {\n  this._mongooseOptions.nearSphere = true;\n  this.near.apply(this, arguments);\n  return this;\n};\n\n/**\n * Specifies a $polygon condition\n *\n * ####Example\n *\n *     query.where('loc').within().polygon([10,20], [13, 25], [7,15])\n *     query.polygon('loc', [10,20], [13, 25], [7,15])\n *\n * @method polygon\n * @memberOf Query\n * @param {String|Array} [path]\n * @param {Array|Object} [coordinatePairs...]\n * @return {Query} this\n * @see $polygon http://docs.mongodb.org/manual/reference/operator/polygon/\n * @see http://www.mongodb.org/display/DOCS/Geospatial+Indexing\n * @api public\n */\n\n/**\n * Specifies a $box condition\n *\n * ####Example\n *\n *     var lowerLeft = [40.73083, -73.99756]\n *     var upperRight= [40.741404,  -73.988135]\n *\n *     query.where('loc').within().box(lowerLeft, upperRight)\n *     query.box({ ll : lowerLeft, ur : upperRight })\n *\n * @method box\n * @memberOf Query\n * @see $box http://docs.mongodb.org/manual/reference/operator/box/\n * @see within() Query#within #query_Query-within\n * @see http://www.mongodb.org/display/DOCS/Geospatial+Indexing\n * @param {Object} val\n * @param [Array] Upper Right Coords\n * @return {Query} this\n * @api public\n */\n\n/*!\n * this is needed to support the mongoose syntax of:\n * box(field, { ll : [x,y], ur : [x2,y2] })\n * box({ ll : [x,y], ur : [x2,y2] })\n */\n\nQuery.prototype.box = function(ll, ur) {\n  if (!Array.isArray(ll) && utils.isObject(ll)) {\n    ur = ll.ur;\n    ll = ll.ll;\n  }\n  return Query.base.box.call(this, ll, ur);\n};\n\n/**\n * Specifies a $center or $centerSphere condition.\n *\n * ####Example\n *\n *     var area = { center: [50, 50], radius: 10, unique: true }\n *     query.where('loc').within().circle(area)\n *     // alternatively\n *     query.circle('loc', area);\n *\n *     // spherical calculations\n *     var area = { center: [50, 50], radius: 10, unique: true, spherical: true }\n *     query.where('loc').within().circle(area)\n *     // alternatively\n *     query.circle('loc', area);\n *\n * New in 3.7.0\n *\n * @method circle\n * @memberOf Query\n * @param {String} [path]\n * @param {Object} area\n * @return {Query} this\n * @see $center http://docs.mongodb.org/manual/reference/operator/center/\n * @see $centerSphere http://docs.mongodb.org/manual/reference/operator/centerSphere/\n * @see $geoWithin http://docs.mongodb.org/manual/reference/operator/geoWithin/\n * @see http://www.mongodb.org/display/DOCS/Geospatial+Indexing\n * @api public\n */\n\n/**\n * _DEPRECATED_ Alias for [circle](#query_Query-circle)\n *\n * **Deprecated.** Use [circle](#query_Query-circle) instead.\n *\n * @deprecated\n * @method center\n * @memberOf Query\n * @api public\n */\n\nQuery.prototype.center = Query.base.circle;\n\n/**\n * _DEPRECATED_ Specifies a $centerSphere condition\n *\n * **Deprecated.** Use [circle](#query_Query-circle) instead.\n *\n * ####Example\n *\n *     var area = { center: [50, 50], radius: 10 };\n *     query.where('loc').within().centerSphere(area);\n *\n * @deprecated\n * @param {String} [path]\n * @param {Object} val\n * @return {Query} this\n * @see http://www.mongodb.org/display/DOCS/Geospatial+Indexing\n * @see $centerSphere http://docs.mongodb.org/manual/reference/operator/centerSphere/\n * @api public\n */\n\nQuery.prototype.centerSphere = function() {\n  if (arguments[0] && arguments[0].constructor.name === 'Object') {\n    arguments[0].spherical = true;\n  }\n\n  if (arguments[1] && arguments[1].constructor.name === 'Object') {\n    arguments[1].spherical = true;\n  }\n\n  Query.base.circle.apply(this, arguments);\n};\n\n/**\n * Determines if field selection has been made.\n *\n * @method selected\n * @memberOf Query\n * @return {Boolean}\n * @api public\n */\n\n/**\n * Determines if inclusive field selection has been made.\n *\n *     query.selectedInclusively() // false\n *     query.select('name')\n *     query.selectedInclusively() // true\n *\n * @method selectedInclusively\n * @memberOf Query\n * @return {Boolean}\n * @api public\n */\n\n/**\n * Determines if exclusive field selection has been made.\n *\n *     query.selectedExclusively() // false\n *     query.select('-name')\n *     query.selectedExclusively() // true\n *     query.selectedInclusively() // false\n *\n * @method selectedExclusively\n * @memberOf Query\n * @return {Boolean}\n * @api public\n */\n\n/*!\n * Export\n */\n\nmodule.exports = Query;\n"]}