{"version":3,"sources":["discriminator.js"],"names":[],"mappings":"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","file":"discriminator-compiled.js","sourcesContent":["'use strict';\n\nvar utils = require('../../utils');\n\nvar CUSTOMIZABLE_DISCRIMINATOR_OPTIONS = {\n  toJSON: true,\n  toObject: true,\n  _id: true,\n  id: true\n};\n\n/*!\n * ignore\n */\n\nmodule.exports = function discriminator(model, name, schema) {\n  if (!(schema && schema.instanceOfSchema)) {\n    throw new Error('You must pass a valid discriminator Schema');\n  }\n\n  if (model.base && model.base.options.applyPluginsToDiscriminators) {\n    model.base._applyPlugins(schema);\n  }\n\n  if (model.schema.discriminatorMapping &&\n      !model.schema.discriminatorMapping.isRoot) {\n    throw new Error('Discriminator \"' + name +\n        '\" can only be a discriminator of the root model');\n  }\n\n  var key = model.schema.options.discriminatorKey;\n  if (schema.path(key)) {\n    throw new Error('Discriminator \"' + name +\n        '\" cannot have field with name \"' + key + '\"');\n  }\n\n  function merge(schema, baseSchema) {\n    utils.merge(schema, baseSchema, { retainKeyOrder: true });\n\n    var obj = {};\n    obj[key] = {\n      default: name,\n      set: function(newName) {\n        if (newName === name) {\n          return name;\n        }\n        throw new Error('Can\\'t set discriminator key \"' + key + '\"');\n      }\n    };\n    obj[key][schema.options.typeKey] = String;\n    schema.add(obj);\n    schema.discriminatorMapping = {key: key, value: name, isRoot: false};\n\n    if (baseSchema.options.collection) {\n      schema.options.collection = baseSchema.options.collection;\n    }\n\n    var toJSON = schema.options.toJSON;\n    var toObject = schema.options.toObject;\n    var _id = schema.options._id;\n    var id = schema.options.id;\n\n    var keys = Object.keys(schema.options);\n    schema.options.discriminatorKey = baseSchema.options.discriminatorKey;\n\n    for (var i = 0; i < keys.length; ++i) {\n      var _key = keys[i];\n      if (!CUSTOMIZABLE_DISCRIMINATOR_OPTIONS[_key]) {\n        if (!utils.deepEqual(schema.options[_key], baseSchema.options[_key])) {\n          throw new Error('Can\\'t customize discriminator option ' + _key +\n              ' (can only modify ' +\n              Object.keys(CUSTOMIZABLE_DISCRIMINATOR_OPTIONS).join(', ') +\n              ')');\n        }\n      }\n    }\n\n    schema.options = utils.clone(baseSchema.options);\n    if (toJSON) schema.options.toJSON = toJSON;\n    if (toObject) schema.options.toObject = toObject;\n    if (typeof _id !== 'undefined') {\n      schema.options._id = _id;\n    }\n    schema.options.id = id;\n    schema.s.hooks = model.schema.s.hooks.merge(schema.s.hooks);\n\n    schema.callQueue = baseSchema.callQueue.\n      concat(schema.callQueue.slice(schema._defaultMiddleware.length));\n    schema._requiredpaths = undefined; // reset just in case Schema#requiredPaths() was called on either schema\n  }\n\n  // merges base schema into new discriminator schema and sets new type field.\n  merge(schema, model.schema);\n\n  if (!model.discriminators) {\n    model.discriminators = {};\n  }\n\n  if (!model.schema.discriminatorMapping) {\n    model.schema.discriminatorMapping = {key: key, value: null, isRoot: true};\n  }\n\n  if (model.discriminators[name]) {\n    throw new Error('Discriminator with name \"' + name + '\" already exists');\n  }\n\n  return schema;\n};\n"]}