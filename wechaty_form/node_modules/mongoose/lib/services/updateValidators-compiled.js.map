{"version":3,"sources":["updateValidators.js"],"names":[],"mappings":"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","file":"updateValidators-compiled.js","sourcesContent":["/*!\n * Module dependencies.\n */\n\nvar Mixed = require('../schema/mixed');\nvar ValidationError = require('../error/validation');\nvar parallel = require('async/parallel');\nvar flatten = require('./common').flatten;\nvar modifiedPaths = require('./common').modifiedPaths;\n\n/**\n * Applies validators and defaults to update and findOneAndUpdate operations,\n * specifically passing a null doc as `this` to validators and defaults\n *\n * @param {Query} query\n * @param {Schema} schema\n * @param {Object} castedDoc\n * @param {Object} options\n * @method runValidatorsOnUpdate\n * @api private\n */\n\nmodule.exports = function(query, schema, castedDoc, options) {\n  var _keys;\n  var keys = Object.keys(castedDoc || {});\n  var updatedKeys = {};\n  var updatedValues = {};\n  var arrayAtomicUpdates = {};\n  var numKeys = keys.length;\n  var hasDollarUpdate = false;\n  var modified = {};\n\n  for (var i = 0; i < numKeys; ++i) {\n    if (keys[i].charAt(0) === '$') {\n      if (keys[i] === '$push' || keys[i] === '$addToSet') {\n        _keys = Object.keys(castedDoc[keys[i]]);\n        for (var ii = 0; ii < _keys.length; ++ii) {\n          if (castedDoc[keys[i]][_keys[ii]].$each) {\n            arrayAtomicUpdates[_keys[ii]] = (arrayAtomicUpdates[_keys[ii]] || []).\n              concat(castedDoc[keys[i]][_keys[ii]].$each);\n          } else {\n            arrayAtomicUpdates[_keys[ii]] = (arrayAtomicUpdates[_keys[ii]] || []).\n              concat([castedDoc[keys[i]][_keys[ii]]]);\n          }\n        }\n        continue;\n      }\n      modifiedPaths(castedDoc[keys[i]], '', modified);\n      var flat = flatten(castedDoc[keys[i]]);\n      var paths = Object.keys(flat);\n      var numPaths = paths.length;\n      for (var j = 0; j < numPaths; ++j) {\n        var updatedPath = paths[j].replace('.$.', '.0.');\n        updatedPath = updatedPath.replace(/\\.\\$$/, '.0');\n        if (keys[i] === '$set' || keys[i] === '$setOnInsert') {\n          updatedValues[updatedPath] = flat[paths[j]];\n        } else if (keys[i] === '$unset') {\n          updatedValues[updatedPath] = undefined;\n        }\n        updatedKeys[updatedPath] = true;\n      }\n      hasDollarUpdate = true;\n    }\n  }\n\n  if (!hasDollarUpdate) {\n    modifiedPaths(castedDoc, '', modified);\n    updatedValues = flatten(castedDoc);\n    updatedKeys = Object.keys(updatedValues);\n  }\n\n  var updates = Object.keys(updatedValues);\n  var numUpdates = updates.length;\n  var validatorsToExecute = [];\n  var validationErrors = [];\n  function iter(i, v) {\n    var schemaPath = schema._getSchema(updates[i]);\n    if (schemaPath) {\n      // gh-4305: `_getSchema()` will report all sub-fields of a 'Mixed' path\n      // as 'Mixed', so avoid double validating them.\n      if (schemaPath instanceof Mixed && schemaPath.$fullPath !== updates[i]) {\n        return;\n      }\n      validatorsToExecute.push(function(callback) {\n        schemaPath.doValidate(\n            v,\n            function(err) {\n              if (err) {\n                err.path = updates[i];\n                validationErrors.push(err);\n              }\n              callback(null);\n            },\n            options && options.context === 'query' ? query : null,\n            {updateValidator: true});\n      });\n    }\n  }\n  for (i = 0; i < numUpdates; ++i) {\n    iter(i, updatedValues[updates[i]]);\n  }\n\n  var arrayUpdates = Object.keys(arrayAtomicUpdates);\n  var numArrayUpdates = arrayUpdates.length;\n  for (i = 0; i < numArrayUpdates; ++i) {\n    (function(i) {\n      var schemaPath = schema._getSchema(arrayUpdates[i]);\n      if (schemaPath && schemaPath.$isMongooseDocumentArray) {\n        validatorsToExecute.push(function(callback) {\n          schemaPath.doValidate(\n              arrayAtomicUpdates[arrayUpdates[i]],\n              function(err) {\n                if (err) {\n                  err.path = arrayUpdates[i];\n                  validationErrors.push(err);\n                }\n                callback(null);\n              },\n              options && options.context === 'query' ? query : null);\n        });\n      } else {\n        schemaPath = schema._getSchema(arrayUpdates[i] + '.0');\n        for (var j = 0; j < arrayAtomicUpdates[arrayUpdates[i]].length; ++j) {\n          (function(j) {\n            validatorsToExecute.push(function(callback) {\n              schemaPath.doValidate(\n                arrayAtomicUpdates[arrayUpdates[i]][j],\n                function(err) {\n                  if (err) {\n                    err.path = arrayUpdates[i];\n                    validationErrors.push(err);\n                  }\n                  callback(null);\n                },\n                options && options.context === 'query' ? query : null,\n                { updateValidator: true });\n            });\n          })(j);\n        }\n      }\n    })(i);\n  }\n\n  return function(callback) {\n    parallel(validatorsToExecute, function() {\n      if (validationErrors.length) {\n        var err = new ValidationError(null);\n        for (var i = 0; i < validationErrors.length; ++i) {\n          err.errors[validationErrors[i].path] = validationErrors[i];\n        }\n        return callback(err);\n      }\n      callback(null);\n    });\n  };\n};\n"]}