{"version":3,"sources":["bench.js"],"names":[],"mappings":"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","file":"bench-compiled.js","sourcesContent":["\nvar sliced = require('./')\nvar Bench = require('benchmark');\nvar s = new Bench.Suite;\nvar slice = [].slice;\n\ns.add('Array.prototype.slice.call', function () {\n  Array.prototype.slice.call(arguments);\n}).add('[].slice.call', function () {\n  [].slice.call(arguments);\n}).add('cached slice.call', function () {\n  slice.call(arguments)\n}).add('sliced', function () {\n  sliced(arguments)\n}).on('cycle', function (evt) {\n  console.log(String(evt.target));\n}).on('complete', function () {\n  console.log('fastest is %s', this.filter('fastest').pluck('name'));\n})\n.run();\n\nvar s = new Bench.Suite;\ns.add('Array.prototype.slice.call(arguments, 1)', function () {\n  Array.prototype.slice.call(arguments, 1);\n}).add('[].slice.call(arguments, 1)', function () {\n  [].slice.call(arguments, 1);\n}).add('cached slice.call(arguments, 1)', function () {\n  slice.call(arguments, 1)\n}).add('sliced(arguments, 1)', function () {\n  sliced(arguments, 1)\n}).on('cycle', function (evt) {\n  console.log(String(evt.target));\n}).on('complete', function () {\n  console.log('fastest is %s', this.filter('fastest').pluck('name'));\n})\n.run();\n\nvar s = new Bench.Suite;\ns.add('Array.prototype.slice.call(arguments, -1)', function () {\n  Array.prototype.slice.call(arguments, -1);\n}).add('[].slice.call(arguments, -1)', function () {\n  [].slice.call(arguments, -1);\n}).add('cached slice.call(arguments, -1)', function () {\n  slice.call(arguments, -1)\n}).add('sliced(arguments, -1)', function () {\n  sliced(arguments, -1)\n}).on('cycle', function (evt) {\n  console.log(String(evt.target));\n}).on('complete', function () {\n  console.log('fastest is %s', this.filter('fastest').pluck('name'));\n})\n.run();\n\nvar s = new Bench.Suite;\ns.add('Array.prototype.slice.call(arguments, -2, -10)', function () {\n  Array.prototype.slice.call(arguments, -2, -10);\n}).add('[].slice.call(arguments, -2, -10)', function () {\n  [].slice.call(arguments, -2, -10);\n}).add('cached slice.call(arguments, -2, -10)', function () {\n  slice.call(arguments, -2, -10)\n}).add('sliced(arguments, -2, -10)', function () {\n  sliced(arguments, -2, -10)\n}).on('cycle', function (evt) {\n  console.log(String(evt.target));\n}).on('complete', function () {\n  console.log('fastest is %s', this.filter('fastest').pluck('name'));\n})\n.run();\n\nvar s = new Bench.Suite;\ns.add('Array.prototype.slice.call(arguments, -2, -1)', function () {\n  Array.prototype.slice.call(arguments, -2, -1);\n}).add('[].slice.call(arguments, -2, -1)', function () {\n  [].slice.call(arguments, -2, -1);\n}).add('cached slice.call(arguments, -2, -1)', function () {\n  slice.call(arguments, -2, -1)\n}).add('sliced(arguments, -2, -1)', function () {\n  sliced(arguments, -2, -1)\n}).on('cycle', function (evt) {\n  console.log(String(evt.target));\n}).on('complete', function () {\n  console.log('fastest is %s', this.filter('fastest').pluck('name'));\n})\n.run();\n\n/**\n * Output:\n *\n * Array.prototype.slice.call x 1,289,592 ops/sec ±2.88% (87 runs sampled)\n * [].slice.call x 1,345,451 ops/sec ±1.68% (97 runs sampled)\n * cached slice.call x 10,719,886 ops/sec ±1.04% (99 runs sampled)\n * sliced x 15,809,545 ops/sec ±1.46% (93 runs sampled)\n * fastest is sliced\n *\n */\n"]}