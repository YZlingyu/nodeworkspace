{"version":3,"sources":["index.js"],"names":[],"mappings":"AAAA;;AAEA,IAAI,WAAW,mEAAmE,KAAnE,CAAyE,EAAzE,CAAf;AAAA,IACI,SAAS,EADb;AAAA,IAEI,MAAM,EAFV;AAAA,IAGI,OAAO,CAHX;AAAA,IAII,IAAI,CAJR;AAAA,IAKI,IALJ;;AAOA;;;;;;;AAOA,SAAS,MAAT,CAAgB,GAAhB,EAAqB;AACnB,MAAI,UAAU,EAAd;;AAEA,KAAG;AACD,cAAU,SAAS,MAAM,MAAf,IAAyB,OAAnC;AACA,UAAM,KAAK,KAAL,CAAW,MAAM,MAAjB,CAAN;AACD,GAHD,QAGS,MAAM,CAHf;;AAKA,SAAO,OAAP;AACD;;AAED;;;;;;;AAOA,SAAS,MAAT,CAAgB,GAAhB,EAAqB;AACnB,MAAI,UAAU,CAAd;;AAEA,OAAK,IAAI,CAAT,EAAY,IAAI,IAAI,MAApB,EAA4B,GAA5B,EAAiC;AAC/B,cAAU,UAAU,MAAV,GAAmB,IAAI,IAAI,MAAJ,CAAW,CAAX,CAAJ,CAA7B;AACD;;AAED,SAAO,OAAP;AACD;;AAED;;;;;;AAMA,SAAS,KAAT,GAAiB;AACf,MAAI,MAAM,OAAO,CAAC,IAAI,IAAJ,EAAR,CAAV;;AAEA,MAAI,QAAQ,IAAZ,EAAkB,OAAO,OAAO,CAAP,EAAU,OAAO,GAAxB;AAClB,SAAO,MAAK,GAAL,GAAU,OAAO,MAAP,CAAjB;AACD;;AAED;AACA;AACA;AACA,OAAO,IAAI,MAAX,EAAmB,GAAnB,EAAwB,IAAI,SAAS,CAAT,CAAJ,IAAmB,CAAnB;;AAExB;AACA;AACA;AACA,MAAM,MAAN,GAAe,MAAf;AACA,MAAM,MAAN,GAAe,MAAf;AACA,OAAO,OAAP,GAAiB,KAAjB","file":"index-compiled.js","sourcesContent":["'use strict';\n\nvar alphabet = '0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz-_'.split('')\n  , length = 64\n  , map = {}\n  , seed = 0\n  , i = 0\n  , prev;\n\n/**\n * Return a string representing the specified number.\n *\n * @param {Number} num The number to convert.\n * @returns {String} The string representation of the number.\n * @api public\n */\nfunction encode(num) {\n  var encoded = '';\n\n  do {\n    encoded = alphabet[num % length] + encoded;\n    num = Math.floor(num / length);\n  } while (num > 0);\n\n  return encoded;\n}\n\n/**\n * Return the integer value specified by the given string.\n *\n * @param {String} str The string to convert.\n * @returns {Number} The integer value represented by the string.\n * @api public\n */\nfunction decode(str) {\n  var decoded = 0;\n\n  for (i = 0; i < str.length; i++) {\n    decoded = decoded * length + map[str.charAt(i)];\n  }\n\n  return decoded;\n}\n\n/**\n * Yeast: A tiny growing id generator.\n *\n * @returns {String} A unique id.\n * @api public\n */\nfunction yeast() {\n  var now = encode(+new Date());\n\n  if (now !== prev) return seed = 0, prev = now;\n  return now +'.'+ encode(seed++);\n}\n\n//\n// Map each character to its index.\n//\nfor (; i < length; i++) map[alphabet[i]] = i;\n\n//\n// Expose the `yeast`, `encode` and `decode` functions.\n//\nyeast.encode = encode;\nyeast.decode = decode;\nmodule.exports = yeast;\n"]}