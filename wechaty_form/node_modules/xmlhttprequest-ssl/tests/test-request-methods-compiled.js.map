{"version":3,"sources":["test-request-methods.js"],"names":[],"mappings":"AAAA,IAAI,MAAM,QAAQ,MAAR,CAAV;AAAA,IACI,SAAS,QAAQ,QAAR,CADb;AAAA,IAEI,iBAAiB,QAAQ,uBAAR,EAAiC,cAFtD;AAAA,IAGI,OAAO,QAAQ,MAAR,CAHX;AAAA,IAII,GAJJ;;AAMA;AACA,IAAI,SAAS,KAAK,YAAL,CAAkB,UAAU,GAAV,EAAe,GAAf,EAAoB;AACjD;AACA,SAAO,KAAP,CAAa,QAAQ,SAAR,CAAb,EAAiC,IAAI,MAArC;AACA,SAAO,KAAP,CAAa,MAAM,QAAQ,SAAR,CAAnB,EAAuC,IAAI,GAA3C;;AAEA,MAAI,OAAQ,IAAI,MAAJ,IAAc,MAAd,GAAuB,aAAvB,GAAuC,EAAnD;;AAEA,MAAI,SAAJ,CAAc,GAAd,EAAmB;AACjB,oBAAgB,YADC;AAEjB,sBAAkB,OAAO,UAAP,CAAkB,IAAlB;AAFD,GAAnB;AAIA;AACA,MAAI,IAAI,MAAJ,IAAc,MAAlB,EAA0B;AACxB,QAAI,KAAJ,CAAU,IAAV;AACD;AACD,MAAI,GAAJ;;AAEA,MAAI,aAAa,QAAQ,MAAR,GAAiB,CAAlC,EAAqC;AACnC,SAAK,KAAL;AACA,QAAI,IAAJ,CAAS,MAAT;AACD;AACF,CArBY,EAqBV,MArBU,CAqBH,IArBG,CAAb;;AAuBA;AACA,IAAI,UAAU,CAAC,KAAD,EAAQ,MAAR,EAAgB,MAAhB,EAAwB,KAAxB,EAA+B,QAA/B,CAAd;AACA,IAAI,YAAY,CAAhB;;AAEA,SAAS,KAAT,CAAe,MAAf,EAAuB;AACrB;AACA,QAAM,IAAI,cAAJ,EAAN;;AAEA,MAAI,kBAAJ,GAAyB,YAAW;AAClC,QAAI,KAAK,UAAL,IAAmB,CAAvB,EAA0B;AACxB,UAAI,UAAU,MAAd,EAAsB;AACpB,eAAO,KAAP,CAAa,EAAb,EAAiB,KAAK,YAAtB;AACD,OAFD,MAEO;AACL,eAAO,KAAP,CAAa,aAAb,EAA4B,KAAK,YAAjC;AACD;;AAED;;AAEA,UAAI,YAAY,QAAQ,MAAxB,EAAgC;AAC9B,YAAI,IAAJ,CAAS,aAAa,QAAQ,SAAR,CAAtB;AACA,cAAM,QAAQ,SAAR,CAAN;AACD;AACF;AACF,GAfD;;AAiBA,MAAI,MAAM,2BAA2B,MAArC;AACA,MAAI,IAAJ,CAAS,MAAT,EAAiB,GAAjB;AACA,MAAI,IAAJ;AACD;;AAED,IAAI,IAAJ,CAAS,aAAa,QAAQ,SAAR,CAAtB;AACA,MAAM,QAAQ,SAAR,CAAN","file":"test-request-methods-compiled.js","sourcesContent":["var sys = require(\"util\")\n  , assert = require(\"assert\")\n  , XMLHttpRequest = require(\"../lib/XMLHttpRequest\").XMLHttpRequest\n  , http = require(\"http\")\n  , xhr;\n\n// Test server\nvar server = http.createServer(function (req, res) {\n  // Check request method and URL\n  assert.equal(methods[curMethod], req.method);\n  assert.equal(\"/\" + methods[curMethod], req.url);\n\n  var body = (req.method != \"HEAD\" ? \"Hello World\" : \"\");\n\n  res.writeHead(200, {\n    \"Content-Type\": \"text/plain\",\n    \"Content-Length\": Buffer.byteLength(body)\n  });\n  // HEAD has no body\n  if (req.method != \"HEAD\") {\n    res.write(body);\n  }\n  res.end();\n\n  if (curMethod == methods.length - 1) {\n    this.close();\n    sys.puts(\"done\");\n  }\n}).listen(8000);\n\n// Test standard methods\nvar methods = [\"GET\", \"POST\", \"HEAD\", \"PUT\", \"DELETE\"];\nvar curMethod = 0;\n\nfunction start(method) {\n  // Reset each time\n  xhr = new XMLHttpRequest();\n\n  xhr.onreadystatechange = function() {\n    if (this.readyState == 4) {\n      if (method == \"HEAD\") {\n        assert.equal(\"\", this.responseText);\n      } else {\n        assert.equal(\"Hello World\", this.responseText);\n      }\n\n      curMethod++;\n\n      if (curMethod < methods.length) {\n        sys.puts(\"Testing \" + methods[curMethod]);\n        start(methods[curMethod]);\n      }\n    }\n  };\n\n  var url = \"http://localhost:8000/\" + method;\n  xhr.open(method, url);\n  xhr.send();\n}\n\nsys.puts(\"Testing \" + methods[curMethod]);\nstart(methods[curMethod]);\n"]}