{"version":3,"sources":["test-exceptions.js"],"names":[],"mappings":"AAAA,IAAI,MAAM,QAAQ,MAAR,CAAV;AAAA,IACI,SAAS,QAAQ,QAAR,CADb;AAAA,IAEI,iBAAiB,QAAQ,uBAAR,EAAiC,cAFtD;AAAA,IAGI,MAAM,IAAI,cAAJ,EAHV;;AAKA;AACA,IAAI;AACF,MAAI,IAAJ,CAAS,OAAT,EAAkB,wBAAlB;AACA,UAAQ,GAAR,CAAY,2CAAZ;AACD,CAHD,CAGE,OAAM,CAAN,EAAS,CAAE;AACb,IAAI;AACF,MAAI,IAAJ,CAAS,OAAT,EAAkB,wBAAlB;AACA,UAAQ,GAAR,CAAY,2CAAZ;AACD,CAHD,CAGE,OAAM,CAAN,EAAS,CAAE;AACb,IAAI;AACF,MAAI,IAAJ,CAAS,SAAT,EAAoB,wBAApB;AACA,UAAQ,GAAR,CAAY,6CAAZ;AACD,CAHD,CAGE,OAAM,CAAN,EAAS,CAAE;AACb;AACA,IAAI;AACF,MAAI,IAAJ,CAAS,KAAT,EAAgB,wBAAhB;AACD,CAFD,CAEE,OAAM,CAAN,EAAS;AACT,UAAQ,GAAR,CAAY,kCAAZ,EAAgD,CAAhD;AACD;;AAED;AACA,IAAI,0BAA0B,CAC5B,gBAD4B,EAE5B,iBAF4B,EAG5B,gCAH4B,EAI5B,+BAJ4B,EAK5B,YAL4B,EAM5B,gBAN4B,EAO5B,2BAP4B,EAQ5B,QAR4B,EAS5B,SAT4B,EAU5B,MAV4B,EAW5B,QAX4B,EAY5B,MAZ4B,EAa5B,YAb4B,EAc5B,QAd4B,EAe5B,SAf4B,EAgB5B,IAhB4B,EAiB5B,SAjB4B,EAkB5B,mBAlB4B,EAmB5B,SAnB4B,EAoB5B,KApB4B,CAA9B;;AAuBA,KAAK,IAAI,CAAT,IAAc,uBAAd,EAAuC;AACrC,MAAG,IAAI,gBAAJ,CAAqB,wBAAwB,CAAxB,CAArB,EAAiD,MAAjD,MAA6D,KAAhE,EAAuE;AACrE,YAAQ,GAAR,CAAY,YAAY,wBAAwB,CAAxB,CAAZ,GAAyC,+BAArD;AACD;AACF;;AAED;AACA,IAAI,gBAAJ,CAAqB,UAArB,EAAiC,MAAjC;;AAEA,QAAQ,GAAR,CAAY,MAAZ","file":"test-exceptions-compiled.js","sourcesContent":["var sys = require(\"util\")\n  , assert = require(\"assert\")\n  , XMLHttpRequest = require(\"../lib/XMLHttpRequest\").XMLHttpRequest\n  , xhr = new XMLHttpRequest();\n\n// Test request methods that aren't allowed\ntry {\n  xhr.open(\"TRACK\", \"http://localhost:8000/\");\n  console.log(\"ERROR: TRACK should have thrown exception\");\n} catch(e) {}\ntry {\n  xhr.open(\"TRACE\", \"http://localhost:8000/\");\n  console.log(\"ERROR: TRACE should have thrown exception\");\n} catch(e) {}\ntry {\n  xhr.open(\"CONNECT\", \"http://localhost:8000/\");\n  console.log(\"ERROR: CONNECT should have thrown exception\");\n} catch(e) {}\n// Test valid request method\ntry {\n  xhr.open(\"GET\", \"http://localhost:8000/\");\n} catch(e) {\n  console.log(\"ERROR: Invalid exception for GET\", e);\n}\n\n// Test forbidden headers\nvar forbiddenRequestHeaders = [\n  \"accept-charset\",\n  \"accept-encoding\",\n  \"access-control-request-headers\",\n  \"access-control-request-method\",\n  \"connection\",\n  \"content-length\",\n  \"content-transfer-encoding\",\n  \"cookie\",\n  \"cookie2\",\n  \"date\",\n  \"expect\",\n  \"host\",\n  \"keep-alive\",\n  \"origin\",\n  \"referer\",\n  \"te\",\n  \"trailer\",\n  \"transfer-encoding\",\n  \"upgrade\",\n  \"via\"\n];\n\nfor (var i in forbiddenRequestHeaders) {\n  if(xhr.setRequestHeader(forbiddenRequestHeaders[i], \"Test\") !== false) {\n    console.log(\"ERROR: \" + forbiddenRequestHeaders[i] + \" should have thrown exception\");\n  }\n}\n\n// Try valid header\nxhr.setRequestHeader(\"X-Foobar\", \"Test\");\n\nconsole.log(\"Done\");\n"]}