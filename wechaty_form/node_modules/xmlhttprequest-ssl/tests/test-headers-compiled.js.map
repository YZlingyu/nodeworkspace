{"version":3,"sources":["test-headers.js"],"names":[],"mappings":"AAAA,IAAI,MAAM,QAAQ,MAAR,CAAV;AAAA,IACI,SAAS,QAAQ,QAAR,CADb;AAAA,IAEI,iBAAiB,QAAQ,uBAAR,EAAiC,cAFtD;AAAA,IAGI,MAAM,IAAI,cAAJ,EAHV;AAAA,IAII,OAAO,QAAQ,MAAR,CAJX;;AAMA;AACA,IAAI,SAAS,KAAK,YAAL,CAAkB,UAAU,GAAV,EAAe,GAAf,EAAoB;AACjD;AACA,SAAO,KAAP,CAAa,QAAb,EAAuB,IAAI,OAAJ,CAAY,QAAZ,CAAvB;AACA;AACA,SAAO,KAAP,CAAa,0BAAb,EAAyC,IAAI,OAAJ,CAAY,YAAZ,CAAzC;AACA;AACA,SAAO,KAAP,CAAa,mBAAb,EAAkC,IAAI,OAAJ,CAAY,SAAZ,CAAlC;;AAEA,MAAI,OAAO,aAAX;AACA,MAAI,SAAJ,CAAc,GAAd,EAAmB;AACjB,oBAAgB,YADC;AAEjB,sBAAkB,OAAO,UAAP,CAAkB,IAAlB,CAFD;AAGjB;AACA;AACA,kBAAc,SALG;AAMjB,mBAAe,SANE;AAOjB,YAAQ,+BAPS;AAQjB,kBAAc;AARG,GAAnB;AAUA,MAAI,KAAJ,CAAU,aAAV;AACA,MAAI,GAAJ;;AAEA,OAAK,KAAL;AACD,CAvBY,EAuBV,MAvBU,CAuBH,IAvBG,CAAb;;AAyBA,IAAI,kBAAJ,GAAyB,YAAW;AAClC,MAAI,KAAK,UAAL,IAAmB,CAAvB,EAA0B;AACxB;AACA,QAAI,UAAU,4GAAd;AACA,WAAO,KAAP,CAAa,OAAb,EAAsB,KAAK,qBAAL,EAAtB;;AAEA;AACA,WAAO,KAAP,CAAa,YAAb,EAA2B,KAAK,iBAAL,CAAuB,cAAvB,CAA3B;AACA,WAAO,KAAP,CAAa,YAAb,EAA2B,KAAK,iBAAL,CAAuB,cAAvB,CAA3B;AACA,WAAO,KAAP,CAAa,YAAb,EAA2B,KAAK,iBAAL,CAAuB,cAAvB,CAA3B;AACA,WAAO,KAAP,CAAa,YAAb,EAA2B,KAAK,iBAAL,CAAuB,cAAvB,CAA3B;;AAEA;AACA,SAAK,KAAL;AACA,WAAO,KAAP,CAAa,EAAb,EAAiB,KAAK,qBAAL,EAAjB;AACA,WAAO,KAAP,CAAa,IAAb,EAAmB,KAAK,iBAAL,CAAuB,YAAvB,CAAnB;;AAEA,QAAI,IAAJ,CAAS,MAAT;AACD;AACF,CAnBD;;AAqBA,OAAO,KAAP,CAAa,IAAb,EAAmB,IAAI,iBAAJ,CAAsB,cAAtB,CAAnB;AACA,IAAI;AACF,MAAI,IAAJ,CAAS,KAAT,EAAgB,wBAAhB;AACA;AACA,MAAI,gBAAJ,CAAqB,QAArB,EAA+B,QAA/B;AACA;AACA,MAAI,gBAAJ,CAAqB,gBAArB,EAAuC,CAAvC;AACA;AACA,MAAI,gBAAJ,CAAqB,YAArB,EAAmC,0BAAnC;AACA;AACA,SAAO,KAAP,CAAa,QAAb,EAAuB,IAAI,gBAAJ,CAAqB,QAArB,CAAvB;AACA;AACA,SAAO,KAAP,CAAa,EAAb,EAAiB,IAAI,gBAAJ,CAAqB,gBAArB,CAAjB;;AAEA;AACA,MAAI,qBAAJ,CAA0B,IAA1B;AACA,MAAI,gBAAJ,CAAqB,SAArB,EAAgC,mBAAhC;AACA,SAAO,KAAP,CAAa,mBAAb,EAAkC,IAAI,gBAAJ,CAAqB,SAArB,CAAlC;;AAEA,MAAI,IAAJ;AACD,CAnBD,CAmBE,OAAM,CAAN,EAAS;AACT,UAAQ,GAAR,CAAY,yBAAZ,EAAuC,CAAvC;AACD","file":"test-headers-compiled.js","sourcesContent":["var sys = require(\"util\")\n  , assert = require(\"assert\")\n  , XMLHttpRequest = require(\"../lib/XMLHttpRequest\").XMLHttpRequest\n  , xhr = new XMLHttpRequest()\n  , http = require(\"http\");\n\n// Test server\nvar server = http.createServer(function (req, res) {\n  // Test setRequestHeader\n  assert.equal(\"Foobar\", req.headers[\"x-test\"]);\n  // Test non-conforming allowed header\n  assert.equal(\"node-XMLHttpRequest-test\", req.headers[\"user-agent\"]);\n  // Test header set with blacklist disabled\n  assert.equal(\"http://github.com\", req.headers[\"referer\"]);\n\n  var body = \"Hello World\";\n  res.writeHead(200, {\n    \"Content-Type\": \"text/plain\",\n    \"Content-Length\": Buffer.byteLength(body),\n    // Set cookie headers to see if they're correctly suppressed\n    // Actual values don't matter\n    \"Set-Cookie\": \"foo=bar\",\n    \"Set-Cookie2\": \"bar=baz\",\n    \"Date\": \"Thu, 30 Aug 2012 18:17:53 GMT\",\n    \"Connection\": \"close\"\n  });\n  res.write(\"Hello World\");\n  res.end();\n\n  this.close();\n}).listen(8000);\n\nxhr.onreadystatechange = function() {\n  if (this.readyState == 4) {\n    // Test getAllResponseHeaders()\n    var headers = \"content-type: text/plain\\r\\ncontent-length: 11\\r\\ndate: Thu, 30 Aug 2012 18:17:53 GMT\\r\\nconnection: close\";\n    assert.equal(headers, this.getAllResponseHeaders());\n\n    // Test case insensitivity\n    assert.equal('text/plain', this.getResponseHeader('Content-Type'));\n    assert.equal('text/plain', this.getResponseHeader('Content-type'));\n    assert.equal('text/plain', this.getResponseHeader('content-Type'));\n    assert.equal('text/plain', this.getResponseHeader('content-type'));\n\n    // Test aborted getAllResponseHeaders\n    this.abort();\n    assert.equal(\"\", this.getAllResponseHeaders());\n    assert.equal(null, this.getResponseHeader(\"Connection\"));\n\n    sys.puts(\"done\");\n  }\n};\n\nassert.equal(null, xhr.getResponseHeader(\"Content-Type\"));\ntry {\n  xhr.open(\"GET\", \"http://localhost:8000/\");\n  // Valid header\n  xhr.setRequestHeader(\"X-Test\", \"Foobar\");\n  // Invalid header\n  xhr.setRequestHeader(\"Content-Length\", 0);\n  // Allowed header outside of specs\n  xhr.setRequestHeader(\"user-agent\", \"node-XMLHttpRequest-test\");\n  // Test getRequestHeader\n  assert.equal(\"Foobar\", xhr.getRequestHeader(\"X-Test\"));\n  // Test invalid header\n  assert.equal(\"\", xhr.getRequestHeader(\"Content-Length\"));\n\n  // Test allowing all headers\n  xhr.setDisableHeaderCheck(true);\n  xhr.setRequestHeader(\"Referer\", \"http://github.com\");\n  assert.equal(\"http://github.com\", xhr.getRequestHeader(\"Referer\"));\n\n  xhr.send();\n} catch(e) {\n  console.log(\"ERROR: Exception raised\", e);\n}\n"]}