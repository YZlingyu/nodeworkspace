{"version":3,"sources":["index.js"],"names":[],"mappings":"AAAA;AACA,IAAI,OAAO,QAAQ,cAAR,CAAX;AAAA,IACE,kBAAkB,QAAQ,WAAR,CADpB;;AAGA;AACA,IAAI,UAAU,QAAQ,oBAAR,EAA8B,OAA5C;;AAEA;AACA,QAAQ,UAAR,GAAqB,KAAK,UAA1B;;AAEA;AACA,QAAQ,KAAR,GAAgB,QAAQ,aAAR,CAAhB;AACA,QAAQ,WAAR,GAAsB,QAAQ,oBAAR,CAAtB;AACA,QAAQ,EAAR,GAAa,QAAQ,UAAR,CAAb;AACA,QAAQ,UAAR,GAAqB,QAAQ,kBAAR,CAArB;AACA,QAAQ,MAAR,GAAiB,QAAQ,cAAR,CAAjB;AACA,QAAQ,OAAR,GAAkB,QAAQ,eAAR,CAAlB;AACA,QAAQ,MAAR,GAAiB,QAAQ,cAAR,CAAjB;AACA,QAAQ,cAAR,GAAyB,QAAQ,uBAAR,CAAzB;AACA,QAAQ,SAAR,GAAoB,QAAQ,yBAAR,CAApB;AACA,QAAQ,KAAR,GAAgB,QAAQ,oBAAR,CAAhB;AACA,QAAQ,MAAR,GAAiB,KAAK,MAAtB;AACA,QAAQ,MAAR,GAAiB,QAAQ,cAAR,CAAjB;AACA,QAAQ,YAAR,GAAuB,QAAQ,qBAAR,CAAvB;AACA;AACA,QAAQ,UAAR,GAAqB,QAAQ,cAAR,EAAwB,MAA7C;AACA,QAAQ,cAAR,GAAyB,QAAQ,cAAR,EAAwB,UAAjD;;AAEA;AACA,QAAQ,MAAR,GAAiB,KAAK,IAAL,CAAU,MAA3B;AACA,QAAQ,IAAR,GAAe,KAAK,IAAL,CAAU,IAAzB;AACA,QAAQ,GAAR,GAAc,KAAK,IAAL,CAAU,GAAxB;AACA,QAAQ,KAAR,GAAgB,KAAK,IAAL,CAAU,KAA1B;AACA,QAAQ,MAAR,GAAiB,KAAK,IAAL,CAAU,MAA3B;AACA,QAAQ,KAAR,GAAgB,KAAK,IAAL,CAAU,KAA1B;AACA,QAAQ,IAAR,GAAe,KAAK,IAAL,CAAU,IAAzB;AACA,QAAQ,MAAR,GAAiB,KAAK,IAAL,CAAU,MAA3B;AACA,QAAQ,MAAR,GAAiB,KAAK,IAAL,CAAU,MAA3B;AACA,QAAQ,QAAR,GAAmB,KAAK,IAAL,CAAU,QAA7B;AACA,QAAQ,QAAR,GAAmB,KAAK,IAAL,CAAU,QAA7B;AACA,QAAQ,MAAR,GAAiB,KAAK,IAAL,CAAU,MAA3B;AACA,QAAQ,SAAR,GAAoB,KAAK,IAAL,CAAU,SAA9B;AACA,QAAQ,UAAR,GAAqB,KAAK,IAAL,CAAU,UAA/B;AACA,QAAQ,UAAR,GAAqB,KAAK,IAAL,CAAU,UAA/B;;AAEA;AACA,QAAQ,OAAR,GAAkB,OAAlB;;AAEA;AACA,QAAQ,UAAR,GAAqB,UAAS,OAAT,EAAkB,QAAlB,EAA4B;AAC/C,MAAG,OAAO,OAAP,IAAkB,UAArB,EAAiC,WAAW,OAAX,EAAoB,UAAU,EAA9B;AACjC,SAAO,IAAI,eAAJ,CAAoB,IAApB,EAA0B,OAA1B,EAAmC,QAAnC,CAAP;AACD,CAHD;;AAKA;AACA,OAAO,OAAP,GAAiB,OAAjB","file":"index-compiled.js","sourcesContent":["// Core module\nvar core = require('mongodb-core'),\n  Instrumentation = require('./lib/apm');\n\n// Set up the connect function\nvar connect = require('./lib/mongo_client').connect;\n\n// Expose error class\nconnect.MongoError = core.MongoError;\n\n// Actual driver classes exported\nconnect.Admin = require('./lib/admin');\nconnect.MongoClient = require('./lib/mongo_client');\nconnect.Db = require('./lib/db');\nconnect.Collection = require('./lib/collection');\nconnect.Server = require('./lib/server');\nconnect.ReplSet = require('./lib/replset');\nconnect.Mongos = require('./lib/mongos');\nconnect.ReadPreference = require('./lib/read_preference');\nconnect.GridStore = require('./lib/gridfs/grid_store');\nconnect.Chunk = require('./lib/gridfs/chunk');\nconnect.Logger = core.Logger;\nconnect.Cursor = require('./lib/cursor');\nconnect.GridFSBucket = require('./lib/gridfs-stream');\n// Exported to be used in tests not to be used anywhere else\nconnect.CoreServer = require('mongodb-core').Server;\nconnect.CoreConnection = require('mongodb-core').Connection;\n\n// BSON types exported\nconnect.Binary = core.BSON.Binary;\nconnect.Code = core.BSON.Code;\nconnect.Map = core.BSON.Map;\nconnect.DBRef = core.BSON.DBRef;\nconnect.Double = core.BSON.Double;\nconnect.Int32 = core.BSON.Int32;\nconnect.Long = core.BSON.Long;\nconnect.MinKey = core.BSON.MinKey;\nconnect.MaxKey = core.BSON.MaxKey;\nconnect.ObjectID = core.BSON.ObjectID;\nconnect.ObjectId = core.BSON.ObjectID;\nconnect.Symbol = core.BSON.Symbol;\nconnect.Timestamp = core.BSON.Timestamp;\nconnect.BSONRegExp = core.BSON.BSONRegExp;\nconnect.Decimal128 = core.BSON.Decimal128;\n\n// Add connect method\nconnect.connect = connect;\n\n// Set up the instrumentation method\nconnect.instrument = function(options, callback) {\n  if(typeof options == 'function') callback = options, options = {};\n  return new Instrumentation(core, options, callback);\n}\n\n// Set our exports to be the connect function\nmodule.exports = connect;\n"]}