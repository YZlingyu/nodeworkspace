{"version":3,"sources":["aggregation_cursor.js"],"names":[],"mappings":"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","file":"aggregation_cursor-compiled.js","sourcesContent":["\"use strict\";\n\nvar inherits = require('util').inherits\n  , MongoError = require('mongodb-core').MongoError\n  , Readable = require('stream').Readable || require('readable-stream').Readable\n  , Define = require('./metadata')\n  , CoreCursor = require('./cursor');\n\n/**\n * @fileOverview The **AggregationCursor** class is an internal class that embodies an aggregation cursor on MongoDB\n * allowing for iteration over the results returned from the underlying query. It supports\n * one by one document iteration, conversion to an array or can be iterated as a Node 0.10.X\n * or higher stream\n *\n * **AGGREGATIONCURSOR Cannot directly be instantiated**\n * @example\n * var MongoClient = require('mongodb').MongoClient,\n *   test = require('assert');\n * // Connection url\n * var url = 'mongodb://localhost:27017/test';\n * // Connect using MongoClient\n * MongoClient.connect(url, function(err, db) {\n *   // Create a collection we want to drop later\n *   var col = db.collection('createIndexExample1');\n *   // Insert a bunch of documents\n *   col.insert([{a:1, b:1}\n *     , {a:2, b:2}, {a:3, b:3}\n *     , {a:4, b:4}], {w:1}, function(err, result) {\n *     test.equal(null, err);\n *     // Show that duplicate records got dropped\n *     col.aggregation({}, {cursor: {}}).toArray(function(err, items) {\n *       test.equal(null, err);\n *       test.equal(4, items.length);\n *       db.close();\n *     });\n *   });\n * });\n */\n\n/**\n * Namespace provided by the browser.\n * @external Readable\n */\n\n/**\n * Creates a new Aggregation Cursor instance (INTERNAL TYPE, do not instantiate directly)\n * @class AggregationCursor\n * @extends external:Readable\n * @fires AggregationCursor#data\n * @fires AggregationCursor#end\n * @fires AggregationCursor#close\n * @fires AggregationCursor#readable\n * @return {AggregationCursor} an AggregationCursor instance.\n */\nvar AggregationCursor = function(bson, ns, cmd, options, topology, topologyOptions) {\n  CoreCursor.apply(this, Array.prototype.slice.call(arguments, 0));\n  var state = AggregationCursor.INIT;\n  var streamOptions = {};\n\n  // MaxTimeMS\n  var maxTimeMS = null;\n\n  // Get the promiseLibrary\n  var promiseLibrary = options.promiseLibrary;\n\n  // No promise library selected fall back\n  if(!promiseLibrary) {\n    promiseLibrary = typeof global.Promise == 'function' ?\n      global.Promise : require('es6-promise').Promise;\n  }\n\n  // Set up\n  Readable.call(this, {objectMode: true});\n\n  // Internal state\n  this.s = {\n    // MaxTimeMS\n      maxTimeMS: maxTimeMS\n    // State\n    , state: state\n    // Stream options\n    , streamOptions: streamOptions\n    // BSON\n    , bson: bson\n    // Namespace\n    , ns: ns\n    // Command\n    , cmd: cmd\n    // Options\n    , options: options\n    // Topology\n    , topology: topology\n    // Topology Options\n    , topologyOptions: topologyOptions\n    // Promise library\n    , promiseLibrary: promiseLibrary\n  }\n}\n\n/**\n * AggregationCursor stream data event, fired for each document in the cursor.\n *\n * @event AggregationCursor#data\n * @type {object}\n */\n\n/**\n * AggregationCursor stream end event\n *\n * @event AggregationCursor#end\n * @type {null}\n */\n\n/**\n * AggregationCursor stream close event\n *\n * @event AggregationCursor#close\n * @type {null}\n */\n\n/**\n * AggregationCursor stream readable event\n *\n * @event AggregationCursor#readable\n * @type {null}\n */\n\n// Inherit from Readable\ninherits(AggregationCursor, Readable);\n\n// Extend the Cursor\nfor(var name in CoreCursor.prototype) {\n  AggregationCursor.prototype[name] = CoreCursor.prototype[name];\n}\n\nvar define = AggregationCursor.define = new Define('AggregationCursor', AggregationCursor, true);\n\n/**\n * Set the batch size for the cursor.\n * @method\n * @param {number} value The batchSize for the cursor.\n * @throws {MongoError}\n * @return {AggregationCursor}\n */\nAggregationCursor.prototype.batchSize = function(value) {\n  if(this.s.state == AggregationCursor.CLOSED || this.isDead()) throw MongoError.create({message: \"Cursor is closed\", driver:true });\n  if(typeof value != 'number') throw MongoError.create({message: \"batchSize requires an integer\", drvier:true });\n  if(this.s.cmd.cursor) this.s.cmd.cursor.batchSize = value;\n  this.setCursorBatchSize(value);\n  return this;\n}\n\ndefine.classMethod('batchSize', {callback: false, promise:false, returns: [AggregationCursor]});\n\n/**\n * Add a geoNear stage to the aggregation pipeline\n * @method\n * @param {object} document The geoNear stage document.\n * @return {AggregationCursor}\n */\nAggregationCursor.prototype.geoNear = function(document) {\n  this.s.cmd.pipeline.push({$geoNear: document});\n  return this;\n}\n\ndefine.classMethod('geoNear', {callback: false, promise:false, returns: [AggregationCursor]});\n\n/**\n * Add a group stage to the aggregation pipeline\n * @method\n * @param {object} document The group stage document.\n * @return {AggregationCursor}\n */\nAggregationCursor.prototype.group = function(document) {\n  this.s.cmd.pipeline.push({$group: document});\n  return this;\n}\n\ndefine.classMethod('group', {callback: false, promise:false, returns: [AggregationCursor]});\n\n/**\n * Add a limit stage to the aggregation pipeline\n * @method\n * @param {number} value The state limit value.\n * @return {AggregationCursor}\n */\nAggregationCursor.prototype.limit = function(value) {\n  this.s.cmd.pipeline.push({$limit: value});\n  return this;\n}\n\ndefine.classMethod('limit', {callback: false, promise:false, returns: [AggregationCursor]});\n\n/**\n * Add a match stage to the aggregation pipeline\n * @method\n * @param {object} document The match stage document.\n * @return {AggregationCursor}\n */\nAggregationCursor.prototype.match = function(document) {\n  this.s.cmd.pipeline.push({$match: document});\n  return this;\n}\n\ndefine.classMethod('match', {callback: false, promise:false, returns: [AggregationCursor]});\n\n/**\n * Add a maxTimeMS stage to the aggregation pipeline\n * @method\n * @param {number} value The state maxTimeMS value.\n * @return {AggregationCursor}\n */\nAggregationCursor.prototype.maxTimeMS = function(value) {\n  if(this.s.topology.lastIsMaster().minWireVersion > 2) {\n    this.s.cmd.maxTimeMS = value;\n  }\n  return this;\n}\n\ndefine.classMethod('maxTimeMS', {callback: false, promise:false, returns: [AggregationCursor]});\n\n/**\n * Add a out stage to the aggregation pipeline\n * @method\n * @param {number} destination The destination name.\n * @return {AggregationCursor}\n */\nAggregationCursor.prototype.out = function(destination) {\n  this.s.cmd.pipeline.push({$out: destination});\n  return this;\n}\n\ndefine.classMethod('out', {callback: false, promise:false, returns: [AggregationCursor]});\n\n/**\n * Add a project stage to the aggregation pipeline\n * @method\n * @param {object} document The project stage document.\n * @return {AggregationCursor}\n */\nAggregationCursor.prototype.project = function(document) {\n  this.s.cmd.pipeline.push({$project: document});\n  return this;\n}\n\ndefine.classMethod('project', {callback: false, promise:false, returns: [AggregationCursor]});\n\n/**\n * Add a lookup stage to the aggregation pipeline\n * @method\n * @param {object} document The lookup stage document.\n * @return {AggregationCursor}\n */\nAggregationCursor.prototype.lookup = function(document) {\n  this.s.cmd.pipeline.push({$lookup: document});\n  return this;\n}\n\ndefine.classMethod('lookup', {callback: false, promise:false, returns: [AggregationCursor]});\n\n/**\n * Add a redact stage to the aggregation pipeline\n * @method\n * @param {object} document The redact stage document.\n * @return {AggregationCursor}\n */\nAggregationCursor.prototype.redact = function(document) {\n  this.s.cmd.pipeline.push({$redact: document});\n  return this;\n}\n\ndefine.classMethod('redact', {callback: false, promise:false, returns: [AggregationCursor]});\n\n/**\n * Add a skip stage to the aggregation pipeline\n * @method\n * @param {number} value The state skip value.\n * @return {AggregationCursor}\n */\nAggregationCursor.prototype.skip = function(value) {\n  this.s.cmd.pipeline.push({$skip: value});\n  return this;\n}\n\ndefine.classMethod('skip', {callback: false, promise:false, returns: [AggregationCursor]});\n\n/**\n * Add a sort stage to the aggregation pipeline\n * @method\n * @param {object} document The sort stage document.\n * @return {AggregationCursor}\n */\nAggregationCursor.prototype.sort = function(document) {\n  this.s.cmd.pipeline.push({$sort: document});\n  return this;\n}\n\ndefine.classMethod('sort', {callback: false, promise:false, returns: [AggregationCursor]});\n\n/**\n * Add a unwind stage to the aggregation pipeline\n * @method\n * @param {number} field The unwind field name.\n * @return {AggregationCursor}\n */\nAggregationCursor.prototype.unwind = function(field) {\n  this.s.cmd.pipeline.push({$unwind: field});\n  return this;\n}\n\ndefine.classMethod('unwind', {callback: false, promise:false, returns: [AggregationCursor]});\n\nAggregationCursor.prototype.get = AggregationCursor.prototype.toArray;\n\n// Inherited methods\ndefine.classMethod('toArray', {callback: true, promise:true});\ndefine.classMethod('each', {callback: true, promise:false});\ndefine.classMethod('forEach', {callback: true, promise:false});\ndefine.classMethod('hasNext', {callback: true, promise:true});\ndefine.classMethod('next', {callback: true, promise:true});\ndefine.classMethod('close', {callback: true, promise:true});\ndefine.classMethod('isClosed', {callback: false, promise:false, returns: [Boolean]});\ndefine.classMethod('rewind', {callback: false, promise:false});\ndefine.classMethod('bufferedCount', {callback: false, promise:false, returns: [Number]});\ndefine.classMethod('readBufferedDocuments', {callback: false, promise:false, returns: [Array]});\n\n/**\n * Get the next available document from the cursor, returns null if no more documents are available.\n * @function AggregationCursor.prototype.next\n * @param {AggregationCursor~resultCallback} [callback] The result callback.\n * @throws {MongoError}\n * @return {Promise} returns Promise if no callback passed\n */\n\n/**\n * Check if there is any document still available in the cursor\n * @function AggregationCursor.prototype.hasNext\n * @param {AggregationCursor~resultCallback} [callback] The result callback.\n * @throws {MongoError}\n * @return {Promise} returns Promise if no callback passed\n */\n\n/**\n * The callback format for results\n * @callback AggregationCursor~toArrayResultCallback\n * @param {MongoError} error An error instance representing the error during the execution.\n * @param {object[]} documents All the documents the satisfy the cursor.\n */\n\n/**\n * Returns an array of documents. The caller is responsible for making sure that there\n * is enough memory to store the results. Note that the array only contain partial\n * results when this cursor had been previouly accessed. In that case,\n * cursor.rewind() can be used to reset the cursor.\n * @method AggregationCursor.prototype.toArray\n * @param {AggregationCursor~toArrayResultCallback} [callback] The result callback.\n * @throws {MongoError}\n * @return {Promise} returns Promise if no callback passed\n */\n\n/**\n * The callback format for results\n * @callback AggregationCursor~resultCallback\n * @param {MongoError} error An error instance representing the error during the execution.\n * @param {(object|null)} result The result object if the command was executed successfully.\n */\n\n/**\n * Iterates over all the documents for this cursor. As with **{cursor.toArray}**,\n * not all of the elements will be iterated if this cursor had been previouly accessed.\n * In that case, **{cursor.rewind}** can be used to reset the cursor. However, unlike\n * **{cursor.toArray}**, the cursor will only hold a maximum of batch size elements\n * at any given time if batch size is specified. Otherwise, the caller is responsible\n * for making sure that the entire result can fit the memory.\n * @method AggregationCursor.prototype.each\n * @param {AggregationCursor~resultCallback} callback The result callback.\n * @throws {MongoError}\n * @return {null}\n */\n\n/**\n * Close the cursor, sending a AggregationCursor command and emitting close.\n * @method AggregationCursor.prototype.close\n * @param {AggregationCursor~resultCallback} [callback] The result callback.\n * @return {Promise} returns Promise if no callback passed\n */\n\n/**\n * Is the cursor closed\n * @method AggregationCursor.prototype.isClosed\n * @return {boolean}\n */\n\n/**\n * Execute the explain for the cursor\n * @method AggregationCursor.prototype.explain\n * @param {AggregationCursor~resultCallback} [callback] The result callback.\n * @return {Promise} returns Promise if no callback passed\n */\n\n/**\n * Clone the cursor\n * @function AggregationCursor.prototype.clone\n * @return {AggregationCursor}\n */\n\n/**\n * Resets the cursor\n * @function AggregationCursor.prototype.rewind\n * @return {AggregationCursor}\n */\n\n/**\n * The callback format for the forEach iterator method\n * @callback AggregationCursor~iteratorCallback\n * @param {Object} doc An emitted document for the iterator\n */\n\n/**\n * The callback error format for the forEach iterator method\n * @callback AggregationCursor~endCallback\n * @param {MongoError} error An error instance representing the error during the execution.\n */\n\n/*\n * Iterates over all the documents for this cursor using the iterator, callback pattern.\n * @method AggregationCursor.prototype.forEach\n * @param {AggregationCursor~iteratorCallback} iterator The iteration callback.\n * @param {AggregationCursor~endCallback} callback The end callback.\n * @throws {MongoError}\n * @return {null}\n */\n\nAggregationCursor.INIT = 0;\nAggregationCursor.OPEN = 1;\nAggregationCursor.CLOSED = 2;\n\nmodule.exports = AggregationCursor;\n"]}