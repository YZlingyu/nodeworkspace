{"version":3,"sources":["common-compiled.js"],"names":[],"mappings":"AAAA;;AAEA,IAAI,OAAO,QAAQ,cAAR,EAAwB,IAAxB,CAA6B,IAAxC;AAAA,IACI,YAAY,QAAQ,cAAR,EAAwB,IAAxB,CAA6B,SAD7C;;AAGA;AACA,IAAI,gBAAgB,CAApB;AACA,IAAI,qBAAqB,EAAzB;AACA,IAAI,sBAAsB,EAA1B;AACA,IAAI,iBAAiB,EAArB;;AAEA;AACA,IAAI,SAAS,CAAb;AACA,IAAI,SAAS,CAAb;AACA,IAAI,SAAS,CAAb;;AAEA;AACA,IAAI,eAAe,UAAU,MAAV,EAAkB,GAAlB,EAAuB,OAAvB,EAAgC;AACjD,MAAI,eAAe,EAAnB;;AAEA;AACA,MAAI,IAAI,YAAJ,IAAoB,IAAI,YAAJ,CAAiB,CAAjB,IAAsB,IAA9C,EAAoD,aAAa,CAAb,GAAiB,IAAI,YAAJ,CAAiB,CAAlC;AACpD,MAAI,IAAI,YAAJ,IAAoB,IAAI,YAAJ,CAAiB,CAAjB,IAAsB,IAA9C,EAAoD,aAAa,CAAb,GAAiB,IAAI,YAAJ,CAAiB,CAAlC;AACpD,MAAI,IAAI,YAAJ,IAAoB,IAAI,YAAJ,CAAiB,KAAjB,IAA0B,IAAlD,EAAwD,aAAa,KAAb,GAAqB,IAAI,YAAJ,CAAiB,KAAtC;AACxD,MAAI,IAAI,YAAJ,IAAoB,IAAI,YAAJ,CAAiB,QAAjB,IAA6B,IAArD,EAA2D,aAAa,QAAb,GAAwB,IAAI,YAAJ,CAAiB,QAAzC;;AAE3D;AACA,MAAI,WAAW,QAAQ,CAAR,IAAa,IAA5B,EAAkC,aAAa,CAAb,GAAiB,QAAQ,CAAzB;AAClC,MAAI,WAAW,QAAQ,QAAR,IAAoB,IAAnC,EAAyC,aAAa,QAAb,GAAwB,QAAQ,QAAhC;AACzC,MAAI,WAAW,QAAQ,CAAR,IAAa,IAA5B,EAAkC,aAAa,CAAb,GAAiB,QAAQ,CAAzB;AAClC,MAAI,WAAW,QAAQ,KAAR,IAAiB,IAAhC,EAAsC,aAAa,KAAb,GAAqB,QAAQ,KAA7B;;AAEtC;AACA,SAAO,YAAP;AACD,CAjBD;;AAmBA;;;;AAIA,IAAI,yBAAyB,UAAU,IAAV,EAAgB,IAAhB,EAAsB,KAAtB,EAA6B;AACxD,SAAO,cAAP,CAAsB,IAAtB,EAA4B,IAA5B,EAAkC;AAChC,gBAAY,IADoB;AAEhC,SAAK,YAAY;AACf,aAAO,KAAP;AACD;AAJ+B,GAAlC;AAMD,CAPD;;AASA;;;;;AAKA,IAAI,QAAQ,UAAU,SAAV,EAAqB,iBAArB,EAAwC;AAClD,OAAK,iBAAL,GAAyB,iBAAzB;AACA,OAAK,YAAL,GAAoB,CAApB;AACA,OAAK,eAAL,GAAuB,EAAvB;AACA,OAAK,SAAL,GAAiB,SAAjB;AACA,OAAK,UAAL,GAAkB,EAAlB;AACA,OAAK,IAAL,GAAY,CAAZ;AACA,OAAK,SAAL,GAAiB,CAAjB;AACD,CARD;;AAUA;;;;AAIA,IAAI,WAAW,UAAU,SAAV,EAAqB,SAArB,EAAgC,KAAhC,EAAuC;AACpD,OAAK,SAAL,GAAiB,SAAjB;AACA,OAAK,KAAL,GAAa,KAAb;AACA,OAAK,SAAL,GAAiB,SAAjB;AACD,CAJD;;AAMA;;;;;;;;;;;;AAYA,IAAI,kBAAkB,UAAU,UAAV,EAAsB;AAC1C,yBAAuB,IAAvB,EAA6B,IAA7B,EAAmC,WAAW,EAA9C;AACA,yBAAuB,IAAvB,EAA6B,WAA7B,EAA0C,WAAW,SAArD;AACA,yBAAuB,IAAvB,EAA6B,WAA7B,EAA0C,WAAW,SAArD;AACA,yBAAuB,IAAvB,EAA6B,UAA7B,EAAyC,WAAW,QAApD;AACA,yBAAuB,IAAvB,EAA6B,WAA7B,EAA0C,WAAW,SAArD;AACA,yBAAuB,IAAvB,EAA6B,UAA7B,EAAyC,WAAW,QAApD;;AAEA;;;;;AAKA,OAAK,cAAL,GAAsB,YAAY;AAChC,WAAO,WAAW,WAAlB;AACD,GAFD;;AAIA;;;;;AAKA,OAAK,cAAL,GAAsB,YAAY;AAChC,WAAO,WAAW,QAAlB;AACD,GAFD;;AAIA;;;;;;AAMA,OAAK,eAAL,GAAuB,UAAU,KAAV,EAAiB;AACtC,WAAO,WAAW,QAAX,CAAoB,KAApB,CAAP;AACD,GAFD;;AAIA;;;;;AAKA,OAAK,cAAL,GAAsB,YAAY;AAChC,WAAO,UAAP;AACD,GAFD;;AAIA;;;;;AAKA,OAAK,cAAL,GAAsB,YAAY;AAChC,WAAO,WAAW,WAAX,CAAuB,MAAvB,GAAgC,CAAvC;AACD,GAFD;;AAIA;;;;;AAKA,OAAK,kBAAL,GAA0B,YAAY;AACpC,WAAO,WAAW,WAAX,CAAuB,MAA9B;AACD,GAFD;;AAIA;;;;;AAKA,OAAK,eAAL,GAAuB,UAAU,KAAV,EAAiB;AACtC,QAAI,QAAQ,WAAW,WAAX,CAAuB,MAAnC,EAA2C;AACzC,aAAO,WAAW,WAAX,CAAuB,KAAvB,CAAP;AACD;AACD,WAAO,IAAP;AACD,GALD;;AAOA;;;;;AAKA,OAAK,cAAL,GAAsB,YAAY;AAChC,WAAO,WAAW,WAAlB;AACD,GAFD;;AAIA;;;;;AAKA,OAAK,SAAL,GAAiB,YAAY;AAC3B,WAAO,WAAW,MAAlB;AACD,GAFD;;AAIA;;;;;AAKA,OAAK,oBAAL,GAA4B,YAAY;AACtC,QAAI,WAAW,kBAAX,CAA8B,MAA9B,IAAwC,CAA5C,EAA+C;AAC7C,aAAO,IAAP;AACD,KAFD,MAEO,IAAI,WAAW,kBAAX,CAA8B,MAA9B,IAAwC,CAA5C,EAA+C;AACpD;AACA,aAAO,WAAW,kBAAX,CAA8B,CAA9B,CAAP;AACD,KAHM,MAGA;;AAEL;AACA,UAAI,SAAS,EAAb;AACA,WAAK,IAAI,IAAI,CAAb,EAAgB,IAAI,WAAW,kBAAX,CAA8B,MAAlD,EAA0D,GAA1D,EAA+D;AAC7D,YAAI,MAAM,WAAW,kBAAX,CAA8B,CAA9B,CAAV;AACA,iBAAS,SAAS,IAAI,MAAtB;;AAEA;AACA,YAAI,KAAK,CAAT,EAAY,SAAS,SAAS,OAAlB;AACb;;AAED,aAAO,IAAI,iBAAJ,CAAsB,EAAE,QAAQ,MAAV,EAAkB,MAAM,mBAAxB,EAAtB,CAAP;AACD;AACF,GApBD;;AAsBA,OAAK,MAAL,GAAc,YAAY;AACxB,WAAO,UAAP;AACD,GAFD;;AAIA,OAAK,QAAL,GAAgB,YAAY;AAC1B,WAAO,qBAAqB,KAAK,MAAL,CAAY,UAAZ,CAArB,GAA+C,GAAtD;AACD,GAFD;;AAIA,OAAK,IAAL,GAAY,YAAY;AACtB,WAAO,WAAW,EAAX,IAAiB,CAAxB;AACD,GAFD;AAGD,CAnID;;AAqIA;;;;;;;;AAQA,IAAI,oBAAoB,UAAU,GAAV,EAAe;AACrC,MAAI,EAAE,gBAAgB,iBAAlB,CAAJ,EAA0C,OAAO,IAAI,iBAAJ,CAAsB,GAAtB,CAAP;;AAE1C;AACA,yBAAuB,IAAvB,EAA6B,MAA7B,EAAqC,IAAI,IAAzC;AACA,yBAAuB,IAAvB,EAA6B,QAA7B,EAAuC,IAAI,MAA3C;;AAEA,OAAK,MAAL,GAAc,YAAY;AACxB,WAAO,EAAE,MAAM,IAAI,IAAZ,EAAkB,QAAQ,IAAI,MAA9B,EAAP;AACD,GAFD;;AAIA,OAAK,QAAL,GAAgB,YAAY;AAC1B,WAAO,uBAAuB,IAAI,MAA3B,GAAoC,GAA3C;AACD,GAFD;AAGD,CAdD;;AAgBA;;;;;;;;;AASA,IAAI,aAAa,UAAU,GAAV,EAAe;AAC9B,MAAI,EAAE,gBAAgB,UAAlB,CAAJ,EAAmC,OAAO,IAAI,UAAJ,CAAe,GAAf,CAAP;;AAEnC;AACA,yBAAuB,IAAvB,EAA6B,MAA7B,EAAqC,IAAI,IAAzC;AACA,yBAAuB,IAAvB,EAA6B,OAA7B,EAAsC,IAAI,KAA1C;AACA,yBAAuB,IAAvB,EAA6B,QAA7B,EAAuC,IAAI,MAA3C;;AAEA;AACA;AACA,OAAK,YAAL,GAAoB,YAAY;AAC9B,WAAO,IAAI,EAAX;AACD,GAFD;;AAIA,OAAK,MAAL,GAAc,YAAY;AACxB,WAAO,EAAE,MAAM,IAAI,IAAZ,EAAkB,OAAO,IAAI,KAA7B,EAAoC,QAAQ,IAAI,MAAhD,EAAwD,IAAI,IAAI,EAAhE,EAAP;AACD,GAFD;;AAIA,OAAK,QAAL,GAAgB,YAAY;AAC1B,WAAO,gBAAgB,KAAK,SAAL,CAAe,KAAK,MAAL,EAAf,CAAhB,GAAgD,GAAvD;AACD,GAFD;AAGD,CArBD;;AAuBA;;;;AAIA,IAAI,oBAAoB,UAAU,OAAV,EAAmB,KAAnB,EAA0B,UAA1B,EAAsC,GAAtC,EAA2C,MAA3C,EAAmD;AACzE;AACA,MAAI,GAAJ,EAAS;AACP,aAAS,GAAT;AACD,GAFD,MAEO,IAAI,UAAU,OAAO,MAArB,EAA6B;AAClC,aAAS,OAAO,MAAhB;AACD,GAFM,MAEA,IAAI,UAAU,IAAd,EAAoB;AACzB;AACD;;AAED;AACA,MAAI,OAAO,EAAP,IAAa,CAAb,IAAkB,WAAW,EAAX,IAAiB,CAAvC,EAA0C;AACxC,eAAW,EAAX,GAAgB,CAAhB;;AAEA,QAAI,aAAa;AACf,aAAO,CADQ;AAEf,YAAM,OAAO,IAAP,IAAe,CAFN;AAGf,cAAQ,OAAO,OAHA;AAIf,UAAI,MAAM,UAAN,CAAiB,CAAjB;AAJW,KAAjB;;AAOA,eAAW,WAAX,CAAuB,IAAvB,CAA4B,IAAI,UAAJ,CAAe,UAAf,CAA5B;AACA;AACD,GAZD,MAYO,IAAI,OAAO,EAAP,IAAa,CAAb,IAAkB,WAAW,EAAX,IAAiB,CAAvC,EAA0C;AAC/C;AACD;;AAED;AACA,MAAI,OAAO,MAAP,IAAiB,OAAO,MAA5B,EAAoC;AAClC,QAAI,SAAS,OAAO,MAAP,IAAiB,OAAO,MAArC;AACA,QAAI,WAAW,IAAf;AACA,QAAI,UAAU,IAAd;;AAEA;AACA,QAAI,UAAU,OAAO,SAAP,IAAoB,WAAlC,EAA+C;AAC7C,UAAI,WAAW,MAAX,IAAqB,IAAzB,EAA+B;AAC7B,mBAAW,MAAX,GAAoB,MAApB;AACD,OAFD,MAEO,IAAI,OAAO,WAAP,CAAmB,WAAW,MAA9B,CAAJ,EAA2C;AAChD,mBAAW,MAAX,GAAoB,MAApB;AACD;AACF,KAND,MAMO;AACL;AACA,UAAI,WAAW,MAAf,EAAuB;AACrB,mBAAW,OAAO,WAAW,MAAX,CAAkB,EAAzB,IAA+B,QAA/B,GAA0C,KAAK,UAAL,CAAgB,WAAW,MAAX,CAAkB,EAAlC,CAA1C,GAAkF,WAAW,MAAX,CAAkB,EAA/G;AACA,kBAAU,OAAO,WAAW,MAAX,CAAkB,CAAzB,IAA8B,QAA9B,GAAyC,KAAK,UAAL,CAAgB,WAAW,MAAX,CAAkB,CAAlC,CAAzC,GAAgF,WAAW,MAAX,CAAkB,CAA5G;AACD;;AAED;AACA,UAAI,WAAW,OAAO,OAAO,EAAd,IAAoB,QAApB,GAA+B,KAAK,UAAL,CAAgB,OAAO,EAAvB,CAA/B,GAA4D,OAAO,EAAlF;AACA,UAAI,UAAU,OAAO,OAAO,CAAd,IAAmB,QAAnB,GAA8B,KAAK,UAAL,CAAgB,OAAO,CAAvB,CAA9B,GAA0D,OAAO,CAA/E;;AAEA;AACA,UAAI,WAAW,MAAX,IAAqB,IAAzB,EAA+B;AAC7B,mBAAW,MAAX,GAAoB,MAApB;AACD,OAFD,MAEO,IAAI,SAAS,WAAT,CAAqB,QAArB,CAAJ,EAAoC;AACzC,mBAAW,MAAX,GAAoB,MAApB;AACD,OAFM,MAEA,IAAI,SAAS,MAAT,CAAgB,QAAhB,CAAJ,EAA+B;AACpC,YAAI,QAAQ,WAAR,CAAoB,OAApB,CAAJ,EAAkC;AAChC,qBAAW,MAAX,GAAoB,MAApB;AACD;AACF;AACF;AACF;;AAED;AACA,MAAI,MAAM,SAAN,IAAmB,MAAnB,IAA6B,OAAO,CAAxC,EAA2C;AACzC,eAAW,SAAX,GAAuB,WAAW,SAAX,GAAuB,OAAO,CAArD;AACD;;AAED;AACA,MAAI,MAAM,SAAN,IAAmB,MAAnB,IAA6B,OAAO,CAAxC,EAA2C;AACzC,eAAW,QAAX,GAAsB,WAAW,QAAX,GAAsB,OAAO,CAAnD;AACD;;AAED,MAAI,YAAY,CAAhB;;AAEA;AACA,MAAI,MAAM,OAAN,CAAc,OAAO,QAArB,CAAJ,EAAoC;AAClC,gBAAY,OAAO,QAAP,CAAgB,MAA5B;;AAEA,SAAK,IAAI,IAAI,CAAb,EAAgB,IAAI,OAAO,QAAP,CAAgB,MAApC,EAA4C,GAA5C,EAAiD;AAC/C,iBAAW,QAAX,CAAoB,IAApB,CAAyB;AACvB,eAAO,OAAO,QAAP,CAAgB,CAAhB,EAAmB,KAAnB,GAA2B,MAAM,iBADjB;AAEvB,aAAK,OAAO,QAAP,CAAgB,CAAhB,EAAmB;AAFD,OAAzB;AAID;AACF,GATD,MASO,IAAI,OAAO,QAAX,EAAqB;;AAE1B,gBAAY,CAAZ;;AAEA,eAAW,QAAX,CAAoB,IAApB,CAAyB;AACvB,aAAO,MAAM,iBADU;AAEvB,WAAK,OAAO;AAFW,KAAzB;AAID;;AAED;AACA,MAAI,MAAM,SAAN,IAAmB,MAAnB,IAA6B,OAAO,CAAxC,EAA2C;AACzC,QAAI,YAAY,OAAO,SAAvB;AACA,eAAW,SAAX,GAAuB,WAAW,SAAX,GAAuB,SAA9C;AACA,eAAW,QAAX,GAAsB,WAAW,QAAX,IAAuB,OAAO,CAAP,GAAW,SAAlC,CAAtB;;AAEA,QAAI,OAAO,SAAP,IAAoB,QAAxB,EAAkC;AAChC,iBAAW,SAAX,GAAuB,WAAW,SAAX,GAAuB,SAA9C;AACD,KAFD,MAEO;AACL,iBAAW,SAAX,GAAuB,IAAvB;AACD;AACF;;AAED,MAAI,MAAM,OAAN,CAAc,OAAO,WAArB,CAAJ,EAAuC;AACrC,SAAK,IAAI,CAAT,EAAY,IAAI,OAAO,WAAP,CAAmB,MAAnC,EAA2C,GAA3C,EAAgD;;AAE9C,mBAAa;AACX,eAAO,MAAM,iBAAN,GAA0B,OAAO,WAAP,CAAmB,CAAnB,EAAsB,KAD5C;AAEX,cAAM,OAAO,WAAP,CAAmB,CAAnB,EAAsB,IAFjB;AAGX,gBAAQ,OAAO,WAAP,CAAmB,CAAnB,EAAsB,MAHnB;AAIX,YAAI,MAAM,UAAN,CAAiB,OAAO,WAAP,CAAmB,CAAnB,EAAsB,KAAvC;AAJO,OAAb;;AAOA,iBAAW,WAAX,CAAuB,IAAvB,CAA4B,IAAI,UAAJ,CAAe,UAAf,CAA5B;AACD;AACF;;AAED,MAAI,OAAO,iBAAX,EAA8B;AAC5B,eAAW,kBAAX,CAA8B,IAA9B,CAAmC,IAAI,iBAAJ,CAAsB,OAAO,iBAA7B,CAAnC;AACD;AACF,CA9HD;;AAgIA;AACA;AACA,IAAI,eAAe,UAAU,OAAV,EAAmB;AACpC,MAAI,QAAQ,EAAZ;AACA,MAAI,OAAO,OAAO,IAAP,CAAY,OAAZ,CAAX;AACA,OAAK,IAAI,IAAI,CAAb,EAAgB,IAAI,KAAK,MAAzB,EAAiC,GAAjC,EAAsC;AACpC,UAAM,KAAK,CAAL,CAAN,IAAiB,QAAQ,KAAK,CAAL,CAAR,CAAjB;AACD;;AAED,SAAO,KAAP;AACD,CARD;;AAUA;AACA,QAAQ,eAAR,GAA0B,eAA1B;AACA,QAAQ,UAAR,GAAqB,UAArB;AACA,QAAQ,KAAR,GAAgB,KAAhB;AACA,QAAQ,QAAR,GAAmB,QAAnB;AACA,QAAQ,iBAAR,GAA4B,iBAA5B;AACA,QAAQ,YAAR,GAAuB,YAAvB;AACA,QAAQ,YAAR,GAAuB,YAAvB;AACA,QAAQ,kBAAR,GAA6B,kBAA7B;AACA,QAAQ,mBAAR,GAA8B,mBAA9B;AACA,QAAQ,cAAR,GAAyB,cAAzB;AACA,QAAQ,aAAR,GAAwB,aAAxB;AACA,QAAQ,MAAR,GAAiB,MAAjB;AACA,QAAQ,MAAR,GAAiB,MAAjB;AACA,QAAQ,MAAR,GAAiB,MAAjB;;AAEA","file":"common-compiled-compiled.js","sourcesContent":["\"use strict\";\n\nvar Long = require('mongodb-core').BSON.Long,\n    Timestamp = require('mongodb-core').BSON.Timestamp;\n\n// Error codes\nvar UNKNOWN_ERROR = 8;\nvar INVALID_BSON_ERROR = 22;\nvar WRITE_CONCERN_ERROR = 64;\nvar MULTIPLE_ERROR = 65;\n\n// Insert types\nvar INSERT = 1;\nvar UPDATE = 2;\nvar REMOVE = 3;\n\n// Get write concern\nvar writeConcern = function (target, col, options) {\n  var writeConcern = {};\n\n  // Collection level write concern\n  if (col.writeConcern && col.writeConcern.w != null) writeConcern.w = col.writeConcern.w;\n  if (col.writeConcern && col.writeConcern.j != null) writeConcern.j = col.writeConcern.j;\n  if (col.writeConcern && col.writeConcern.fsync != null) writeConcern.fsync = col.writeConcern.fsync;\n  if (col.writeConcern && col.writeConcern.wtimeout != null) writeConcern.wtimeout = col.writeConcern.wtimeout;\n\n  // Options level write concern\n  if (options && options.w != null) writeConcern.w = options.w;\n  if (options && options.wtimeout != null) writeConcern.wtimeout = options.wtimeout;\n  if (options && options.j != null) writeConcern.j = options.j;\n  if (options && options.fsync != null) writeConcern.fsync = options.fsync;\n\n  // Return write concern\n  return writeConcern;\n};\n\n/**\n * Helper function to define properties\n * @ignore\n */\nvar defineReadOnlyProperty = function (self, name, value) {\n  Object.defineProperty(self, name, {\n    enumerable: true,\n    get: function () {\n      return value;\n    }\n  });\n};\n\n/**\n * Keeps the state of a unordered batch so we can rewrite the results\n * correctly after command execution\n * @ignore\n */\nvar Batch = function (batchType, originalZeroIndex) {\n  this.originalZeroIndex = originalZeroIndex;\n  this.currentIndex = 0;\n  this.originalIndexes = [];\n  this.batchType = batchType;\n  this.operations = [];\n  this.size = 0;\n  this.sizeBytes = 0;\n};\n\n/**\n * Wraps a legacy operation so we can correctly rewrite it's error\n * @ignore\n */\nvar LegacyOp = function (batchType, operation, index) {\n  this.batchType = batchType;\n  this.index = index;\n  this.operation = operation;\n};\n\n/**\n * Create a new BulkWriteResult instance (INTERNAL TYPE, do not instantiate directly)\n *\n * @class\n * @property {boolean} ok Did bulk operation correctly execute\n * @property {number} nInserted number of inserted documents\n * @property {number} nUpdated number of documents updated logically\n * @property {number} nUpserted Number of upserted documents\n * @property {number} nModified Number of documents updated physically on disk\n * @property {number} nRemoved Number of removed documents\n * @return {BulkWriteResult} a BulkWriteResult instance\n */\nvar BulkWriteResult = function (bulkResult) {\n  defineReadOnlyProperty(this, \"ok\", bulkResult.ok);\n  defineReadOnlyProperty(this, \"nInserted\", bulkResult.nInserted);\n  defineReadOnlyProperty(this, \"nUpserted\", bulkResult.nUpserted);\n  defineReadOnlyProperty(this, \"nMatched\", bulkResult.nMatched);\n  defineReadOnlyProperty(this, \"nModified\", bulkResult.nModified);\n  defineReadOnlyProperty(this, \"nRemoved\", bulkResult.nRemoved);\n\n  /**\n   * Return an array of inserted ids\n   *\n   * @return {object[]}\n   */\n  this.getInsertedIds = function () {\n    return bulkResult.insertedIds;\n  };\n\n  /**\n   * Return an array of upserted ids\n   *\n   * @return {object[]}\n   */\n  this.getUpsertedIds = function () {\n    return bulkResult.upserted;\n  };\n\n  /**\n   * Return the upserted id at position x\n   *\n   * @param {number} index the number of the upserted id to return, returns undefined if no result for passed in index\n   * @return {object}\n   */\n  this.getUpsertedIdAt = function (index) {\n    return bulkResult.upserted[index];\n  };\n\n  /**\n   * Return raw internal result\n   *\n   * @return {object}\n   */\n  this.getRawResponse = function () {\n    return bulkResult;\n  };\n\n  /**\n   * Returns true if the bulk operation contains a write error\n   *\n   * @return {boolean}\n   */\n  this.hasWriteErrors = function () {\n    return bulkResult.writeErrors.length > 0;\n  };\n\n  /**\n   * Returns the number of write errors off the bulk operation\n   *\n   * @return {number}\n   */\n  this.getWriteErrorCount = function () {\n    return bulkResult.writeErrors.length;\n  };\n\n  /**\n   * Returns a specific write error object\n   *\n   * @return {WriteError}\n   */\n  this.getWriteErrorAt = function (index) {\n    if (index < bulkResult.writeErrors.length) {\n      return bulkResult.writeErrors[index];\n    }\n    return null;\n  };\n\n  /**\n   * Retrieve all write errors\n   *\n   * @return {object[]}\n   */\n  this.getWriteErrors = function () {\n    return bulkResult.writeErrors;\n  };\n\n  /**\n   * Retrieve lastOp if available\n   *\n   * @return {object}\n   */\n  this.getLastOp = function () {\n    return bulkResult.lastOp;\n  };\n\n  /**\n   * Retrieve the write concern error if any\n   *\n   * @return {WriteConcernError}\n   */\n  this.getWriteConcernError = function () {\n    if (bulkResult.writeConcernErrors.length == 0) {\n      return null;\n    } else if (bulkResult.writeConcernErrors.length == 1) {\n      // Return the error\n      return bulkResult.writeConcernErrors[0];\n    } else {\n\n      // Combine the errors\n      var errmsg = \"\";\n      for (var i = 0; i < bulkResult.writeConcernErrors.length; i++) {\n        var err = bulkResult.writeConcernErrors[i];\n        errmsg = errmsg + err.errmsg;\n\n        // TODO: Something better\n        if (i == 0) errmsg = errmsg + \" and \";\n      }\n\n      return new WriteConcernError({ errmsg: errmsg, code: WRITE_CONCERN_ERROR });\n    }\n  };\n\n  this.toJSON = function () {\n    return bulkResult;\n  };\n\n  this.toString = function () {\n    return \"BulkWriteResult(\" + this.toJSON(bulkResult) + \")\";\n  };\n\n  this.isOk = function () {\n    return bulkResult.ok == 1;\n  };\n};\n\n/**\n * Create a new WriteConcernError instance (INTERNAL TYPE, do not instantiate directly)\n *\n * @class\n * @property {number} code Write concern error code.\n * @property {string} errmsg Write concern error message.\n * @return {WriteConcernError} a WriteConcernError instance\n */\nvar WriteConcernError = function (err) {\n  if (!(this instanceof WriteConcernError)) return new WriteConcernError(err);\n\n  // Define properties\n  defineReadOnlyProperty(this, \"code\", err.code);\n  defineReadOnlyProperty(this, \"errmsg\", err.errmsg);\n\n  this.toJSON = function () {\n    return { code: err.code, errmsg: err.errmsg };\n  };\n\n  this.toString = function () {\n    return \"WriteConcernError(\" + err.errmsg + \")\";\n  };\n};\n\n/**\n * Create a new WriteError instance (INTERNAL TYPE, do not instantiate directly)\n *\n * @class\n * @property {number} code Write concern error code.\n * @property {number} index Write concern error original bulk operation index.\n * @property {string} errmsg Write concern error message.\n * @return {WriteConcernError} a WriteConcernError instance\n */\nvar WriteError = function (err) {\n  if (!(this instanceof WriteError)) return new WriteError(err);\n\n  // Define properties\n  defineReadOnlyProperty(this, \"code\", err.code);\n  defineReadOnlyProperty(this, \"index\", err.index);\n  defineReadOnlyProperty(this, \"errmsg\", err.errmsg);\n\n  //\n  // Define access methods\n  this.getOperation = function () {\n    return err.op;\n  };\n\n  this.toJSON = function () {\n    return { code: err.code, index: err.index, errmsg: err.errmsg, op: err.op };\n  };\n\n  this.toString = function () {\n    return \"WriteError(\" + JSON.stringify(this.toJSON()) + \")\";\n  };\n};\n\n/**\n * Merges results into shared data structure\n * @ignore\n */\nvar mergeBatchResults = function (ordered, batch, bulkResult, err, result) {\n  // If we have an error set the result to be the err object\n  if (err) {\n    result = err;\n  } else if (result && result.result) {\n    result = result.result;\n  } else if (result == null) {\n    return;\n  }\n\n  // Do we have a top level error stop processing and return\n  if (result.ok == 0 && bulkResult.ok == 1) {\n    bulkResult.ok = 0;\n\n    var writeError = {\n      index: 0,\n      code: result.code || 0,\n      errmsg: result.message,\n      op: batch.operations[0]\n    };\n\n    bulkResult.writeErrors.push(new WriteError(writeError));\n    return;\n  } else if (result.ok == 0 && bulkResult.ok == 0) {\n    return;\n  }\n\n  // Deal with opTime if available\n  if (result.opTime || result.lastOp) {\n    var opTime = result.lastOp || result.opTime;\n    var lastOpTS = null;\n    var lastOpT = null;\n\n    // We have a time stamp\n    if (opTime && opTime._bsontype == 'Timestamp') {\n      if (bulkResult.lastOp == null) {\n        bulkResult.lastOp = opTime;\n      } else if (opTime.greaterThan(bulkResult.lastOp)) {\n        bulkResult.lastOp = opTime;\n      }\n    } else {\n      // Existing TS\n      if (bulkResult.lastOp) {\n        lastOpTS = typeof bulkResult.lastOp.ts == 'number' ? Long.fromNumber(bulkResult.lastOp.ts) : bulkResult.lastOp.ts;\n        lastOpT = typeof bulkResult.lastOp.t == 'number' ? Long.fromNumber(bulkResult.lastOp.t) : bulkResult.lastOp.t;\n      }\n\n      // Current OpTime TS\n      var opTimeTS = typeof opTime.ts == 'number' ? Long.fromNumber(opTime.ts) : opTime.ts;\n      var opTimeT = typeof opTime.t == 'number' ? Long.fromNumber(opTime.t) : opTime.t;\n\n      // Compare the opTime's\n      if (bulkResult.lastOp == null) {\n        bulkResult.lastOp = opTime;\n      } else if (opTimeTS.greaterThan(lastOpTS)) {\n        bulkResult.lastOp = opTime;\n      } else if (opTimeTS.equals(lastOpTS)) {\n        if (opTimeT.greaterThan(lastOpT)) {\n          bulkResult.lastOp = opTime;\n        }\n      }\n    }\n  }\n\n  // If we have an insert Batch type\n  if (batch.batchType == INSERT && result.n) {\n    bulkResult.nInserted = bulkResult.nInserted + result.n;\n  }\n\n  // If we have an insert Batch type\n  if (batch.batchType == REMOVE && result.n) {\n    bulkResult.nRemoved = bulkResult.nRemoved + result.n;\n  }\n\n  var nUpserted = 0;\n\n  // We have an array of upserted values, we need to rewrite the indexes\n  if (Array.isArray(result.upserted)) {\n    nUpserted = result.upserted.length;\n\n    for (var i = 0; i < result.upserted.length; i++) {\n      bulkResult.upserted.push({\n        index: result.upserted[i].index + batch.originalZeroIndex,\n        _id: result.upserted[i]._id\n      });\n    }\n  } else if (result.upserted) {\n\n    nUpserted = 1;\n\n    bulkResult.upserted.push({\n      index: batch.originalZeroIndex,\n      _id: result.upserted\n    });\n  }\n\n  // If we have an update Batch type\n  if (batch.batchType == UPDATE && result.n) {\n    var nModified = result.nModified;\n    bulkResult.nUpserted = bulkResult.nUpserted + nUpserted;\n    bulkResult.nMatched = bulkResult.nMatched + (result.n - nUpserted);\n\n    if (typeof nModified == 'number') {\n      bulkResult.nModified = bulkResult.nModified + nModified;\n    } else {\n      bulkResult.nModified = null;\n    }\n  }\n\n  if (Array.isArray(result.writeErrors)) {\n    for (i = 0; i < result.writeErrors.length; i++) {\n\n      writeError = {\n        index: batch.originalZeroIndex + result.writeErrors[i].index,\n        code: result.writeErrors[i].code,\n        errmsg: result.writeErrors[i].errmsg,\n        op: batch.operations[result.writeErrors[i].index]\n      };\n\n      bulkResult.writeErrors.push(new WriteError(writeError));\n    }\n  }\n\n  if (result.writeConcernError) {\n    bulkResult.writeConcernErrors.push(new WriteConcernError(result.writeConcernError));\n  }\n};\n\n//\n// Clone the options\nvar cloneOptions = function (options) {\n  var clone = {};\n  var keys = Object.keys(options);\n  for (var i = 0; i < keys.length; i++) {\n    clone[keys[i]] = options[keys[i]];\n  }\n\n  return clone;\n};\n\n// Exports symbols\nexports.BulkWriteResult = BulkWriteResult;\nexports.WriteError = WriteError;\nexports.Batch = Batch;\nexports.LegacyOp = LegacyOp;\nexports.mergeBatchResults = mergeBatchResults;\nexports.cloneOptions = cloneOptions;\nexports.writeConcern = writeConcern;\nexports.INVALID_BSON_ERROR = INVALID_BSON_ERROR;\nexports.WRITE_CONCERN_ERROR = WRITE_CONCERN_ERROR;\nexports.MULTIPLE_ERROR = MULTIPLE_ERROR;\nexports.UNKNOWN_ERROR = UNKNOWN_ERROR;\nexports.INSERT = INSERT;\nexports.UPDATE = UPDATE;\nexports.REMOVE = REMOVE;\n\n//# sourceMappingURL=common-compiled.js.map"]}