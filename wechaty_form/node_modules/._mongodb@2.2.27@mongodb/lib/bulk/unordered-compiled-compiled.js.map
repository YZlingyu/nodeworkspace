{"version":3,"sources":["unordered-compiled.js"],"names":[],"mappings":"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","file":"unordered-compiled-compiled.js","sourcesContent":["\"use strict\";\n\nvar common = require('./common'),\n    utils = require('../utils'),\n    toError = require('../utils').toError,\n    handleCallback = require('../utils').handleCallback,\n    shallowClone = utils.shallowClone,\n    BulkWriteResult = common.BulkWriteResult,\n    ObjectID = require('mongodb-core').BSON.ObjectID,\n    BSON = require('mongodb-core').BSON,\n    Define = require('../metadata'),\n    Batch = common.Batch,\n    mergeBatchResults = common.mergeBatchResults;\n\nvar bson = new BSON([BSON.Binary, BSON.Code, BSON.DBRef, BSON.Decimal128, BSON.Double, BSON.Int32, BSON.Long, BSON.Map, BSON.MaxKey, BSON.MinKey, BSON.ObjectId, BSON.BSONRegExp, BSON.Symbol, BSON.Timestamp]);\n\n/**\n * Create a FindOperatorsUnordered instance (INTERNAL TYPE, do not instantiate directly)\n * @class\n * @property {number} length Get the number of operations in the bulk.\n * @return {FindOperatorsUnordered} a FindOperatorsUnordered instance.\n */\nvar FindOperatorsUnordered = function (self) {\n  this.s = self.s;\n};\n\n/**\n * Add a single update document to the bulk operation\n *\n * @method\n * @param {object} doc update operations\n * @throws {MongoError}\n * @return {UnorderedBulkOperation}\n */\nFindOperatorsUnordered.prototype.update = function (updateDocument) {\n  // Perform upsert\n  var upsert = typeof this.s.currentOp.upsert == 'boolean' ? this.s.currentOp.upsert : false;\n\n  // Establish the update command\n  var document = {\n    q: this.s.currentOp.selector,\n    u: updateDocument,\n    multi: true,\n    upsert: upsert\n  };\n\n  // Clear out current Op\n  this.s.currentOp = null;\n  // Add the update document to the list\n  return addToOperationsList(this, common.UPDATE, document);\n};\n\n/**\n * Add a single update one document to the bulk operation\n *\n * @method\n * @param {object} doc update operations\n * @throws {MongoError}\n * @return {UnorderedBulkOperation}\n */\nFindOperatorsUnordered.prototype.updateOne = function (updateDocument) {\n  // Perform upsert\n  var upsert = typeof this.s.currentOp.upsert == 'boolean' ? this.s.currentOp.upsert : false;\n\n  // Establish the update command\n  var document = {\n    q: this.s.currentOp.selector,\n    u: updateDocument,\n    multi: false,\n    upsert: upsert\n  };\n\n  // Clear out current Op\n  this.s.currentOp = null;\n  // Add the update document to the list\n  return addToOperationsList(this, common.UPDATE, document);\n};\n\n/**\n * Add a replace one operation to the bulk operation\n *\n * @method\n * @param {object} doc the new document to replace the existing one with\n * @throws {MongoError}\n * @return {UnorderedBulkOperation}\n */\nFindOperatorsUnordered.prototype.replaceOne = function (updateDocument) {\n  this.updateOne(updateDocument);\n};\n\n/**\n * Upsert modifier for update bulk operation\n *\n * @method\n * @throws {MongoError}\n * @return {FindOperatorsUnordered}\n */\nFindOperatorsUnordered.prototype.upsert = function () {\n  this.s.currentOp.upsert = true;\n  return this;\n};\n\n/**\n * Add a remove one operation to the bulk operation\n *\n * @method\n * @throws {MongoError}\n * @return {UnorderedBulkOperation}\n */\nFindOperatorsUnordered.prototype.removeOne = function () {\n  // Establish the update command\n  var document = {\n    q: this.s.currentOp.selector,\n    limit: 1\n  };\n\n  // Clear out current Op\n  this.s.currentOp = null;\n  // Add the remove document to the list\n  return addToOperationsList(this, common.REMOVE, document);\n};\n\n/**\n * Add a remove operation to the bulk operation\n *\n * @method\n * @throws {MongoError}\n * @return {UnorderedBulkOperation}\n */\nFindOperatorsUnordered.prototype.remove = function () {\n  // Establish the update command\n  var document = {\n    q: this.s.currentOp.selector,\n    limit: 0\n  };\n\n  // Clear out current Op\n  this.s.currentOp = null;\n  // Add the remove document to the list\n  return addToOperationsList(this, common.REMOVE, document);\n};\n\n//\n// Add to the operations list\n//\nvar addToOperationsList = function (_self, docType, document) {\n  // Get the bsonSize\n  var bsonSize = bson.calculateObjectSize(document, {\n    checkKeys: false\n  });\n  // Throw error if the doc is bigger than the max BSON size\n  if (bsonSize >= _self.s.maxBatchSizeBytes) throw toError(\"document is larger than the maximum size \" + _self.s.maxBatchSizeBytes);\n  // Holds the current batch\n  _self.s.currentBatch = null;\n  // Get the right type of batch\n  if (docType == common.INSERT) {\n    _self.s.currentBatch = _self.s.currentInsertBatch;\n  } else if (docType == common.UPDATE) {\n    _self.s.currentBatch = _self.s.currentUpdateBatch;\n  } else if (docType == common.REMOVE) {\n    _self.s.currentBatch = _self.s.currentRemoveBatch;\n  }\n\n  // Create a new batch object if we don't have a current one\n  if (_self.s.currentBatch == null) _self.s.currentBatch = new Batch(docType, _self.s.currentIndex);\n\n  // Check if we need to create a new batch\n  if (_self.s.currentBatch.size + 1 >= _self.s.maxWriteBatchSize || _self.s.currentBatch.sizeBytes + bsonSize >= _self.s.maxBatchSizeBytes || _self.s.currentBatch.batchType != docType) {\n    // Save the batch to the execution stack\n    _self.s.batches.push(_self.s.currentBatch);\n\n    // Create a new batch\n    _self.s.currentBatch = new Batch(docType, _self.s.currentIndex);\n  }\n\n  // We have an array of documents\n  if (Array.isArray(document)) {\n    throw toError(\"operation passed in cannot be an Array\");\n  } else {\n    _self.s.currentBatch.operations.push(document);\n    _self.s.currentBatch.originalIndexes.push(_self.s.currentIndex);\n    _self.s.currentIndex = _self.s.currentIndex + 1;\n  }\n\n  // Save back the current Batch to the right type\n  if (docType == common.INSERT) {\n    _self.s.currentInsertBatch = _self.s.currentBatch;\n    _self.s.bulkResult.insertedIds.push({ index: _self.s.bulkResult.insertedIds.length, _id: document._id });\n  } else if (docType == common.UPDATE) {\n    _self.s.currentUpdateBatch = _self.s.currentBatch;\n  } else if (docType == common.REMOVE) {\n    _self.s.currentRemoveBatch = _self.s.currentBatch;\n  }\n\n  // Update current batch size\n  _self.s.currentBatch.size = _self.s.currentBatch.size + 1;\n  _self.s.currentBatch.sizeBytes = _self.s.currentBatch.sizeBytes + bsonSize;\n\n  // Return self\n  return _self;\n};\n\n/**\n * Create a new UnorderedBulkOperation instance (INTERNAL TYPE, do not instantiate directly)\n * @class\n * @property {number} length Get the number of operations in the bulk.\n * @return {UnorderedBulkOperation} a UnorderedBulkOperation instance.\n */\nvar UnorderedBulkOperation = function (topology, collection, options) {\n  options = options == null ? {} : options;\n\n  // Get the namesspace for the write operations\n  var namespace = collection.collectionName;\n  // Used to mark operation as executed\n  var executed = false;\n\n  // Current item\n  // var currentBatch = null;\n  var currentOp = null;\n\n  // Handle to the bson serializer, used to calculate running sizes\n  var bson = topology.bson;\n\n  // Set max byte size\n  var maxBatchSizeBytes = topology.isMasterDoc && topology.isMasterDoc.maxBsonObjectSize ? topology.isMasterDoc.maxBsonObjectSize : 1024 * 1025 * 16;\n  var maxWriteBatchSize = topology.isMasterDoc && topology.isMasterDoc.maxWriteBatchSize ? topology.isMasterDoc.maxWriteBatchSize : 1000;\n\n  // Get the write concern\n  var writeConcern = common.writeConcern(shallowClone(options), collection, options);\n\n  // Get the promiseLibrary\n  var promiseLibrary = options.promiseLibrary;\n\n  // No promise library selected fall back\n  if (!promiseLibrary) {\n    promiseLibrary = typeof global.Promise == 'function' ? global.Promise : require('es6-promise').Promise;\n  }\n\n  // Final results\n  var bulkResult = {\n    ok: 1,\n    writeErrors: [],\n    writeConcernErrors: [],\n    insertedIds: [],\n    nInserted: 0,\n    nUpserted: 0,\n    nMatched: 0,\n    nModified: 0,\n    nRemoved: 0,\n    upserted: []\n  };\n\n  // Internal state\n  this.s = {\n    // Final result\n    bulkResult: bulkResult\n    // Current batch state\n    , currentInsertBatch: null,\n    currentUpdateBatch: null,\n    currentRemoveBatch: null,\n    currentBatch: null,\n    currentIndex: 0,\n    batches: []\n    // Write concern\n    , writeConcern: writeConcern\n    // Max batch size options\n    , maxBatchSizeBytes: maxBatchSizeBytes,\n    maxWriteBatchSize: maxWriteBatchSize\n    // Namespace\n    , namespace: namespace\n    // BSON\n    , bson: bson\n    // Topology\n    , topology: topology\n    // Options\n    , options: options\n    // Current operation\n    , currentOp: currentOp\n    // Executed\n    , executed: executed\n    // Collection\n    , collection: collection\n    // Promise Library\n    , promiseLibrary: promiseLibrary\n    // Bypass validation\n    , bypassDocumentValidation: typeof options.bypassDocumentValidation == 'boolean' ? options.bypassDocumentValidation : false\n  };\n};\n\nvar define = UnorderedBulkOperation.define = new Define('UnorderedBulkOperation', UnorderedBulkOperation, false);\n\n/**\n * Add a single insert document to the bulk operation\n *\n * @param {object} doc the document to insert\n * @throws {MongoError}\n * @return {UnorderedBulkOperation}\n */\nUnorderedBulkOperation.prototype.insert = function (document) {\n  if (this.s.collection.s.db.options.forceServerObjectId !== true && document._id == null) document._id = new ObjectID();\n  return addToOperationsList(this, common.INSERT, document);\n};\n\n/**\n * Initiate a find operation for an update/updateOne/remove/removeOne/replaceOne\n *\n * @method\n * @param {object} selector The selector for the bulk operation.\n * @throws {MongoError}\n * @return {FindOperatorsUnordered}\n */\nUnorderedBulkOperation.prototype.find = function (selector) {\n  if (!selector) {\n    throw toError(\"Bulk find operation must specify a selector\");\n  }\n\n  // Save a current selector\n  this.s.currentOp = {\n    selector: selector\n  };\n\n  return new FindOperatorsUnordered(this);\n};\n\nObject.defineProperty(UnorderedBulkOperation.prototype, 'length', {\n  enumerable: true,\n  get: function () {\n    return this.s.currentIndex;\n  }\n});\n\nUnorderedBulkOperation.prototype.raw = function (op) {\n  var key = Object.keys(op)[0];\n\n  // Set up the force server object id\n  var forceServerObjectId = typeof this.s.options.forceServerObjectId == 'boolean' ? this.s.options.forceServerObjectId : this.s.collection.s.db.options.forceServerObjectId;\n\n  // Update operations\n  if (op.updateOne && op.updateOne.q || op.updateMany && op.updateMany.q || op.replaceOne && op.replaceOne.q) {\n    op[key].multi = op.updateOne || op.replaceOne ? false : true;\n    return addToOperationsList(this, common.UPDATE, op[key]);\n  }\n\n  // Crud spec update format\n  if (op.updateOne || op.updateMany || op.replaceOne) {\n    var multi = op.updateOne || op.replaceOne ? false : true;\n    var operation = { q: op[key].filter, u: op[key].update || op[key].replacement, multi: multi };\n    if (op[key].upsert) operation.upsert = true;\n    return addToOperationsList(this, common.UPDATE, operation);\n  }\n\n  // Remove operations\n  if (op.removeOne || op.removeMany || op.deleteOne && op.deleteOne.q || op.deleteMany && op.deleteMany.q) {\n    op[key].limit = op.removeOne ? 1 : 0;\n    return addToOperationsList(this, common.REMOVE, op[key]);\n  }\n\n  // Crud spec delete operations, less efficient\n  if (op.deleteOne || op.deleteMany) {\n    var limit = op.deleteOne ? 1 : 0;\n    operation = { q: op[key].filter, limit: limit };\n    return addToOperationsList(this, common.REMOVE, operation);\n  }\n\n  // Insert operations\n  if (op.insertOne && op.insertOne.document == null) {\n    if (forceServerObjectId !== true && op.insertOne._id == null) op.insertOne._id = new ObjectID();\n    return addToOperationsList(this, common.INSERT, op.insertOne);\n  } else if (op.insertOne && op.insertOne.document) {\n    if (forceServerObjectId !== true && op.insertOne.document._id == null) op.insertOne.document._id = new ObjectID();\n    return addToOperationsList(this, common.INSERT, op.insertOne.document);\n  }\n\n  if (op.insertMany) {\n    for (var i = 0; i < op.insertMany.length; i++) {\n      if (forceServerObjectId !== true && op.insertMany[i]._id == null) op.insertMany[i]._id = new ObjectID();\n      addToOperationsList(this, common.INSERT, op.insertMany[i]);\n    }\n\n    return;\n  }\n\n  // No valid type of operation\n  throw toError(\"bulkWrite only supports insertOne, insertMany, updateOne, updateMany, removeOne, removeMany, deleteOne, deleteMany\");\n};\n\n//\n// Execute the command\nvar executeBatch = function (self, batch, callback) {\n  var finalOptions = { ordered: false };\n  if (self.s.writeConcern != null) {\n    finalOptions.writeConcern = self.s.writeConcern;\n  }\n\n  var resultHandler = function (err, result) {\n    // Error is a driver related error not a bulk op error, terminate\n    if (err && err.driver || err && err.message) {\n      return handleCallback(callback, err);\n    }\n\n    // If we have and error\n    if (err) err.ok = 0;\n    handleCallback(callback, null, mergeBatchResults(false, batch, self.s.bulkResult, err, result));\n  };\n\n  // Set an operationIf if provided\n  if (self.operationId) {\n    resultHandler.operationId = self.operationId;\n  }\n\n  // Serialize functions\n  if (self.s.options.serializeFunctions) {\n    finalOptions.serializeFunctions = true;\n  }\n\n  // Is the bypassDocumentValidation options specific\n  if (self.s.bypassDocumentValidation == true) {\n    finalOptions.bypassDocumentValidation = true;\n  }\n\n  try {\n    if (batch.batchType == common.INSERT) {\n      self.s.topology.insert(self.s.collection.namespace, batch.operations, finalOptions, resultHandler);\n    } else if (batch.batchType == common.UPDATE) {\n      self.s.topology.update(self.s.collection.namespace, batch.operations, finalOptions, resultHandler);\n    } else if (batch.batchType == common.REMOVE) {\n      self.s.topology.remove(self.s.collection.namespace, batch.operations, finalOptions, resultHandler);\n    }\n  } catch (err) {\n    // Force top level error\n    err.ok = 0;\n    // Merge top level error and return\n    handleCallback(callback, null, mergeBatchResults(false, batch, self.s.bulkResult, err, null));\n  }\n};\n\n//\n// Execute all the commands\nvar executeBatches = function (self, callback) {\n  var numberOfCommandsToExecute = self.s.batches.length;\n  // Execute over all the batches\n  for (var i = 0; i < self.s.batches.length; i++) {\n    executeBatch(self, self.s.batches[i], function (err) {\n      // Driver layer error capture it\n      if (err) error = err;\n      // Count down the number of commands left to execute\n      numberOfCommandsToExecute = numberOfCommandsToExecute - 1;\n\n      // Execute\n      if (numberOfCommandsToExecute == 0) {\n        // Driver level error\n        if (error) return handleCallback(callback, error);\n        // Treat write errors\n        var error = self.s.bulkResult.writeErrors.length > 0 ? toError(self.s.bulkResult.writeErrors[0]) : null;\n        handleCallback(callback, error, new BulkWriteResult(self.s.bulkResult));\n      }\n    });\n  }\n};\n\n/**\n * The callback format for results\n * @callback UnorderedBulkOperation~resultCallback\n * @param {MongoError} error An error instance representing the error during the execution.\n * @param {BulkWriteResult} result The bulk write result.\n */\n\n/**\n * Execute the ordered bulk operation\n *\n * @method\n * @param {object} [options=null] Optional settings.\n * @param {(number|string)} [options.w=null] The write concern.\n * @param {number} [options.wtimeout=null] The write concern timeout.\n * @param {boolean} [options.j=false] Specify a journal write concern.\n * @param {boolean} [options.fsync=false] Specify a file sync write concern.\n * @param {UnorderedBulkOperation~resultCallback} [callback] The result callback\n * @throws {MongoError}\n * @return {Promise} returns Promise if no callback passed\n */\nUnorderedBulkOperation.prototype.execute = function (_writeConcern, callback) {\n  var self = this;\n  if (this.s.executed) throw toError(\"batch cannot be re-executed\");\n  if (typeof _writeConcern == 'function') {\n    callback = _writeConcern;\n  } else if (_writeConcern && typeof _writeConcern == 'object') {\n    this.s.writeConcern = _writeConcern;\n  }\n\n  // If we have current batch\n  if (this.s.currentInsertBatch) this.s.batches.push(this.s.currentInsertBatch);\n  if (this.s.currentUpdateBatch) this.s.batches.push(this.s.currentUpdateBatch);\n  if (this.s.currentRemoveBatch) this.s.batches.push(this.s.currentRemoveBatch);\n\n  // If we have no operations in the bulk raise an error\n  if (this.s.batches.length == 0) {\n    throw toError(\"Invalid Operation, No operations in bulk\");\n  }\n\n  // Execute using callback\n  if (typeof callback == 'function') return executeBatches(this, callback);\n\n  // Return a Promise\n  return new this.s.promiseLibrary(function (resolve, reject) {\n    executeBatches(self, function (err, r) {\n      if (err) return reject(err);\n      resolve(r);\n    });\n  });\n};\n\ndefine.classMethod('execute', { callback: true, promise: false });\n\n/**\n * Returns an unordered batch object\n * @ignore\n */\nvar initializeUnorderedBulkOp = function (topology, collection, options) {\n  return new UnorderedBulkOperation(topology, collection, options);\n};\n\ninitializeUnorderedBulkOp.UnorderedBulkOperation = UnorderedBulkOperation;\nmodule.exports = initializeUnorderedBulkOp;\nmodule.exports.Bulk = UnorderedBulkOperation;\n\n//# sourceMappingURL=unordered-compiled.js.map"]}