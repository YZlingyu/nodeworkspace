{"version":3,"sources":["ordered-compiled.js"],"names":[],"mappings":"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","file":"ordered-compiled-compiled.js","sourcesContent":["\"use strict\";\n\nvar common = require('./common'),\n    utils = require('../utils'),\n    toError = require('../utils').toError,\n    handleCallback = require('../utils').handleCallback,\n    shallowClone = utils.shallowClone,\n    BulkWriteResult = common.BulkWriteResult,\n    ObjectID = require('mongodb-core').BSON.ObjectID,\n    Define = require('../metadata'),\n    BSON = require('mongodb-core').BSON,\n    Batch = common.Batch,\n    mergeBatchResults = common.mergeBatchResults;\n\nvar bson = new BSON([BSON.Binary, BSON.Code, BSON.DBRef, BSON.Decimal128, BSON.Double, BSON.Int32, BSON.Long, BSON.Map, BSON.MaxKey, BSON.MinKey, BSON.ObjectId, BSON.BSONRegExp, BSON.Symbol, BSON.Timestamp]);\n\n/**\n * Create a FindOperatorsOrdered instance (INTERNAL TYPE, do not instantiate directly)\n * @class\n * @return {FindOperatorsOrdered} a FindOperatorsOrdered instance.\n */\nvar FindOperatorsOrdered = function (self) {\n  this.s = self.s;\n};\n\n/**\n * Add a single update document to the bulk operation\n *\n * @method\n * @param {object} doc update operations\n * @throws {MongoError}\n * @return {OrderedBulkOperation}\n */\nFindOperatorsOrdered.prototype.update = function (updateDocument) {\n  // Perform upsert\n  var upsert = typeof this.s.currentOp.upsert == 'boolean' ? this.s.currentOp.upsert : false;\n\n  // Establish the update command\n  var document = {\n    q: this.s.currentOp.selector,\n    u: updateDocument,\n    multi: true,\n    upsert: upsert\n  };\n\n  // Clear out current Op\n  this.s.currentOp = null;\n  // Add the update document to the list\n  return addToOperationsList(this, common.UPDATE, document);\n};\n\n/**\n * Add a single update one document to the bulk operation\n *\n * @method\n * @param {object} doc update operations\n * @throws {MongoError}\n * @return {OrderedBulkOperation}\n */\nFindOperatorsOrdered.prototype.updateOne = function (updateDocument) {\n  // Perform upsert\n  var upsert = typeof this.s.currentOp.upsert == 'boolean' ? this.s.currentOp.upsert : false;\n\n  // Establish the update command\n  var document = {\n    q: this.s.currentOp.selector,\n    u: updateDocument,\n    multi: false,\n    upsert: upsert\n  };\n\n  // Clear out current Op\n  this.s.currentOp = null;\n  // Add the update document to the list\n  return addToOperationsList(this, common.UPDATE, document);\n};\n\n/**\n * Add a replace one operation to the bulk operation\n *\n * @method\n * @param {object} doc the new document to replace the existing one with\n * @throws {MongoError}\n * @return {OrderedBulkOperation}\n */\nFindOperatorsOrdered.prototype.replaceOne = function (updateDocument) {\n  this.updateOne(updateDocument);\n};\n\n/**\n * Upsert modifier for update bulk operation\n *\n * @method\n * @throws {MongoError}\n * @return {FindOperatorsOrdered}\n */\nFindOperatorsOrdered.prototype.upsert = function () {\n  this.s.currentOp.upsert = true;\n  return this;\n};\n\n/**\n * Add a remove one operation to the bulk operation\n *\n * @method\n * @throws {MongoError}\n * @return {OrderedBulkOperation}\n */\nFindOperatorsOrdered.prototype.deleteOne = function () {\n  // Establish the update command\n  var document = {\n    q: this.s.currentOp.selector,\n    limit: 1\n  };\n\n  // Clear out current Op\n  this.s.currentOp = null;\n  // Add the remove document to the list\n  return addToOperationsList(this, common.REMOVE, document);\n};\n\n// Backward compatibility\nFindOperatorsOrdered.prototype.removeOne = FindOperatorsOrdered.prototype.deleteOne;\n\n/**\n * Add a remove operation to the bulk operation\n *\n * @method\n * @throws {MongoError}\n * @return {OrderedBulkOperation}\n */\nFindOperatorsOrdered.prototype.delete = function () {\n  // Establish the update command\n  var document = {\n    q: this.s.currentOp.selector,\n    limit: 0\n  };\n\n  // Clear out current Op\n  this.s.currentOp = null;\n  // Add the remove document to the list\n  return addToOperationsList(this, common.REMOVE, document);\n};\n\n// Backward compatibility\nFindOperatorsOrdered.prototype.remove = FindOperatorsOrdered.prototype.delete;\n\n// Add to internal list of documents\nvar addToOperationsList = function (_self, docType, document) {\n  // Get the bsonSize\n  var bsonSize = bson.calculateObjectSize(document, {\n    checkKeys: false\n  });\n\n  // Throw error if the doc is bigger than the max BSON size\n  if (bsonSize >= _self.s.maxBatchSizeBytes) {\n    throw toError(\"document is larger than the maximum size \" + _self.s.maxBatchSizeBytes);\n  }\n\n  // Create a new batch object if we don't have a current one\n  if (_self.s.currentBatch == null) _self.s.currentBatch = new Batch(docType, _self.s.currentIndex);\n\n  // Check if we need to create a new batch\n  if (_self.s.currentBatchSize + 1 >= _self.s.maxWriteBatchSize || _self.s.currentBatchSizeBytes + _self.s.currentBatchSizeBytes >= _self.s.maxBatchSizeBytes || _self.s.currentBatch.batchType != docType) {\n    // Save the batch to the execution stack\n    _self.s.batches.push(_self.s.currentBatch);\n\n    // Create a new batch\n    _self.s.currentBatch = new Batch(docType, _self.s.currentIndex);\n\n    // Reset the current size trackers\n    _self.s.currentBatchSize = 0;\n    _self.s.currentBatchSizeBytes = 0;\n  } else {\n    // Update current batch size\n    _self.s.currentBatchSize = _self.s.currentBatchSize + 1;\n    _self.s.currentBatchSizeBytes = _self.s.currentBatchSizeBytes + bsonSize;\n  }\n\n  if (docType == common.INSERT) {\n    _self.s.bulkResult.insertedIds.push({ index: _self.s.currentIndex, _id: document._id });\n  }\n\n  // We have an array of documents\n  if (Array.isArray(document)) {\n    throw toError(\"operation passed in cannot be an Array\");\n  } else {\n    _self.s.currentBatch.originalIndexes.push(_self.s.currentIndex);\n    _self.s.currentBatch.operations.push(document);\n    _self.s.currentBatchSizeBytes = _self.s.currentBatchSizeBytes + bsonSize;\n    _self.s.currentIndex = _self.s.currentIndex + 1;\n  }\n\n  // Return self\n  return _self;\n};\n\n/**\n * Create a new OrderedBulkOperation instance (INTERNAL TYPE, do not instantiate directly)\n * @class\n * @property {number} length Get the number of operations in the bulk.\n * @return {OrderedBulkOperation} a OrderedBulkOperation instance.\n */\nfunction OrderedBulkOperation(topology, collection, options) {\n  options = options == null ? {} : options;\n  // TODO Bring from driver information in isMaster\n  var executed = false;\n\n  // Current item\n  var currentOp = null;\n\n  // Handle to the bson serializer, used to calculate running sizes\n  var bson = topology.bson;\n\n  // Namespace for the operation\n  var namespace = collection.collectionName;\n\n  // Set max byte size\n  var maxBatchSizeBytes = topology.isMasterDoc && topology.isMasterDoc.maxBsonObjectSize ? topology.isMasterDoc.maxBsonObjectSize : 1024 * 1025 * 16;\n  var maxWriteBatchSize = topology.isMasterDoc && topology.isMasterDoc.maxWriteBatchSize ? topology.isMasterDoc.maxWriteBatchSize : 1000;\n\n  // Get the write concern\n  var writeConcern = common.writeConcern(shallowClone(options), collection, options);\n\n  // Get the promiseLibrary\n  var promiseLibrary = options.promiseLibrary;\n\n  // No promise library selected fall back\n  if (!promiseLibrary) {\n    promiseLibrary = typeof global.Promise == 'function' ? global.Promise : require('es6-promise').Promise;\n  }\n\n  // Final results\n  var bulkResult = {\n    ok: 1,\n    writeErrors: [],\n    writeConcernErrors: [],\n    insertedIds: [],\n    nInserted: 0,\n    nUpserted: 0,\n    nMatched: 0,\n    nModified: 0,\n    nRemoved: 0,\n    upserted: []\n  };\n\n  // Internal state\n  this.s = {\n    // Final result\n    bulkResult: bulkResult\n    // Current batch state\n    , currentBatch: null,\n    currentIndex: 0,\n    currentBatchSize: 0,\n    currentBatchSizeBytes: 0,\n    batches: []\n    // Write concern\n    , writeConcern: writeConcern\n    // Max batch size options\n    , maxBatchSizeBytes: maxBatchSizeBytes,\n    maxWriteBatchSize: maxWriteBatchSize\n    // Namespace\n    , namespace: namespace\n    // BSON\n    , bson: bson\n    // Topology\n    , topology: topology\n    // Options\n    , options: options\n    // Current operation\n    , currentOp: currentOp\n    // Executed\n    , executed: executed\n    // Collection\n    , collection: collection\n    // Promise Library\n    , promiseLibrary: promiseLibrary\n    // Fundamental error\n    , err: null\n    // Bypass validation\n    , bypassDocumentValidation: typeof options.bypassDocumentValidation == 'boolean' ? options.bypassDocumentValidation : false\n  };\n}\n\nvar define = OrderedBulkOperation.define = new Define('OrderedBulkOperation', OrderedBulkOperation, false);\n\nOrderedBulkOperation.prototype.raw = function (op) {\n  var key = Object.keys(op)[0];\n\n  // Set up the force server object id\n  var forceServerObjectId = typeof this.s.options.forceServerObjectId == 'boolean' ? this.s.options.forceServerObjectId : this.s.collection.s.db.options.forceServerObjectId;\n\n  // Update operations\n  if (op.updateOne && op.updateOne.q || op.updateMany && op.updateMany.q || op.replaceOne && op.replaceOne.q) {\n    op[key].multi = op.updateOne || op.replaceOne ? false : true;\n    return addToOperationsList(this, common.UPDATE, op[key]);\n  }\n\n  // Crud spec update format\n  if (op.updateOne || op.updateMany || op.replaceOne) {\n    var multi = op.updateOne || op.replaceOne ? false : true;\n    var operation = { q: op[key].filter, u: op[key].update || op[key].replacement, multi: multi };\n    operation.upsert = op[key].upsert ? true : false;\n    if (op.collation) operation.collation = op.collation;\n    return addToOperationsList(this, common.UPDATE, operation);\n  }\n\n  // Remove operations\n  if (op.removeOne || op.removeMany || op.deleteOne && op.deleteOne.q || op.deleteMany && op.deleteMany.q) {\n    op[key].limit = op.removeOne ? 1 : 0;\n    return addToOperationsList(this, common.REMOVE, op[key]);\n  }\n\n  // Crud spec delete operations, less efficient\n  if (op.deleteOne || op.deleteMany) {\n    var limit = op.deleteOne ? 1 : 0;\n    operation = { q: op[key].filter, limit: limit };\n    if (op.collation) operation.collation = op.collation;\n    return addToOperationsList(this, common.REMOVE, operation);\n  }\n\n  // Insert operations\n  if (op.insertOne && op.insertOne.document == null) {\n    if (forceServerObjectId !== true && op.insertOne._id == null) op.insertOne._id = new ObjectID();\n    return addToOperationsList(this, common.INSERT, op.insertOne);\n  } else if (op.insertOne && op.insertOne.document) {\n    if (forceServerObjectId !== true && op.insertOne.document._id == null) op.insertOne.document._id = new ObjectID();\n    return addToOperationsList(this, common.INSERT, op.insertOne.document);\n  }\n\n  if (op.insertMany) {\n    for (var i = 0; i < op.insertMany.length; i++) {\n      if (forceServerObjectId !== true && op.insertMany[i]._id == null) op.insertMany[i]._id = new ObjectID();\n      addToOperationsList(this, common.INSERT, op.insertMany[i]);\n    }\n\n    return;\n  }\n\n  // No valid type of operation\n  throw toError(\"bulkWrite only supports insertOne, insertMany, updateOne, updateMany, removeOne, removeMany, deleteOne, deleteMany\");\n};\n\n/**\n * Add a single insert document to the bulk operation\n *\n * @param {object} doc the document to insert\n * @throws {MongoError}\n * @return {OrderedBulkOperation}\n */\nOrderedBulkOperation.prototype.insert = function (document) {\n  if (this.s.collection.s.db.options.forceServerObjectId !== true && document._id == null) document._id = new ObjectID();\n  return addToOperationsList(this, common.INSERT, document);\n};\n\n/**\n * Initiate a find operation for an update/updateOne/remove/removeOne/replaceOne\n *\n * @method\n * @param {object} selector The selector for the bulk operation.\n * @throws {MongoError}\n * @return {FindOperatorsOrdered}\n */\nOrderedBulkOperation.prototype.find = function (selector) {\n  if (!selector) {\n    throw toError(\"Bulk find operation must specify a selector\");\n  }\n\n  // Save a current selector\n  this.s.currentOp = {\n    selector: selector\n  };\n\n  return new FindOperatorsOrdered(this);\n};\n\nObject.defineProperty(OrderedBulkOperation.prototype, 'length', {\n  enumerable: true,\n  get: function () {\n    return this.s.currentIndex;\n  }\n});\n\n//\n// Execute next write command in a chain\nvar executeCommands = function (self, callback) {\n  if (self.s.batches.length == 0) {\n    return handleCallback(callback, null, new BulkWriteResult(self.s.bulkResult));\n  }\n\n  // Ordered execution of the command\n  var batch = self.s.batches.shift();\n\n  var resultHandler = function (err, result) {\n    // Error is a driver related error not a bulk op error, terminate\n    if (err && err.driver || err && err.message) {\n      return handleCallback(callback, err);\n    }\n\n    // If we have and error\n    if (err) err.ok = 0;\n    // Merge the results together\n    var mergeResult = mergeBatchResults(true, batch, self.s.bulkResult, err, result);\n    if (mergeResult != null) {\n      return handleCallback(callback, null, new BulkWriteResult(self.s.bulkResult));\n    }\n\n    // If we are ordered and have errors and they are\n    // not all replication errors terminate the operation\n    if (self.s.bulkResult.writeErrors.length > 0) {\n      return handleCallback(callback, toError(self.s.bulkResult.writeErrors[0]), new BulkWriteResult(self.s.bulkResult));\n    }\n\n    // Execute the next command in line\n    executeCommands(self, callback);\n  };\n\n  var finalOptions = { ordered: true };\n  if (self.s.writeConcern != null) {\n    finalOptions.writeConcern = self.s.writeConcern;\n  }\n\n  // Set an operationIf if provided\n  if (self.operationId) {\n    resultHandler.operationId = self.operationId;\n  }\n\n  // Serialize functions\n  if (self.s.options.serializeFunctions) {\n    finalOptions.serializeFunctions = true;\n  }\n\n  // Serialize functions\n  if (self.s.options.ignoreUndefined) {\n    finalOptions.ignoreUndefined = true;\n  }\n\n  // Is the bypassDocumentValidation options specific\n  if (self.s.bypassDocumentValidation == true) {\n    finalOptions.bypassDocumentValidation = true;\n  }\n\n  try {\n    if (batch.batchType == common.INSERT) {\n      self.s.topology.insert(self.s.collection.namespace, batch.operations, finalOptions, resultHandler);\n    } else if (batch.batchType == common.UPDATE) {\n      self.s.topology.update(self.s.collection.namespace, batch.operations, finalOptions, resultHandler);\n    } else if (batch.batchType == common.REMOVE) {\n      self.s.topology.remove(self.s.collection.namespace, batch.operations, finalOptions, resultHandler);\n    }\n  } catch (err) {\n    // Force top level error\n    err.ok = 0;\n    // Merge top level error and return\n    handleCallback(callback, null, mergeBatchResults(false, batch, self.s.bulkResult, err, null));\n  }\n};\n\n/**\n * The callback format for results\n * @callback OrderedBulkOperation~resultCallback\n * @param {MongoError} error An error instance representing the error during the execution.\n * @param {BulkWriteResult} result The bulk write result.\n */\n\n/**\n * Execute the ordered bulk operation\n *\n * @method\n * @param {object} [options=null] Optional settings.\n * @param {(number|string)} [options.w=null] The write concern.\n * @param {number} [options.wtimeout=null] The write concern timeout.\n * @param {boolean} [options.j=false] Specify a journal write concern.\n * @param {boolean} [options.fsync=false] Specify a file sync write concern.\n * @param {OrderedBulkOperation~resultCallback} [callback] The result callback\n * @throws {MongoError}\n * @return {Promise} returns Promise if no callback passed\n */\nOrderedBulkOperation.prototype.execute = function (_writeConcern, callback) {\n  var self = this;\n  if (this.s.executed) throw new toError(\"batch cannot be re-executed\");\n  if (typeof _writeConcern == 'function') {\n    callback = _writeConcern;\n  } else if (_writeConcern && typeof _writeConcern == 'object') {\n    this.s.writeConcern = _writeConcern;\n  }\n\n  // If we have current batch\n  if (this.s.currentBatch) this.s.batches.push(this.s.currentBatch);\n\n  // If we have no operations in the bulk raise an error\n  if (this.s.batches.length == 0) {\n    throw toError(\"Invalid Operation, No operations in bulk\");\n  }\n\n  // Execute using callback\n  if (typeof callback == 'function') {\n    return executeCommands(this, callback);\n  }\n\n  // Return a Promise\n  return new this.s.promiseLibrary(function (resolve, reject) {\n    executeCommands(self, function (err, r) {\n      if (err) return reject(err);\n      resolve(r);\n    });\n  });\n};\n\ndefine.classMethod('execute', { callback: true, promise: false });\n\n/**\n * Returns an unordered batch object\n * @ignore\n */\nvar initializeOrderedBulkOp = function (topology, collection, options) {\n  return new OrderedBulkOperation(topology, collection, options);\n};\n\ninitializeOrderedBulkOp.OrderedBulkOperation = OrderedBulkOperation;\nmodule.exports = initializeOrderedBulkOp;\nmodule.exports.Bulk = OrderedBulkOperation;\n\n//# sourceMappingURL=ordered-compiled.js.map"]}