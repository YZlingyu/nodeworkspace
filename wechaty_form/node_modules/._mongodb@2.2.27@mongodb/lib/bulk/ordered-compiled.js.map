{"version":3,"sources":["ordered.js"],"names":[],"mappings":"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","file":"ordered-compiled.js","sourcesContent":["\"use strict\";\n\nvar common = require('./common')\n\t, utils = require('../utils')\n  , toError = require('../utils').toError\n\t, handleCallback = require('../utils').handleCallback\n\t, shallowClone = utils.shallowClone\n  , BulkWriteResult = common.BulkWriteResult\n  , ObjectID = require('mongodb-core').BSON.ObjectID\n  , Define = require('../metadata')\n\t, BSON = require('mongodb-core').BSON\n  , Batch = common.Batch\n  , mergeBatchResults = common.mergeBatchResults;\n\nvar bson = new BSON([BSON.Binary, BSON.Code, BSON.DBRef, BSON.Decimal128,\n\tBSON.Double, BSON.Int32, BSON.Long, BSON.Map, BSON.MaxKey, BSON.MinKey,\n\tBSON.ObjectId, BSON.BSONRegExp, BSON.Symbol, BSON.Timestamp]);\n\n/**\n * Create a FindOperatorsOrdered instance (INTERNAL TYPE, do not instantiate directly)\n * @class\n * @return {FindOperatorsOrdered} a FindOperatorsOrdered instance.\n */\nvar FindOperatorsOrdered = function(self) {\n  this.s = self.s;\n}\n\n/**\n * Add a single update document to the bulk operation\n *\n * @method\n * @param {object} doc update operations\n * @throws {MongoError}\n * @return {OrderedBulkOperation}\n */\nFindOperatorsOrdered.prototype.update = function(updateDocument) {\n  // Perform upsert\n  var upsert = typeof this.s.currentOp.upsert == 'boolean' ? this.s.currentOp.upsert : false;\n\n  // Establish the update command\n  var document = {\n      q: this.s.currentOp.selector\n    , u: updateDocument\n    , multi: true\n    , upsert: upsert\n  }\n\n  // Clear out current Op\n  this.s.currentOp = null;\n  // Add the update document to the list\n  return addToOperationsList(this, common.UPDATE, document);\n}\n\n/**\n * Add a single update one document to the bulk operation\n *\n * @method\n * @param {object} doc update operations\n * @throws {MongoError}\n * @return {OrderedBulkOperation}\n */\nFindOperatorsOrdered.prototype.updateOne = function(updateDocument) {\n  // Perform upsert\n  var upsert = typeof this.s.currentOp.upsert == 'boolean' ? this.s.currentOp.upsert : false;\n\n  // Establish the update command\n  var document = {\n      q: this.s.currentOp.selector\n    , u: updateDocument\n    , multi: false\n    , upsert: upsert\n  }\n\n  // Clear out current Op\n  this.s.currentOp = null;\n  // Add the update document to the list\n  return addToOperationsList(this, common.UPDATE, document);\n}\n\n/**\n * Add a replace one operation to the bulk operation\n *\n * @method\n * @param {object} doc the new document to replace the existing one with\n * @throws {MongoError}\n * @return {OrderedBulkOperation}\n */\nFindOperatorsOrdered.prototype.replaceOne = function(updateDocument) {\n  this.updateOne(updateDocument);\n}\n\n/**\n * Upsert modifier for update bulk operation\n *\n * @method\n * @throws {MongoError}\n * @return {FindOperatorsOrdered}\n */\nFindOperatorsOrdered.prototype.upsert = function() {\n  this.s.currentOp.upsert = true;\n  return this;\n}\n\n/**\n * Add a remove one operation to the bulk operation\n *\n * @method\n * @throws {MongoError}\n * @return {OrderedBulkOperation}\n */\nFindOperatorsOrdered.prototype.deleteOne = function() {\n  // Establish the update command\n  var document = {\n      q: this.s.currentOp.selector\n    , limit: 1\n  }\n\n  // Clear out current Op\n  this.s.currentOp = null;\n  // Add the remove document to the list\n  return addToOperationsList(this, common.REMOVE, document);\n}\n\n// Backward compatibility\nFindOperatorsOrdered.prototype.removeOne = FindOperatorsOrdered.prototype.deleteOne;\n\n/**\n * Add a remove operation to the bulk operation\n *\n * @method\n * @throws {MongoError}\n * @return {OrderedBulkOperation}\n */\nFindOperatorsOrdered.prototype.delete = function() {\n  // Establish the update command\n  var document = {\n      q: this.s.currentOp.selector\n    , limit: 0\n  }\n\n  // Clear out current Op\n  this.s.currentOp = null;\n  // Add the remove document to the list\n  return addToOperationsList(this, common.REMOVE, document);\n}\n\n// Backward compatibility\nFindOperatorsOrdered.prototype.remove = FindOperatorsOrdered.prototype.delete;\n\n// Add to internal list of documents\nvar addToOperationsList = function(_self, docType, document) {\n  // Get the bsonSize\n  var bsonSize = bson.calculateObjectSize(document, {\n\t\tcheckKeys: false,\n\t});\n\n  // Throw error if the doc is bigger than the max BSON size\n  if(bsonSize >= _self.s.maxBatchSizeBytes) {\n\t\tthrow toError(\"document is larger than the maximum size \" + _self.s.maxBatchSizeBytes);\n\t}\n\n  // Create a new batch object if we don't have a current one\n  if(_self.s.currentBatch == null) _self.s.currentBatch = new Batch(docType, _self.s.currentIndex);\n\n  // Check if we need to create a new batch\n  if(((_self.s.currentBatchSize + 1) >= _self.s.maxWriteBatchSize)\n    || ((_self.s.currentBatchSizeBytes +  _self.s.currentBatchSizeBytes) >= _self.s.maxBatchSizeBytes)\n    || (_self.s.currentBatch.batchType != docType)) {\n    // Save the batch to the execution stack\n    _self.s.batches.push(_self.s.currentBatch);\n\n    // Create a new batch\n    _self.s.currentBatch = new Batch(docType, _self.s.currentIndex);\n\n    // Reset the current size trackers\n    _self.s.currentBatchSize = 0;\n    _self.s.currentBatchSizeBytes = 0;\n  } else {\n    // Update current batch size\n    _self.s.currentBatchSize = _self.s.currentBatchSize + 1;\n    _self.s.currentBatchSizeBytes = _self.s.currentBatchSizeBytes + bsonSize;\n  }\n\n  if(docType == common.INSERT) {\n    _self.s.bulkResult.insertedIds.push({index: _self.s.currentIndex, _id: document._id});\n  }\n\n  // We have an array of documents\n  if(Array.isArray(document)) {\n    throw toError(\"operation passed in cannot be an Array\");\n  } else {\n    _self.s.currentBatch.originalIndexes.push(_self.s.currentIndex);\n    _self.s.currentBatch.operations.push(document)\n\t\t_self.s.currentBatchSizeBytes = _self.s.currentBatchSizeBytes + bsonSize;\n    _self.s.currentIndex = _self.s.currentIndex + 1;\n  }\n\n  // Return self\n  return _self;\n}\n\n/**\n * Create a new OrderedBulkOperation instance (INTERNAL TYPE, do not instantiate directly)\n * @class\n * @property {number} length Get the number of operations in the bulk.\n * @return {OrderedBulkOperation} a OrderedBulkOperation instance.\n */\nfunction OrderedBulkOperation(topology, collection, options) {\n\toptions = options == null ? {} : options;\n\t// TODO Bring from driver information in isMaster\n\tvar executed = false;\n\n\t// Current item\n\tvar currentOp = null;\n\n\t// Handle to the bson serializer, used to calculate running sizes\n\tvar bson = topology.bson;\n\n\t// Namespace for the operation\n  var namespace = collection.collectionName;\n\n  // Set max byte size\n\tvar maxBatchSizeBytes = topology.isMasterDoc && topology.isMasterDoc.maxBsonObjectSize\n    ? topology.isMasterDoc.maxBsonObjectSize : (1024*1025*16);\n\tvar maxWriteBatchSize = topology.isMasterDoc && topology.isMasterDoc.maxWriteBatchSize\n    ? topology.isMasterDoc.maxWriteBatchSize : 1000;\n\n  // Get the write concern\n  var writeConcern = common.writeConcern(shallowClone(options), collection, options);\n\n  // Get the promiseLibrary\n  var promiseLibrary = options.promiseLibrary;\n\n  // No promise library selected fall back\n  if(!promiseLibrary) {\n    promiseLibrary = typeof global.Promise == 'function' ?\n      global.Promise : require('es6-promise').Promise;\n  }\n\n  // Final results\n  var bulkResult = {\n      ok: 1\n    , writeErrors: []\n    , writeConcernErrors: []\n    , insertedIds: []\n    , nInserted: 0\n    , nUpserted: 0\n    , nMatched: 0\n    , nModified: 0\n    , nRemoved: 0\n    , upserted: []\n  };\n\n  // Internal state\n  this.s = {\n    // Final result\n      bulkResult: bulkResult\n    // Current batch state\n    , currentBatch: null\n    , currentIndex: 0\n    , currentBatchSize: 0\n    , currentBatchSizeBytes: 0\n    , batches: []\n    // Write concern\n    , writeConcern: writeConcern\n    // Max batch size options\n    , maxBatchSizeBytes: maxBatchSizeBytes\n    , maxWriteBatchSize: maxWriteBatchSize\n    // Namespace\n    , namespace: namespace\n    // BSON\n    , bson: bson\n    // Topology\n    , topology: topology\n    // Options\n    , options: options\n    // Current operation\n    , currentOp: currentOp\n    // Executed\n    , executed: executed\n    // Collection\n    , collection: collection\n    // Promise Library\n    , promiseLibrary: promiseLibrary\n\t\t// Fundamental error\n\t\t, err: null\n    // Bypass validation\n    , bypassDocumentValidation: typeof options.bypassDocumentValidation == 'boolean' ? options.bypassDocumentValidation : false\n  }\n}\n\nvar define = OrderedBulkOperation.define = new Define('OrderedBulkOperation', OrderedBulkOperation, false);\n\nOrderedBulkOperation.prototype.raw = function(op) {\n  var key = Object.keys(op)[0];\n\n  // Set up the force server object id\n  var forceServerObjectId = typeof this.s.options.forceServerObjectId == 'boolean'\n    ? this.s.options.forceServerObjectId : this.s.collection.s.db.options.forceServerObjectId;\n\n  // Update operations\n  if((op.updateOne && op.updateOne.q)\n    || (op.updateMany && op.updateMany.q)\n    || (op.replaceOne && op.replaceOne.q)) {\n    op[key].multi = op.updateOne || op.replaceOne ? false : true;\n    return addToOperationsList(this, common.UPDATE, op[key]);\n  }\n\n  // Crud spec update format\n  if(op.updateOne || op.updateMany || op.replaceOne) {\n    var multi = op.updateOne || op.replaceOne ? false : true;\n    var operation = {q: op[key].filter, u: op[key].update || op[key].replacement, multi: multi}\n    operation.upsert = op[key].upsert ? true: false;\n\t\tif(op.collation) operation.collation = op.collation;\n    return addToOperationsList(this, common.UPDATE, operation);\n  }\n\n  // Remove operations\n  if(op.removeOne || op.removeMany || (op.deleteOne && op.deleteOne.q) || op.deleteMany && op.deleteMany.q) {\n    op[key].limit = op.removeOne ? 1 : 0;\n    return addToOperationsList(this, common.REMOVE, op[key]);\n  }\n\n  // Crud spec delete operations, less efficient\n  if(op.deleteOne || op.deleteMany) {\n    var limit = op.deleteOne ? 1 : 0;\n    operation = {q: op[key].filter, limit: limit}\n\t\tif(op.collation) operation.collation = op.collation;\n    return addToOperationsList(this, common.REMOVE, operation);\n  }\n\n  // Insert operations\n  if(op.insertOne && op.insertOne.document == null) {\n    if(forceServerObjectId !== true && op.insertOne._id == null) op.insertOne._id = new ObjectID();\n    return addToOperationsList(this, common.INSERT, op.insertOne);\n  } else if(op.insertOne && op.insertOne.document) {\n    if(forceServerObjectId !== true && op.insertOne.document._id == null) op.insertOne.document._id = new ObjectID();\n    return addToOperationsList(this, common.INSERT, op.insertOne.document);\n  }\n\n  if(op.insertMany) {\n    for(var i = 0; i < op.insertMany.length; i++) {\n      if(forceServerObjectId !== true && op.insertMany[i]._id == null) op.insertMany[i]._id = new ObjectID();\n      addToOperationsList(this, common.INSERT, op.insertMany[i]);\n    }\n\n    return;\n  }\n\n  // No valid type of operation\n  throw toError(\"bulkWrite only supports insertOne, insertMany, updateOne, updateMany, removeOne, removeMany, deleteOne, deleteMany\");\n}\n\n/**\n * Add a single insert document to the bulk operation\n *\n * @param {object} doc the document to insert\n * @throws {MongoError}\n * @return {OrderedBulkOperation}\n */\nOrderedBulkOperation.prototype.insert = function(document) {\n  if(this.s.collection.s.db.options.forceServerObjectId !== true && document._id == null) document._id = new ObjectID();\n  return addToOperationsList(this, common.INSERT, document);\n}\n\n/**\n * Initiate a find operation for an update/updateOne/remove/removeOne/replaceOne\n *\n * @method\n * @param {object} selector The selector for the bulk operation.\n * @throws {MongoError}\n * @return {FindOperatorsOrdered}\n */\nOrderedBulkOperation.prototype.find = function(selector) {\n  if (!selector) {\n    throw toError(\"Bulk find operation must specify a selector\");\n  }\n\n  // Save a current selector\n  this.s.currentOp = {\n    selector: selector\n  }\n\n  return new FindOperatorsOrdered(this);\n}\n\nObject.defineProperty(OrderedBulkOperation.prototype, 'length', {\n  enumerable: true,\n  get: function() {\n    return this.s.currentIndex;\n  }\n});\n\n//\n// Execute next write command in a chain\nvar executeCommands = function(self, callback) {\n  if(self.s.batches.length == 0) {\n    return handleCallback(callback, null, new BulkWriteResult(self.s.bulkResult));\n  }\n\n  // Ordered execution of the command\n  var batch = self.s.batches.shift();\n\n  var resultHandler = function(err, result) {\n\t\t// Error is a driver related error not a bulk op error, terminate\n\t\tif(err && err.driver || err && err.message) {\n\t\t\treturn handleCallback(callback, err);\n\t\t}\n\n    // If we have and error\n    if(err) err.ok = 0;\n    // Merge the results together\n    var mergeResult = mergeBatchResults(true, batch, self.s.bulkResult, err, result);\n    if(mergeResult != null) {\n      return handleCallback(callback, null, new BulkWriteResult(self.s.bulkResult));\n    }\n\n    // If we are ordered and have errors and they are\n    // not all replication errors terminate the operation\n    if(self.s.bulkResult.writeErrors.length > 0) {\n      return handleCallback(callback, toError(self.s.bulkResult.writeErrors[0]), new BulkWriteResult(self.s.bulkResult));\n    }\n\n    // Execute the next command in line\n    executeCommands(self, callback);\n  }\n\n  var finalOptions = {ordered: true}\n  if(self.s.writeConcern != null) {\n    finalOptions.writeConcern = self.s.writeConcern;\n  }\n\n\t// Set an operationIf if provided\n\tif(self.operationId) {\n\t\tresultHandler.operationId = self.operationId;\n\t}\n\n\t// Serialize functions\n\tif(self.s.options.serializeFunctions) {\n\t\tfinalOptions.serializeFunctions = true\n\t}\n\n  // Serialize functions\n  if(self.s.options.ignoreUndefined) {\n    finalOptions.ignoreUndefined = true\n  }\n\n  // Is the bypassDocumentValidation options specific\n  if(self.s.bypassDocumentValidation == true) {\n    finalOptions.bypassDocumentValidation = true;\n  }\n\n  try {\n    if(batch.batchType == common.INSERT) {\n      self.s.topology.insert(self.s.collection.namespace, batch.operations, finalOptions, resultHandler);\n    } else if(batch.batchType == common.UPDATE) {\n      self.s.topology.update(self.s.collection.namespace, batch.operations, finalOptions, resultHandler);\n    } else if(batch.batchType == common.REMOVE) {\n      self.s.topology.remove(self.s.collection.namespace, batch.operations, finalOptions, resultHandler);\n    }\n  } catch(err) {\n    // Force top level error\n    err.ok = 0;\n    // Merge top level error and return\n    handleCallback(callback, null, mergeBatchResults(false, batch, self.s.bulkResult, err, null));\n  }\n}\n\n/**\n * The callback format for results\n * @callback OrderedBulkOperation~resultCallback\n * @param {MongoError} error An error instance representing the error during the execution.\n * @param {BulkWriteResult} result The bulk write result.\n */\n\n/**\n * Execute the ordered bulk operation\n *\n * @method\n * @param {object} [options=null] Optional settings.\n * @param {(number|string)} [options.w=null] The write concern.\n * @param {number} [options.wtimeout=null] The write concern timeout.\n * @param {boolean} [options.j=false] Specify a journal write concern.\n * @param {boolean} [options.fsync=false] Specify a file sync write concern.\n * @param {OrderedBulkOperation~resultCallback} [callback] The result callback\n * @throws {MongoError}\n * @return {Promise} returns Promise if no callback passed\n */\nOrderedBulkOperation.prototype.execute = function(_writeConcern, callback) {\n  var self = this;\n  if(this.s.executed) throw new toError(\"batch cannot be re-executed\");\n  if(typeof _writeConcern == 'function') {\n    callback = _writeConcern;\n\t} else if(_writeConcern && typeof _writeConcern == 'object') {\n    this.s.writeConcern = _writeConcern;\n  }\n\n  // If we have current batch\n  if(this.s.currentBatch) this.s.batches.push(this.s.currentBatch)\n\n  // If we have no operations in the bulk raise an error\n  if(this.s.batches.length == 0) {\n    throw toError(\"Invalid Operation, No operations in bulk\");\n  }\n\n  // Execute using callback\n  if(typeof callback == 'function') {\n\t\treturn executeCommands(this, callback);\n\t}\n\n  // Return a Promise\n  return new this.s.promiseLibrary(function(resolve, reject) {\n    executeCommands(self, function(err, r) {\n      if(err) return reject(err);\n      resolve(r);\n    });\n  });\n}\n\ndefine.classMethod('execute', {callback: true, promise:false});\n\n/**\n * Returns an unordered batch object\n * @ignore\n */\nvar initializeOrderedBulkOp = function(topology, collection, options) {\n\treturn new OrderedBulkOperation(topology, collection, options);\n}\n\ninitializeOrderedBulkOp.OrderedBulkOperation = OrderedBulkOperation;\nmodule.exports = initializeOrderedBulkOp;\nmodule.exports.Bulk = OrderedBulkOperation;\n"]}