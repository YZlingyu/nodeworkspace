{"version":3,"sources":["mongo_client.js"],"names":[],"mappings":"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","file":"mongo_client-compiled.js","sourcesContent":["\"use strict\";\n\nvar parse = require('./url_parser')\n  , Server = require('./server')\n  , Mongos = require('./mongos')\n  , ReplSet = require('./replset')\n  , EventEmitter = require('events').EventEmitter\n  , inherits = require('util').inherits\n  , Define = require('./metadata')\n  , ReadPreference = require('./read_preference')\n  , Logger = require('mongodb-core').Logger\n  , MongoError = require('mongodb-core').MongoError\n  , Db = require('./db')\n  , f = require('util').format\n  , shallowClone = require('./utils').shallowClone\n  , authenticate = require('./authenticate');\n\n/**\n * @fileOverview The **MongoClient** class is a class that allows for making Connections to MongoDB.\n *\n * @example\n * var MongoClient = require('mongodb').MongoClient,\n *   test = require('assert');\n * // Connection url\n * var url = 'mongodb://localhost:27017/test';\n * // Connect using MongoClient\n * MongoClient.connect(url, function(err, db) {\n *   // Get an additional db\n *   db.close();\n * });\n */\nvar validOptionNames = ['poolSize', 'ssl', 'sslValidate', 'sslCA', 'sslCert',\n  'sslKey', 'sslPass', 'sslCRL', 'autoReconnect', 'noDelay', 'keepAlive', 'connectTimeoutMS',\n  'socketTimeoutMS', 'reconnectTries', 'reconnectInterval', 'ha', 'haInterval',\n  'replicaSet', 'secondaryAcceptableLatencyMS', 'acceptableLatencyMS',\n  'connectWithNoPrimary', 'authSource', 'w', 'wtimeout', 'j', 'forceServerObjectId',\n  'serializeFunctions', 'ignoreUndefined', 'raw', 'promoteLongs', 'bufferMaxEntries',\n  'readPreference', 'pkFactory', 'promiseLibrary', 'readConcern', 'maxStalenessSeconds',\n  'loggerLevel', 'logger', 'promoteValues', 'promoteBuffers', 'promoteLongs',\n  'domainsEnabled', 'keepAliveInitialDelay', 'checkServerIdentity', 'validateOptions'];\nvar ignoreOptionNames = ['native_parser'];\nvar legacyOptionNames = ['server', 'replset', 'replSet', 'mongos', 'db'];\n\nfunction validOptions(options) {\n  var _validOptions = validOptionNames.concat(legacyOptionNames);\n\n  for(var name in options) {\n    if(ignoreOptionNames.indexOf(name) != -1) {\n      continue;\n    }\n\n    if(_validOptions.indexOf(name) == -1 && options.validateOptions) {\n      return new MongoError(f('option %s is not supported', name));\n    } else if(_validOptions.indexOf(name) == -1) {\n      console.warn(f('the options [%s] is not supported', name));\n    }\n\n    if(legacyOptionNames.indexOf(name) != -1) {\n      console.warn(f('the server/replset/mongos options are deprecated, '\n      + 'all their options are supported at the top level of the options object [%s]', validOptionNames));\n    }\n  }\n}\n\n/**\n * Creates a new MongoClient instance\n * @class\n * @return {MongoClient} a MongoClient instance.\n */\nfunction MongoClient() {\n  if(!(this instanceof MongoClient)) return new MongoClient();\n\n  // Set up event emitter\n  EventEmitter.call(this);\n\n  /**\n   * The callback format for results\n   * @callback MongoClient~connectCallback\n   * @param {MongoError} error An error instance representing the error during the execution.\n   * @param {Db} db The connected database.\n   */\n\n  /**\n   * Connect to MongoDB using a url as documented at\n   *\n   *  docs.mongodb.org/manual/reference/connection-string/\n   *\n   * Note that for replicasets the replicaSet query parameter is required in the 2.0 driver\n   *\n   * @method\n   * @param {string} url The connection URI string\n   * @param {object} [options] Optional settings.\n   * @param {number} [options.poolSize=5] poolSize The maximum size of the individual server pool.\n   * @param {boolean} [options.ssl=false] Enable SSL connection.\n   * @param {Buffer} [options.sslCA=undefined] SSL Certificate store binary buffer\n   * @param {Buffer} [options.sslCRL=undefined] SSL Certificate revocation list binary buffer\n   * @param {Buffer} [options.sslCert=undefined] SSL Certificate binary buffer\n   * @param {Buffer} [options.sslKey=undefined] SSL Key file binary buffer\n   * @param {string} [options.sslPass=undefined] SSL Certificate pass phrase\n   * @param {boolean|function} [options.checkServerIdentity=true] Ensure we check server identify during SSL, set to false to disable checking. Only works for Node 0.12.x or higher. You can pass in a boolean or your own checkServerIdentity override function.\n   * @param {boolean} [options.autoReconnect=true] Enable autoReconnect for single server instances\n   * @param {boolean} [options.noDelay=true] TCP Connection no delay\n   * @param {boolean} [options.keepAlive=0] The number of milliseconds to wait before initiating keepAlive on the TCP socket.\n   * @param {number} [options.connectTimeoutMS=30000] TCP Connection timeout setting\n   * @param {number} [options.socketTimeoutMS=30000] TCP Socket timeout setting\n   * @param {number} [options.reconnectTries=30] Server attempt to reconnect #times\n   * @param {number} [options.reconnectInterval=1000] Server will wait # milliseconds between retries\n   * @param {boolean} [options.ha=true] Control if high availability monitoring runs for Replicaset or Mongos proxies.\n   * @param {number} [options.haInterval=10000] The High availability period for replicaset inquiry\n   * @param {string} [options.replicaSet=undefined] The Replicaset set name\n   * @param {number} [options.secondaryAcceptableLatencyMS=15] Cutoff latency point in MS for Replicaset member selection\n   * @param {number} [options.acceptableLatencyMS=15] Cutoff latency point in MS for Mongos proxies selection.\n   * @param {boolean} [options.connectWithNoPrimary=false] Sets if the driver should connect even if no primary is available\n   * @param {string} [options.authSource=undefined] Define the database to authenticate against\n   * @param {(number|string)} [options.w=null] The write concern.\n   * @param {number} [options.wtimeout=null] The write concern timeout.\n   * @param {boolean} [options.j=false] Specify a journal write concern.\n   * @param {boolean} [options.forceServerObjectId=false] Force server to assign _id values instead of driver.\n   * @param {boolean} [options.serializeFunctions=false] Serialize functions on any object.\n   * @param {Boolean} [options.ignoreUndefined=false] Specify if the BSON serializer should ignore undefined fields.\n   * @param {boolean} [options.raw=false] Return document results as raw BSON buffers.\n   * @param {boolean} [options.promoteLongs=true] Promotes Long values to number if they fit inside the 53 bits resolution.\n   * @param {boolean} [options.promoteBuffers=false] Promotes Binary BSON values to native Node Buffers.\n   * @param {boolean} [options.promoteValues=true] Promotes BSON values to native types where possible, set to false to only receive wrapper types.\n   * @param {number} [options.bufferMaxEntries=-1] Sets a cap on how many operations the driver will buffer up before giving up on getting a working connection, default is -1 which is unlimited.\n   * @param {(ReadPreference|string)} [options.readPreference=null] The preferred read preference (ReadPreference.PRIMARY, ReadPreference.PRIMARY_PREFERRED, ReadPreference.SECONDARY, ReadPreference.SECONDARY_PREFERRED, ReadPreference.NEAREST).\n   * @param {boolean} [options.domainsEnabled=false] Enable the wrapping of the callback in the current domain, disabled by default to avoid perf hit.\n   * @param {object} [options.pkFactory=null] A primary key factory object for generation of custom _id keys.\n   * @param {object} [options.promiseLibrary=null] A Promise library class the application wishes to use such as Bluebird, must be ES6 compatible\n   * @param {object} [options.readConcern=null] Specify a read concern for the collection. (only MongoDB 3.2 or higher supported)\n   * @param {string} [options.readConcern.level='local'] Specify a read concern level for the collection operations, one of [local|majority]. (only MongoDB 3.2 or higher supported)\n   * @param {number} [options.maxStalenessSeconds=undefined] The max staleness to secondary reads (values under 10 seconds cannot be guaranteed);\n   * @param {string} [options.loggerLevel=undefined] The logging level (error/warn/info/debug)\n   * @param {object} [options.logger=undefined] Custom logger object\n   * @param {object} [options.validateOptions=false] Validate MongoClient passed in options for correctness.\n   * @param {MongoClient~connectCallback} [callback] The command result callback\n   * @return {Promise} returns Promise if no callback passed\n   */\n  this.connect = MongoClient.connect;\n}\n\n/**\n * @ignore\n */\ninherits(MongoClient, EventEmitter);\n\nvar define = MongoClient.define = new Define('MongoClient', MongoClient, false);\n\n/**\n * Connect to MongoDB using a url as documented at\n *\n *  docs.mongodb.org/manual/reference/connection-string/\n *\n * Note that for replicasets the replicaSet query parameter is required in the 2.0 driver\n *\n * @method\n * @static\n * @param {string} url The connection URI string\n * @param {object} [options] Optional settings.\n * @param {number} [options.poolSize=5] poolSize The maximum size of the individual server pool.\n * @param {boolean} [options.ssl=false] Enable SSL connection.\n * @param {Buffer} [options.sslCA=undefined] SSL Certificate store binary buffer\n * @param {Buffer} [options.sslCRL=undefined] SSL Certificate revocation list binary buffer\n * @param {Buffer} [options.sslCert=undefined] SSL Certificate binary buffer\n * @param {Buffer} [options.sslKey=undefined] SSL Key file binary buffer\n * @param {string} [options.sslPass=undefined] SSL Certificate pass phrase\n * @param {boolean|function} [options.checkServerIdentity=true] Ensure we check server identify during SSL, set to false to disable checking. Only works for Node 0.12.x or higher. You can pass in a boolean or your own checkServerIdentity override function.\n * @param {boolean} [options.autoReconnect=true] Enable autoReconnect for single server instances\n * @param {boolean} [options.noDelay=true] TCP Connection no delay\n * @param {boolean} [options.keepAlive=0] The number of milliseconds to wait before initiating keepAlive on the TCP socket.\n * @param {number} [options.connectTimeoutMS=30000] TCP Connection timeout setting\n * @param {number} [options.socketTimeoutMS=30000] TCP Socket timeout setting\n * @param {number} [options.reconnectTries=30] Server attempt to reconnect #times\n * @param {number} [options.reconnectInterval=1000] Server will wait # milliseconds between retries\n * @param {boolean} [options.ha=true] Control if high availability monitoring runs for Replicaset or Mongos proxies.\n * @param {number} [options.haInterval=10000] The High availability period for replicaset inquiry\n * @param {string} [options.replicaSet=undefined] The Replicaset set name\n * @param {number} [options.secondaryAcceptableLatencyMS=15] Cutoff latency point in MS for Replicaset member selection\n * @param {number} [options.acceptableLatencyMS=15] Cutoff latency point in MS for Mongos proxies selection.\n * @param {boolean} [options.connectWithNoPrimary=false] Sets if the driver should connect even if no primary is available\n * @param {string} [options.authSource=undefined] Define the database to authenticate against\n * @param {(number|string)} [options.w=null] The write concern.\n * @param {number} [options.wtimeout=null] The write concern timeout.\n * @param {boolean} [options.j=false] Specify a journal write concern.\n * @param {boolean} [options.forceServerObjectId=false] Force server to assign _id values instead of driver.\n * @param {boolean} [options.serializeFunctions=false] Serialize functions on any object.\n * @param {Boolean} [options.ignoreUndefined=false] Specify if the BSON serializer should ignore undefined fields.\n * @param {boolean} [options.raw=false] Return document results as raw BSON buffers.\n * @param {boolean} [options.promoteLongs=true] Promotes Long values to number if they fit inside the 53 bits resolution.\n * @param {boolean} [options.promoteBuffers=false] Promotes Binary BSON values to native Node Buffers.\n * @param {boolean} [options.promoteValues=true] Promotes BSON values to native types where possible, set to false to only receive wrapper types.\n * @param {number} [options.bufferMaxEntries=-1] Sets a cap on how many operations the driver will buffer up before giving up on getting a working connection, default is -1 which is unlimited.\n * @param {(ReadPreference|string)} [options.readPreference=null] The preferred read preference (ReadPreference.PRIMARY, ReadPreference.PRIMARY_PREFERRED, ReadPreference.SECONDARY, ReadPreference.SECONDARY_PREFERRED, ReadPreference.NEAREST).\n * @param {boolean} [options.domainsEnabled=false] Enable the wrapping of the callback in the current domain, disabled by default to avoid perf hit.\n * @param {object} [options.pkFactory=null] A primary key factory object for generation of custom _id keys.\n * @param {object} [options.promiseLibrary=null] A Promise library class the application wishes to use such as Bluebird, must be ES6 compatible\n * @param {object} [options.readConcern=null] Specify a read concern for the collection. (only MongoDB 3.2 or higher supported)\n * @param {string} [options.readConcern.level='local'] Specify a read concern level for the collection operations, one of [local|majority]. (only MongoDB 3.2 or higher supported)\n * @param {number} [options.maxStalenessSeconds=undefined] The max staleness to secondary reads (values under 10 seconds cannot be guaranteed);\n * @param {string} [options.loggerLevel=undefined] The logging level (error/warn/info/debug)\n * @param {object} [options.logger=undefined] Custom logger object\n * @param {object} [options.validateOptions=false] Validate MongoClient passed in options for correctness.\n * @param {MongoClient~connectCallback} [callback] The command result callback\n * @return {Promise} returns Promise if no callback passed\n */\nMongoClient.connect = function(url, options, callback) {\n  var args = Array.prototype.slice.call(arguments, 1);\n  callback = typeof args[args.length - 1] == 'function' ? args.pop() : null;\n  options = args.length ? args.shift() : null;\n  options = options || {};\n  var self = this;\n\n  // Validate options object\n  var err = validOptions(options);\n\n  // Get the promiseLibrary\n  var promiseLibrary = options.promiseLibrary;\n\n  // No promise library selected fall back\n  if(!promiseLibrary) {\n    promiseLibrary = typeof global.Promise == 'function' ?\n      global.Promise : require('es6-promise').Promise;\n  }\n\n  // Return a promise\n  if(typeof callback != 'function') {\n    return new promiseLibrary(function(resolve, reject) {\n      // Did we have a validation error\n      if(err) return reject(err);\n      // Attempt to connect\n      connect(self, url, options, function(err, db) {\n        if(err) return reject(err);\n        resolve(db);\n      });\n    });\n  }\n\n  // Did we have a validation error\n  if(err) return callback(err);\n  // Fallback to callback based connect\n  connect(self, url, options, callback);\n}\n\ndefine.staticMethod('connect', {callback: true, promise:true});\n\nvar mergeOptions = function(target, source, flatten) {\n  for(var name in source) {\n    if(source[name] && typeof source[name] == 'object' && flatten) {\n      target = mergeOptions(target, source[name], flatten);\n    } else {\n      target[name] = source[name];\n    }\n  }\n\n  return target;\n}\n\nvar createUnifiedOptions = function(finalOptions, options) {\n  var childOptions = ['mongos', 'server', 'db'\n    , 'replset', 'db_options', 'server_options', 'rs_options', 'mongos_options'];\n  var noMerge = ['readconcern'];\n\n  for(var name in options) {\n    if(noMerge.indexOf(name.toLowerCase()) != -1) {\n      finalOptions[name] = options[name];\n    } else if(childOptions.indexOf(name.toLowerCase()) != -1) {\n      finalOptions = mergeOptions(finalOptions, options[name], false);\n    } else {\n      if(options[name] && typeof options[name] == 'object' && !Buffer.isBuffer(options[name]) && !Array.isArray(options[name])) {\n        finalOptions = mergeOptions(finalOptions, options[name], true);\n      } else {\n        finalOptions[name] = options[name];\n      }\n    }\n  }\n\n  return finalOptions;\n}\n\nfunction translateOptions(options) {\n  // If we have a readPreference passed in by the db options\n  if(typeof options.readPreference == 'string' || typeof options.read_preference == 'string') {\n    options.readPreference = new ReadPreference(options.readPreference || options.read_preference);\n  }\n\n  // Do we have readPreference tags, add them\n  if(options.readPreference && (options.readPreferenceTags || options.read_preference_tags)) {\n    options.readPreference.tags = options.readPreferenceTags || options.read_preference_tags;\n  }\n\n  // Do we have maxStalenessSeconds\n  if(options.maxStalenessSeconds) {\n    options.readPreference.maxStalenessSeconds = options.maxStalenessSeconds;\n  }\n\n  // Set the socket and connection timeouts\n  if(options.socketTimeoutMS == null) options.socketTimeoutMS = 30000;\n  if(options.connectTimeoutMS == null) options.connectTimeoutMS = 30000;\n\n  // Create server instances\n  return options.servers.map(function(serverObj) {\n    return serverObj.domain_socket ?\n      new Server(serverObj.domain_socket, 27017, options)\n    : new Server(serverObj.host, serverObj.port, options);\n  });\n}\n\nfunction relayEvents(self, db) {\n  if(self instanceof MongoClient) {\n    var events = [\"timeout\", \"close\", 'serverOpening', 'serverDescriptionChanged', 'serverHeartbeatStarted',\n      'serverHeartbeatSucceeded', 'serverHeartbeatFailed', 'serverClosed', 'topologyOpening',\n      'topologyClosed', 'topologyDescriptionChanged', 'joined', 'left', 'ping', 'ha', 'all', 'fullsetup'];\n    events.forEach(function(event) {\n      db.serverConfig.on(event, function(object1, object2) {\n        self.emit(event, object1, object2);\n      });\n    });\n  }\n}\n\nfunction createReplicaset(self, options, callback) {\n  // Set default options\n  var servers = translateOptions(options);\n  // Create Db instance\n  var db = new Db(options.dbName, new ReplSet(servers, options), options);\n  // Propegate the events to the client\n  relayEvents(self, db);\n  // Open the connection  \n  db.open(callback);\n}\n\nfunction createMongos(self, options, callback) {\n  // Set default options\n  var servers = translateOptions(options);\n  // Create Db instance\n  var db = new Db(options.dbName, new Mongos(servers, options), options)\n  // Propegate the events to the client\n  relayEvents(self, db);\n  // Open the connection  \n  db.open(callback);\n}\n\nfunction createServer(self, options, callback) {\n  // Set default options\n  var servers = translateOptions(options);\n  // Create db instance\n  var db = new Db(options.dbName, servers[0], options);\n  // Propegate the events to the client\n  relayEvents(self, db);\n  // Create Db instance\n  db.open(function(err, db) {\n    if(err) return callback(err);\n    // Check if we are really speaking to a mongos\n    var ismaster = db.serverConfig.lastIsMaster();\n\n    // Do we actually have a mongos\n    if(ismaster && ismaster.msg == 'isdbgrid') {\n      // Destroy the current connection\n      db.close();\n      // Create mongos connection instead\n      return createMongos(self, options, callback);\n    }\n\n    // Otherwise callback\n    callback(err, db);\n  });\n}\n\nfunction connectHandler(options, callback) {\n  return function (err, db) {\n    if(err) {\n      return process.nextTick(function() {\n        try {\n          callback(err, null);\n        } catch (err) {\n          if(db) db.close();\n          throw err\n        }\n      });\n    }\n\n    // No authentication just reconnect\n    if(!options.auth) {\n      return process.nextTick(function() {\n        try {\n          callback(err, db);\n        } catch (err) {\n          if(db) db.close();\n          throw err\n        }\n      })\n    }\n\n    // What db to authenticate against\n    var authentication_db = db;\n    if(options.authSource) {\n      authentication_db = db.db(options.authSource);\n    }\n\n    // Authenticate\n    authenticate(authentication_db, options.user, options.password, options, function(err, success) {\n      if(success){\n        process.nextTick(function() {\n          try {\n            callback(null, db);\n          } catch (err) {\n            if(db) db.close();\n            throw err\n          }\n        });\n      } else {\n        if(db) db.close();\n        process.nextTick(function() {\n          try {\n            callback(err ? err : new Error('Could not authenticate user ' + options.auth[0]), null);\n          } catch (err) {\n            if(db) db.close();\n            throw err\n          }\n        });\n      }\n    });\n  }\n}\n\n/*\n * Connect using MongoClient\n */\nvar connect = function(self, url, options, callback) {\n  options = options || {};\n  options = shallowClone(options);\n\n  // If callback is null throw an exception\n  if(callback == null) {\n    throw new Error(\"no callback function provided\");\n  }\n\n  // Get a logger for MongoClient\n  var logger = Logger('MongoClient', options);\n\n  // Parse the string\n  var object = parse(url, options);\n  var _finalOptions = createUnifiedOptions({}, object);\n  _finalOptions = mergeOptions(_finalOptions, object, false);\n  _finalOptions = createUnifiedOptions(_finalOptions, options);\n\n  // Check if we have connection and socket timeout set\n  if(_finalOptions.socketTimeoutMS == null) _finalOptions.socketTimeoutMS = 30000;\n  if(_finalOptions.connectTimeoutMS == null) _finalOptions.connectTimeoutMS = 30000;\n\n  // Failure modes\n  if(object.servers.length == 0) {\n    throw new Error(\"connection string must contain at least one seed host\");\n  }\n\n  function connectCallback(err, db) {\n    if(err && err.message == 'no mongos proxies found in seed list') {\n      if(logger.isWarn()) {\n        logger.warn(f('seed list contains no mongos proxies, replicaset connections requires the parameter replicaSet to be supplied in the URI or options object, mongodb://server:port/db?replicaSet=name'));\n      }\n\n      // Return a more specific error message for MongoClient.connect\n      return callback(new MongoError('seed list contains no mongos proxies, replicaset connections requires the parameter replicaSet to be supplied in the URI or options object, mongodb://server:port/db?replicaSet=name'));\n    }\n\n    // Return the error and db instance\n    callback(err, db);\n  }\n\n  // Do we have a replicaset then skip discovery and go straight to connectivity\n  if(_finalOptions.replicaSet || _finalOptions.rs_name) {\n    return createReplicaset(self, _finalOptions, connectHandler(_finalOptions, connectCallback));\n  } else if(object.servers.length > 1) {\n    return createMongos(self, _finalOptions, connectHandler(_finalOptions, connectCallback));\n  } else {\n    return createServer(self, _finalOptions, connectHandler(_finalOptions, connectCallback));\n  }\n}\n\nmodule.exports = MongoClient\n"]}