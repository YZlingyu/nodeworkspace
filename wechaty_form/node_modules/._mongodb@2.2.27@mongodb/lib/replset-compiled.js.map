{"version":3,"sources":["replset.js"],"names":[],"mappings":"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","file":"replset-compiled.js","sourcesContent":["\"use strict\";\n\nvar EventEmitter = require('events').EventEmitter\n  , inherits = require('util').inherits\n  , f = require('util').format\n  , Server = require('./server')\n  , Cursor = require('./cursor')\n  , AggregationCursor = require('./aggregation_cursor')\n  , CommandCursor = require('./command_cursor')\n  , ReadPreference = require('./read_preference')\n  , MongoError = require('mongodb-core').MongoError\n  , ServerCapabilities = require('./topology_base').ServerCapabilities\n  , Store = require('./topology_base').Store\n  , Define = require('./metadata')\n  , CReplSet = require('mongodb-core').ReplSet\n  , CoreReadPreference = require('mongodb-core').ReadPreference\n  , MAX_JS_INT = require('./utils').MAX_JS_INT\n  , translateOptions = require('./utils').translateOptions\n  , filterOptions = require('./utils').filterOptions\n  , getReadPreference = require('./utils').getReadPreference\n  , mergeOptions = require('./utils').mergeOptions\n  , os = require('os');\n/**\n * @fileOverview The **ReplSet** class is a class that represents a Replicaset topology and is\n * used to construct connections.\n *\n * **ReplSet Should not be used, use MongoClient.connect**\n * @example\n * var Db = require('mongodb').Db,\n *   ReplSet = require('mongodb').ReplSet,\n *   Server = require('mongodb').Server,\n *   test = require('assert');\n * // Connect using ReplSet\n * var server = new Server('localhost', 27017);\n * var db = new Db('test', new ReplSet([server]));\n * db.open(function(err, db) {\n *   // Get an additional db\n *   db.close();\n * });\n */\n\n// Allowed parameters\nvar legalOptionNames = ['ha', 'haInterval', 'replicaSet', 'rs_name', 'secondaryAcceptableLatencyMS'\n  , 'connectWithNoPrimary', 'poolSize', 'ssl', 'checkServerIdentity', 'sslValidate'\n  , 'sslCA', 'sslCert', 'sslCRL', 'sslKey', 'sslPass', 'socketOptions', 'bufferMaxEntries'\n  , 'store', 'auto_reconnect', 'autoReconnect', 'emitError'\n  , 'keepAlive', 'noDelay', 'connectTimeoutMS', 'socketTimeoutMS', 'strategy', 'debug'\n  , 'loggerLevel', 'logger', 'reconnectTries', 'appname', 'domainsEnabled'\n  , 'servername', 'promoteLongs', 'promoteValues', 'promoteBuffers', 'maxStalenessSeconds'];\n\n// Get package.json variable\nvar driverVersion = require('../package.json').version;\nvar nodejsversion = f('Node.js %s, %s', process.version, os.endianness());\nvar type = os.type();\nvar name = process.platform;\nvar architecture = process.arch;\nvar release = os.release();\n\n/**\n * Creates a new ReplSet instance\n * @class\n * @deprecated\n * @param {Server[]} servers A seedlist of servers participating in the replicaset.\n * @param {object} [options=null] Optional settings.\n * @param {booelan} [options.ha=true] Turn on high availability monitoring.\n * @param {number} [options.haInterval=10000] Time between each replicaset status check.\n * @param {string} [options.replicaSet] The name of the replicaset to connect to.\n * @param {number} [options.secondaryAcceptableLatencyMS=15] Sets the range of servers to pick when using NEAREST (lowest ping ms + the latency fence, ex: range of 1 to (1 + 15) ms)\n * @param {boolean} [options.connectWithNoPrimary=false] Sets if the driver should connect even if no primary is available\n * @param {number} [options.poolSize=5] Number of connections in the connection pool for each server instance, set to 5 as default for legacy reasons.\n * @param {boolean} [options.ssl=false] Use ssl connection (needs to have a mongod server with ssl support)\n * @param {boolean|function} [options.checkServerIdentity=true] Ensure we check server identify during SSL, set to false to disable checking. Only works for Node 0.12.x or higher. You can pass in a boolean or your own checkServerIdentity override function.\n * @param {object} [options.sslValidate=true] Validate mongod server certificate against ca (needs to have a mongod server with ssl support, 2.4 or higher)\n * @param {array} [options.sslCA=null] Array of valid certificates either as Buffers or Strings (needs to have a mongod server with ssl support, 2.4 or higher)\n * @param {array} [options.sslCRL=null] Array of revocation certificates either as Buffers or Strings (needs to have a mongod server with ssl support, 2.4 or higher)\n * @param {(Buffer|string)} [options.sslCert=null] String or buffer containing the certificate we wish to present (needs to have a mongod server with ssl support, 2.4 or higher)\n * @param {(Buffer|string)} [options.sslKey=null] String or buffer containing the certificate private key we wish to present (needs to have a mongod server with ssl support, 2.4 or higher)\n * @param {(Buffer|string)} [options.sslPass=null] String or buffer containing the certificate password (needs to have a mongod server with ssl support, 2.4 or higher)\n * @param {string} [options.servername=null] String containing the server name requested via TLS SNI.\n * @param {object} [options.socketOptions=null] Socket options\n * @param {boolean} [options.socketOptions.noDelay=true] TCP Socket NoDelay option.\n * @param {number} [options.socketOptions.keepAlive=0] TCP KeepAlive on the socket with a X ms delay before start.\n * @param {number} [options.socketOptions.connectTimeoutMS=10000] TCP Connection timeout setting\n * @param {number} [options.socketOptions.socketTimeoutMS=0] TCP Socket timeout setting\n * @param {boolean} [options.domainsEnabled=false] Enable the wrapping of the callback in the current domain, disabled by default to avoid perf hit.\n * @param {number} [options.maxStalenessSeconds=undefined] The max staleness to secondary reads (values under 10 seconds cannot be guaranteed);\n * @fires ReplSet#connect\n * @fires ReplSet#ha\n * @fires ReplSet#joined\n * @fires ReplSet#left\n * @fires ReplSet#fullsetup\n * @fires ReplSet#open\n * @fires ReplSet#close\n * @fires ReplSet#error\n * @fires ReplSet#timeout\n * @fires ReplSet#parseError\n * @property {string} parserType the parser type used (c++ or js).\n * @return {ReplSet} a ReplSet instance.\n */\nvar ReplSet = function(servers, options) {\n  if(!(this instanceof ReplSet)) return new ReplSet(servers, options);\n  options = options || {};\n  var self = this;\n  // Set up event emitter\n  EventEmitter.call(this);\n\n  // Filter the options\n  options = filterOptions(options, legalOptionNames);\n\n  // Ensure all the instances are Server\n  for(var i = 0; i < servers.length; i++) {\n    if(!(servers[i] instanceof Server)) {\n      throw MongoError.create({message: \"all seed list instances must be of the Server type\", driver:true});\n    }\n  }\n\n  // Stored options\n  var storeOptions = {\n      force: false\n    , bufferMaxEntries: typeof options.bufferMaxEntries == 'number' ? options.bufferMaxEntries : MAX_JS_INT\n  }\n\n  // Shared global store\n  var store = options.store || new Store(self, storeOptions);\n\n  // Build seed list\n  var seedlist = servers.map(function(x) {\n    return {host: x.host, port: x.port}\n  });\n\n  // Clone options\n  var clonedOptions = mergeOptions({}, {\n    disconnectHandler: store,\n    cursorFactory: Cursor,\n    reconnect: false,\n    emitError: typeof options.emitError == 'boolean' ? options.emitError : true,\n    size: typeof options.poolSize == 'number' ? options.poolSize : 5\n  });\n\n  // Translate any SSL options and other connectivity options\n  clonedOptions = translateOptions(clonedOptions, options);\n\n  // Socket options\n  var socketOptions = options.socketOptions && Object.keys(options.socketOptions).length > 0\n    ? options.socketOptions : options;\n\n  // Translate all the options to the mongodb-core ones\n  clonedOptions = translateOptions(clonedOptions, socketOptions);\n  if(typeof clonedOptions.keepAlive == 'number') {\n    clonedOptions.keepAliveInitialDelay = clonedOptions.keepAlive;\n    clonedOptions.keepAlive = clonedOptions.keepAlive > 0;\n  }\n\n  // Client info\n  this.clientInfo = {\n    driver: {\n      name: \"nodejs\",\n      version: driverVersion\n    },\n    os: {\n      type: type,\n      name: name,\n      architecture: architecture,\n      version: release\n    },\n    platform: nodejsversion\n  }\n\n  // Build default client information\n  clonedOptions.clientInfo = this.clientInfo;\n  // Do we have an application specific string\n  if(options.appname) {\n    clonedOptions.clientInfo.application = { name: options.appname };\n  }\n\n  // Create the ReplSet\n  var replset = new CReplSet(seedlist, clonedOptions);\n\n  // Listen to reconnect event\n  replset.on('reconnect', function() {\n    self.emit('reconnect');\n    store.execute();\n  });\n\n  // Internal state\n  this.s = {\n    // Replicaset\n    replset: replset\n    // Server capabilities\n    , sCapabilities: null\n    // Debug tag\n    , tag: options.tag\n    // Store options\n    , storeOptions: storeOptions\n    // Cloned options\n    , clonedOptions: clonedOptions\n    // Store\n    , store: store\n    // Options\n    , options: options\n  }\n\n  // Debug\n  if(clonedOptions.debug) {\n    // Last ismaster\n    Object.defineProperty(this, 'replset', {\n      enumerable:true, get: function() { return replset; }\n    });\n  }\n}\n\n/**\n * @ignore\n */\ninherits(ReplSet, EventEmitter);\n\n// Last ismaster\nObject.defineProperty(ReplSet.prototype, 'isMasterDoc', {\n  enumerable:true, get: function() { return this.s.replset.lastIsMaster(); }\n});\n\nObject.defineProperty(ReplSet.prototype, 'parserType', {\n  enumerable:true, get: function() {\n    return this.s.replset.parserType;\n  }\n});\n\n// BSON property\nObject.defineProperty(ReplSet.prototype, 'bson', {\n  enumerable: true, get: function() {\n    return this.s.replset.s.bson;\n  }\n});\n\nObject.defineProperty(ReplSet.prototype, 'haInterval', {\n  enumerable:true, get: function() { return this.s.replset.s.haInterval; }\n});\n\nvar define = ReplSet.define = new Define('ReplSet', ReplSet, false);\n\n// Ensure the right read Preference object\nvar translateReadPreference = function(options) {\n  if(typeof options.readPreference == 'string') {\n    options.readPreference = new CoreReadPreference(options.readPreference);\n  } else if(options.readPreference instanceof ReadPreference) {\n    options.readPreference = new CoreReadPreference(options.readPreference.mode\n      , options.readPreference.tags, {maxStalenessSeconds: options.readPreference.maxStalenessSeconds});\n  }\n\n  return options;\n}\n\n// Connect method\nReplSet.prototype.connect = function(db, _options, callback) {\n  var self = this;\n  if('function' === typeof _options) callback = _options, _options = {};\n  if(_options == null) _options = {};\n  if(!('function' === typeof callback)) callback = null;\n  self.s.options = _options;\n\n  // Update bufferMaxEntries\n  self.s.storeOptions.bufferMaxEntries = db.bufferMaxEntries;\n\n  // Actual handler\n  var errorHandler = function(event) {\n    return function(err) {\n      if(event != 'error') {\n        self.emit(event, err);\n      }\n    }\n  }\n\n  // Clear out all the current handlers left over\n  var events = [\"timeout\", \"error\", \"close\", 'serverOpening', 'serverDescriptionChanged', 'serverHeartbeatStarted',\n    'serverHeartbeatSucceeded', 'serverHeartbeatFailed', 'serverClosed', 'topologyOpening',\n    'topologyClosed', 'topologyDescriptionChanged', 'joined', 'left', 'ping', 'ha'];\n  events.forEach(function(e) {\n    self.s.replset.removeAllListeners(e);\n  });\n\n  // relay the event\n  var relay = function(event) {\n    return function(t, server) {\n      self.emit(event, t, server);\n    }\n  }\n\n  // Replset events relay\n  var replsetRelay = function(event) {\n    return function(t, server) {\n      self.emit(event, t, server.lastIsMaster(), server);\n    }\n  }\n\n  // Relay ha\n  var relayHa = function(t, state) {\n    self.emit('ha', t, state);\n\n    if(t == 'start') {\n      self.emit('ha_connect', t, state);\n    } else if(t == 'end') {\n      self.emit('ha_ismaster', t, state);\n    }\n  }\n\n  // Set up serverConfig listeners\n  self.s.replset.on('joined', replsetRelay('joined'));\n  self.s.replset.on('left', relay('left'));\n  self.s.replset.on('ping', relay('ping'));\n  self.s.replset.on('ha', relayHa);\n\n  // Set up SDAM listeners\n  self.s.replset.on('serverDescriptionChanged', relay('serverDescriptionChanged'));\n  self.s.replset.on('serverHeartbeatStarted', relay('serverHeartbeatStarted'));\n  self.s.replset.on('serverHeartbeatSucceeded', relay('serverHeartbeatSucceeded'));\n  self.s.replset.on('serverHeartbeatFailed', relay('serverHeartbeatFailed'));\n  self.s.replset.on('serverOpening', relay('serverOpening'));\n  self.s.replset.on('serverClosed', relay('serverClosed'));\n  self.s.replset.on('topologyOpening', relay('topologyOpening'));\n  self.s.replset.on('topologyClosed', relay('topologyClosed'));\n  self.s.replset.on('topologyDescriptionChanged', relay('topologyDescriptionChanged'));\n\n  self.s.replset.on('fullsetup', function() {\n    self.emit('fullsetup', null, self);\n  });\n\n  self.s.replset.on('all', function() {\n    self.emit('all', null, self);\n  });\n\n  // Connect handler\n  var connectHandler = function() {\n    // Set up listeners\n    self.s.replset.once('timeout', errorHandler('timeout'));\n    self.s.replset.once('error', errorHandler('error'));\n    self.s.replset.once('close', errorHandler('close'));\n\n    // // Set up serverConfig listeners\n    // self.s.replset.on('joined', replsetRelay('joined'));\n    // self.s.replset.on('left', relay('left'));\n    // self.s.replset.on('ping', relay('ping'));\n    // self.s.replset.on('ha', relayHa);\n\n    // // Set up SDAM listeners\n    // self.s.replset.on('serverDescriptionChanged', relay('serverDescriptionChanged'));\n    // self.s.replset.on('serverHeartbeatStarted', relay('serverHeartbeatStarted'));\n    // self.s.replset.on('serverHeartbeatSucceeded', relay('serverHeartbeatSucceeded'));\n    // self.s.replset.on('serverHeartbeatFailed', relay('serverHeartbeatFailed'));\n    // self.s.replset.on('serverOpening', relay('serverOpening'));\n    // self.s.replset.on('serverClosed', relay('serverClosed'));\n    // self.s.replset.on('topologyOpening', relay('topologyOpening'));\n    // self.s.replset.on('topologyClosed', relay('topologyClosed'));\n    // self.s.replset.on('topologyDescriptionChanged', relay('topologyDescriptionChanged'));\n\n    // self.s.replset.on('fullsetup', function() {\n    //   self.emit('fullsetup', null, self);\n    // });\n\n    // self.s.replset.on('all', function() {\n    //   self.emit('all', null, self);\n    // });\n\n    // Emit open event\n    self.emit('open', null, self);\n\n    // Return correctly\n    try {\n      callback(null, self);\n    } catch(err) {\n      process.nextTick(function() { throw err; })\n    }\n  }\n\n  // Error handler\n  var connectErrorHandler = function() {\n    return function(err) {\n      ['timeout', 'error', 'close'].forEach(function(e) {\n        self.s.replset.removeListener(e, connectErrorHandler);\n      });\n\n      self.s.replset.removeListener('connect', connectErrorHandler);\n      // Destroy the replset\n      self.s.replset.destroy();\n\n      // Try to callback\n      try {\n        callback(err);\n      } catch(err) {\n        if(!self.s.replset.isConnected())\n          process.nextTick(function() { throw err; })\n      }\n    }\n  }\n\n  // Set up listeners\n  self.s.replset.once('timeout', connectErrorHandler('timeout'));\n  self.s.replset.once('error', connectErrorHandler('error'));\n  self.s.replset.once('close', connectErrorHandler('close'));\n  self.s.replset.once('connect', connectHandler);\n\n  // Start connection\n  self.s.replset.connect(_options);\n}\n\n// Server capabilities\nReplSet.prototype.capabilities = function() {\n  if(this.s.sCapabilities) return this.s.sCapabilities;\n  if(this.s.replset.lastIsMaster() == null) return null;\n  this.s.sCapabilities = new ServerCapabilities(this.s.replset.lastIsMaster());\n  return this.s.sCapabilities;\n}\n\ndefine.classMethod('capabilities', {callback: false, promise:false, returns: [ServerCapabilities]});\n\n// Command\nReplSet.prototype.command = function(ns, cmd, options, callback) {\n  this.s.replset.command(ns, cmd, getReadPreference(options), callback);\n}\n\ndefine.classMethod('command', {callback: true, promise:false});\n\n// Insert\nReplSet.prototype.insert = function(ns, ops, options, callback) {\n  this.s.replset.insert(ns, ops, options, callback);\n}\n\ndefine.classMethod('insert', {callback: true, promise:false});\n\n// Update\nReplSet.prototype.update = function(ns, ops, options, callback) {\n  this.s.replset.update(ns, ops, options, callback);\n}\n\ndefine.classMethod('update', {callback: true, promise:false});\n\n// Remove\nReplSet.prototype.remove = function(ns, ops, options, callback) {\n  this.s.replset.remove(ns, ops, options, callback);\n}\n\ndefine.classMethod('remove', {callback: true, promise:false});\n\n// Destroyed\nReplSet.prototype.isDestroyed = function() {\n  return this.s.replset.isDestroyed();\n}\n\n// IsConnected\nReplSet.prototype.isConnected = function(options) {\n  options = options || {};\n\n  // If we passed in a readPreference, translate to\n  // a CoreReadPreference instance\n  if(options.readPreference) {\n    options.readPreference = translateReadPreference(options.readPreference);\n  }\n\n  return this.s.replset.isConnected(options);\n}\n\ndefine.classMethod('isConnected', {callback: false, promise:false, returns: [Boolean]});\n\n// Insert\nReplSet.prototype.cursor = function(ns, cmd, options) {\n  options = translateReadPreference(options);\n  options.disconnectHandler = this.s.store;\n  return this.s.replset.cursor(ns, cmd, options);\n}\n\ndefine.classMethod('cursor', {callback: false, promise:false, returns: [Cursor, AggregationCursor, CommandCursor]});\n\nReplSet.prototype.lastIsMaster = function() {\n  return this.s.replset.lastIsMaster();\n}\n\n/**\n * Unref all sockets\n * @method\n */\nReplSet.prototype.unref = function() {\n  return this.s.replset.unref();\n}\n\nReplSet.prototype.close = function(forceClosed) {\n  var self = this;\n  // Call destroy on the topology\n  this.s.replset.destroy({\n    force: typeof forceClosed == 'boolean' ? forceClosed : false,\n  });\n  // We need to wash out all stored processes\n  if(forceClosed == true) {\n    this.s.storeOptions.force = forceClosed;\n    this.s.store.flush();\n  }\n\n  var events = ['timeout', 'error', 'close', 'joined', 'left'];\n  events.forEach(function(e) {\n    self.removeAllListeners(e);\n  });\n}\n\ndefine.classMethod('close', {callback: false, promise:false});\n\nReplSet.prototype.auth = function() {\n  var args = Array.prototype.slice.call(arguments, 0);\n  this.s.replset.auth.apply(this.s.replset, args);\n}\n\ndefine.classMethod('auth', {callback: true, promise:false});\n\nReplSet.prototype.logout = function() {\n  var args = Array.prototype.slice.call(arguments, 0);\n  this.s.replset.logout.apply(this.s.replset, args);\n}\n\ndefine.classMethod('logout', {callback: true, promise:false});\n\n/**\n * All raw connections\n * @method\n * @return {array}\n */\nReplSet.prototype.connections = function() {\n  return this.s.replset.connections();\n}\n\ndefine.classMethod('connections', {callback: false, promise:false, returns:[Array]});\n\n/**\n * A replset connect event, used to verify that the connection is up and running\n *\n * @event ReplSet#connect\n * @type {ReplSet}\n */\n\n/**\n * The replset high availability event\n *\n * @event ReplSet#ha\n * @type {function}\n * @param {string} type The stage in the high availability event (start|end)\n * @param {boolean} data.norepeat This is a repeating high availability process or a single execution only\n * @param {number} data.id The id for this high availability request\n * @param {object} data.state An object containing the information about the current replicaset\n */\n\n/**\n * A server member left the replicaset\n *\n * @event ReplSet#left\n * @type {function}\n * @param {string} type The type of member that left (primary|secondary|arbiter)\n * @param {Server} server The server object that left\n */\n\n/**\n * A server member joined the replicaset\n *\n * @event ReplSet#joined\n * @type {function}\n * @param {string} type The type of member that joined (primary|secondary|arbiter)\n * @param {Server} server The server object that joined\n */\n\n/**\n * ReplSet open event, emitted when replicaset can start processing commands.\n *\n * @event ReplSet#open\n * @type {Replset}\n */\n\n/**\n * ReplSet fullsetup event, emitted when all servers in the topology have been connected to.\n *\n * @event ReplSet#fullsetup\n * @type {Replset}\n */\n\n/**\n * ReplSet close event\n *\n * @event ReplSet#close\n * @type {object}\n */\n\n/**\n * ReplSet error event, emitted if there is an error listener.\n *\n * @event ReplSet#error\n * @type {MongoError}\n */\n\n/**\n * ReplSet timeout event\n *\n * @event ReplSet#timeout\n * @type {object}\n */\n\n/**\n * ReplSet parseError event\n *\n * @event ReplSet#parseError\n * @type {object}\n */\n\nmodule.exports = ReplSet;\n"]}