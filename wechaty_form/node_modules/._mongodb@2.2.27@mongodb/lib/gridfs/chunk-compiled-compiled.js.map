{"version":3,"sources":["chunk-compiled.js"],"names":[],"mappings":"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","file":"chunk-compiled-compiled.js","sourcesContent":["\"use strict\";\n\nvar Binary = require('mongodb-core').BSON.Binary,\n    ObjectID = require('mongodb-core').BSON.ObjectID;\n\n/**\n * Class for representing a single chunk in GridFS.\n *\n * @class\n *\n * @param file {GridStore} The {@link GridStore} object holding this chunk.\n * @param mongoObject {object} The mongo object representation of this chunk.\n *\n * @throws Error when the type of data field for {@link mongoObject} is not\n *     supported. Currently supported types for data field are instances of\n *     {@link String}, {@link Array}, {@link Binary} and {@link Binary}\n *     from the bson module\n *\n * @see Chunk#buildMongoObject\n */\nvar Chunk = function (file, mongoObject, writeConcern) {\n  if (!(this instanceof Chunk)) return new Chunk(file, mongoObject);\n\n  this.file = file;\n  var mongoObjectFinal = mongoObject == null ? {} : mongoObject;\n  this.writeConcern = writeConcern || { w: 1 };\n  this.objectId = mongoObjectFinal._id == null ? new ObjectID() : mongoObjectFinal._id;\n  this.chunkNumber = mongoObjectFinal.n == null ? 0 : mongoObjectFinal.n;\n  this.data = new Binary();\n\n  if (typeof mongoObjectFinal.data == \"string\") {\n    var buffer = new Buffer(mongoObjectFinal.data.length);\n    buffer.write(mongoObjectFinal.data, 0, mongoObjectFinal.data.length, 'binary');\n    this.data = new Binary(buffer);\n  } else if (Array.isArray(mongoObjectFinal.data)) {\n    buffer = new Buffer(mongoObjectFinal.data.length);\n    var data = mongoObjectFinal.data.join('');\n    buffer.write(data, 0, data.length, 'binary');\n    this.data = new Binary(buffer);\n  } else if (mongoObjectFinal.data && mongoObjectFinal.data._bsontype === 'Binary') {\n    this.data = mongoObjectFinal.data;\n  } else if (!Buffer.isBuffer(mongoObjectFinal.data) && !(mongoObjectFinal.data == null)) {\n    throw Error(\"Illegal chunk format\");\n  }\n\n  // Update position\n  this.internalPosition = 0;\n};\n\n/**\n * Writes a data to this object and advance the read/write head.\n *\n * @param data {string} the data to write\n * @param callback {function(*, GridStore)} This will be called after executing\n *     this method. The first parameter will contain null and the second one\n *     will contain a reference to this object.\n */\nChunk.prototype.write = function (data, callback) {\n  this.data.write(data, this.internalPosition, data.length, 'binary');\n  this.internalPosition = this.data.length();\n  if (callback != null) return callback(null, this);\n  return this;\n};\n\n/**\n * Reads data and advances the read/write head.\n *\n * @param length {number} The length of data to read.\n *\n * @return {string} The data read if the given length will not exceed the end of\n *     the chunk. Returns an empty String otherwise.\n */\nChunk.prototype.read = function (length) {\n  // Default to full read if no index defined\n  length = length == null || length == 0 ? this.length() : length;\n\n  if (this.length() - this.internalPosition + 1 >= length) {\n    var data = this.data.read(this.internalPosition, length);\n    this.internalPosition = this.internalPosition + length;\n    return data;\n  } else {\n    return '';\n  }\n};\n\nChunk.prototype.readSlice = function (length) {\n  if (this.length() - this.internalPosition >= length) {\n    var data = null;\n    if (this.data.buffer != null) {\n      //Pure BSON\n      data = this.data.buffer.slice(this.internalPosition, this.internalPosition + length);\n    } else {\n      //Native BSON\n      data = new Buffer(length);\n      length = this.data.readInto(data, this.internalPosition);\n    }\n    this.internalPosition = this.internalPosition + length;\n    return data;\n  } else {\n    return null;\n  }\n};\n\n/**\n * Checks if the read/write head is at the end.\n *\n * @return {boolean} Whether the read/write head has reached the end of this\n *     chunk.\n */\nChunk.prototype.eof = function () {\n  return this.internalPosition == this.length() ? true : false;\n};\n\n/**\n * Reads one character from the data of this chunk and advances the read/write\n * head.\n *\n * @return {string} a single character data read if the the read/write head is\n *     not at the end of the chunk. Returns an empty String otherwise.\n */\nChunk.prototype.getc = function () {\n  return this.read(1);\n};\n\n/**\n * Clears the contents of the data in this chunk and resets the read/write head\n * to the initial position.\n */\nChunk.prototype.rewind = function () {\n  this.internalPosition = 0;\n  this.data = new Binary();\n};\n\n/**\n * Saves this chunk to the database. Also overwrites existing entries having the\n * same id as this chunk.\n *\n * @param callback {function(*, GridStore)} This will be called after executing\n *     this method. The first parameter will contain null and the second one\n *     will contain a reference to this object.\n */\nChunk.prototype.save = function (options, callback) {\n  var self = this;\n  if (typeof options == 'function') {\n    callback = options;\n    options = {};\n  }\n\n  self.file.chunkCollection(function (err, collection) {\n    if (err) return callback(err);\n\n    // Merge the options\n    var writeOptions = { upsert: true };\n    for (var name in options) writeOptions[name] = options[name];\n    for (name in self.writeConcern) writeOptions[name] = self.writeConcern[name];\n\n    if (self.data.length() > 0) {\n      self.buildMongoObject(function (mongoObject) {\n        var options = { forceServerObjectId: true };\n        for (var name in self.writeConcern) {\n          options[name] = self.writeConcern[name];\n        }\n\n        collection.replaceOne({ '_id': self.objectId }, mongoObject, writeOptions, function (err) {\n          callback(err, self);\n        });\n      });\n    } else {\n      callback(null, self);\n    }\n    // });\n  });\n};\n\n/**\n * Creates a mongoDB object representation of this chunk.\n *\n * @param callback {function(Object)} This will be called after executing this\n *     method. The object will be passed to the first parameter and will have\n *     the structure:\n *\n *        <pre><code>\n *        {\n *          '_id' : , // {number} id for this chunk\n *          'files_id' : , // {number} foreign key to the file collection\n *          'n' : , // {number} chunk number\n *          'data' : , // {bson#Binary} the chunk data itself\n *        }\n *        </code></pre>\n *\n * @see <a href=\"http://www.mongodb.org/display/DOCS/GridFS+Specification#GridFSSpecification-{{chunks}}\">MongoDB GridFS Chunk Object Structure</a>\n */\nChunk.prototype.buildMongoObject = function (callback) {\n  var mongoObject = {\n    'files_id': this.file.fileId,\n    'n': this.chunkNumber,\n    'data': this.data };\n  // If we are saving using a specific ObjectId\n  if (this.objectId != null) mongoObject._id = this.objectId;\n\n  callback(mongoObject);\n};\n\n/**\n * @return {number} the length of the data\n */\nChunk.prototype.length = function () {\n  return this.data.length();\n};\n\n/**\n * The position of the read/write head\n * @name position\n * @lends Chunk#\n * @field\n */\nObject.defineProperty(Chunk.prototype, \"position\", { enumerable: true,\n  get: function () {\n    return this.internalPosition;\n  },\n  set: function (value) {\n    this.internalPosition = value;\n  }\n});\n\n/**\n * The default chunk size\n * @constant\n */\nChunk.DEFAULT_CHUNK_SIZE = 1024 * 255;\n\nmodule.exports = Chunk;\n\n//# sourceMappingURL=chunk-compiled.js.map"]}