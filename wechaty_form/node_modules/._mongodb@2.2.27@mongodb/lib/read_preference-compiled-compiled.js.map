{"version":3,"sources":["read_preference-compiled.js"],"names":[],"mappings":"AAAA;;AAEA;;;;;;;;;;;;;;;;;;;;;;;;;AAyBA;;;;;;;;;;;;;;;;;;AAkBA,IAAI,iBAAiB,UAAU,IAAV,EAAgB,IAAhB,EAAsB,OAAtB,EAA+B;AAClD,MAAI,EAAE,gBAAgB,cAAlB,CAAJ,EAAuC;AACrC,WAAO,IAAI,cAAJ,CAAmB,IAAnB,EAAyB,IAAzB,EAA+B,OAA/B,CAAP;AACD;;AAED,OAAK,KAAL,GAAa,gBAAb;AACA,OAAK,IAAL,GAAY,IAAZ;AACA,OAAK,IAAL,GAAY,IAAZ;AACA,OAAK,OAAL,GAAe,OAAf;;AAEA;AACA,MAAI,QAAQ,OAAO,IAAP,IAAe,QAAvB,IAAmC,CAAC,MAAM,OAAN,CAAc,IAAd,CAAxC,EAA6D;AAC3D,QAAI,KAAK,mBAAT,EAA8B;AAC5B,WAAK,OAAL,GAAe,IAAf;AACA,WAAK,IAAL,GAAY,IAAZ;AACD;AACF;;AAED;AACA,MAAI,KAAK,OAAL,IAAgB,KAAK,OAAL,CAAa,mBAAjC,EAAsD;AACpD,SAAK,mBAAL,GAA2B,KAAK,OAAL,CAAa,mBAAxC;AACD;AACF,CAtBD;;AAwBA;;;;;;;AAOA,eAAe,OAAf,GAAyB,UAAU,KAAV,EAAiB;AACxC,SAAO,SAAS,eAAe,OAAxB,IAAmC,SAAS,eAAe,iBAA3D,IAAgF,SAAS,eAAe,SAAxG,IAAqH,SAAS,eAAe,mBAA7I,IAAoK,SAAS,eAAe,OAA5L,IAAuM,SAAS,IAAhN,IAAwN,SAAS,KAAjO,IAA0O,SAAS,IAA1P;AACD,CAFD;;AAIA;;;;;;;AAOA,eAAe,SAAf,CAAyB,OAAzB,GAAmC,UAAU,IAAV,EAAgB;AACjD,MAAI,QAAQ,OAAO,IAAP,IAAe,QAAf,GAA0B,IAA1B,GAAiC,KAAK,IAAlD;AACA,SAAO,eAAe,OAAf,CAAuB,KAAvB,CAAP;AACD,CAHD;;AAKA;;;AAGA,eAAe,SAAf,CAAyB,QAAzB,GAAoC,YAAY;AAC9C,MAAI,SAAS,EAAE,MAAM,KAAK,IAAb,EAAb;;AAEA,MAAI,KAAK,IAAL,IAAa,IAAjB,EAAuB;AACrB,WAAO,MAAP,IAAiB,KAAK,IAAtB;AACD;;AAED,MAAI,KAAK,mBAAT,EAA8B;AAC5B,WAAO,qBAAP,IAAgC,KAAK,mBAArC;AACD;;AAED,SAAO,MAAP;AACD,CAZD;;AAcA;;;AAGA,eAAe,SAAf,CAAyB,MAAzB,GAAkC,YAAY;AAC5C,SAAO,KAAK,QAAL,EAAP;AACD,CAFD;;AAIA;;;AAGA,eAAe,OAAf,GAAyB,SAAzB;AACA,eAAe,iBAAf,GAAmC,kBAAnC;AACA,eAAe,SAAf,GAA2B,WAA3B;AACA,eAAe,mBAAf,GAAqC,oBAArC;AACA,eAAe,OAAf,GAAyB,SAAzB;;AAEA;;;AAGA,OAAO,OAAP,GAAiB,cAAjB;;AAEA","file":"read_preference-compiled-compiled.js","sourcesContent":["\"use strict\";\n\n/**\n * @fileOverview The **ReadPreference** class is a class that represents a MongoDB ReadPreference and is\n * used to construct connections.\n *\n * @example\n * var Db = require('mongodb').Db,\n *   ReplSet = require('mongodb').ReplSet,\n *   Server = require('mongodb').Server,\n *   ReadPreference = require('mongodb').ReadPreference,\n *   test = require('assert');\n * // Connect using ReplSet\n * var server = new Server('localhost', 27017);\n * var db = new Db('test', new ReplSet([server]));\n * db.open(function(err, db) {\n *   test.equal(null, err);\n *   // Perform a read\n *   var cursor = db.collection('t').find({});\n *   cursor.setReadPreference(ReadPreference.PRIMARY);\n *   cursor.toArray(function(err, docs) {\n *     test.equal(null, err);\n *     db.close();\n *   });\n * });\n */\n\n/**\n * Creates a new ReadPreference instance\n *\n * Read Preferences\n *  - **ReadPreference.PRIMARY**, Read from primary only. All operations produce an error (throw an exception where applicable) if primary is unavailable. Cannot be combined with tags (This is the default.).\n *  - **ReadPreference.PRIMARY_PREFERRED**, Read from primary if available, otherwise a secondary.\n *  - **ReadPreference.SECONDARY**, Read from secondary if available, otherwise error.\n *  - **ReadPreference.SECONDARY_PREFERRED**, Read from a secondary if available, otherwise read from the primary.\n *  - **ReadPreference.NEAREST**, All modes read from among the nearest candidates, but unlike other modes, NEAREST will include both the primary and all secondaries in the random selection.\n *\n * @class\n * @param {string} mode The ReadPreference mode as listed above.\n * @param {array|object} tags An object representing read preference tags.\n * @param {object} [options] Additional read preference options\n * @param {number} [options.maxStalenessSeconds] Max Secondary Read Stalleness in Seconds\n * @return {ReadPreference} a ReadPreference instance.\n */\n\nvar ReadPreference = function (mode, tags, options) {\n  if (!(this instanceof ReadPreference)) {\n    return new ReadPreference(mode, tags, options);\n  }\n\n  this._type = 'ReadPreference';\n  this.mode = mode;\n  this.tags = tags;\n  this.options = options;\n\n  // If no tags were passed in\n  if (tags && typeof tags == 'object' && !Array.isArray(tags)) {\n    if (tags.maxStalenessSeconds) {\n      this.options = tags;\n      this.tags = null;\n    }\n  }\n\n  // Add the maxStalenessSeconds value to the read Preference\n  if (this.options && this.options.maxStalenessSeconds) {\n    this.maxStalenessSeconds = this.options.maxStalenessSeconds;\n  }\n};\n\n/**\n * Validate if a mode is legal\n *\n * @method\n * @param {string} mode The string representing the read preference mode.\n * @return {boolean}\n */\nReadPreference.isValid = function (_mode) {\n  return _mode == ReadPreference.PRIMARY || _mode == ReadPreference.PRIMARY_PREFERRED || _mode == ReadPreference.SECONDARY || _mode == ReadPreference.SECONDARY_PREFERRED || _mode == ReadPreference.NEAREST || _mode == true || _mode == false || _mode == null;\n};\n\n/**\n * Validate if a mode is legal\n *\n * @method\n * @param {string} mode The string representing the read preference mode.\n * @return {boolean}\n */\nReadPreference.prototype.isValid = function (mode) {\n  var _mode = typeof mode == 'string' ? mode : this.mode;\n  return ReadPreference.isValid(_mode);\n};\n\n/**\n * @ignore\n */\nReadPreference.prototype.toObject = function () {\n  var object = { mode: this.mode };\n\n  if (this.tags != null) {\n    object['tags'] = this.tags;\n  }\n\n  if (this.maxStalenessSeconds) {\n    object['maxStalenessSeconds'] = this.maxStalenessSeconds;\n  }\n\n  return object;\n};\n\n/**\n * @ignore\n */\nReadPreference.prototype.toJSON = function () {\n  return this.toObject();\n};\n\n/**\n * @ignore\n */\nReadPreference.PRIMARY = 'primary';\nReadPreference.PRIMARY_PREFERRED = 'primaryPreferred';\nReadPreference.SECONDARY = 'secondary';\nReadPreference.SECONDARY_PREFERRED = 'secondaryPreferred';\nReadPreference.NEAREST = 'nearest';\n\n/**\n * @ignore\n */\nmodule.exports = ReadPreference;\n\n//# sourceMappingURL=read_preference-compiled.js.map"]}