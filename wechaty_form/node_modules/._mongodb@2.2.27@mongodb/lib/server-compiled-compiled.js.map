{"version":3,"sources":["server-compiled.js"],"names":[],"mappings":"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","file":"server-compiled-compiled.js","sourcesContent":["\"use strict\";\n\nvar EventEmitter = require('events').EventEmitter,\n    inherits = require('util').inherits,\n    CServer = require('mongodb-core').Server,\n    Cursor = require('./cursor'),\n    AggregationCursor = require('./aggregation_cursor'),\n    CommandCursor = require('./command_cursor'),\n    f = require('util').format,\n    ServerCapabilities = require('./topology_base').ServerCapabilities,\n    Store = require('./topology_base').Store,\n    Define = require('./metadata'),\n    MongoError = require('mongodb-core').MongoError,\n    MAX_JS_INT = require('./utils').MAX_JS_INT,\n    translateOptions = require('./utils').translateOptions,\n    filterOptions = require('./utils').filterOptions,\n    mergeOptions = require('./utils').mergeOptions,\n    getReadPreference = require('./utils').getReadPreference,\n    os = require('os');\n\n// Get package.json variable\nvar driverVersion = require('../package.json').version;\nvar nodejsversion = f('Node.js %s, %s', process.version, os.endianness());\nvar type = os.type();\nvar name = process.platform;\nvar architecture = process.arch;\nvar release = os.release();\n\n/**\n * @fileOverview The **Server** class is a class that represents a single server topology and is\n * used to construct connections.\n *\n * **Server Should not be used, use MongoClient.connect**\n * @example\n * var Db = require('mongodb').Db,\n *   Server = require('mongodb').Server,\n *   test = require('assert');\n * // Connect using single Server\n * var db = new Db('test', new Server('localhost', 27017););\n * db.open(function(err, db) {\n *   // Get an additional db\n *   db.close();\n * });\n */\n\n// Allowed parameters\nvar legalOptionNames = ['ha', 'haInterval', 'acceptableLatencyMS', 'poolSize', 'ssl', 'checkServerIdentity', 'sslValidate', 'sslCA', 'sslCRL', 'sslCert', 'sslKey', 'sslPass', 'socketOptions', 'bufferMaxEntries', 'store', 'auto_reconnect', 'autoReconnect', 'emitError', 'keepAlive', 'noDelay', 'connectTimeoutMS', 'socketTimeoutMS', 'loggerLevel', 'logger', 'reconnectTries', 'reconnectInterval', 'monitoring', 'appname', 'domainsEnabled', 'servername', 'promoteLongs', 'promoteValues', 'promoteBuffers'];\n\n/**\n * Creates a new Server instance\n * @class\n * @deprecated\n * @param {string} host The host for the server, can be either an IP4, IP6 or domain socket style host.\n * @param {number} [port] The server port if IP4.\n * @param {object} [options=null] Optional settings.\n * @param {number} [options.poolSize=5] Number of connections in the connection pool for each server instance, set to 5 as default for legacy reasons.\n * @param {boolean} [options.ssl=false] Use ssl connection (needs to have a mongod server with ssl support)\n * @param {object} [options.sslValidate=true] Validate mongod server certificate against ca (needs to have a mongod server with ssl support, 2.4 or higher)\n * @param {boolean|function} [options.checkServerIdentity=true] Ensure we check server identify during SSL, set to false to disable checking. Only works for Node 0.12.x or higher. You can pass in a boolean or your own checkServerIdentity override function.\n * @param {array} [options.sslCA=null] Array of valid certificates either as Buffers or Strings (needs to have a mongod server with ssl support, 2.4 or higher)\n * @param {array} [options.sslCRL=null] Array of revocation certificates either as Buffers or Strings (needs to have a mongod server with ssl support, 2.4 or higher)\n * @param {(Buffer|string)} [options.sslCert=null] String or buffer containing the certificate we wish to present (needs to have a mongod server with ssl support, 2.4 or higher)\n * @param {(Buffer|string)} [options.sslKey=null] String or buffer containing the certificate private key we wish to present (needs to have a mongod server with ssl support, 2.4 or higher)\n * @param {(Buffer|string)} [options.sslPass=null] String or buffer containing the certificate password (needs to have a mongod server with ssl support, 2.4 or higher)\n * @param {string} [options.servername=null] String containing the server name requested via TLS SNI.\n * @param {object} [options.socketOptions=null] Socket options\n * @param {boolean} [options.socketOptions.autoReconnect=true] Reconnect on error.\n * @param {boolean} [options.socketOptions.noDelay=true] TCP Socket NoDelay option.\n * @param {number} [options.socketOptions.keepAlive=0] TCP KeepAlive on the socket with a X ms delay before start.\n * @param {number} [options.socketOptions.connectTimeoutMS=0] TCP Connection timeout setting\n * @param {number} [options.socketOptions.socketTimeoutMS=0] TCP Socket timeout setting\n * @param {number} [options.reconnectTries=30] Server attempt to reconnect #times\n * @param {number} [options.reconnectInterval=1000] Server will wait # milliseconds between retries\n * @param {number} [options.monitoring=true] Triggers the server instance to call ismaster\n * @param {number} [options.haInterval=10000] The interval of calling ismaster when monitoring is enabled.\n * @param {boolean} [options.domainsEnabled=false] Enable the wrapping of the callback in the current domain, disabled by default to avoid perf hit.\n * @fires Server#connect\n * @fires Server#close\n * @fires Server#error\n * @fires Server#timeout\n * @fires Server#parseError\n * @fires Server#reconnect\n * @property {string} parserType the parser type used (c++ or js).\n * @return {Server} a Server instance.\n */\nvar Server = function (host, port, options) {\n  options = options || {};\n  if (!(this instanceof Server)) return new Server(host, port, options);\n  EventEmitter.call(this);\n  var self = this;\n\n  // Filter the options\n  options = filterOptions(options, legalOptionNames);\n\n  // Stored options\n  var storeOptions = {\n    force: false,\n    bufferMaxEntries: typeof options.bufferMaxEntries == 'number' ? options.bufferMaxEntries : MAX_JS_INT\n  };\n\n  // Shared global store\n  var store = options.store || new Store(self, storeOptions);\n\n  // Detect if we have a socket connection\n  if (host.indexOf('\\/') != -1) {\n    if (port != null && typeof port == 'object') {\n      options = port;\n      port = null;\n    }\n  } else if (port == null) {\n    throw MongoError.create({ message: 'port must be specified', driver: true });\n  }\n\n  // Get the reconnect option\n  var reconnect = typeof options.auto_reconnect == 'boolean' ? options.auto_reconnect : true;\n  reconnect = typeof options.autoReconnect == 'boolean' ? options.autoReconnect : reconnect;\n\n  // Clone options\n  var clonedOptions = mergeOptions({}, {\n    host: host, port: port, disconnectHandler: store,\n    cursorFactory: Cursor,\n    reconnect: reconnect,\n    emitError: typeof options.emitError == 'boolean' ? options.emitError : true,\n    size: typeof options.poolSize == 'number' ? options.poolSize : 5\n  });\n\n  // Translate any SSL options and other connectivity options\n  clonedOptions = translateOptions(clonedOptions, options);\n\n  // Socket options\n  var socketOptions = options.socketOptions && Object.keys(options.socketOptions).length > 0 ? options.socketOptions : options;\n\n  // Translate all the options to the mongodb-core ones\n  clonedOptions = translateOptions(clonedOptions, socketOptions);\n  if (typeof clonedOptions.keepAlive == 'number') {\n    clonedOptions.keepAliveInitialDelay = clonedOptions.keepAlive;\n    clonedOptions.keepAlive = clonedOptions.keepAlive > 0;\n  }\n\n  // Build default client information\n  this.clientInfo = {\n    driver: {\n      name: \"nodejs\",\n      version: driverVersion\n    },\n    os: {\n      type: type,\n      name: name,\n      architecture: architecture,\n      version: release\n    },\n    platform: nodejsversion\n  };\n\n  // Build default client information\n  clonedOptions.clientInfo = this.clientInfo;\n  // Do we have an application specific string\n  if (options.appname) {\n    clonedOptions.clientInfo.application = { name: options.appname };\n  }\n\n  // Create an instance of a server instance from mongodb-core\n  var server = new CServer(clonedOptions);\n\n  // Define the internal properties\n  this.s = {\n    // Create an instance of a server instance from mongodb-core\n    server: server\n    // Server capabilities\n    , sCapabilities: null\n    // Cloned options\n    , clonedOptions: clonedOptions\n    // Reconnect\n    , reconnect: clonedOptions.reconnect\n    // Emit error\n    , emitError: clonedOptions.emitError\n    // Pool size\n    , poolSize: clonedOptions.size\n    // Store Options\n    , storeOptions: storeOptions\n    // Store\n    , store: store\n    // Host\n    , host: host\n    // Port\n    , port: port\n    // Options\n    , options: options\n  };\n};\n\ninherits(Server, EventEmitter);\n\nvar define = Server.define = new Define('Server', Server, false);\n\n// BSON property\nObject.defineProperty(Server.prototype, 'bson', {\n  enumerable: true, get: function () {\n    return this.s.server.s.bson;\n  }\n});\n\n// Last ismaster\nObject.defineProperty(Server.prototype, 'isMasterDoc', {\n  enumerable: true, get: function () {\n    return this.s.server.lastIsMaster();\n  }\n});\n\nObject.defineProperty(Server.prototype, 'parserType', {\n  enumerable: true, get: function () {\n    return this.s.server.parserType;\n  }\n});\n\n// Last ismaster\nObject.defineProperty(Server.prototype, 'poolSize', {\n  enumerable: true, get: function () {\n    return this.s.server.connections().length;\n  }\n});\n\nObject.defineProperty(Server.prototype, 'autoReconnect', {\n  enumerable: true, get: function () {\n    return this.s.reconnect;\n  }\n});\n\nObject.defineProperty(Server.prototype, 'host', {\n  enumerable: true, get: function () {\n    return this.s.host;\n  }\n});\n\nObject.defineProperty(Server.prototype, 'port', {\n  enumerable: true, get: function () {\n    return this.s.port;\n  }\n});\n\n// Connect\nServer.prototype.connect = function (db, _options, callback) {\n  var self = this;\n  if ('function' === typeof _options) callback = _options, _options = {};\n  if (_options == null) _options = {};\n  if (!('function' === typeof callback)) callback = null;\n  self.s.options = _options;\n\n  // Update bufferMaxEntries\n  self.s.storeOptions.bufferMaxEntries = db.bufferMaxEntries;\n\n  // Error handler\n  var connectErrorHandler = function () {\n    return function (err) {\n      // Remove all event handlers\n      var events = ['timeout', 'error', 'close'];\n      events.forEach(function (e) {\n        self.s.server.removeListener(e, connectHandlers[e]);\n      });\n\n      self.s.server.removeListener('connect', connectErrorHandler);\n\n      // Try to callback\n      try {\n        callback(err);\n      } catch (err) {\n        process.nextTick(function () {\n          throw err;\n        });\n      }\n    };\n  };\n\n  // Actual handler\n  var errorHandler = function (event) {\n    return function (err) {\n      if (event != 'error') {\n        self.emit(event, err);\n      }\n    };\n  };\n\n  // Error handler\n  var reconnectHandler = function () {\n    self.emit('reconnect', self);\n    self.s.store.execute();\n  };\n\n  // Reconnect failed\n  var reconnectFailedHandler = function (err) {\n    self.emit('reconnectFailed', err);\n    self.s.store.flush(err);\n  };\n\n  // Destroy called on topology, perform cleanup\n  var destroyHandler = function () {\n    self.s.store.flush();\n  };\n\n  // Connect handler\n  var connectHandler = function () {\n    // Clear out all the current handlers left over\n    [\"timeout\", \"error\", \"close\", 'serverOpening', 'serverDescriptionChanged', 'serverHeartbeatStarted', 'serverHeartbeatSucceeded', 'serverHeartbeatFailed', 'serverClosed', 'topologyOpening', 'topologyClosed', 'topologyDescriptionChanged'].forEach(function (e) {\n      self.s.server.removeAllListeners(e);\n    });\n\n    // Set up listeners\n    self.s.server.on('timeout', errorHandler('timeout'));\n    self.s.server.once('error', errorHandler('error'));\n    self.s.server.on('close', errorHandler('close'));\n    // Only called on destroy\n    self.s.server.on('destroy', destroyHandler);\n\n    // relay the event\n    var relay = function (event) {\n      return function (t, server) {\n        self.emit(event, t, server);\n      };\n    };\n\n    // Set up SDAM listeners\n    self.s.server.on('serverDescriptionChanged', relay('serverDescriptionChanged'));\n    self.s.server.on('serverHeartbeatStarted', relay('serverHeartbeatStarted'));\n    self.s.server.on('serverHeartbeatSucceeded', relay('serverHeartbeatSucceeded'));\n    self.s.server.on('serverHeartbeatFailed', relay('serverHeartbeatFailed'));\n    self.s.server.on('serverOpening', relay('serverOpening'));\n    self.s.server.on('serverClosed', relay('serverClosed'));\n    self.s.server.on('topologyOpening', relay('topologyOpening'));\n    self.s.server.on('topologyClosed', relay('topologyClosed'));\n    self.s.server.on('topologyDescriptionChanged', relay('topologyDescriptionChanged'));\n    self.s.server.on('attemptReconnect', relay('attemptReconnect'));\n    self.s.server.on('monitoring', relay('monitoring'));\n\n    // Emit open event\n    self.emit('open', null, self);\n\n    // Return correctly\n    try {\n      callback(null, self);\n    } catch (err) {\n      console.log(err.stack);\n      process.nextTick(function () {\n        throw err;\n      });\n    }\n  };\n\n  // Set up listeners\n  var connectHandlers = {\n    timeout: connectErrorHandler('timeout'),\n    error: connectErrorHandler('error'),\n    close: connectErrorHandler('close')\n  };\n\n  // Add the event handlers\n  self.s.server.once('timeout', connectHandlers.timeout);\n  self.s.server.once('error', connectHandlers.error);\n  self.s.server.once('close', connectHandlers.close);\n  self.s.server.once('connect', connectHandler);\n  // Reconnect server\n  self.s.server.on('reconnect', reconnectHandler);\n  self.s.server.on('reconnectFailed', reconnectFailedHandler);\n\n  // Start connection\n  self.s.server.connect(_options);\n};\n\n// Server capabilities\nServer.prototype.capabilities = function () {\n  if (this.s.sCapabilities) return this.s.sCapabilities;\n  if (this.s.server.lastIsMaster() == null) return null;\n  this.s.sCapabilities = new ServerCapabilities(this.s.server.lastIsMaster());\n  return this.s.sCapabilities;\n};\n\ndefine.classMethod('capabilities', { callback: false, promise: false, returns: [ServerCapabilities] });\n\n// Command\nServer.prototype.command = function (ns, cmd, options, callback) {\n  this.s.server.command(ns, cmd, getReadPreference(options), callback);\n};\n\ndefine.classMethod('command', { callback: true, promise: false });\n\n// Insert\nServer.prototype.insert = function (ns, ops, options, callback) {\n  this.s.server.insert(ns, ops, options, callback);\n};\n\ndefine.classMethod('insert', { callback: true, promise: false });\n\n// Update\nServer.prototype.update = function (ns, ops, options, callback) {\n  this.s.server.update(ns, ops, options, callback);\n};\n\ndefine.classMethod('update', { callback: true, promise: false });\n\n// Remove\nServer.prototype.remove = function (ns, ops, options, callback) {\n  this.s.server.remove(ns, ops, options, callback);\n};\n\ndefine.classMethod('remove', { callback: true, promise: false });\n\n// IsConnected\nServer.prototype.isConnected = function () {\n  return this.s.server.isConnected();\n};\n\nServer.prototype.isDestroyed = function () {\n  return this.s.server.isDestroyed();\n};\n\ndefine.classMethod('isConnected', { callback: false, promise: false, returns: [Boolean] });\n\n// Insert\nServer.prototype.cursor = function (ns, cmd, options) {\n  options.disconnectHandler = this.s.store;\n  return this.s.server.cursor(ns, cmd, options);\n};\n\ndefine.classMethod('cursor', { callback: false, promise: false, returns: [Cursor, AggregationCursor, CommandCursor] });\n\nServer.prototype.lastIsMaster = function () {\n  return this.s.server.lastIsMaster();\n};\n\n/**\n * Unref all sockets\n * @method\n */\nServer.prototype.unref = function () {\n  this.s.server.unref();\n};\n\nServer.prototype.close = function (forceClosed) {\n  this.s.server.destroy();\n  // We need to wash out all stored processes\n  if (forceClosed == true) {\n    this.s.storeOptions.force = forceClosed;\n    this.s.store.flush();\n  }\n};\n\ndefine.classMethod('close', { callback: false, promise: false });\n\nServer.prototype.auth = function () {\n  var args = Array.prototype.slice.call(arguments, 0);\n  this.s.server.auth.apply(this.s.server, args);\n};\n\ndefine.classMethod('auth', { callback: true, promise: false });\n\nServer.prototype.logout = function () {\n  var args = Array.prototype.slice.call(arguments, 0);\n  this.s.server.logout.apply(this.s.server, args);\n};\n\ndefine.classMethod('logout', { callback: true, promise: false });\n\n/**\n * All raw connections\n * @method\n * @return {array}\n */\nServer.prototype.connections = function () {\n  return this.s.server.connections();\n};\n\ndefine.classMethod('connections', { callback: false, promise: false, returns: [Array] });\n\n/**\n * Server connect event\n *\n * @event Server#connect\n * @type {object}\n */\n\n/**\n * Server close event\n *\n * @event Server#close\n * @type {object}\n */\n\n/**\n * Server reconnect event\n *\n * @event Server#reconnect\n * @type {object}\n */\n\n/**\n * Server error event\n *\n * @event Server#error\n * @type {MongoError}\n */\n\n/**\n * Server timeout event\n *\n * @event Server#timeout\n * @type {object}\n */\n\n/**\n * Server parseError event\n *\n * @event Server#parseError\n * @type {object}\n */\n\nmodule.exports = Server;\n\n//# sourceMappingURL=server-compiled.js.map"]}