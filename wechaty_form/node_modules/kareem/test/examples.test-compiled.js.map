{"version":3,"sources":["examples.test.js"],"names":[],"mappings":"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","file":"examples.test-compiled.js","sourcesContent":["var assert = require('assert');\nvar Kareem = require('../');\n\n/* Much like [hooks](https://npmjs.org/package/hooks), kareem lets you define\n * pre and post hooks: pre hooks are called before a given function executes.\n * Unlike hooks, kareem stores hooks and other internal state in a separate\n * object, rather than relying on inheritance. Furthermore, kareem exposes\n * an `execPre()` function that allows you to execute your pre hooks when\n * appropriate, giving you more fine-grained control over your function hooks.\n */\ndescribe('pre hooks', function() {\n  var hooks;\n\n  beforeEach(function() {\n    hooks = new Kareem();\n  });\n\n  it('runs without any hooks specified', function(done) {\n    hooks.execPre('cook', null, function() {\n      done();\n    });\n  });\n\n  /* pre hook functions take one parameter, a \"done\" function that you execute\n   * when your pre hook is finished.\n   */\n  it('runs basic serial pre hooks', function(done) {\n    var count = 0;\n\n    hooks.pre('cook', function(done) {\n      ++count;\n      done();\n    });\n\n    hooks.execPre('cook', null, function() {\n      assert.equal(1, count);\n      done();\n    });\n  });\n\n  it('can run multipe pre hooks', function(done) {\n    var count1 = 0;\n    var count2 = 0;\n\n    hooks.pre('cook', function(done) {\n      ++count1;\n      done();\n    });\n\n    hooks.pre('cook', function(done) {\n      ++count2;\n      done();\n    });\n\n    hooks.execPre('cook', null, function() {\n      assert.equal(1, count1);\n      assert.equal(1, count2);\n      done();\n    });\n  });\n\n  /* If your pre hook function takes no parameters, its assumed to be\n   * fully synchronous.\n   */\n  it('can run fully synchronous pre hooks', function(done) {\n    var count1 = 0;\n    var count2 = 0;\n\n    hooks.pre('cook', function() {\n      ++count1;\n    });\n\n    hooks.pre('cook', function() {\n      ++count2;\n    });\n\n    hooks.execPre('cook', null, function(error) {\n      assert.equal(null, error);\n      assert.equal(1, count1);\n      assert.equal(1, count2);\n      done();\n    });\n  });\n\n  /* Pre save hook functions are bound to the second parameter to `execPre()`\n   */\n  it('properly attaches context to pre hooks', function(done) {\n    hooks.pre('cook', function(done) {\n      this.bacon = 3;\n      done();\n    });\n\n    hooks.pre('cook', function(done) {\n      this.eggs = 4;\n      done();\n    });\n\n    var obj = { bacon: 0, eggs: 0 };\n\n    // In the pre hooks, `this` will refer to `obj`\n    hooks.execPre('cook', obj, function(error) {\n      assert.equal(null, error);\n      assert.equal(3, obj.bacon);\n      assert.equal(4, obj.eggs);\n      done();\n    });\n  });\n\n  /* Like the hooks module, you can declare \"async\" pre hooks - these take two\n   * parameters, the functions `next()` and `done()`. `next()` passes control to\n   * the next pre hook, but the underlying function won't be called until all\n   * async pre hooks have called `done()`.\n   */\n  it('can execute parallel (async) pre hooks', function(done) {\n    hooks.pre('cook', true, function(next, done) {\n      this.bacon = 3;\n      next();\n      setTimeout(function() {\n        done();\n      }, 5);\n    });\n\n    hooks.pre('cook', true, function(next, done) {\n      next();\n      var _this = this;\n      setTimeout(function() {\n        _this.eggs = 4;\n        done();\n      }, 10);\n    });\n\n    hooks.pre('cook', function(next) {\n      this.waffles = false;\n      next();\n    });\n\n    var obj = { bacon: 0, eggs: 0 };\n\n    hooks.execPre('cook', obj, function() {\n      assert.equal(3, obj.bacon);\n      assert.equal(4, obj.eggs);\n      assert.equal(false, obj.waffles);\n      done();\n    });\n  });\n});\n\ndescribe('post hooks', function() {\n  var hooks;\n\n  beforeEach(function() {\n    hooks = new Kareem();\n  });\n\n  it('runs without any hooks specified', function(done) {\n    hooks.execPost('cook', null, [1], function(error, eggs) {\n      assert.ifError(error);\n      assert.equal(1, eggs);\n      done();\n    });\n  });\n\n  it('executes with parameters passed in', function(done) {\n    hooks.post('cook', function(eggs, bacon, callback) {\n      assert.equal(1, eggs);\n      assert.equal(2, bacon);\n      callback();\n    });\n\n    hooks.execPost('cook', null, [1, 2], function(error, eggs, bacon) {\n      assert.ifError(error);\n      assert.equal(1, eggs);\n      assert.equal(2, bacon);\n      done();\n    });\n  });\n\n  it('can use synchronous post hooks', function(done) {\n    var execed = {};\n\n    hooks.post('cook', function(eggs, bacon) {\n      execed.first = true;\n      assert.equal(1, eggs);\n      assert.equal(2, bacon);\n    });\n\n    hooks.post('cook', function(eggs, bacon, callback) {\n      execed.second = true;\n      assert.equal(1, eggs);\n      assert.equal(2, bacon);\n      callback();\n    });\n\n    hooks.execPost('cook', null, [1, 2], function(error, eggs, bacon) {\n      assert.ifError(error);\n      assert.equal(2, Object.keys(execed).length);\n      assert.ok(execed.first);\n      assert.ok(execed.second);\n      assert.equal(1, eggs);\n      assert.equal(2, bacon);\n      done();\n    });\n  });\n});\n\ndescribe('wrap()', function() {\n  var hooks;\n\n  beforeEach(function() {\n    hooks = new Kareem();\n  });\n\n  it('wraps pre and post calls into one call', function(done) {\n    hooks.pre('cook', true, function(next, done) {\n      this.bacon = 3;\n      next();\n      setTimeout(function() {\n        done();\n      }, 5);\n    });\n\n    hooks.pre('cook', true, function(next, done) {\n      next();\n      var _this = this;\n      setTimeout(function() {\n        _this.eggs = 4;\n        done();\n      }, 10);\n    });\n\n    hooks.pre('cook', function(next) {\n      this.waffles = false;\n      next();\n    });\n\n    hooks.post('cook', function(obj) {\n      obj.tofu = 'no';\n    });\n\n    var obj = { bacon: 0, eggs: 0 };\n\n    var args = [obj];\n    args.push(function(error, result) {\n      assert.ifError(error);\n      assert.equal(null, error);\n      assert.equal(3, obj.bacon);\n      assert.equal(4, obj.eggs);\n      assert.equal(false, obj.waffles);\n      assert.equal('no', obj.tofu);\n\n      assert.equal(obj, result);\n      done();\n    });\n\n    hooks.wrap(\n      'cook',\n      function(o, callback) {\n        assert.equal(3, obj.bacon);\n        assert.equal(4, obj.eggs);\n        assert.equal(false, obj.waffles);\n        assert.equal(undefined, obj.tofu);\n        callback(null, o);\n      },\n      obj,\n      args);\n  });\n});\n\ndescribe('createWrapper()', function() {\n  var hooks;\n\n  beforeEach(function() {\n    hooks = new Kareem();\n  });\n\n  it('wraps wrap() into a callable function', function(done) {\n    hooks.pre('cook', true, function(next, done) {\n      this.bacon = 3;\n      next();\n      setTimeout(function() {\n        done();\n      }, 5);\n    });\n\n    hooks.pre('cook', true, function(next, done) {\n      next();\n      var _this = this;\n      setTimeout(function() {\n        _this.eggs = 4;\n        done();\n      }, 10);\n    });\n\n    hooks.pre('cook', function(next) {\n      this.waffles = false;\n      next();\n    });\n\n    hooks.post('cook', function(obj) {\n      obj.tofu = 'no';\n    });\n\n    var obj = { bacon: 0, eggs: 0 };\n\n    var cook = hooks.createWrapper(\n      'cook',\n      function(o, callback) {\n        assert.equal(3, obj.bacon);\n        assert.equal(4, obj.eggs);\n        assert.equal(false, obj.waffles);\n        assert.equal(undefined, obj.tofu);\n        callback(null, o);\n      },\n      obj);\n\n    cook(obj, function(error, result) {\n      assert.ifError(error);\n      assert.equal(3, obj.bacon);\n      assert.equal(4, obj.eggs);\n      assert.equal(false, obj.waffles);\n      assert.equal('no', obj.tofu);\n\n      assert.equal(obj, result);\n      done();\n    });\n  });\n});\n\ndescribe('clone()', function() {\n  it('clones a Kareem object', function() {\n    var k1 = new Kareem();\n    k1.pre('cook', function() {});\n    k1.post('cook', function() {});\n\n    var k2 = k1.clone();\n    assert.deepEqual(['cook'], Object.keys(k2._pres));\n    assert.deepEqual(['cook'], Object.keys(k2._posts));\n  });\n});\n\ndescribe('merge()', function() {\n  it('pulls hooks from another Kareem object', function() {\n    var k1 = new Kareem();\n    var test1 = function() {};\n    k1.pre('cook', test1);\n    k1.post('cook', function() {});\n\n    var k2 = new Kareem();\n    var test2 = function() {};\n    k2.pre('cook', test2);\n    var k3 = k2.merge(k1);\n    assert.equal(k3._pres['cook'].length, 2);\n    assert.equal(k3._pres['cook'][0].fn, test2);\n    assert.equal(k3._pres['cook'][1].fn, test1);\n    assert.equal(k3._posts['cook'].length, 1);\n  });\n});\n"]}