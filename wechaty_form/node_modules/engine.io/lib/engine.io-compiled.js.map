{"version":3,"sources":["engine.io.js"],"names":[],"mappings":"AAAA;;;;AAIA,IAAI,OAAO,QAAQ,MAAR,CAAX;;AAEA;;;;;;;;;;;;;AAaA,UAAU,OAAO,OAAP,GAAiB,YAAY;AACrC;AACA;AACA,MAAI,UAAU,MAAV,IAAoB,UAAU,CAAV,aAAwB,KAAK,MAArD,EAA6D;AAC3D,WAAO,OAAO,KAAP,CAAa,IAAb,EAAmB,SAAnB,CAAP;AACD;;AAED;AACA,SAAO,QAAQ,MAAR,CAAe,KAAf,CAAqB,IAArB,EAA2B,SAA3B,CAAP;AACD,CATD;;AAWA;;;;;;AAMA,QAAQ,QAAR,GAAmB,CAAnB;;AAEA;;;;;;AAMA,QAAQ,MAAR,GAAiB,QAAQ,UAAR,CAAjB;;AAEA;;;;;;AAMA,QAAQ,MAAR,GAAiB,QAAQ,UAAR,CAAjB;;AAEA;;;;;;AAMA,QAAQ,SAAR,GAAoB,QAAQ,aAAR,CAApB;;AAEA;;;;;;AAMA,QAAQ,UAAR,GAAqB,QAAQ,cAAR,CAArB;;AAEA;;;;;;AAMA,QAAQ,MAAR,GAAiB,QAAQ,kBAAR,CAAjB;;AAEA;;;;;;;;;;AAUA,QAAQ,MAAR,GAAiB,MAAjB;;AAEA,SAAS,MAAT,CAAiB,IAAjB,EAAuB,OAAvB,EAAgC,EAAhC,EAAoC;AAClC,MAAI,eAAe,OAAO,OAA1B,EAAmC;AACjC,SAAK,OAAL;AACA,cAAU,EAAV;AACD;;AAED,MAAI,SAAS,KAAK,YAAL,CAAkB,UAAU,GAAV,EAAe,GAAf,EAAoB;AACjD,QAAI,SAAJ,CAAc,GAAd;AACA,QAAI,GAAJ,CAAQ,iBAAR;AACD,GAHY,CAAb;;AAKA,SAAO,MAAP,CAAc,IAAd,EAAoB,EAApB;;AAEA;AACA,MAAI,SAAS,QAAQ,MAAR,CAAe,MAAf,EAAuB,OAAvB,CAAb;AACA,SAAO,UAAP,GAAoB,MAApB;;AAEA,SAAO,MAAP;AACD;;AAED;;;;;;;;;AASA,QAAQ,MAAR,GAAiB,MAAjB;;AAEA,SAAS,MAAT,CAAiB,MAAjB,EAAyB,OAAzB,EAAkC;AAChC,MAAI,SAAS,IAAI,QAAQ,MAAZ,CAAmB,OAAnB,CAAb;AACA,SAAO,MAAP,CAAc,MAAd,EAAsB,OAAtB;AACA,SAAO,MAAP;AACD","file":"engine.io-compiled.js","sourcesContent":["/**\n * Module dependencies.\n */\n\nvar http = require('http');\n\n/**\n * Invoking the library as a function delegates to attach if the first argument\n * is an `http.Server`.\n *\n * If there are no arguments or the first argument is an options object, then\n * a new Server instance is returned.\n *\n * @param {http.Server} server (if specified, will be attached to by the new Server instance)\n * @param {Object} options\n * @return {Server} engine server\n * @api public\n */\n\nexports = module.exports = function () {\n  // backwards compatible use as `.attach`\n  // if first argument is an http server\n  if (arguments.length && arguments[0] instanceof http.Server) {\n    return attach.apply(this, arguments);\n  }\n\n  // if first argument is not an http server, then just make a regular eio server\n  return exports.Server.apply(null, arguments);\n};\n\n/**\n * Protocol revision number.\n *\n * @api public\n */\n\nexports.protocol = 1;\n\n/**\n * Expose Server constructor.\n *\n * @api public\n */\n\nexports.Server = require('./server');\n\n/**\n * Expose Socket constructor.\n *\n * @api public\n */\n\nexports.Socket = require('./socket');\n\n/**\n * Expose Transport constructor.\n *\n * @api public\n */\n\nexports.Transport = require('./transport');\n\n/**\n * Expose mutable list of available transports.\n *\n * @api public\n */\n\nexports.transports = require('./transports');\n\n/**\n * Exports parser.\n *\n * @api public\n */\n\nexports.parser = require('engine.io-parser');\n\n/**\n * Creates an http.Server exclusively used for WS upgrades.\n *\n * @param {Number} port\n * @param {Function} callback\n * @param {Object} options\n * @return {Server} websocket.io server\n * @api public\n */\n\nexports.listen = listen;\n\nfunction listen (port, options, fn) {\n  if ('function' === typeof options) {\n    fn = options;\n    options = {};\n  }\n\n  var server = http.createServer(function (req, res) {\n    res.writeHead(501);\n    res.end('Not Implemented');\n  });\n\n  server.listen(port, fn);\n\n  // create engine server\n  var engine = exports.attach(server, options);\n  engine.httpServer = server;\n\n  return engine;\n}\n\n/**\n * Captures upgrade requests for a http.Server.\n *\n * @param {http.Server} server\n * @param {Object} options\n * @return {Server} engine server\n * @api public\n */\n\nexports.attach = attach;\n\nfunction attach (server, options) {\n  var engine = new exports.Server(options);\n  engine.attach(server, options);\n  return engine;\n}\n"]}