{"version":3,"sources":["transport.js"],"names":[],"mappings":";AACA;;;;AAIA,IAAI,eAAe,QAAQ,QAAR,EAAkB,YAArC;AACA,IAAI,SAAS,QAAQ,kBAAR,CAAb;AACA,IAAI,OAAO,QAAQ,MAAR,CAAX;AACA,IAAI,QAAQ,QAAQ,OAAR,EAAiB,kBAAjB,CAAZ;;AAEA;;;;AAIA,OAAO,OAAP,GAAiB,SAAjB;;AAEA;;;;;;AAMA,SAAS,IAAT,GAAiB,CAAE;;AAEnB;;;;;;;AAOA,SAAS,SAAT,CAAoB,GAApB,EAAyB;AACvB,OAAK,UAAL,GAAkB,MAAlB;AACA,OAAK,SAAL,GAAiB,KAAjB;AACD;;AAED;;;;AAIA,KAAK,QAAL,CAAc,SAAd,EAAyB,YAAzB;;AAEA;;;;;;AAMA,UAAU,SAAV,CAAoB,OAApB,GAA8B,YAAY;AACxC,OAAK,SAAL,GAAiB,IAAjB;AACD,CAFD;;AAIA;;;;;;;AAOA,UAAU,SAAV,CAAoB,SAApB,GAAgC,UAAU,GAAV,EAAe;AAC7C,QAAM,iBAAN;AACA,OAAK,GAAL,GAAW,GAAX;AACD,CAHD;;AAKA;;;;;;AAMA,UAAU,SAAV,CAAoB,KAApB,GAA4B,UAAU,EAAV,EAAc;AACxC,MAAI,aAAa,KAAK,UAAlB,IAAgC,cAAc,KAAK,UAAvD,EAAmE;;AAEnE,OAAK,UAAL,GAAkB,SAAlB;AACA,OAAK,OAAL,CAAa,MAAM,IAAnB;AACD,CALD;;AAOA;;;;;;;;AAQA,UAAU,SAAV,CAAoB,OAApB,GAA8B,UAAU,GAAV,EAAe,IAAf,EAAqB;AACjD,MAAI,KAAK,SAAL,CAAe,OAAf,EAAwB,MAA5B,EAAoC;AAClC,QAAI,MAAM,IAAI,KAAJ,CAAU,GAAV,CAAV;AACA,QAAI,IAAJ,GAAW,gBAAX;AACA,QAAI,WAAJ,GAAkB,IAAlB;AACA,SAAK,IAAL,CAAU,OAAV,EAAmB,GAAnB;AACD,GALD,MAKO;AACL,UAAM,iCAAN,EAAyC,GAAzC,EAA8C,IAA9C;AACD;AACF,CATD;;AAWA;;;;;;;AAOA,UAAU,SAAV,CAAoB,QAApB,GAA+B,UAAU,MAAV,EAAkB;AAC/C,OAAK,IAAL,CAAU,QAAV,EAAoB,MAApB;AACD,CAFD;;AAIA;;;;;;;AAOA,UAAU,SAAV,CAAoB,MAApB,GAA6B,UAAU,IAAV,EAAgB;AAC3C,OAAK,QAAL,CAAc,OAAO,YAAP,CAAoB,IAApB,CAAd;AACD,CAFD;;AAIA;;;;;;AAMA,UAAU,SAAV,CAAoB,OAApB,GAA8B,YAAY;AACxC,OAAK,UAAL,GAAkB,QAAlB;AACA,OAAK,IAAL,CAAU,OAAV;AACD,CAHD","file":"transport-compiled.js","sourcesContent":["\n/**\n * Module dependencies.\n */\n\nvar EventEmitter = require('events').EventEmitter;\nvar parser = require('engine.io-parser');\nvar util = require('util');\nvar debug = require('debug')('engine:transport');\n\n/**\n * Expose the constructor.\n */\n\nmodule.exports = Transport;\n\n/**\n * Noop function.\n *\n * @api private\n */\n\nfunction noop () {}\n\n/**\n * Transport constructor.\n *\n * @param {http.IncomingMessage} request\n * @api public\n */\n\nfunction Transport (req) {\n  this.readyState = 'open';\n  this.discarded = false;\n}\n\n/**\n * Inherits from EventEmitter.\n */\n\nutil.inherits(Transport, EventEmitter);\n\n/**\n * Flags the transport as discarded.\n *\n * @api private\n */\n\nTransport.prototype.discard = function () {\n  this.discarded = true;\n};\n\n/**\n * Called with an incoming HTTP request.\n *\n * @param {http.IncomingMessage} request\n * @api private\n */\n\nTransport.prototype.onRequest = function (req) {\n  debug('setting request');\n  this.req = req;\n};\n\n/**\n * Closes the transport.\n *\n * @api private\n */\n\nTransport.prototype.close = function (fn) {\n  if ('closed' === this.readyState || 'closing' === this.readyState) return;\n\n  this.readyState = 'closing';\n  this.doClose(fn || noop);\n};\n\n/**\n * Called with a transport error.\n *\n * @param {String} message error\n * @param {Object} error description\n * @api private\n */\n\nTransport.prototype.onError = function (msg, desc) {\n  if (this.listeners('error').length) {\n    var err = new Error(msg);\n    err.type = 'TransportError';\n    err.description = desc;\n    this.emit('error', err);\n  } else {\n    debug('ignored transport error %s (%s)', msg, desc);\n  }\n};\n\n/**\n * Called with parsed out a packets from the data stream.\n *\n * @param {Object} packet\n * @api private\n */\n\nTransport.prototype.onPacket = function (packet) {\n  this.emit('packet', packet);\n};\n\n/**\n * Called with the encoded packet data.\n *\n * @param {String} data\n * @api private\n */\n\nTransport.prototype.onData = function (data) {\n  this.onPacket(parser.decodePacket(data));\n};\n\n/**\n * Called upon transport close.\n *\n * @api private\n */\n\nTransport.prototype.onClose = function () {\n  this.readyState = 'closed';\n  this.emit('close');\n};\n"]}