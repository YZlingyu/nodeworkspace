{"version":3,"sources":["binary.js"],"names":[],"mappings":"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","file":"binary-compiled.js","sourcesContent":["/*global Blob,File*/\n\n/**\n * Module requirements\n */\n\nvar isArray = require('isarray');\nvar isBuf = require('./is-buffer');\n\n/**\n * Replaces every Buffer | ArrayBuffer in packet with a numbered placeholder.\n * Anything with blobs or files should be fed through removeBlobs before coming\n * here.\n *\n * @param {Object} packet - socket.io event packet\n * @return {Object} with deconstructed packet and list of buffers\n * @api public\n */\n\nexports.deconstructPacket = function(packet){\n  var buffers = [];\n  var packetData = packet.data;\n\n  function _deconstructPacket(data) {\n    if (!data) return data;\n\n    if (isBuf(data)) {\n      var placeholder = { _placeholder: true, num: buffers.length };\n      buffers.push(data);\n      return placeholder;\n    } else if (isArray(data)) {\n      var newData = new Array(data.length);\n      for (var i = 0; i < data.length; i++) {\n        newData[i] = _deconstructPacket(data[i]);\n      }\n      return newData;\n    } else if ('object' == typeof data && !(data instanceof Date)) {\n      var newData = {};\n      for (var key in data) {\n        newData[key] = _deconstructPacket(data[key]);\n      }\n      return newData;\n    }\n    return data;\n  }\n\n  var pack = packet;\n  pack.data = _deconstructPacket(packetData);\n  pack.attachments = buffers.length; // number of binary 'attachments'\n  return {packet: pack, buffers: buffers};\n};\n\n/**\n * Reconstructs a binary packet from its placeholder packet and buffers\n *\n * @param {Object} packet - event packet with placeholders\n * @param {Array} buffers - binary buffers to put in placeholder positions\n * @return {Object} reconstructed packet\n * @api public\n */\n\nexports.reconstructPacket = function(packet, buffers) {\n  var curPlaceHolder = 0;\n\n  function _reconstructPacket(data) {\n    if (data && data._placeholder) {\n      var buf = buffers[data.num]; // appropriate buffer (should be natural order anyway)\n      return buf;\n    } else if (isArray(data)) {\n      for (var i = 0; i < data.length; i++) {\n        data[i] = _reconstructPacket(data[i]);\n      }\n      return data;\n    } else if (data && 'object' == typeof data) {\n      for (var key in data) {\n        data[key] = _reconstructPacket(data[key]);\n      }\n      return data;\n    }\n    return data;\n  }\n\n  packet.data = _reconstructPacket(packet.data);\n  packet.attachments = undefined; // no longer useful\n  return packet;\n};\n\n/**\n * Asynchronously removes Blobs or Files from data via\n * FileReader's readAsArrayBuffer method. Used before encoding\n * data as msgpack. Calls callback with the blobless data.\n *\n * @param {Object} data\n * @param {Function} callback\n * @api private\n */\n\nexports.removeBlobs = function(data, callback) {\n  function _removeBlobs(obj, curKey, containingObject) {\n    if (!obj) return obj;\n\n    // convert any blob\n    if ((global.Blob && obj instanceof Blob) ||\n        (global.File && obj instanceof File)) {\n      pendingBlobs++;\n\n      // async filereader\n      var fileReader = new FileReader();\n      fileReader.onload = function() { // this.result == arraybuffer\n        if (containingObject) {\n          containingObject[curKey] = this.result;\n        }\n        else {\n          bloblessData = this.result;\n        }\n\n        // if nothing pending its callback time\n        if(! --pendingBlobs) {\n          callback(bloblessData);\n        }\n      };\n\n      fileReader.readAsArrayBuffer(obj); // blob -> arraybuffer\n    } else if (isArray(obj)) { // handle array\n      for (var i = 0; i < obj.length; i++) {\n        _removeBlobs(obj[i], i, obj);\n      }\n    } else if (obj && 'object' == typeof obj && !isBuf(obj)) { // and object\n      for (var key in obj) {\n        _removeBlobs(obj[key], key, obj);\n      }\n    }\n  }\n\n  var pendingBlobs = 0;\n  var bloblessData = data;\n  _removeBlobs(bloblessData);\n  if (!pendingBlobs) {\n    callback(bloblessData);\n  }\n};\n"]}