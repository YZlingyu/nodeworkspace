{"version":3,"sources":["index.js"],"names":[],"mappings":"AAAA,IAAI,KAAK,QAAQ,cAAR,CAAT;AACA,IAAI,UAAU,QAAQ,IAAR,CAAd;AACA,IAAI,OAAO,QAAQ,MAAR,CAAX;;AAEA,KAAK,yBAAL,EAAgC,UAAU,IAAV,EAAgB;;AAE9C,MAAI,SAAS,CAAb;AACA,MAAI,OAAO,QACT,GAAG,OAAH,CAAW,UAAS,IAAT,EAAe;AACxB,WAAO,KAAK,IAAL,CAAU,MAAV,EAAkB,IAAlB,CAAP;AACD,GAFD,CADS,EAIT,GAAG,OAAH,CAAW,UAAS,IAAT,EAAe;AACxB,WAAO,KAAK,IAAL,CAAU,OAAV,EAAmB,IAAI,KAAJ,CAAU,IAAV,CAAnB,CAAP;AACD,GAFD,CAJS,CAAX;;AASA,OAAK,EAAL,CAAQ,OAAR,EAAiB,UAAS,GAAT,EAAc;AAC7B;AACA,SAAK,EAAL,CAAQ,MAAR,EAAgB,sBAAhB;AACE,YAAQ,QAAR,CAAiB,YAAY;AAC3B,aAAO,KAAK,GAAL,EAAP;AACD,KAFD;AAGH,GAND;;AAQA,SAAO,KAAK,KAAL,CAAW,KAAX,CAAP;AACD,CArBD;;AAuBA,KAAK,gCAAL,EAAuC,UAAU,IAAV,EAAgB;;AAErD,MAAI,SAAS,CAAb;AACA,MAAI,OAAO,QACT,GAAG,OAAH,CAAW,UAAS,IAAT,EAAe;AACxB,WAAO,KAAK,IAAL,CAAU,MAAV,EAAkB,IAAlB,CAAP;AACD,GAFD,CADS,EAIT,GAAG,OAAH,CAAW,UAAS,IAAT,EAAe;AACxB,WAAO,KAAK,IAAL,CAAU,OAAV,EAAmB,IAAI,KAAJ,CAAU,IAAV,CAAnB,CAAP;AACD,GAFD,CAJS,EAOT,GAAG,OAAH,EAPS,CAAX;;AAUA,OAAK,EAAL,CAAQ,OAAR,EAAiB,UAAS,GAAT,EAAc;AAC7B;AACA,SAAK,EAAL,CAAQ,MAAR,EAAgB,sBAAhB;AACE,YAAQ,QAAR,CAAiB,YAAY;AAC3B,aAAO,KAAK,GAAL,EAAP;AACD,KAFD;AAGH,GAND;;AAQA,SAAO,KAAK,KAAL,CAAW,KAAX,CAAP;AAED,CAvBD","file":"index-compiled.js","sourcesContent":["var es = require('event-stream')\nvar combine = require('..')\nvar test = require('tape')\n\ntest('do not duplicate errors', function (test) {\n\n  var errors = 0;\n  var pipe = combine(\n    es.through(function(data) {\n      return this.emit('data', data);\n    }),\n    es.through(function(data) {\n      return this.emit('error', new Error(data));\n    })\n  )\n\n  pipe.on('error', function(err) {\n    errors++\n    test.ok(errors, 'expected error count')\n      process.nextTick(function () {\n        return test.end();\n      })\n  })\n\n  return pipe.write('meh');\n})\n\ntest('3 pipe do not duplicate errors', function (test) {\n\n  var errors = 0;\n  var pipe = combine(\n    es.through(function(data) {\n      return this.emit('data', data);\n    }),\n    es.through(function(data) {\n      return this.emit('error', new Error(data));\n    }),\n    es.through()\n  )\n\n  pipe.on('error', function(err) {\n    errors++\n    test.ok(errors, 'expected error count')\n      process.nextTick(function () {\n        return test.end();\n      })\n  })\n\n  return pipe.write('meh');\n\n})\n\n"]}