{"version":3,"sources":["index.js"],"names":[],"mappings":"AAAA,IAAI,WAAW,QAAQ,UAAR,CAAf;;AAEA,OAAO,OAAP,GAAiB,YAAY;;AAE3B,MAAI,UAAU,GAAG,KAAH,CAAS,IAAT,CAAc,SAAd,CAAd;AAAA,MACI,QAAQ,QAAQ,CAAR,CADZ;AAAA,MAEI,OAAO,QAAQ,QAAQ,MAAR,GAAiB,CAAzB,CAFX;AAAA,MAGI,UAAU,SAAS,KAAT,EAAgB,IAAhB,CAHd;;AAKA,MAAG,QAAQ,MAAR,IAAkB,CAArB,EACE,OAAO,QAAQ,CAAR,CAAP,CADF,KAEK,IAAI,CAAC,QAAQ,MAAb,EACH,MAAM,IAAI,KAAJ,CAAU,gCAAV,CAAN;;AAEF;;AAEA,WAAS,OAAT,CAAkB,OAAlB,EAA2B;AACzB,QAAG,QAAQ,MAAR,GAAiB,CAApB,EACE;AACF,YAAQ,CAAR,EAAW,IAAX,CAAgB,QAAQ,CAAR,CAAhB;AACA,YAAQ,QAAQ,KAAR,CAAc,CAAd,CAAR;AACD;;AAED,UAAQ,OAAR;;AAEA,WAAS,OAAT,GAAoB;AAClB,QAAI,OAAO,GAAG,KAAH,CAAS,IAAT,CAAc,SAAd,CAAX;AACA,SAAK,OAAL,CAAa,OAAb;AACA,YAAQ,IAAR,CAAa,KAAb,CAAmB,OAAnB,EAA4B,IAA5B;AACD;;AAED;AACA;AACA,OAAI,IAAI,IAAI,CAAZ,EAAe,IAAI,QAAQ,MAAR,GAAiB,CAApC,EAAuC,GAAvC,EACE,QAAQ,CAAR,EAAW,EAAX,CAAc,OAAd,EAAuB,OAAvB;;AAEF,SAAO,OAAP;AACD,CAnCD","file":"index-compiled.js","sourcesContent":["var duplexer = require('duplexer')\n\nmodule.exports = function () {\n\n  var streams = [].slice.call(arguments)\n    , first = streams[0]\n    , last = streams[streams.length - 1]\n    , thepipe = duplexer(first, last)\n\n  if(streams.length == 1)\n    return streams[0]\n  else if (!streams.length)\n    throw new Error('connect called with empty args')\n\n  //pipe all the streams together\n\n  function recurse (streams) {\n    if(streams.length < 2)\n      return\n    streams[0].pipe(streams[1])\n    recurse(streams.slice(1))  \n  }\n  \n  recurse(streams)\n \n  function onerror () {\n    var args = [].slice.call(arguments)\n    args.unshift('error')\n    thepipe.emit.apply(thepipe, args)\n  }\n  \n  //es.duplex already reemits the error from the first and last stream.\n  //add a listener for the inner streams in the pipeline.\n  for(var i = 1; i < streams.length - 1; i ++)\n    streams[i].on('error', onerror)\n\n  return thepipe\n}\n\n"]}