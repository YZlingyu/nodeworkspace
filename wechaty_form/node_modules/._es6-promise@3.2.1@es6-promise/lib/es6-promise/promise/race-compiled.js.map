{"version":3,"sources":["race.js"],"names":[],"mappings":"AAAA,SACE,OADF,QAEO,UAFP;;AAIA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAiEA,eAAe,SAAS,IAAT,CAAc,OAAd,EAAuB;AACpC;AACA,MAAI,cAAc,IAAlB;;AAEA,MAAI,CAAC,QAAQ,OAAR,CAAL,EAAuB;AACrB,WAAO,IAAI,WAAJ,CAAgB,UAAS,OAAT,EAAkB,MAAlB,EAA0B;AAC/C,aAAO,IAAI,SAAJ,CAAc,iCAAd,CAAP;AACD,KAFM,CAAP;AAGD,GAJD,MAIO;AACL,WAAO,IAAI,WAAJ,CAAgB,UAAS,OAAT,EAAkB,MAAlB,EAA0B;AAC/C,UAAI,SAAS,QAAQ,MAArB;AACA,WAAK,IAAI,IAAI,CAAb,EAAgB,IAAI,MAApB,EAA4B,GAA5B,EAAiC;AAC/B,oBAAY,OAAZ,CAAoB,QAAQ,CAAR,CAApB,EAAgC,IAAhC,CAAqC,OAArC,EAA8C,MAA9C;AACD;AACF,KALM,CAAP;AAMD;AACF","file":"race-compiled.js","sourcesContent":["import {\n  isArray\n} from \"../utils\";\n\n/**\n  `Promise.race` returns a new promise which is settled in the same way as the\n  first passed promise to settle.\n\n  Example:\n\n  ```javascript\n  var promise1 = new Promise(function(resolve, reject){\n    setTimeout(function(){\n      resolve('promise 1');\n    }, 200);\n  });\n\n  var promise2 = new Promise(function(resolve, reject){\n    setTimeout(function(){\n      resolve('promise 2');\n    }, 100);\n  });\n\n  Promise.race([promise1, promise2]).then(function(result){\n    // result === 'promise 2' because it was resolved before promise1\n    // was resolved.\n  });\n  ```\n\n  `Promise.race` is deterministic in that only the state of the first\n  settled promise matters. For example, even if other promises given to the\n  `promises` array argument are resolved, but the first settled promise has\n  become rejected before the other promises became fulfilled, the returned\n  promise will become rejected:\n\n  ```javascript\n  var promise1 = new Promise(function(resolve, reject){\n    setTimeout(function(){\n      resolve('promise 1');\n    }, 200);\n  });\n\n  var promise2 = new Promise(function(resolve, reject){\n    setTimeout(function(){\n      reject(new Error('promise 2'));\n    }, 100);\n  });\n\n  Promise.race([promise1, promise2]).then(function(result){\n    // Code here never runs\n  }, function(reason){\n    // reason.message === 'promise 2' because promise 2 became rejected before\n    // promise 1 became fulfilled\n  });\n  ```\n\n  An example real-world use case is implementing timeouts:\n\n  ```javascript\n  Promise.race([ajax('foo.json'), timeout(5000)])\n  ```\n\n  @method race\n  @static\n  @param {Array} promises array of promises to observe\n  Useful for tooling.\n  @return {Promise} a promise which settles in the same way as the first passed\n  promise to settle.\n*/\nexport default function race(entries) {\n  /*jshint validthis:true */\n  var Constructor = this;\n\n  if (!isArray(entries)) {\n    return new Constructor(function(resolve, reject) {\n      reject(new TypeError('You must pass an array to race.'));\n    });\n  } else {\n    return new Constructor(function(resolve, reject) {\n      var length = entries.length;\n      for (var i = 0; i < length; i++) {\n        Constructor.resolve(entries[i]).then(resolve, reject);\n      }\n    });\n  }\n}\n"]}