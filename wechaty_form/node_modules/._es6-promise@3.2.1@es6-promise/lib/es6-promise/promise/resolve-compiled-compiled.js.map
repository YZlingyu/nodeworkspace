{"version":3,"sources":["resolve-compiled.js"],"names":[],"mappings":"AAAA,SAAS,IAAT,EAAe,WAAW,QAA1B,QAA0C,cAA1C;;AAEA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA+BA,eAAe,SAAS,OAAT,CAAiB,MAAjB,EAAyB;AACtC;AACA,MAAI,cAAc,IAAlB;;AAEA,MAAI,UAAU,OAAO,MAAP,KAAkB,QAA5B,IAAwC,OAAO,WAAP,KAAuB,WAAnE,EAAgF;AAC9E,WAAO,MAAP;AACD;;AAED,MAAI,UAAU,IAAI,WAAJ,CAAgB,IAAhB,CAAd;AACA,WAAS,OAAT,EAAkB,MAAlB;AACA,SAAO,OAAP;AACD;;AAED","file":"resolve-compiled-compiled.js","sourcesContent":["import { noop, resolve as _resolve } from '../-internal';\n\n/**\n  `Promise.resolve` returns a promise that will become resolved with the\n  passed `value`. It is shorthand for the following:\n\n  ```javascript\n  var promise = new Promise(function(resolve, reject){\n    resolve(1);\n  });\n\n  promise.then(function(value){\n    // value === 1\n  });\n  ```\n\n  Instead of writing the above, your code now simply becomes the following:\n\n  ```javascript\n  var promise = Promise.resolve(1);\n\n  promise.then(function(value){\n    // value === 1\n  });\n  ```\n\n  @method resolve\n  @static\n  @param {Any} value value that the returned promise will be resolved with\n  Useful for tooling.\n  @return {Promise} a promise that will become fulfilled with the given\n  `value`\n*/\nexport default function resolve(object) {\n  /*jshint validthis:true */\n  var Constructor = this;\n\n  if (object && typeof object === 'object' && object.constructor === Constructor) {\n    return object;\n  }\n\n  var promise = new Constructor(noop);\n  _resolve(promise, object);\n  return promise;\n}\n\n//# sourceMappingURL=resolve-compiled.js.map"]}