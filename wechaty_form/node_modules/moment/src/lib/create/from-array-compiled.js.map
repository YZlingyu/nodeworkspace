{"version":3,"sources":["from-array.js"],"names":[],"mappings":"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","file":"from-array-compiled.js","sourcesContent":["import { hooks } from '../utils/hooks';\nimport { createDate, createUTCDate } from './date-from-array';\nimport { daysInYear } from '../units/year';\nimport { weekOfYear, weeksInYear, dayOfYearFromWeeks } from '../units/week-calendar-utils';\nimport { YEAR, MONTH, DATE, HOUR, MINUTE, SECOND, MILLISECOND } from '../units/constants';\nimport { createLocal } from './local';\nimport defaults from '../utils/defaults';\nimport getParsingFlags from './parsing-flags';\n\nfunction currentDateArray(config) {\n    // hooks is actually the exported moment object\n    var nowValue = new Date(hooks.now());\n    if (config._useUTC) {\n        return [nowValue.getUTCFullYear(), nowValue.getUTCMonth(), nowValue.getUTCDate()];\n    }\n    return [nowValue.getFullYear(), nowValue.getMonth(), nowValue.getDate()];\n}\n\n// convert an array to a date.\n// the array should mirror the parameters below\n// note: all values past the year are optional and will default to the lowest possible value.\n// [year, month, day , hour, minute, second, millisecond]\nexport function configFromArray (config) {\n    var i, date, input = [], currentDate, yearToUse;\n\n    if (config._d) {\n        return;\n    }\n\n    currentDate = currentDateArray(config);\n\n    //compute day of the year from weeks and weekdays\n    if (config._w && config._a[DATE] == null && config._a[MONTH] == null) {\n        dayOfYearFromWeekInfo(config);\n    }\n\n    //if the day of the year is set, figure out what it is\n    if (config._dayOfYear != null) {\n        yearToUse = defaults(config._a[YEAR], currentDate[YEAR]);\n\n        if (config._dayOfYear > daysInYear(yearToUse) || config._dayOfYear === 0) {\n            getParsingFlags(config)._overflowDayOfYear = true;\n        }\n\n        date = createUTCDate(yearToUse, 0, config._dayOfYear);\n        config._a[MONTH] = date.getUTCMonth();\n        config._a[DATE] = date.getUTCDate();\n    }\n\n    // Default to current date.\n    // * if no year, month, day of month are given, default to today\n    // * if day of month is given, default month and year\n    // * if month is given, default only year\n    // * if year is given, don't default anything\n    for (i = 0; i < 3 && config._a[i] == null; ++i) {\n        config._a[i] = input[i] = currentDate[i];\n    }\n\n    // Zero out whatever was not defaulted, including time\n    for (; i < 7; i++) {\n        config._a[i] = input[i] = (config._a[i] == null) ? (i === 2 ? 1 : 0) : config._a[i];\n    }\n\n    // Check for 24:00:00.000\n    if (config._a[HOUR] === 24 &&\n            config._a[MINUTE] === 0 &&\n            config._a[SECOND] === 0 &&\n            config._a[MILLISECOND] === 0) {\n        config._nextDay = true;\n        config._a[HOUR] = 0;\n    }\n\n    config._d = (config._useUTC ? createUTCDate : createDate).apply(null, input);\n    // Apply timezone offset from input. The actual utcOffset can be changed\n    // with parseZone.\n    if (config._tzm != null) {\n        config._d.setUTCMinutes(config._d.getUTCMinutes() - config._tzm);\n    }\n\n    if (config._nextDay) {\n        config._a[HOUR] = 24;\n    }\n}\n\nfunction dayOfYearFromWeekInfo(config) {\n    var w, weekYear, week, weekday, dow, doy, temp, weekdayOverflow;\n\n    w = config._w;\n    if (w.GG != null || w.W != null || w.E != null) {\n        dow = 1;\n        doy = 4;\n\n        // TODO: We need to take the current isoWeekYear, but that depends on\n        // how we interpret now (local, utc, fixed offset). So create\n        // a now version of current config (take local/utc/offset flags, and\n        // create now).\n        weekYear = defaults(w.GG, config._a[YEAR], weekOfYear(createLocal(), 1, 4).year);\n        week = defaults(w.W, 1);\n        weekday = defaults(w.E, 1);\n        if (weekday < 1 || weekday > 7) {\n            weekdayOverflow = true;\n        }\n    } else {\n        dow = config._locale._week.dow;\n        doy = config._locale._week.doy;\n\n        var curWeek = weekOfYear(createLocal(), dow, doy);\n\n        weekYear = defaults(w.gg, config._a[YEAR], curWeek.year);\n\n        // Default to current week.\n        week = defaults(w.w, curWeek.week);\n\n        if (w.d != null) {\n            // weekday -- low day numbers are considered next week\n            weekday = w.d;\n            if (weekday < 0 || weekday > 6) {\n                weekdayOverflow = true;\n            }\n        } else if (w.e != null) {\n            // local weekday -- counting starts from begining of week\n            weekday = w.e + dow;\n            if (w.e < 0 || w.e > 6) {\n                weekdayOverflow = true;\n            }\n        } else {\n            // default to begining of week\n            weekday = dow;\n        }\n    }\n    if (week < 1 || week > weeksInYear(weekYear, dow, doy)) {\n        getParsingFlags(config)._overflowWeeks = true;\n    } else if (weekdayOverflow != null) {\n        getParsingFlags(config)._overflowWeekday = true;\n    } else {\n        temp = dayOfYearFromWeeks(weekYear, week, weekday, dow, doy);\n        config._a[YEAR] = temp.year;\n        config._dayOfYear = temp.dayOfYear;\n    }\n}\n"]}