{"version":3,"sources":["smoke_plugin.js"],"names":[],"mappings":"AAAA,IAAI,KAAK,QAAQ,IAAR,CAAT;;AAEA;;;AAGA,QAAQ,cAAR,GAAyB,UAAS,MAAT,EAAiB,UAAjB,EAA6B;AACpD,MAAI,cAAc,EAAE,SAAU,EAAZ,EAAlB;AACA,MAAI,eAAe,EAAnB;;AAEA,MAAI,gBAAgB;AAClB,gBAAY,UAAS,IAAT,EAAe,QAAf,EAAyB;AACnC,WAAK,SAAL,GAAiB,KAAK,GAAL,EAAjB;AACA,mBAAa,KAAK,IAAlB,IAA0B,IAA1B;AACA;AACD,KALiB;AAMlB,eAAW,UAAS,IAAT,EAAe,QAAf,EAAyB;AAClC,kBAAY,OAAZ,CAAoB,IAApB,CAAyB;AACvB,gBAAQ,KAAK,MADU;AAEvB,eAAO,KAAK,SAFW;AAGvB,aAAK,KAAK,GAAL,EAHkB;AAIvB,mBAAW,KAAK,IAJO;AAKvB,mBAAW,CALY;AAMvB,aAAK;AANkB,OAAzB;AAQA,aAAO,aAAa,KAAK,IAAlB,CAAP;AACA;AACD,KAjBiB;AAkBlB,gBAAY,UAAS,GAAT,EAAc,QAAd,EAAwB;AAClC,SAAG,SAAH,CAAa,UAAb,EAAyB,KAAK,SAAL,CAAe,WAAf,CAAzB,EAAsD,YAAW;AAC/D;AACD,OAFD;AAGD;AAtBiB,GAApB;;AAyBA;AACA,UAAQ,EAAR,CAAW,mBAAX,EAAgC,UAAS,GAAT,EAAc;AAC5C;AACA,SAAK,IAAI,QAAT,IAAqB,YAArB,EAAmC;AACjC,kBAAY,OAAZ,CAAoB,IAApB,CAAyB;AACvB,gBAAQ,MADe;AAEvB,eAAO,aAAa,QAAb,EAAuB,SAFP;AAGvB,aAAK,KAAK,GAAL,EAHkB;AAIvB,mBAAW,QAJY;AAKvB,mBAAW,CALY;AAMvB,aAAK;AANkB,OAAzB;AAQD;;AAED;AACA,OAAG,aAAH,CAAiB,UAAjB,EAA6B,KAAK,SAAL,CAAe,WAAf,CAA7B;;AAEA;AACA,YAAQ,KAAR,CAAc,IAAI,KAAlB;AACA,YAAQ,IAAR,CAAa,CAAb;AACD,GAnBD;;AAqBA,SAAO,MAAP,CAAc,aAAd;AACA,SAAO,aAAP;AACD,CArDD","file":"smoke_plugin-compiled.js","sourcesContent":["var fs = require('fs');\n\n/* Note: because this plugin uses process.on('uncaughtException'), only one\n * of these can exist at any given time. This plugin and anything else that\n * uses process.on('uncaughtException') will conflict. */\nexports.attachToRunner = function(runner, outputFile) {\n  var smokeOutput = { results : [] };\n  var runningTests = {};\n\n  var integraPlugin = {\n    beforeTest: function(test, callback) {\n      test.startTime = Date.now();\n      runningTests[test.name] = test;\n      callback();\n    },\n    afterTest: function(test, callback) {\n      smokeOutput.results.push({\n        status: test.status,\n        start: test.startTime,\n        end: Date.now(),\n        test_file: test.name,\n        exit_code: 0,\n        url: \"\"\n      });\n      delete runningTests[test.name];\n      callback();\n    },\n    beforeExit: function(obj, callback) {\n      fs.writeFile(outputFile, JSON.stringify(smokeOutput), function() {\n        callback();\n      });\n    }\n  };\n\n  // In case of exception, make sure we write file\n  process.on('uncaughtException', function(err) {\n    // Mark all currently running tests as failed\n    for (var testName in runningTests) {\n      smokeOutput.results.push({\n        status: \"fail\",\n        start: runningTests[testName].startTime,\n        end: Date.now(),\n        test_file: testName,\n        exit_code: 0,\n        url: \"\"\n      });\n    }\n\n    // write file\n    fs.writeFileSync(outputFile, JSON.stringify(smokeOutput));\n\n    // Standard NodeJS uncaught exception handler\n    console.error(err.stack);\n    process.exit(1);\n  });\n\n  runner.plugin(integraPlugin);\n  return integraPlugin;\n};\n"]}