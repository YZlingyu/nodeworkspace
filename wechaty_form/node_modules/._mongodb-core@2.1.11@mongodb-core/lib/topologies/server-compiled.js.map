{"version":3,"sources":["server.js"],"names":[],"mappings":"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","file":"server-compiled.js","sourcesContent":["\"use strict\"\n\nvar inherits = require('util').inherits,\n  require_optional = require('require_optional'),\n  f = require('util').format,\n  EventEmitter = require('events').EventEmitter,\n  ReadPreference = require('./read_preference'),\n  Logger = require('../connection/logger'),\n  debugOptions = require('../connection/utils').debugOptions,\n  retrieveBSON = require('../connection/utils').retrieveBSON,\n  Pool = require('../connection/pool'),\n  Query = require('../connection/commands').Query,\n  MongoError = require('../error'),\n  PreTwoSixWireProtocolSupport = require('../wireprotocol/2_4_support'),\n  TwoSixWireProtocolSupport = require('../wireprotocol/2_6_support'),\n  ThreeTwoWireProtocolSupport = require('../wireprotocol/3_2_support'),\n  BasicCursor = require('../cursor'),\n  sdam = require('./shared'),\n  assign = require('./shared').assign,\n  createClientInfo = require('./shared').createClientInfo;\n\n// Used for filtering out fields for loggin\nvar debugFields = ['reconnect', 'reconnectTries', 'reconnectInterval', 'emitError', 'cursorFactory', 'host'\n  , 'port', 'size', 'keepAlive', 'keepAliveInitialDelay', 'noDelay', 'connectionTimeout', 'checkServerIdentity'\n  , 'socketTimeout', 'singleBufferSerializtion', 'ssl', 'ca', 'crl', 'cert', 'key', 'rejectUnauthorized', 'promoteLongs', 'promoteValues'\n  , 'promoteBuffers', 'servername'];\n\n// Server instance id\nvar id = 0;\nvar serverAccounting = false;\nvar servers = {};\nvar BSON = retrieveBSON();\n\n/**\n * Creates a new Server instance\n * @class\n * @param {boolean} [options.reconnect=true] Server will attempt to reconnect on loss of connection\n * @param {number} [options.reconnectTries=30] Server attempt to reconnect #times\n * @param {number} [options.reconnectInterval=1000] Server will wait # milliseconds between retries\n * @param {number} [options.monitoring=true] Enable the server state monitoring (calling ismaster at monitoringInterval)\n * @param {number} [options.monitoringInterval=5000] The interval of calling ismaster when monitoring is enabled.\n * @param {Cursor} [options.cursorFactory=Cursor] The cursor factory class used for all query cursors\n * @param {string} options.host The server host\n * @param {number} options.port The server port\n * @param {number} [options.size=5] Server connection pool size\n * @param {boolean} [options.keepAlive=true] TCP Connection keep alive enabled\n * @param {number} [options.keepAliveInitialDelay=0] Initial delay before TCP keep alive enabled\n * @param {boolean} [options.noDelay=true] TCP Connection no delay\n * @param {number} [options.connectionTimeout=0] TCP Connection timeout setting\n * @param {number} [options.socketTimeout=0] TCP Socket timeout setting\n * @param {boolean} [options.ssl=false] Use SSL for connection\n * @param {boolean|function} [options.checkServerIdentity=true] Ensure we check server identify during SSL, set to false to disable checking. Only works for Node 0.12.x or higher. You can pass in a boolean or your own checkServerIdentity override function.\n * @param {Buffer} [options.ca] SSL Certificate store binary buffer\n * @param {Buffer} [options.crl] SSL Certificate revocation store binary buffer\n * @param {Buffer} [options.cert] SSL Certificate binary buffer\n * @param {Buffer} [options.key] SSL Key file binary buffer\n * @param {string} [options.passphrase] SSL Certificate pass phrase\n * @param {boolean} [options.rejectUnauthorized=true] Reject unauthorized server certificates\n * @param {string} [options.servername=null] String containing the server name requested via TLS SNI.\n * @param {boolean} [options.promoteLongs=true] Convert Long values from the db into Numbers if they fit into 53 bits\n * @param {boolean} [options.promoteValues=true] Promotes BSON values to native types where possible, set to false to only receive wrapper types.\n * @param {boolean} [options.promoteBuffers=false] Promotes Binary BSON values to native Node Buffers.\n * @param {string} [options.appname=null] Application name, passed in on ismaster call and logged in mongod server logs. Maximum size 128 bytes.\n * @param {boolean} [options.domainsEnabled=false] Enable the wrapping of the callback in the current domain, disabled by default to avoid perf hit.\n * @return {Server} A cursor instance\n * @fires Server#connect\n * @fires Server#close\n * @fires Server#error\n * @fires Server#timeout\n * @fires Server#parseError\n * @fires Server#reconnect\n * @fires Server#reconnectFailed\n * @fires Server#serverHeartbeatStarted\n * @fires Server#serverHeartbeatSucceeded\n * @fires Server#serverHeartbeatFailed\n * @fires Server#topologyOpening\n * @fires Server#topologyClosed\n * @fires Server#topologyDescriptionChanged\n * @property {string} type the topology type.\n * @property {string} parserType the parser type used (c++ or js).\n */\nvar Server = function(options) {\n  options = options || {};\n\n  // Add event listener\n  EventEmitter.call(this);\n\n  // Server instance id\n  this.id = id++;\n\n  // Internal state\n  this.s = {\n    // Options\n    options: options,\n    // Logger\n    logger: Logger('Server', options),\n    // Factory overrides\n    Cursor: options.cursorFactory || BasicCursor,\n    // BSON instance\n    bson: options.bson || new BSON([BSON.Binary, BSON.Code, BSON.DBRef, BSON.Decimal128,\n      BSON.Double, BSON.Int32, BSON.Long, BSON.Map, BSON.MaxKey, BSON.MinKey,\n      BSON.ObjectId, BSON.BSONRegExp, BSON.Symbol, BSON.Timestamp]),\n    // Pool\n    pool: null,\n    // Disconnect handler\n    disconnectHandler: options.disconnectHandler,\n    // Monitor thread (keeps the connection alive)\n    monitoring: typeof options.monitoring == 'boolean' ? options.monitoring : true,\n    // Is the server in a topology\n    inTopology: typeof options.inTopology == 'boolean' ? options.inTopology : false,\n    // Monitoring timeout\n    monitoringInterval: typeof options.monitoringInterval == 'number'\n      ? options.monitoringInterval\n      : 5000,\n    // Topology id\n    topologyId: -1\n  }\n\n  // Curent ismaster\n  this.ismaster = null;\n  // Current ping time\n  this.lastIsMasterMS = -1;\n  // The monitoringProcessId\n  this.monitoringProcessId = null;\n  // Initial connection\n  this.initalConnect = true;\n  // Wire protocol handler, default to oldest known protocol handler\n  // this gets changed when the first ismaster is called.\n  this.wireProtocolHandler = new PreTwoSixWireProtocolSupport();\n  // Default type\n  this._type = 'server';\n  // Set the client info\n  this.clientInfo = createClientInfo(options);\n\n  // Max Stalleness values\n  // last time we updated the ismaster state\n  this.lastUpdateTime = 0;\n  // Last write time\n  this.lastWriteDate = 0;\n  // Stalleness\n  this.staleness = 0;\n}\n\ninherits(Server, EventEmitter);\n\nObject.defineProperty(Server.prototype, 'type', {\n  enumerable:true, get: function() { return this._type; }\n});\n\nObject.defineProperty(Server.prototype, 'parserType', {\n  enumerable:true, get: function() {\n    return BSON.native ? \"c++\" : \"js\";\n  }\n});\n\nServer.enableServerAccounting = function() {\n  serverAccounting = true;\n  servers = {};\n}\n\nServer.disableServerAccounting = function() {\n  serverAccounting = false;\n}\n\nServer.servers = function() {\n  return servers;\n}\n\nObject.defineProperty(Server.prototype, 'name', {\n  enumerable:true,\n  get: function() { return this.s.options.host + \":\" + this.s.options.port; }\n});\n\nfunction configureWireProtocolHandler(self, ismaster) {\n  // 3.2 wire protocol handler\n  if(ismaster.maxWireVersion >= 4) {\n    return new ThreeTwoWireProtocolSupport(new TwoSixWireProtocolSupport());\n  }\n\n  // 2.6 wire protocol handler\n  if(ismaster.maxWireVersion >= 2) {\n    return new TwoSixWireProtocolSupport();\n  }\n\n  // 2.4 or earlier wire protocol handler\n  return new PreTwoSixWireProtocolSupport();\n}\n\nfunction disconnectHandler(self, type, ns, cmd, options, callback) {\n  // Topology is not connected, save the call in the provided store to be\n  // Executed at some point when the handler deems it's reconnected\n  if(!self.s.pool.isConnected() && self.s.disconnectHandler != null && !options.monitoring) {\n    self.s.disconnectHandler.add(type, ns, cmd, options, callback);\n    return true;\n  }\n\n  // If we have no connection error\n  if(!self.s.pool.isConnected()) {\n    callback(MongoError.create(f(\"no connection available to server %s\", self.name)));\n    return true;\n  }\n}\n\nfunction monitoringProcess(self) {\n  return function() {\n    // Pool was destroyed do not continue process\n    if(self.s.pool.isDestroyed()) return;\n    // Emit monitoring Process event\n    self.emit('monitoring', self);\n    // Perform ismaster call\n    // Query options\n    var queryOptions = { numberToSkip: 0, numberToReturn: -1, checkKeys: false, slaveOk: true };\n    // Create a query instance\n    var query = new Query(self.s.bson, 'admin.$cmd', {ismaster:true}, queryOptions);\n    // Get start time\n    var start = new Date().getTime();\n\n    // Execute the ismaster query\n    self.s.pool.write(query, {\n      socketTimeout: (typeof self.s.options.connectionTimeout !== 'number') ? 2000 : self.s.options.connectionTimeout,\n      monitoring: true,\n    }, function(err, result) {\n      // Set initial lastIsMasterMS\n      self.lastIsMasterMS = new Date().getTime() - start;\n      if(self.s.pool.isDestroyed()) return;\n      // Update the ismaster view if we have a result\n      if(result) {\n        self.ismaster = result.result;\n      }\n      // Re-schedule the monitoring process\n      self.monitoringProcessId = setTimeout(monitoringProcess(self), self.s.monitoringInterval);\n    });\n  }\n}\n\nvar eventHandler = function(self, event) {\n  return function(err) {\n    // Log information of received information if in info mode\n    if(self.s.logger.isInfo()) {\n      var object = err instanceof MongoError ? JSON.stringify(err) : {}\n      self.s.logger.info(f('server %s fired event %s out with message %s'\n        , self.name, event, object));\n    }\n\n    // Handle connect event\n    if(event == 'connect') {\n      // Issue an ismaster command at connect\n      // Query options\n      var queryOptions = { numberToSkip: 0, numberToReturn: -1, checkKeys: false, slaveOk: true };\n      // Create a query instance\n      var query = new Query(self.s.bson, 'admin.$cmd', {ismaster:true, client: self.clientInfo}, queryOptions);\n      // Get start time\n      var start = new Date().getTime();\n      // Execute the ismaster query\n      self.s.pool.write(query, {\n        socketTimeout: self.s.options.connectionTimeout || 2000,\n      }, function(err, result) {\n        // Set initial lastIsMasterMS\n        self.lastIsMasterMS = new Date().getTime() - start;\n        if(err) {\n          self.destroy();\n          if(self.listeners('error').length > 0) self.emit('error', err);\n          return;\n        }\n\n        // Ensure no error emitted after initial connect when reconnecting\n        self.initalConnect = false;\n        // Save the ismaster\n        self.ismaster = result.result;\n\n        // It's a proxy change the type so\n        // the wireprotocol will send $readPreference\n        if(self.ismaster.msg == 'isdbgrid') {\n          self._type = 'mongos';\n        }\n        // Add the correct wire protocol handler\n        self.wireProtocolHandler = configureWireProtocolHandler(self, self.ismaster);\n        // Have we defined self monitoring\n        if(self.s.monitoring) {\n          self.monitoringProcessId = setTimeout(monitoringProcess(self), self.s.monitoringInterval);\n        }\n\n        // Emit server description changed if something listening\n        sdam.emitServerDescriptionChanged(self, {\n          address: self.name, arbiters: [], hosts: [], passives: [], type: !self.s.inTopology ? 'Standalone' : sdam.getTopologyType(self)\n        });\n\n        // Emit topology description changed if something listening\n        sdam.emitTopologyDescriptionChanged(self, {\n          topologyType: 'Single', servers: [{address: self.name, arbiters: [], hosts: [], passives: [], type: 'Standalone'}]\n        });\n\n        // Log the ismaster if available\n        if(self.s.logger.isInfo()) {\n          self.s.logger.info(f('server %s connected with ismaster [%s]', self.name, JSON.stringify(self.ismaster)));\n        }\n\n        // Emit connect\n        self.emit('connect', self);\n      });\n    } else if(event == 'error' || event == 'parseError'\n      || event == 'close' || event == 'timeout' || event == 'reconnect'\n      || event == 'attemptReconnect' || 'reconnectFailed') {\n      // Remove server instance from accounting\n      if(serverAccounting && ['close', 'timeout', 'error', 'parseError', 'reconnectFailed'].indexOf(event) != -1) {\n        // Emit toplogy opening event if not in topology\n        if(!self.s.inTopology) {\n          self.emit('topologyOpening', { topologyId: self.id });\n        }\n\n        delete servers[self.id];\n      }\n\n      // Reconnect failed return error\n      if(event == 'reconnectFailed') {\n        self.emit('reconnectFailed', err);\n        // Emit error if any listeners\n        if(self.listeners('error').length > 0) {\n          self.emit('error', err);\n        }\n        // Terminate\n        return;\n      }\n\n      // On first connect fail\n      if(self.s.pool.state == 'disconnected' && self.initalConnect && ['close', 'timeout', 'error', 'parseError'].indexOf(event) != -1) {\n        self.initalConnect = false;\n        return self.emit('error', new MongoError(f('failed to connect to server [%s] on first connect [%s]', self.name, err)));\n      }\n\n      // Reconnect event, emit the server\n      if(event == 'reconnect') {\n        return self.emit(event, self);\n      }\n\n      // Emit the event\n      self.emit(event, err);\n    }\n  }\n}\n\n/**\n * Initiate server connect\n * @method\n * @param {array} [options.auth=null] Array of auth options to apply on connect\n */\nServer.prototype.connect = function(options) {\n  var self = this;\n  options = options || {};\n\n  // Set the connections\n  if(serverAccounting) servers[this.id] = this;\n\n  // Do not allow connect to be called on anything that's not disconnected\n  if(self.s.pool && !self.s.pool.isDisconnected() && !self.s.pool.isDestroyed()) {\n    throw MongoError.create(f('server instance in invalid state %s', self.s.state));\n  }\n\n  // Create a pool\n  self.s.pool = new Pool(assign(self.s.options, options, {bson: this.s.bson}));\n\n  // Set up listeners\n  self.s.pool.on('close', eventHandler(self, 'close'));\n  self.s.pool.on('error', eventHandler(self, 'error'));\n  self.s.pool.on('timeout', eventHandler(self, 'timeout'));\n  self.s.pool.on('parseError', eventHandler(self, 'parseError'));\n  self.s.pool.on('connect', eventHandler(self, 'connect'));\n  self.s.pool.on('reconnect', eventHandler(self, 'reconnect'));\n  self.s.pool.on('reconnectFailed', eventHandler(self, 'reconnectFailed'));\n\n  // Emit toplogy opening event if not in topology\n  if(!self.s.inTopology) {\n    this.emit('topologyOpening', { topologyId: self.id });\n  }\n\n  // Emit opening server event\n  self.emit('serverOpening', {\n    topologyId: self.s.topologyId != -1 ? self.s.topologyId : self.id,\n    address: self.name\n  });\n\n  // Connect with optional auth settings\n  if(options.auth) {\n    self.s.pool.connect.apply(self.s.pool, options.auth);\n  } else {\n    self.s.pool.connect();\n  }\n}\n\n/**\n * Get the server description\n * @method\n * @return {object}\n*/\nServer.prototype.getDescription = function() {\n  var ismaster = this.ismaster || {};\n  var description = {\n    type: sdam.getTopologyType(this),\n    address: this.name,\n  };\n\n  // Add fields if available\n  if(ismaster.hosts) description.hosts = ismaster.hosts;\n  if(ismaster.arbiters) description.arbiters = ismaster.arbiters;\n  if(ismaster.passives) description.passives = ismaster.passives;\n  if(ismaster.setName) description.setName = ismaster.setName;\n  return description;\n}\n\n/**\n * Returns the last known ismaster document for this server\n * @method\n * @return {object}\n */\nServer.prototype.lastIsMaster = function() {\n  return this.ismaster;\n}\n\n/**\n * Unref all connections belong to this server\n * @method\n */\nServer.prototype.unref = function() {\n  this.s.pool.unref();\n}\n\n/**\n * Figure out if the server is connected\n * @method\n * @return {boolean}\n */\nServer.prototype.isConnected = function() {\n  if(!this.s.pool) return false;\n  return this.s.pool.isConnected();\n}\n\n/**\n * Figure out if the server instance was destroyed by calling destroy\n * @method\n * @return {boolean}\n */\nServer.prototype.isDestroyed = function() {\n  if(!this.s.pool) return false;\n  return this.s.pool.isDestroyed();\n}\n\nfunction basicWriteValidations(self) {\n  if(!self.s.pool) return MongoError.create('server instance is not connected');\n  if(self.s.pool.isDestroyed()) return MongoError.create('server instance pool was destroyed');\n}\n\nfunction basicReadValidations(self, options) {\n  basicWriteValidations(self, options);\n\n  if(options.readPreference && !(options.readPreference instanceof ReadPreference)) {\n    throw new Error(\"readPreference must be an instance of ReadPreference\");\n  }\n}\n\n/**\n * Execute a command\n * @method\n * @param {string} ns The MongoDB fully qualified namespace (ex: db1.collection1)\n * @param {object} cmd The command hash\n * @param {ReadPreference} [options.readPreference] Specify read preference if command supports it\n * @param {Boolean} [options.serializeFunctions=false] Specify if functions on an object should be serialized.\n * @param {Boolean} [options.checkKeys=false] Specify if the bson parser should validate keys.\n * @param {Boolean} [options.ignoreUndefined=false] Specify if the BSON serializer should ignore undefined fields.\n * @param {Boolean} [options.fullResult=false] Return the full envelope instead of just the result document.\n * @param {opResultCallback} callback A callback function\n */\nServer.prototype.command = function(ns, cmd, options, callback) {\n  var self = this;\n  if(typeof options == 'function') callback = options, options = {}, options = options || {};\n  var result = basicReadValidations(self, options);\n  if(result) return callback(result);\n\n  // Clone the options\n  options = assign({}, options, { wireProtocolCommand: false });\n\n  // Debug log\n  if(self.s.logger.isDebug()) self.s.logger.debug(f('executing command [%s] against %s', JSON.stringify({\n    ns: ns, cmd: cmd, options: debugOptions(debugFields, options)\n  }), self.name));\n\n  // If we are not connected or have a disconnectHandler specified\n  if(disconnectHandler(self, 'command', ns, cmd, options, callback)) return;\n\n  // Check if we have collation support\n  if(this.ismaster && this.ismaster.maxWireVersion < 5 && cmd.collation) {\n    return callback(new MongoError(f('server %s does not support collation', this.name)));\n  }\n\n  // Query options\n  var queryOptions = {\n    numberToSkip: 0,\n    numberToReturn: -1,\n    checkKeys: typeof options.checkKeys == 'boolean' ? options.checkKeys: false,\n    serializeFunctions: typeof options.serializeFunctions == 'boolean' ? options.serializeFunctions : false,\n    ignoreUndefined: typeof options.ignoreUndefined == 'boolean' ? options.ignoreUndefined : false\n  };\n\n  // Are we executing against a specific topology\n  var topology = options.topology || {};\n  // Create the query object\n  var query = self.wireProtocolHandler.command(self.s.bson, ns, cmd, {}, topology, options);\n  // Set slave OK of the query\n  query.slaveOk = options.readPreference ? options.readPreference.slaveOk() : false;\n\n  // Write options\n  var writeOptions = {\n    raw: typeof options.raw == 'boolean' ? options.raw : false,\n    promoteLongs: typeof options.promoteLongs == 'boolean' ? options.promoteLongs : true,\n    promoteValues: typeof options.promoteValues == 'boolean' ? options.promoteValues : true,\n    promoteBuffers: typeof options.promoteBuffers == 'boolean' ? options.promoteBuffers : false,\n    command: true,\n    monitoring: typeof options.monitoring == 'boolean' ? options.monitoring : false,\n    fullResult: typeof options.fullResult == 'boolean' ? options.fullResult : false,\n    requestId: query.requestId,\n    socketTimeout: typeof options.socketTimeout == 'number' ? options.socketTimeout : null,\n  };\n\n  // Write the operation to the pool\n  self.s.pool.write(query, writeOptions, callback);\n}\n\n/**\n * Insert one or more documents\n * @method\n * @param {string} ns The MongoDB fully qualified namespace (ex: db1.collection1)\n * @param {array} ops An array of documents to insert\n * @param {boolean} [options.ordered=true] Execute in order or out of order\n * @param {object} [options.writeConcern={}] Write concern for the operation\n * @param {Boolean} [options.serializeFunctions=false] Specify if functions on an object should be serialized.\n * @param {Boolean} [options.ignoreUndefined=false] Specify if the BSON serializer should ignore undefined fields.\n * @param {opResultCallback} callback A callback function\n */\nServer.prototype.insert = function(ns, ops, options, callback) {\n  var self = this;\n  if(typeof options == 'function') callback = options, options = {}, options = options || {};\n  var result = basicWriteValidations(self, options);\n  if(result) return callback(result);\n\n  // If we are not connected or have a disconnectHandler specified\n  if(disconnectHandler(self, 'insert', ns, ops, options, callback)) return;\n\n  // Setup the docs as an array\n  ops = Array.isArray(ops) ? ops : [ops];\n\n  // Execute write\n  return self.wireProtocolHandler.insert(self.s.pool, self.ismaster, ns, self.s.bson, ops, options, callback);\n}\n\n/**\n * Perform one or more update operations\n * @method\n * @param {string} ns The MongoDB fully qualified namespace (ex: db1.collection1)\n * @param {array} ops An array of updates\n * @param {boolean} [options.ordered=true] Execute in order or out of order\n * @param {object} [options.writeConcern={}] Write concern for the operation\n * @param {Boolean} [options.serializeFunctions=false] Specify if functions on an object should be serialized.\n * @param {Boolean} [options.ignoreUndefined=false] Specify if the BSON serializer should ignore undefined fields.\n * @param {opResultCallback} callback A callback function\n */\nServer.prototype.update = function(ns, ops, options, callback) {\n  var self = this;\n  if(typeof options == 'function') callback = options, options = {}, options = options || {};\n  var result = basicWriteValidations(self, options);\n  if(result) return callback(result);\n\n  // If we are not connected or have a disconnectHandler specified\n  if(disconnectHandler(self, 'update', ns, ops, options, callback)) return;\n\n  // Check if we have collation support\n  if(this.ismaster && this.ismaster.maxWireVersion < 5 && options.collation) {\n    return callback(new MongoError(f('server %s does not support collation', this.name)));\n  }\n\n  // Setup the docs as an array\n  ops = Array.isArray(ops) ? ops : [ops];\n  // Execute write\n  return self.wireProtocolHandler.update(self.s.pool, self.ismaster, ns, self.s.bson, ops, options, callback);\n}\n\n/**\n * Perform one or more remove operations\n * @method\n * @param {string} ns The MongoDB fully qualified namespace (ex: db1.collection1)\n * @param {array} ops An array of removes\n * @param {boolean} [options.ordered=true] Execute in order or out of order\n * @param {object} [options.writeConcern={}] Write concern for the operation\n * @param {Boolean} [options.serializeFunctions=false] Specify if functions on an object should be serialized.\n * @param {Boolean} [options.ignoreUndefined=false] Specify if the BSON serializer should ignore undefined fields.\n * @param {opResultCallback} callback A callback function\n */\nServer.prototype.remove = function(ns, ops, options, callback) {\n  var self = this;\n  if(typeof options == 'function') callback = options, options = {}, options = options || {};\n  var result = basicWriteValidations(self, options);\n  if(result) return callback(result);\n\n  // If we are not connected or have a disconnectHandler specified\n  if(disconnectHandler(self, 'remove', ns, ops, options, callback)) return;\n\n  // Check if we have collation support\n  if(this.ismaster && this.ismaster.maxWireVersion < 5 && options.collation) {\n    return callback(new MongoError(f('server %s does not support collation', this.name)));\n  }\n\n  // Setup the docs as an array\n  ops = Array.isArray(ops) ? ops : [ops];\n  // Execute write\n  return self.wireProtocolHandler.remove(self.s.pool, self.ismaster, ns, self.s.bson, ops, options, callback);\n}\n\n/**\n * Get a new cursor\n * @method\n * @param {string} ns The MongoDB fully qualified namespace (ex: db1.collection1)\n * @param {{object}|{Long}} cmd Can be either a command returning a cursor or a cursorId\n * @param {object} [options.batchSize=0] Batchsize for the operation\n * @param {array} [options.documents=[]] Initial documents list for cursor\n * @param {ReadPreference} [options.readPreference] Specify read preference if command supports it\n * @param {Boolean} [options.serializeFunctions=false] Specify if functions on an object should be serialized.\n * @param {Boolean} [options.ignoreUndefined=false] Specify if the BSON serializer should ignore undefined fields.\n * @param {opResultCallback} callback A callback function\n */\nServer.prototype.cursor = function(ns, cmd, cursorOptions) {\n  var s = this.s;\n  cursorOptions = cursorOptions || {};\n  // Set up final cursor type\n  var FinalCursor = cursorOptions.cursorFactory || s.Cursor;\n  // Return the cursor\n  return new FinalCursor(s.bson, ns, cmd, cursorOptions, this, s.options);\n}\n\n/**\n * Logout from a database\n * @method\n * @param {string} db The db we are logging out from\n * @param {authResultCallback} callback A callback function\n */\nServer.prototype.logout = function(dbName, callback) {\n  this.s.pool.logout(dbName, callback);\n}\n\n/**\n * Authenticate using a specified mechanism\n * @method\n * @param {string} mechanism The Auth mechanism we are invoking\n * @param {string} db The db we are invoking the mechanism against\n * @param {...object} param Parameters for the specific mechanism\n * @param {authResultCallback} callback A callback function\n */\nServer.prototype.auth = function(mechanism, db) {\n  var self = this;\n\n  // If we have the default mechanism we pick mechanism based on the wire\n  // protocol max version. If it's >= 3 then scram-sha1 otherwise mongodb-cr\n  if(mechanism == 'default' && self.ismaster && self.ismaster.maxWireVersion >= 3) {\n    mechanism = 'scram-sha-1';\n  } else if(mechanism == 'default') {\n    mechanism = 'mongocr';\n  }\n\n  // Slice all the arguments off\n  var args = Array.prototype.slice.call(arguments, 0);\n  // Set the mechanism\n  args[0] = mechanism;\n  // Get the callback\n  var callback = args[args.length - 1];\n\n  // If we are not connected or have a disconnectHandler specified\n  if(disconnectHandler(self, 'auth', db, args, {}, callback)) {\n    return;\n  }\n\n  // Do not authenticate if we are an arbiter\n  if(this.lastIsMaster() && this.lastIsMaster().arbiterOnly) {\n    return callback(null, true);\n  }\n\n  // Apply the arguments to the pool\n  self.s.pool.auth.apply(self.s.pool, args);\n}\n\n/**\n * Compare two server instances\n * @method\n * @param {Server} server Server to compare equality against\n * @return {boolean}\n */\nServer.prototype.equals = function(server) {\n  if(typeof server == 'string') return this.name.toLowerCase() == server.toLowerCase();\n  if(server.name) return this.name.toLowerCase() == server.name.toLowerCase();\n  return false;\n}\n\n/**\n * All raw connections\n * @method\n * @return {Connection[]}\n */\nServer.prototype.connections = function() {\n  return this.s.pool.allConnections();\n}\n\n/**\n * Get server\n * @method\n * @return {Server}\n */\nServer.prototype.getServer = function() {\n  return this;\n}\n\n/**\n * Get connection\n * @method\n * @return {Connection}\n */\nServer.prototype.getConnection = function() {\n  return this.s.pool.get();\n}\n\nvar listeners = ['close', 'error', 'timeout', 'parseError', 'connect'];\n\n/**\n * Destroy the server connection\n * @method\n * @param {boolean} [options.emitClose=false] Emit close event on destroy\n * @param {boolean} [options.emitDestroy=false] Emit destroy event on destroy\n * @param {boolean} [options.force=false] Force destroy the pool\n */\nServer.prototype.destroy = function(options) {\n  options = options || {};\n  var self = this;\n\n  // Set the connections\n  if(serverAccounting) delete servers[this.id];\n\n  // Destroy the monitoring process if any\n  if(this.monitoringProcessId) {\n    clearTimeout(this.monitoringProcessId);\n  }\n\n  // No pool, return\n  if(!self.s.pool) return;\n\n  // Emit close event\n  if(options.emitClose) {\n    self.emit('close', self);\n  }\n\n  // Emit destroy event\n  if(options.emitDestroy) {\n    self.emit('destroy', self);\n  }\n\n  // Remove all listeners\n  listeners.forEach(function(event) {\n    self.s.pool.removeAllListeners(event);\n  });\n\n  // Emit opening server event\n  if(self.listeners('serverClosed').length > 0) self.emit('serverClosed', {\n    topologyId: self.s.topologyId != -1 ? self.s.topologyId : self.id, address: self.name\n  });\n\n  // Emit toplogy opening event if not in topology\n  if(self.listeners('topologyClosed').length > 0 && !self.s.inTopology) {\n    self.emit('topologyClosed', { topologyId: self.id });\n  }\n\n  if(self.s.logger.isDebug()) {\n    self.s.logger.debug(f('destroy called on server %s', self.name));\n  }\n\n  // Destroy the pool\n  this.s.pool.destroy(options.force);\n}\n\n/**\n * A server connect event, used to verify that the connection is up and running\n *\n * @event Server#connect\n * @type {Server}\n */\n\n/**\n * A server reconnect event, used to verify that the server topology has reconnected\n *\n * @event Server#reconnect\n * @type {Server}\n */\n\n/**\n * A server opening SDAM monitoring event\n *\n * @event Server#serverOpening\n * @type {object}\n */\n\n/**\n * A server closed SDAM monitoring event\n *\n * @event Server#serverClosed\n * @type {object}\n */\n\n/**\n * A server description SDAM change monitoring event\n *\n * @event Server#serverDescriptionChanged\n * @type {object}\n */\n\n/**\n * A topology open SDAM event\n *\n * @event Server#topologyOpening\n * @type {object}\n */\n\n/**\n * A topology closed SDAM event\n *\n * @event Server#topologyClosed\n * @type {object}\n */\n\n/**\n * A topology structure SDAM change event\n *\n * @event Server#topologyDescriptionChanged\n * @type {object}\n */\n\n/**\n * Server reconnect failed\n *\n * @event Server#reconnectFailed\n * @type {Error}\n */\n\n/**\n * Server connection pool closed\n *\n * @event Server#close\n * @type {object}\n */\n\n/**\n * Server connection pool caused an error\n *\n * @event Server#error\n * @type {Error}\n */\n\n/**\n * Server destroyed was called\n *\n * @event Server#destroy\n * @type {Server}\n */\n\nmodule.exports = Server;\n"]}