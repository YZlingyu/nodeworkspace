{"version":3,"sources":["mongos.js"],"names":[],"mappings":"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","file":"mongos-compiled.js","sourcesContent":["\"use strict\"\n\nvar inherits = require('util').inherits,\n  f = require('util').format,\n  EventEmitter = require('events').EventEmitter,\n  BasicCursor = require('../cursor'),\n  Logger = require('../connection/logger'),\n  retrieveBSON = require('../connection/utils').retrieveBSON,\n  MongoError = require('../error'),\n  Server = require('./server'),\n  assign = require('./shared').assign,\n  clone = require('./shared').clone,\n  cloneOptions = require('./shared').cloneOptions,\n  createClientInfo = require('./shared').createClientInfo;\n\nvar BSON = retrieveBSON();\n\n/**\n * @fileOverview The **Mongos** class is a class that represents a Mongos Proxy topology and is\n * used to construct connections.\n *\n * @example\n * var Mongos = require('mongodb-core').Mongos\n *   , ReadPreference = require('mongodb-core').ReadPreference\n *   , assert = require('assert');\n *\n * var server = new Mongos([{host: 'localhost', port: 30000}]);\n * // Wait for the connection event\n * server.on('connect', function(server) {\n *   server.destroy();\n * });\n *\n * // Start connecting\n * server.connect();\n */\n\nvar MongoCR = require('../auth/mongocr')\n  , X509 = require('../auth/x509')\n  , Plain = require('../auth/plain')\n  , GSSAPI = require('../auth/gssapi')\n  , SSPI = require('../auth/sspi')\n  , ScramSHA1 = require('../auth/scram');\n\n//\n// States\nvar DISCONNECTED = 'disconnected';\nvar CONNECTING = 'connecting';\nvar CONNECTED = 'connected';\nvar UNREFERENCED = 'unreferenced';\nvar DESTROYED = 'destroyed';\n\nfunction stateTransition(self, newState) {\n  var legalTransitions = {\n    'disconnected': [CONNECTING, DESTROYED, DISCONNECTED],\n    'connecting': [CONNECTING, DESTROYED, CONNECTED, DISCONNECTED],\n    'connected': [CONNECTED, DISCONNECTED, DESTROYED, UNREFERENCED],\n    'unreferenced': [UNREFERENCED, DESTROYED],\n    'destroyed': [DESTROYED]\n  }\n\n  // Get current state\n  var legalStates = legalTransitions[self.state];\n  if(legalStates && legalStates.indexOf(newState) != -1) {\n    self.state = newState;\n  } else {\n    self.logger.error(f('Pool with id [%s] failed attempted illegal state transition from [%s] to [%s] only following state allowed [%s]'\n      , self.id, self.state, newState, legalStates));\n  }\n}\n\n//\n// ReplSet instance id\nvar id = 1;\nvar handlers = ['connect', 'close', 'error', 'timeout', 'parseError'];\n\n/**\n * Creates a new Mongos instance\n * @class\n * @param {array} seedlist A list of seeds for the replicaset\n * @param {number} [options.haInterval=5000] The High availability period for replicaset inquiry\n * @param {Cursor} [options.cursorFactory=Cursor] The cursor factory class used for all query cursors\n * @param {number} [options.size=5] Server connection pool size\n * @param {boolean} [options.keepAlive=true] TCP Connection keep alive enabled\n * @param {number} [options.keepAliveInitialDelay=0] Initial delay before TCP keep alive enabled\n * @param {number} [options.localThresholdMS=15] Cutoff latency point in MS for MongoS proxy selection\n * @param {boolean} [options.noDelay=true] TCP Connection no delay\n * @param {number} [options.connectionTimeout=1000] TCP Connection timeout setting\n * @param {number} [options.socketTimeout=0] TCP Socket timeout setting\n * @param {boolean} [options.singleBufferSerializtion=true] Serialize into single buffer, trade of peak memory for serialization speed\n * @param {boolean} [options.ssl=false] Use SSL for connection\n * @param {boolean|function} [options.checkServerIdentity=true] Ensure we check server identify during SSL, set to false to disable checking. Only works for Node 0.12.x or higher. You can pass in a boolean or your own checkServerIdentity override function.\n * @param {Buffer} [options.ca] SSL Certificate store binary buffer\n * @param {Buffer} [options.crl] SSL Certificate revocation store binary buffer\n * @param {Buffer} [options.cert] SSL Certificate binary buffer\n * @param {Buffer} [options.key] SSL Key file binary buffer\n * @param {string} [options.passphrase] SSL Certificate pass phrase\n * @param {string} [options.servername=null] String containing the server name requested via TLS SNI.\n * @param {boolean} [options.rejectUnauthorized=true] Reject unauthorized server certificates\n * @param {boolean} [options.promoteLongs=true] Convert Long values from the db into Numbers if they fit into 53 bits\n * @param {boolean} [options.promoteValues=true] Promotes BSON values to native types where possible, set to false to only receive wrapper types.\n * @param {boolean} [options.promoteBuffers=false] Promotes Binary BSON values to native Node Buffers.\n * @param {boolean} [options.domainsEnabled=false] Enable the wrapping of the callback in the current domain, disabled by default to avoid perf hit.\n * @return {Mongos} A cursor instance\n * @fires Mongos#connect\n * @fires Mongos#reconnect\n * @fires Mongos#joined\n * @fires Mongos#left\n * @fires Mongos#failed\n * @fires Mongos#fullsetup\n * @fires Mongos#all\n * @fires Mongos#serverHeartbeatStarted\n * @fires Mongos#serverHeartbeatSucceeded\n * @fires Mongos#serverHeartbeatFailed\n * @fires Mongos#topologyOpening\n * @fires Mongos#topologyClosed\n * @fires Mongos#topologyDescriptionChanged\n * @property {string} type the topology type.\n * @property {string} parserType the parser type used (c++ or js).\n */\nvar Mongos = function(seedlist, options) {\n  options = options || {};\n\n  // Get replSet Id\n  this.id = id++;\n\n  // Internal state\n  this.s = {\n    options: assign({}, options),\n    // BSON instance\n    bson: options.bson || new BSON([BSON.Binary, BSON.Code, BSON.DBRef, BSON.Decimal128,\n      BSON.Double, BSON.Int32, BSON.Long, BSON.Map, BSON.MaxKey, BSON.MinKey,\n      BSON.ObjectId, BSON.BSONRegExp, BSON.Symbol, BSON.Timestamp]),\n    // Factory overrides\n    Cursor: options.cursorFactory || BasicCursor,\n    // Logger instance\n    logger: Logger('Mongos', options),\n    // Seedlist\n    seedlist: seedlist,\n    // Ha interval\n    haInterval: options.haInterval ? options.haInterval : 10000,\n    // Disconnect handler\n    disconnectHandler: options.disconnectHandler,\n    // Server selection index\n    index: 0,\n    // Connect function options passed in\n    connectOptions: {},\n    // Are we running in debug mode\n    debug: typeof options.debug == 'boolean' ? options.debug : false,\n    // localThresholdMS\n    localThresholdMS: options.localThresholdMS || 15,\n    // Client info\n    clientInfo: createClientInfo(options),\n    // Authentication context\n    authenticationContexts: [],\n  }\n\n  // Set the client info\n  this.s.options.clientInfo = createClientInfo(options);\n\n  // Log info warning if the socketTimeout < haInterval as it will cause\n  // a lot of recycled connections to happen.\n  if(this.s.logger.isWarn()\n    && this.s.options.socketTimeout != 0\n    && this.s.options.socketTimeout < this.s.haInterval) {\n      this.s.logger.warn(f('warning socketTimeout %s is less than haInterval %s. This might cause unnecessary server reconnections due to socket timeouts'\n        , this.s.options.socketTimeout, this.s.haInterval));\n  }\n\n  // All the authProviders\n  this.authProviders = options.authProviders || {\n      'mongocr': new MongoCR(this.s.bson), 'x509': new X509(this.s.bson)\n    , 'plain': new Plain(this.s.bson), 'gssapi': new GSSAPI(this.s.bson)\n    , 'sspi': new SSPI(this.s.bson), 'scram-sha-1': new ScramSHA1(this.s.bson)\n  }\n\n  // Disconnected state\n  this.state = DISCONNECTED;\n\n  // Current proxies we are connecting to\n  this.connectingProxies = [];\n  // Currently connected proxies\n  this.connectedProxies = [];\n  // Disconnected proxies\n  this.disconnectedProxies = [];\n  // Are we authenticating\n  this.authenticating = false;\n  // Index of proxy to run operations against\n  this.index = 0;\n  // High availability timeout id\n  this.haTimeoutId = null;\n  // Last ismaster\n  this.ismaster = null;\n\n  // Add event listener\n  EventEmitter.call(this);\n}\n\ninherits(Mongos, EventEmitter);\n\nObject.defineProperty(Mongos.prototype, 'type', {\n  enumerable:true, get: function() { return 'mongos'; }\n});\n\nObject.defineProperty(Mongos.prototype, 'parserType', {\n  enumerable:true, get: function() {\n    return BSON.native ? \"c++\" : \"js\";\n  }\n});\n\n/**\n * Emit event if it exists\n * @method\n */\nfunction emitSDAMEvent(self, event, description) {\n  if(self.listeners(event).length > 0) {\n    self.emit(event, description);\n  }\n}\n\n/**\n * Initiate server connect\n * @method\n * @param {array} [options.auth=null] Array of auth options to apply on connect\n */\nMongos.prototype.connect = function(options) {\n  var self = this;\n  // Add any connect level options to the internal state\n  this.s.connectOptions = options || {};\n  // Set connecting state\n  stateTransition(this, CONNECTING);\n  // Create server instances\n  var servers = this.s.seedlist.map(function(x) {\n    return new Server(assign({}, self.s.options, x, {\n      authProviders: self.authProviders, reconnect:false, monitoring:false, inTopology: true\n    }, {\n      clientInfo: clone(self.s.clientInfo)\n    }));\n  });\n\n  // Emit the topology opening event\n  emitSDAMEvent(this, 'topologyOpening', { topologyId: this.id });\n\n  // Start all server connections\n  connectProxies(self, servers);\n}\n\nfunction handleEvent(self) {\n  return function() {\n    if(self.state == DESTROYED) return;\n    // Move to list of disconnectedProxies\n    moveServerFrom(self.connectedProxies, self.disconnectedProxies, this);\n    // Emit the left signal\n    self.emit('left', 'mongos', this);\n  }\n}\n\nfunction handleInitialConnectEvent(self, event) {\n  return function() {\n    var _this = this;\n\n    // Destroy the instance\n    if(self.state == DESTROYED) {\n      // Move from connectingProxies\n      moveServerFrom(self.connectingProxies, self.disconnectedProxies, this);\n      return this.destroy();\n    }\n\n    // Check the type of server\n    if(event == 'connect') {\n      // Do we have authentication contexts that need to be applied\n      applyAuthenticationContexts(self, _this, function() {\n        // Get last known ismaster\n        self.ismaster = _this.lastIsMaster();\n\n        // Is this not a proxy, remove t\n        if(self.ismaster.msg == 'isdbgrid') {\n          // Add to the connectd list\n          for(var i = 0; i < self.connectedProxies.length; i++) {\n            if(self.connectedProxies[i].name == _this.name) {\n              // Move from connectingProxies\n              moveServerFrom(self.connectingProxies, self.disconnectedProxies, _this);\n              _this.destroy();\n              return self.emit('failed', _this);\n            }\n          }\n\n          // Remove the handlers\n          for(i = 0; i < handlers.length; i++) {\n            _this.removeAllListeners(handlers[i]);\n          }\n\n          // Add stable state handlers\n          _this.on('error', handleEvent(self, 'error'));\n          _this.on('close', handleEvent(self, 'close'));\n          _this.on('timeout', handleEvent(self, 'timeout'));\n          _this.on('parseError', handleEvent(self, 'parseError'));\n\n          // Move from connecting proxies connected\n          moveServerFrom(self.connectingProxies, self.connectedProxies, _this);\n          // Emit the joined event\n          self.emit('joined', 'mongos', _this);\n        } else {\n\n          // Print warning if we did not find a mongos proxy\n          if(self.s.logger.isWarn()) {\n            var message = 'expected mongos proxy, but found replicaset member mongod for server %s';\n            // We have a standalone server\n            if(!self.ismaster.hosts) {\n              message = 'expected mongos proxy, but found standalone mongod for server %s';\n            }\n\n            self.s.logger.warn(f(message, _this.name));\n          }\n\n          // This is not a mongos proxy, remove it completely\n          removeProxyFrom(self.connectingProxies, _this);\n          // Emit the left event\n          self.emit('left', 'server', _this);\n          // Emit failed event\n          self.emit('failed', _this);\n        }\n      });\n    } else {\n      moveServerFrom(self.connectingProxies, self.disconnectedProxies, this);\n      // Emit the left event\n      self.emit('left', 'mongos', this);\n      // Emit failed event\n      self.emit('failed', this);\n    }\n\n    // Trigger topologyMonitor\n    if(self.connectingProxies.length == 0) {\n      // Emit connected if we are connected\n      if(self.connectedProxies.length > 0) {\n        // Set the state to connected\n        stateTransition(self, CONNECTED);\n        // Emit the connect event\n        self.emit('connect', self);\n        self.emit('fullsetup', self);\n        self.emit('all', self);\n      } else if(self.disconnectedProxies.length == 0) {\n        // Print warning if we did not find a mongos proxy\n        if(self.s.logger.isWarn()) {\n          self.s.logger.warn(f('no mongos proxies found in seed list, did you mean to connect to a replicaset'));\n        }\n\n        // Emit the error that no proxies were found\n        return self.emit('error', new MongoError('no mongos proxies found in seed list'));\n      }\n\n      // Topology monitor\n      topologyMonitor(self, {firstConnect:true});\n    }\n  };\n}\n\nfunction connectProxies(self, servers) {\n  // Update connectingProxies\n  self.connectingProxies = self.connectingProxies.concat(servers);\n\n  // Index used to interleaf the server connects, avoiding\n  // runtime issues on io constrained vm's\n  var timeoutInterval = 0;\n\n  function connect(server, timeoutInterval) {\n    setTimeout(function() {\n      // Add event handlers\n      server.once('close', handleInitialConnectEvent(self, 'close'));\n      server.once('timeout', handleInitialConnectEvent(self, 'timeout'));\n      server.once('parseError', handleInitialConnectEvent(self, 'parseError'));\n      server.once('error', handleInitialConnectEvent(self, 'error'));\n      server.once('connect', handleInitialConnectEvent(self, 'connect'));\n      // SDAM Monitoring events\n      server.on('serverOpening', function(e) { self.emit('serverOpening', e); });\n      server.on('serverDescriptionChanged', function(e) { self.emit('serverDescriptionChanged', e); });\n      server.on('serverClosed', function(e) { self.emit('serverClosed', e); });\n      // Start connection\n      server.connect(self.s.connectOptions);\n    }, timeoutInterval);\n  }\n  // Start all the servers\n  while(servers.length > 0) {\n    connect(servers.shift(), timeoutInterval++);\n  }\n}\n\nfunction pickProxy(self) {\n  // Get the currently connected Proxies\n  var connectedProxies = self.connectedProxies.slice(0);\n\n  // Set lower bound\n  var lowerBoundLatency = Number.MAX_VALUE;\n\n  // Determine the lower bound for the Proxies\n  for(var i = 0; i < connectedProxies.length; i++) {\n    if(connectedProxies[i].lastIsMasterMS < lowerBoundLatency) {\n      lowerBoundLatency = connectedProxies[i].lastIsMasterMS;\n    }\n  }\n\n  // Filter out the possible servers\n  connectedProxies = connectedProxies.filter(function(server) {\n    if((server.lastIsMasterMS <= (lowerBoundLatency + self.s.localThresholdMS))\n      && server.isConnected()) {\n      return true;\n    }\n  });\n\n  // We have no connectedProxies pick first of the connected ones\n  if(connectedProxies.length == 0) {\n    return self.connectedProxies[0];\n  }\n\n  // Get proxy\n  var proxy = connectedProxies[self.index % connectedProxies.length];\n  // Update the index\n  self.index = (self.index + 1) % connectedProxies.length;\n  // Return the proxy\n  return proxy;\n}\n\nfunction moveServerFrom(from, to, proxy) {\n  for(var i = 0; i < from.length; i++) {\n    if(from[i].name == proxy.name) {\n      from.splice(i, 1);\n    }\n  }\n\n  for(i = 0; i < to.length; i++) {\n    if(to[i].name == proxy.name) {\n      to.splice(i, 1);\n    }\n  }\n\n  to.push(proxy);\n}\n\nfunction removeProxyFrom(from, proxy) {\n  for(var i = 0; i < from.length; i++) {\n    if(from[i].name == proxy.name) {\n      from.splice(i, 1);\n    }\n  }\n}\n\nfunction reconnectProxies(self, proxies, callback) {\n  // Count lefts\n  var count = proxies.length;\n\n  // Handle events\n  var _handleEvent = function(self, event) {\n    return function() {\n      var _self = this;\n      count = count - 1;\n\n      // Destroyed\n      if(self.state == DESTROYED || self.state == UNREFERENCED) {\n        moveServerFrom(self.connectingProxies, self.disconnectedProxies, _self);\n        return this.destroy();\n      }\n\n      if(event == 'connect' && !self.authenticating) {\n        // Do we have authentication contexts that need to be applied\n        applyAuthenticationContexts(self, _self, function() {\n          // Destroyed\n          if(self.state == DESTROYED || self.state == UNREFERENCED) {\n            moveServerFrom(self.connectingProxies, self.disconnectedProxies, _self);\n            return _self.destroy();\n          }\n\n          // Remove the handlers\n          for(var i = 0; i < handlers.length; i++) {\n            _self.removeAllListeners(handlers[i]);\n          }\n\n          // Add stable state handlers\n          _self.on('error', handleEvent(self, 'error'));\n          _self.on('close', handleEvent(self, 'close'));\n          _self.on('timeout', handleEvent(self, 'timeout'));\n          _self.on('parseError', handleEvent(self, 'parseError'));\n\n          // Move to the connected servers\n          moveServerFrom(self.disconnectedProxies, self.connectedProxies, _self);\n          // Emit joined event\n          self.emit('joined', 'mongos', _self);\n        });\n      } else if(event == 'connect' && self.authenticating) {\n        // Move from connectingProxies\n        moveServerFrom(self.connectingProxies, self.disconnectedProxies, _self);\n        this.destroy();\n      }\n\n      // Are we done finish up callback\n      if(count == 0) {\n        callback();\n      }\n    }\n  }\n\n  // No new servers\n  if(count == 0) {\n    return callback();\n  }\n\n  // Execute method\n  function execute(_server, i) {\n    setTimeout(function() {\n      // Destroyed\n      if(self.state == DESTROYED || self.state == UNREFERENCED) {\n        return;\n      }\n\n      // Create a new server instance\n      var server = new Server(assign({}, self.s.options, {\n        host: _server.name.split(':')[0],\n        port: parseInt(_server.name.split(':')[1], 10)\n      }, {\n        authProviders: self.authProviders, reconnect:false, monitoring: false, inTopology: true\n      }, {\n        clientInfo: clone(self.s.clientInfo)\n      }));\n\n      // Add temp handlers\n      server.once('connect', _handleEvent(self, 'connect'));\n      server.once('close', _handleEvent(self, 'close'));\n      server.once('timeout', _handleEvent(self, 'timeout'));\n      server.once('error', _handleEvent(self, 'error'));\n      server.once('parseError', _handleEvent(self, 'parseError'));\n\n      // SDAM Monitoring events\n      server.on('serverOpening', function(e) { self.emit('serverOpening', e); });\n      server.on('serverDescriptionChanged', function(e) { self.emit('serverDescriptionChanged', e); });\n      server.on('serverClosed', function(e) { self.emit('serverClosed', e); });\n      server.connect(self.s.connectOptions);\n    }, i);\n  }\n\n  // Create new instances\n  for(var i = 0; i < proxies.length; i++) {\n    execute(proxies[i], i);\n  }\n}\n\nfunction applyAuthenticationContexts(self, server, callback) {\n  if(self.s.authenticationContexts.length == 0) {\n    return callback();\n  }\n\n  // Copy contexts to ensure no modificiation in the middle of\n  // auth process.\n  var authContexts = self.s.authenticationContexts.slice(0);\n\n  // Apply one of the contexts\n  function applyAuth(authContexts, server, callback) {\n    if(authContexts.length == 0) return callback();\n    // Get the first auth context\n    var authContext = authContexts.shift();\n    // Copy the params\n    var customAuthContext = authContext.slice(0);\n    // Push our callback handler\n    customAuthContext.push(function(err) {\n      applyAuth(authContexts, server, callback);\n    });\n\n    // Attempt authentication\n    server.auth.apply(server, customAuthContext)\n  }\n\n  // Apply all auth contexts\n  applyAuth(authContexts, server, callback);\n}\n\nfunction topologyMonitor(self, options) {\n  options = options || {};\n\n  // Set momitoring timeout\n  self.haTimeoutId = setTimeout(function() {\n    if(self.state == DESTROYED || self.state == UNREFERENCED) return;\n    // If we have a primary and a disconnect handler, execute\n    // buffered operations\n    if(self.isConnected() && self.s.disconnectHandler) {\n      self.s.disconnectHandler.execute();\n    }\n\n    // Get the connectingServers\n    var proxies = self.connectedProxies.slice(0);\n    // Get the count\n    var count = proxies.length;\n\n    // If the count is zero schedule a new fast\n    function pingServer(_self, _server, cb) {\n      // Measure running time\n      var start = new Date().getTime();\n\n      // Emit the server heartbeat start\n      emitSDAMEvent(self, 'serverHeartbeatStarted', { connectionId: _server.name });\n\n      // Execute ismaster\n      _server.command('admin.$cmd', {\n        ismaster:true\n      }, {\n        monitoring: true,\n        socketTimeout: self.s.options.connectionTimeout || 2000,\n      }, function(err, r) {\n        if(self.state == DESTROYED || self.state == UNREFERENCED) {\n          // Move from connectingProxies\n          moveServerFrom(self.connectedProxies, self.disconnectedProxies, _server);\n          _server.destroy();\n          return cb(err, r);\n        }\n\n        // Calculate latency\n        var latencyMS = new Date().getTime() - start;\n\n        // We had an error, remove it from the state\n        if(err) {\n          // Emit the server heartbeat failure\n          emitSDAMEvent(self, 'serverHeartbeatFailed', { durationMS: latencyMS, failure: err, connectionId: _server.name });\n          // Move from connected proxies to disconnected proxies\n          moveServerFrom(self.connectedProxies, self.disconnectedProxies, _server);\n        } else {\n          // Update the server ismaster\n          _server.ismaster = r.result;\n          _server.lastIsMasterMS = latencyMS;\n\n          // Server heart beat event\n          emitSDAMEvent(self, 'serverHeartbeatSucceeded', { durationMS: latencyMS, reply: r.result, connectionId: _server.name });\n        }\n\n        cb(err, r);\n      });\n    }\n\n    // No proxies initiate monitor again\n    if(proxies.length == 0) {\n      // Emit close event if any listeners registered\n      if(self.listeners(\"close\").length > 0 && self.state == CONNECTING) {\n        self.emit('error', new MongoError('no mongos proxy available'));\n      } else {\n        self.emit('close', self);\n      }\n\n      // Attempt to connect to any unknown servers\n      return reconnectProxies(self, self.disconnectedProxies, function() {\n        if(self.state == DESTROYED || self.state == UNREFERENCED) return;\n\n        // Are we connected ? emit connect event\n        if(self.state == CONNECTING && options.firstConnect) {\n          self.emit('connect', self);\n          self.emit('fullsetup', self);\n          self.emit('all', self);\n        } else if(self.isConnected()) {\n          self.emit('reconnect', self);\n        } else if(!self.isConnected() && self.listeners(\"close\").length > 0) {\n          self.emit('close', self);\n        }\n\n        // Perform topology monitor\n        topologyMonitor(self);\n      });\n    }\n\n    // Ping all servers\n    for(var i = 0; i < proxies.length; i++) {\n      pingServer(self, proxies[i], function() {\n        count = count - 1;\n\n        if(count == 0) {\n          if(self.state == DESTROYED || self.state == UNREFERENCED) return;\n\n          // Attempt to connect to any unknown servers\n          reconnectProxies(self, self.disconnectedProxies, function() {\n            if(self.state == DESTROYED || self.state == UNREFERENCED) return;\n            // Perform topology monitor\n            topologyMonitor(self);\n          });\n        }\n      });\n    }\n  }, self.s.haInterval);\n}\n\n/**\n * Returns the last known ismaster document for this server\n * @method\n * @return {object}\n */\nMongos.prototype.lastIsMaster = function() {\n  return this.ismaster;\n}\n\n/**\n * Unref all connections belong to this server\n * @method\n */\nMongos.prototype.unref = function() {\n  // Transition state\n  stateTransition(this, UNREFERENCED);\n  // Get all proxies\n  var proxies = this.connectedProxies.concat(this.connectingProxies);\n  proxies.forEach(function(x) {\n    x.unref();\n  });\n\n  clearTimeout(this.haTimeoutId);\n}\n\n/**\n * Destroy the server connection\n * @param {boolean} [options.force=false] Force destroy the pool\n * @method\n */\nMongos.prototype.destroy = function(options) {\n  // Transition state\n  stateTransition(this, DESTROYED);\n  // Get all proxies\n  var proxies = this.connectedProxies.concat(this.connectingProxies);\n  // Clear out any monitoring process\n  if(this.haTimeoutId) clearTimeout(this.haTimeoutId);\n  // Clear out authentication contexts\n  this.s.authenticationContexts = [];\n\n  // Destroy all connecting servers\n  proxies.forEach(function(x) {\n    x.destroy(options);\n  });\n\n  // Emit toplogy closing event\n  emitSDAMEvent(this, 'topologyClosed', { topologyId: this.id });\n}\n\n/**\n * Figure out if the server is connected\n * @method\n * @return {boolean}\n */\nMongos.prototype.isConnected = function() {\n  return this.connectedProxies.length > 0;\n}\n\n/**\n * Figure out if the server instance was destroyed by calling destroy\n * @method\n * @return {boolean}\n */\nMongos.prototype.isDestroyed = function() {\n  return this.state == DESTROYED;\n}\n\n//\n// Operations\n//\n\n// Execute write operation\nvar executeWriteOperation = function(self, op, ns, ops, options, callback) {\n  if(typeof options == 'function') callback = options, options = {}, options = options || {};\n  // Ensure we have no options\n  options = options || {};\n  // Pick a server\n  var server = pickProxy(self);\n  // No server found error out\n  if(!server) return callback(new MongoError('no mongos proxy available'));\n  // Execute the command\n  server[op](ns, ops, options, callback);\n}\n\n/**\n * Insert one or more documents\n * @method\n * @param {string} ns The MongoDB fully qualified namespace (ex: db1.collection1)\n * @param {array} ops An array of documents to insert\n * @param {boolean} [options.ordered=true] Execute in order or out of order\n * @param {object} [options.writeConcern={}] Write concern for the operation\n * @param {Boolean} [options.serializeFunctions=false] Specify if functions on an object should be serialized.\n * @param {Boolean} [options.ignoreUndefined=false] Specify if the BSON serializer should ignore undefined fields.\n * @param {opResultCallback} callback A callback function\n */\nMongos.prototype.insert = function(ns, ops, options, callback) {\n  if(typeof options == 'function') callback = options, options = {}, options = options || {};\n  if(this.state == DESTROYED) return callback(new MongoError(f('topology was destroyed')));\n\n  // Not connected but we have a disconnecthandler\n  if(!this.isConnected() && this.s.disconnectHandler != null) {\n    return this.s.disconnectHandler.add('insert', ns, ops, options, callback);\n  }\n\n  // No mongos proxy available\n  if(!this.isConnected()) {\n    return callback(new MongoError('no mongos proxy available'));\n  }\n\n  // Execute write operation\n  executeWriteOperation(this, 'insert', ns, ops, options, callback);\n}\n\n/**\n * Perform one or more update operations\n * @method\n * @param {string} ns The MongoDB fully qualified namespace (ex: db1.collection1)\n * @param {array} ops An array of updates\n * @param {boolean} [options.ordered=true] Execute in order or out of order\n * @param {object} [options.writeConcern={}] Write concern for the operation\n * @param {Boolean} [options.serializeFunctions=false] Specify if functions on an object should be serialized.\n * @param {Boolean} [options.ignoreUndefined=false] Specify if the BSON serializer should ignore undefined fields.\n * @param {opResultCallback} callback A callback function\n */\nMongos.prototype.update = function(ns, ops, options, callback) {\n  if(typeof options == 'function') callback = options, options = {}, options = options || {};\n  if(this.state == DESTROYED) return callback(new MongoError(f('topology was destroyed')));\n\n  // Not connected but we have a disconnecthandler\n  if(!this.isConnected() && this.s.disconnectHandler != null) {\n    return this.s.disconnectHandler.add('update', ns, ops, options, callback);\n  }\n\n  // No mongos proxy available\n  if(!this.isConnected()) {\n    return callback(new MongoError('no mongos proxy available'));\n  }\n\n  // Execute write operation\n  executeWriteOperation(this, 'update', ns, ops, options, callback);\n}\n\n/**\n * Perform one or more remove operations\n * @method\n * @param {string} ns The MongoDB fully qualified namespace (ex: db1.collection1)\n * @param {array} ops An array of removes\n * @param {boolean} [options.ordered=true] Execute in order or out of order\n * @param {object} [options.writeConcern={}] Write concern for the operation\n * @param {Boolean} [options.serializeFunctions=false] Specify if functions on an object should be serialized.\n * @param {Boolean} [options.ignoreUndefined=false] Specify if the BSON serializer should ignore undefined fields.\n * @param {opResultCallback} callback A callback function\n */\nMongos.prototype.remove = function(ns, ops, options, callback) {\n  if(typeof options == 'function') callback = options, options = {}, options = options || {};\n  if(this.state == DESTROYED) return callback(new MongoError(f('topology was destroyed')));\n\n  // Not connected but we have a disconnecthandler\n  if(!this.isConnected() && this.s.disconnectHandler != null) {\n    return this.s.disconnectHandler.add('remove', ns, ops, options, callback);\n  }\n\n  // No mongos proxy available\n  if(!this.isConnected()) {\n    return callback(new MongoError('no mongos proxy available'));\n  }\n\n  // Execute write operation\n  executeWriteOperation(this, 'remove', ns, ops, options, callback);\n}\n\n/**\n * Execute a command\n * @method\n * @param {string} ns The MongoDB fully qualified namespace (ex: db1.collection1)\n * @param {object} cmd The command hash\n * @param {ReadPreference} [options.readPreference] Specify read preference if command supports it\n * @param {Connection} [options.connection] Specify connection object to execute command against\n * @param {Boolean} [options.serializeFunctions=false] Specify if functions on an object should be serialized.\n * @param {Boolean} [options.ignoreUndefined=false] Specify if the BSON serializer should ignore undefined fields.\n * @param {opResultCallback} callback A callback function\n */\nMongos.prototype.command = function(ns, cmd, options, callback) {\n  if(typeof options == 'function') callback = options, options = {}, options = options || {};\n  if(this.state == DESTROYED) return callback(new MongoError(f('topology was destroyed')));\n  var self = this;\n\n  // Pick a proxy\n  var server = pickProxy(self);\n\n  // Topology is not connected, save the call in the provided store to be\n  // Executed at some point when the handler deems it's reconnected\n  if((server == null || !server.isConnected()) && this.s.disconnectHandler != null) {\n    return this.s.disconnectHandler.add('command', ns, cmd, options, callback);\n  }\n\n  // No server returned we had an error\n  if(server == null) {\n    return callback(new MongoError('no mongos proxy available'));\n  }\n\n  // Cloned options\n  var clonedOptions = cloneOptions(options);\n  clonedOptions.topology = self;\n\n  // Execute the command\n  server.command(ns, cmd, clonedOptions, callback);\n}\n\n/**\n * Perform one or more remove operations\n * @method\n * @param {string} ns The MongoDB fully qualified namespace (ex: db1.collection1)\n * @param {{object}|{Long}} cmd Can be either a command returning a cursor or a cursorId\n * @param {object} [options.batchSize=0] Batchsize for the operation\n * @param {array} [options.documents=[]] Initial documents list for cursor\n * @param {ReadPreference} [options.readPreference] Specify read preference if command supports it\n * @param {Boolean} [options.serializeFunctions=false] Specify if functions on an object should be serialized.\n * @param {Boolean} [options.ignoreUndefined=false] Specify if the BSON serializer should ignore undefined fields.\n * @param {opResultCallback} callback A callback function\n */\nMongos.prototype.cursor = function(ns, cmd, cursorOptions) {\n  cursorOptions = cursorOptions || {};\n  var FinalCursor = cursorOptions.cursorFactory || this.s.Cursor;\n  return new FinalCursor(this.s.bson, ns, cmd, cursorOptions, this, this.s.options);\n}\n\n/**\n * Authenticate using a specified mechanism\n * @method\n * @param {string} mechanism The Auth mechanism we are invoking\n * @param {string} db The db we are invoking the mechanism against\n * @param {...object} param Parameters for the specific mechanism\n * @param {authResultCallback} callback A callback function\n */\nMongos.prototype.auth = function(mechanism, db) {\n  var allArgs = Array.prototype.slice.call(arguments, 0).slice(0);\n  var self = this;\n  var args = Array.prototype.slice.call(arguments, 2);\n  var callback = args.pop();\n  var currentContextIndex = 0;\n\n  // If we don't have the mechanism fail\n  if(this.authProviders[mechanism] == null && mechanism != 'default') {\n    return callback(new MongoError(f(\"auth provider %s does not exist\", mechanism)));\n  }\n\n  // Are we already authenticating, throw\n  if(this.authenticating) {\n    return callback(new MongoError('authentication or logout allready in process'));\n  }\n\n  // Topology is not connected, save the call in the provided store to be\n  // Executed at some point when the handler deems it's reconnected\n  if(!self.isConnected() && self.s.disconnectHandler != null) {\n    return self.s.disconnectHandler.add('auth', db, allArgs, {}, callback);\n  }\n\n  // Set to authenticating\n  this.authenticating = true;\n  // All errors\n  var errors = [];\n\n  // Get all the servers\n  var servers = this.connectedProxies.slice(0);\n  // No servers return\n  if(servers.length == 0) {\n    this.authenticating = false;\n    callback(null, true);\n  }\n\n  // Authenticate\n  function auth(server) {\n    // Arguments without a callback\n    var argsWithoutCallback = [mechanism, db].concat(args.slice(0));\n    // Create arguments\n    var finalArguments = argsWithoutCallback.concat([function(err) {\n      count = count - 1;\n      // Save all the errors\n      if(err) errors.push({name: server.name, err: err});\n      // We are done\n      if(count == 0) {\n        // Auth is done\n        self.authenticating = false;\n\n        // Return the auth error\n        if(errors.length) {\n          // Remove the entry from the stored authentication contexts\n          self.s.authenticationContexts.splice(currentContextIndex, 0);\n          // Return error\n          return callback(MongoError.create({\n            message: 'authentication fail', errors: errors\n          }), false);\n        }\n\n        // Successfully authenticated session\n        callback(null, self);\n      }\n    }]);\n\n    // Execute the auth only against non arbiter servers\n    if(!server.lastIsMaster().arbiterOnly) {\n      server.auth.apply(server, finalArguments);\n    }\n  }\n\n  // Save current context index\n  currentContextIndex = this.s.authenticationContexts.length;\n  // Store the auth context and return the last index\n  this.s.authenticationContexts.push([mechanism, db].concat(args.slice(0)));\n\n  // Get total count\n  var count = servers.length;\n  // Authenticate against all servers\n  while(servers.length > 0) {\n    auth(servers.shift());\n  }\n}\n\n/**\n * Logout from a database\n * @method\n * @param {string} db The db we are logging out from\n * @param {authResultCallback} callback A callback function\n */\nMongos.prototype.logout = function(dbName, callback) {\n  var self = this;\n  // Are we authenticating or logging out, throw\n  if(this.authenticating) {\n    throw new MongoError('authentication or logout allready in process');\n  }\n\n  // Ensure no new members are processed while logging out\n  this.authenticating = true;\n\n  // Remove from all auth providers (avoid any reaplication of the auth details)\n  var providers = Object.keys(this.authProviders);\n  for(var i = 0; i < providers.length; i++) {\n    this.authProviders[providers[i]].logout(dbName);\n  }\n\n  // Now logout all the servers\n  var servers = this.connectedProxies.slice(0);\n  var count = servers.length;\n  if(count == 0) return callback();\n  var errors = [];\n\n  function logoutServer(_server, cb) {\n    _server.logout(dbName, function(err) {\n      if(err) errors.push({name: _server.name, err: err});\n      cb();\n    });\n  }\n\n  // Execute logout on all server instances\n  for(i = 0; i < servers.length; i++) {\n    logoutServer(servers[i], function() {\n      count = count - 1;\n\n      if(count == 0) {\n        // Do not block new operations\n        self.authenticating = false;\n        // If we have one or more errors\n        if(errors.length) return callback(MongoError.create({\n          message: f('logout failed against db %s', dbName), errors: errors\n        }), false);\n\n        // No errors\n        callback();\n      }\n    })\n  }\n}\n\n/**\n * Get server\n * @method\n * @return {Server}\n */\nMongos.prototype.getServer = function() {\n  var server = pickProxy(this);\n  if(this.s.debug) this.emit('pickedServer', null, server);\n  return server;\n}\n\n/**\n * Get a direct connection\n * @method\n * @return {Connection}\n */\nMongos.prototype.getConnection = function() {\n  var server = this.getServer();\n  if(server) return server.getConnection();\n}\n\n/**\n * All raw connections\n * @method\n * @return {Connection[]}\n */\nMongos.prototype.connections = function() {\n  var connections = [];\n\n  for(var i = 0; i < this.connectedProxies.length; i++) {\n    connections = connections.concat(this.connectedProxies[i].connections());\n  }\n\n  return connections;\n}\n\n/**\n * A mongos connect event, used to verify that the connection is up and running\n *\n * @event Mongos#connect\n * @type {Mongos}\n */\n\n/**\n * A mongos reconnect event, used to verify that the mongos topology has reconnected\n *\n * @event Mongos#reconnect\n * @type {Mongos}\n */\n\n/**\n * A mongos fullsetup event, used to signal that all topology members have been contacted.\n *\n * @event Mongos#fullsetup\n * @type {Mongos}\n */\n\n/**\n * A mongos all event, used to signal that all topology members have been contacted.\n *\n * @event Mongos#all\n * @type {Mongos}\n */\n\n/**\n * A server member left the mongos list\n *\n * @event Mongos#left\n * @type {Mongos}\n * @param {string} type The type of member that left (mongos)\n * @param {Server} server The server object that left\n */\n\n/**\n * A server member joined the mongos list\n *\n * @event Mongos#joined\n * @type {Mongos}\n * @param {string} type The type of member that left (mongos)\n * @param {Server} server The server object that joined\n */\n\n/**\n * A server opening SDAM monitoring event\n *\n * @event Mongos#serverOpening\n * @type {object}\n */\n\n/**\n * A server closed SDAM monitoring event\n *\n * @event Mongos#serverClosed\n * @type {object}\n */\n\n/**\n * A server description SDAM change monitoring event\n *\n * @event Mongos#serverDescriptionChanged\n * @type {object}\n */\n\n/**\n * A topology open SDAM event\n *\n * @event Mongos#topologyOpening\n * @type {object}\n */\n\n/**\n * A topology closed SDAM event\n *\n * @event Mongos#topologyClosed\n * @type {object}\n */\n\n/**\n * A topology structure SDAM change event\n *\n * @event Mongos#topologyDescriptionChanged\n * @type {object}\n */\n\n/**\n * A topology serverHeartbeatStarted SDAM event\n *\n * @event Mongos#serverHeartbeatStarted\n * @type {object}\n */\n\n/**\n * A topology serverHeartbeatFailed SDAM event\n *\n * @event Mongos#serverHeartbeatFailed\n * @type {object}\n */\n\n/**\n * A topology serverHeartbeatSucceeded SDAM change event\n *\n * @event Mongos#serverHeartbeatSucceeded\n * @type {object}\n */\n\nmodule.exports = Mongos;\n"]}