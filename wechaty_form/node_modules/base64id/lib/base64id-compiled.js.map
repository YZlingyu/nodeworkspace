{"version":3,"sources":["base64id.js"],"names":[],"mappings":"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","file":"base64id-compiled.js","sourcesContent":["/*!\n * base64id v0.1.0\n */\n\n/**\n * Module dependencies\n */\n\nvar crypto = require('crypto');\n\n/**\n * Constructor\n */\n\nvar Base64Id = function() { };\n\n/**\n * Get random bytes\n *\n * Uses a buffer if available, falls back to crypto.randomBytes\n */\n\nBase64Id.prototype.getRandomBytes = function(bytes) {\n\n  var BUFFER_SIZE = 4096\n  var self = this;  \n  \n  bytes = bytes || 12;\n\n  if (bytes > BUFFER_SIZE) {\n    return crypto.randomBytes(bytes);\n  }\n  \n  var bytesInBuffer = parseInt(BUFFER_SIZE/bytes);\n  var threshold = parseInt(bytesInBuffer*0.85);\n\n  if (!threshold) {\n    return crypto.randomBytes(bytes);\n  }\n\n  if (this.bytesBufferIndex == null) {\n     this.bytesBufferIndex = -1;\n  }\n\n  if (this.bytesBufferIndex == bytesInBuffer) {\n    this.bytesBuffer = null;\n    this.bytesBufferIndex = -1;\n  }\n\n  // No buffered bytes available or index above threshold\n  if (this.bytesBufferIndex == -1 || this.bytesBufferIndex > threshold) {\n     \n    if (!this.isGeneratingBytes) {\n      this.isGeneratingBytes = true;\n      crypto.randomBytes(BUFFER_SIZE, function(err, bytes) {\n        self.bytesBuffer = bytes;\n        self.bytesBufferIndex = 0;\n        self.isGeneratingBytes = false;\n      }); \n    }\n    \n    // Fall back to sync call when no buffered bytes are available\n    if (this.bytesBufferIndex == -1) {\n      return crypto.randomBytes(bytes);\n    }\n  }\n  \n  var result = this.bytesBuffer.slice(bytes*this.bytesBufferIndex, bytes*(this.bytesBufferIndex+1)); \n  this.bytesBufferIndex++; \n  \n  return result;\n}\n\n/**\n * Generates a base64 id\n *\n * (Original version from socket.io <http://socket.io>)\n */\n\nBase64Id.prototype.generateId = function () {\n  var rand = new Buffer(15); // multiple of 3 for base64\n  if (!rand.writeInt32BE) {\n    return Math.abs(Math.random() * Math.random() * Date.now() | 0).toString()\n      + Math.abs(Math.random() * Math.random() * Date.now() | 0).toString();\n  }\n  this.sequenceNumber = (this.sequenceNumber + 1) | 0;\n  rand.writeInt32BE(this.sequenceNumber, 11);\n  if (crypto.randomBytes) {\n    this.getRandomBytes(12).copy(rand);\n  } else {\n    // not secure for node 0.4\n    [0, 4, 8].forEach(function(i) {\n      rand.writeInt32BE(Math.random() * Math.pow(2, 32) | 0, i);\n    });\n  }\n  return rand.toString('base64').replace(/\\//g, '_').replace(/\\+/g, '-');\n};\n\n/**\n * Export\n */\n\nexports = module.exports = new Base64Id();\n"]}