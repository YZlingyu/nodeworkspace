{"version":3,"sources":["index.js"],"names":[],"mappings":"AAAA;;AAEA,IAAI,MAAM,OAAO,SAAP,CAAiB,cAA3B;;AAEA;;;;;;;;AAQA,IAAI,KAAK,CAAT;;AAEA;;;;;;;;;AASA,SAAS,MAAT,CAAgB,EAAhB,EAAoB;AAClB,MAAI,EAAE,gBAAgB,MAAlB,CAAJ,EAA+B,OAAO,IAAI,MAAJ,CAAW,EAAX,CAAP;;AAE/B,OAAK,EAAL,GAAU,IAAV;AACA,OAAK,EAAL,GAAU,EAAV;AACD;;AAED;;;;;;;;;AASA,OAAO,SAAP,CAAiB,EAAjB,GAAsB,SAAS,EAAT,CAAY,KAAZ,EAAmB,EAAnB,EAAuB,OAAvB,EAAgC;AACpD,KAAG,QAAH,GAAc,KAAK,EAAnB;AACA,OAAK,EAAL,CAAQ,EAAR,CAAW,KAAX,EAAkB,EAAlB,EAAsB,OAAtB;;AAEA,SAAO,IAAP;AACD,CALD;AAMA;;;;;;;;;AASA,OAAO,SAAP,CAAiB,IAAjB,GAAwB,SAAS,IAAT,CAAc,KAAd,EAAqB,EAArB,EAAyB,OAAzB,EAAkC;AACxD,KAAG,QAAH,GAAc,KAAK,EAAnB;AACA,OAAK,EAAL,CAAQ,IAAR,CAAa,KAAb,EAAoB,EAApB,EAAwB,OAAxB;;AAEA,SAAO,IAAP;AACD,CALD;;AAOA;;;;;;AAMA,OAAO,SAAP,CAAiB,MAAjB,GAA0B,SAAS,MAAT,GAAkB;AAC1C,MAAI,OAAO,SAAX;AAAA,MACI,KADJ;;AAGA;AACA;AACA;AACA;AACA,MAAI,KAAK,MAAL,KAAgB,CAAhB,IAAqB,aAAa,OAAO,KAAK,CAAL,CAA7C,EAAsD;AACpD,WAAO,KAAK,CAAL,EAAQ,KAAR,CAAc,OAAd,CAAP;AACD,GAFD,MAEO,IAAI,CAAC,KAAK,MAAV,EAAkB;AACvB,WAAO,EAAP;;AAEA,SAAK,KAAL,IAAc,KAAK,EAAL,CAAQ,OAAtB,EAA+B;AAC7B,UAAI,IAAI,IAAJ,CAAS,KAAK,EAAL,CAAQ,OAAjB,EAA0B,KAA1B,CAAJ,EAAsC,KAAK,IAAL,CAAU,KAAV;AACvC;AACF;;AAED,OAAK,IAAI,IAAI,CAAb,EAAgB,IAAI,KAAK,MAAzB,EAAiC,GAAjC,EAAsC;AACpC,QAAI,YAAY,KAAK,EAAL,CAAQ,SAAR,CAAkB,KAAK,CAAL,CAAlB,CAAhB;;AAEA,SAAK,IAAI,IAAI,CAAb,EAAgB,IAAI,UAAU,MAA9B,EAAsC,GAAtC,EAA2C;AACzC,cAAQ,UAAU,CAAV,CAAR;;AAEA;AACA;AACA;AACA;AACA,UAAI,MAAM,QAAV,EAAoB;AAClB,YAAI,MAAM,QAAN,CAAe,QAAf,KAA4B,KAAK,EAArC,EAAyC;AACzC,eAAO,MAAM,QAAN,CAAe,QAAtB;AACD,OAHD,MAGO;AACL,YAAI,MAAM,QAAN,KAAmB,KAAK,EAA5B,EAAgC;AAChC,eAAO,MAAM,QAAb;AACD;;AAED,WAAK,EAAL,CAAQ,cAAR,CAAuB,KAAK,CAAL,CAAvB,EAAgC,KAAhC;AACD;AACF;;AAED,SAAO,IAAP;AACD,CAzCD;;AA2CA;;;;;;AAMA,OAAO,SAAP,CAAiB,OAAjB,GAA2B,SAAS,OAAT,GAAmB;AAC5C,MAAI,CAAC,KAAK,EAAV,EAAc,OAAO,KAAP;;AAEd,OAAK,MAAL;AACA,OAAK,EAAL,GAAU,IAAV;;AAEA,SAAO,IAAP;AACD,CAPD;;AASA;AACA;AACA;AACA,OAAO,OAAP,GAAiB,MAAjB","file":"index-compiled.js","sourcesContent":["'use strict';\n\nvar has = Object.prototype.hasOwnProperty;\n\n/**\n * An auto incrementing id which we can use to create \"unique\" Ultron instances\n * so we can track the event emitters that are added through the Ultron\n * interface.\n *\n * @type {Number}\n * @private\n */\nvar id = 0;\n\n/**\n * Ultron is high-intelligence robot. It gathers intelligence so it can start improving\n * upon his rudimentary design. It will learn from your EventEmitting patterns\n * and exterminate them.\n *\n * @constructor\n * @param {EventEmitter} ee EventEmitter instance we need to wrap.\n * @api public\n */\nfunction Ultron(ee) {\n  if (!(this instanceof Ultron)) return new Ultron(ee);\n\n  this.id = id++;\n  this.ee = ee;\n}\n\n/**\n * Register a new EventListener for the given event.\n *\n * @param {String} event Name of the event.\n * @param {Functon} fn Callback function.\n * @param {Mixed} context The context of the function.\n * @returns {Ultron}\n * @api public\n */\nUltron.prototype.on = function on(event, fn, context) {\n  fn.__ultron = this.id;\n  this.ee.on(event, fn, context);\n\n  return this;\n};\n/**\n * Add an EventListener that's only called once.\n *\n * @param {String} event Name of the event.\n * @param {Function} fn Callback function.\n * @param {Mixed} context The context of the function.\n * @returns {Ultron}\n * @api public\n */\nUltron.prototype.once = function once(event, fn, context) {\n  fn.__ultron = this.id;\n  this.ee.once(event, fn, context);\n\n  return this;\n};\n\n/**\n * Remove the listeners we assigned for the given event.\n *\n * @returns {Ultron}\n * @api public\n */\nUltron.prototype.remove = function remove() {\n  var args = arguments\n    , event;\n\n  //\n  // When no event names are provided we assume that we need to clear all the\n  // events that were assigned through us.\n  //\n  if (args.length === 1 && 'string' === typeof args[0]) {\n    args = args[0].split(/[, ]+/);\n  } else if (!args.length) {\n    args = [];\n\n    for (event in this.ee._events) {\n      if (has.call(this.ee._events, event)) args.push(event);\n    }\n  }\n\n  for (var i = 0; i < args.length; i++) {\n    var listeners = this.ee.listeners(args[i]);\n\n    for (var j = 0; j < listeners.length; j++) {\n      event = listeners[j];\n\n      //\n      // Once listeners have a `listener` property that stores the real listener\n      // in the EventEmitter that ships with Node.js.\n      //\n      if (event.listener) {\n        if (event.listener.__ultron !== this.id) continue;\n        delete event.listener.__ultron;\n      } else {\n        if (event.__ultron !== this.id) continue;\n        delete event.__ultron;\n      }\n\n      this.ee.removeListener(args[i], event);\n    }\n  }\n\n  return this;\n};\n\n/**\n * Destroy the Ultron instance, remove all listeners and release all references.\n *\n * @returns {Boolean}\n * @api public\n */\nUltron.prototype.destroy = function destroy() {\n  if (!this.ee) return false;\n\n  this.remove();\n  this.ee = null;\n\n  return true;\n};\n\n//\n// Expose the module.\n//\nmodule.exports = Ultron;\n"]}