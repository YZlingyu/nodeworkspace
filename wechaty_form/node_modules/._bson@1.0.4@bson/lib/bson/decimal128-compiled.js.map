{"version":3,"sources":["decimal128.js"],"names":[],"mappings":"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","file":"decimal128-compiled.js","sourcesContent":["\"use strict\"\n\nvar Long = require('./long');\n\nvar PARSE_STRING_REGEXP = /^(\\+|\\-)?(\\d+|(\\d*\\.\\d*))?(E|e)?([\\-\\+])?(\\d+)?$/;\nvar PARSE_INF_REGEXP = /^(\\+|\\-)?(Infinity|inf)$/i;\nvar PARSE_NAN_REGEXP = /^(\\+|\\-)?NaN$/i;\n\nvar EXPONENT_MAX = 6111;\nvar EXPONENT_MIN = -6176;\nvar EXPONENT_BIAS = 6176;\nvar MAX_DIGITS = 34;\n\n// Nan value bits as 32 bit values (due to lack of longs)\nvar NAN_BUFFER = [0x7c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00].reverse();\n// Infinity value bits 32 bit values (due to lack of longs)\nvar INF_NEGATIVE_BUFFER = [0xf8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00].reverse();\nvar INF_POSITIVE_BUFFER = [0x78, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00].reverse();\n\nvar EXPONENT_REGEX = /^([\\-\\+])?(\\d+)?$/;\n\n\n// Detect if the value is a digit\nvar isDigit = function(value) {\n  return !isNaN(parseInt(value, 10));\n}\n\n// Divide two uint128 values\nvar divideu128 = function(value) {\n  var DIVISOR = Long.fromNumber(1000 * 1000 * 1000);\n  var _rem = Long.fromNumber(0);\n  var i = 0;\n\n  if(!value.parts[0] && !value.parts[1] &&\n     !value.parts[2] && !value.parts[3]) {\n    return { quotient: value, rem: _rem };\n  }\n\n  for(var i = 0; i <= 3; i++) {\n    // Adjust remainder to match value of next dividend\n    _rem = _rem.shiftLeft(32);\n    // Add the divided to _rem\n    _rem = _rem.add(new Long(value.parts[i], 0));\n    value.parts[i] = _rem.div(DIVISOR).low_;\n    _rem = _rem.modulo(DIVISOR);\n  }\n\n  return { quotient: value, rem: _rem };\n}\n\n// Multiply two Long values and return the 128 bit value\nvar multiply64x2 = function(left, right) {\n  if(!left && !right) {\n    return {high: Long.fromNumber(0), low: Long.fromNumber(0)};\n  }\n\n  var leftHigh = left.shiftRightUnsigned(32);\n  var leftLow = new Long(left.getLowBits(), 0);\n  var rightHigh = right.shiftRightUnsigned(32);\n  var rightLow = new Long(right.getLowBits(), 0);\n\n  var productHigh = leftHigh.multiply(rightHigh);\n  var productMid = leftHigh.multiply(rightLow);\n  var productMid2 = leftLow.multiply(rightHigh);\n  var productLow = leftLow.multiply(rightLow);\n\n  productHigh = productHigh.add(productMid.shiftRightUnsigned(32));\n  productMid = new Long(productMid.getLowBits(), 0)\n                .add(productMid2)\n                .add(productLow.shiftRightUnsigned(32));\n\n  productHigh = productHigh.add(productMid.shiftRightUnsigned(32));\n  productLow = productMid.shiftLeft(32).add(new Long(productLow.getLowBits(), 0));\n\n  // Return the 128 bit result\n  return {high: productHigh, low: productLow};\n}\n\nvar lessThan = function(left, right) {\n  // Make values unsigned\n  var uhleft = left.high_ >>> 0;\n  var uhright = right.high_ >>> 0;\n\n  // Compare high bits first\n  if(uhleft < uhright) {\n    return true\n  } else if(uhleft == uhright) {\n    var ulleft = left.low_ >>> 0;\n    var ulright = right.low_ >>> 0;\n    if(ulleft < ulright) return true;\n  }\n\n  return false;\n}\n\nvar longtoHex = function(value) {\n  var buffer = new Buffer(8);\n  var index = 0;\n  // Encode the low 64 bits of the decimal\n  // Encode low bits\n  buffer[index++] = value.low_ & 0xff;\n  buffer[index++] = (value.low_ >> 8) & 0xff;\n  buffer[index++] = (value.low_ >> 16) & 0xff;\n  buffer[index++] = (value.low_ >> 24) & 0xff;\n  // Encode high bits\n  buffer[index++] = value.high_ & 0xff;\n  buffer[index++] = (value.high_ >> 8) & 0xff;\n  buffer[index++] = (value.high_ >> 16) & 0xff;\n  buffer[index++] = (value.high_ >> 24) & 0xff;\n  return buffer.reverse().toString('hex');\n}\n\nvar int32toHex = function(value) {\n  var buffer = new Buffer(4);\n  var index = 0;\n  // Encode the low 64 bits of the decimal\n  // Encode low bits\n  buffer[index++] = value & 0xff;\n  buffer[index++] = (value >> 8) & 0xff;\n  buffer[index++] = (value >> 16) & 0xff;\n  buffer[index++] = (value >> 24) & 0xff;\n  return buffer.reverse().toString('hex');\n}\n\nvar Decimal128 = function(bytes) {\n  this._bsontype = 'Decimal128';\n  this.bytes = bytes;\n}\n\nDecimal128.fromString = function(string) {\n  // Parse state tracking\n  var isNegative = false;\n  var sawRadix = false;\n  var foundNonZero = false;\n\n  // Total number of significant digits (no leading or trailing zero)\n  var significantDigits = 0;\n  // Total number of significand digits read\n  var nDigitsRead = 0;\n  // Total number of digits (no leading zeros)\n  var nDigits = 0;\n  // The number of the digits after radix\n  var radixPosition = 0;\n  // The index of the first non-zero in *str*\n  var firstNonZero = 0;\n\n  // Digits Array\n  var digits = [0];\n  // The number of digits in digits\n  var nDigitsStored = 0;\n  // Insertion pointer for digits\n  var digitsInsert = 0;\n  // The index of the first non-zero digit\n  var firstDigit = 0;\n  // The index of the last digit\n  var lastDigit = 0;\n\n  // Exponent\n  var exponent = 0;\n  // loop index over array\n  var i = 0;\n  // The high 17 digits of the significand\n  var significandHigh = [0, 0];\n  // The low 17 digits of the significand\n  var significandLow = [0, 0];\n  // The biased exponent\n  var biasedExponent = 0;\n\n  // Read index\n  var index = 0;\n\n  // Trim the string\n  string = string.trim();\n\n  // Results\n  var stringMatch = string.match(PARSE_STRING_REGEXP);\n  var infMatch = string.match(PARSE_INF_REGEXP);\n  var nanMatch = string.match(PARSE_NAN_REGEXP);\n\n  // Validate the string\n  if(!stringMatch\n    && ! infMatch\n    && ! nanMatch || string.length == 0) {\n      throw new Error(\"\" + string + \" not a valid Decimal128 string\");\n  }\n\n  // Check if we have an illegal exponent format\n  if(stringMatch && stringMatch[4] && stringMatch[2] === undefined) {\n    throw new Error(\"\" + string + \" not a valid Decimal128 string\");\n  }\n\n  // Get the negative or positive sign\n  if(string[index] == '+' || string[index] == '-') {\n    isNegative = string[index++] == '-';\n  }\n\n  // Check if user passed Infinity or NaN\n  if(!isDigit(string[index]) && string[index] != '.') {\n    if(string[index] == 'i' || string[index] == 'I') {\n      return new Decimal128(new Buffer(isNegative ? INF_NEGATIVE_BUFFER : INF_POSITIVE_BUFFER));\n    } else if(string[index] == 'N') {\n      return new Decimal128(new Buffer(NAN_BUFFER));\n    }\n  }\n\n  // Read all the digits\n  while(isDigit(string[index]) || string[index] == '.') {\n    if(string[index] == '.') {\n      if(sawRadix) {\n        return new Decimal128(new Buffer(NAN_BUFFER));\n      }\n\n      sawRadix = true;\n      index = index + 1;\n      continue;\n    }\n\n    if(nDigitsStored < 34) {\n      if(string[index] != '0' || foundNonZero) {\n        if(!foundNonZero) {\n          firstNonZero = nDigitsRead;\n        }\n\n        foundNonZero = true;\n\n        // Only store 34 digits\n        digits[digitsInsert++] = parseInt(string[index], 10);\n        nDigitsStored = nDigitsStored + 1;\n      }\n    }\n\n    if(foundNonZero) {\n      nDigits = nDigits + 1;\n    }\n\n    if(sawRadix) {\n      radixPosition = radixPosition + 1;\n    }\n\n    nDigitsRead = nDigitsRead + 1;\n    index = index + 1;\n  }\n\n  if(sawRadix && !nDigitsRead) {\n    throw new Error(\"\" + string + \" not a valid Decimal128 string\");\n  }\n\n  // Read exponent if exists\n  if(string[index] == 'e' || string[index] == 'E') {\n    // Read exponent digits\n    var match = string.substr(++index).match(EXPONENT_REGEX);\n\n    // No digits read\n    if(!match || !match[2]) {\n      return new Decimal128(new Buffer(NAN_BUFFER));\n    }\n\n    // Get exponent\n    exponent = parseInt(match[0], 10);\n\n    // Adjust the index\n    index = index + match[0].length;\n  }\n\n  // Return not a number\n  if(string[index]) {\n    return new Decimal128(new Buffer(NAN_BUFFER));\n  }\n\n  // Done reading input\n  // Find first non-zero digit in digits\n  firstDigit = 0;\n\n  if(!nDigitsStored) {\n    firstDigit = 0;\n    lastDigit = 0;\n    digits[0] = 0;\n    nDigits = 1;\n    nDigitsStored = 1;\n    significantDigits = 0;\n  } else {\n    lastDigit = nDigitsStored - 1;\n    significantDigits = nDigits;\n\n    if(exponent != 0 && significantDigits != 1) {\n      while(string[firstNonZero + significantDigits - 1] == '0') {\n        significantDigits = significantDigits - 1;\n      }\n    }\n  }\n\n  // Normalization of exponent\n  // Correct exponent based on radix position, and shift significand as needed\n  // to represent user input\n\n  // Overflow prevention\n  if(exponent <= radixPosition && radixPosition - exponent > (1 << 14)) {\n    exponent = EXPONENT_MIN;\n  } else {\n    exponent = exponent - radixPosition;\n  }\n\n  // Attempt to normalize the exponent\n  while(exponent > EXPONENT_MAX) {\n    // Shift exponent to significand and decrease\n    lastDigit = lastDigit + 1;\n\n    if(lastDigit - firstDigit > MAX_DIGITS) {\n      // Check if we have a zero then just hard clamp, otherwise fail\n      var digitsString = digits.join('');\n      if(digitsString.match(/^0+$/)) {\n        exponent = EXPONENT_MAX;\n        break;\n      } else {\n        return new Decimal128(new Buffer(isNegative ? INF_NEGATIVE_BUFFER : INF_POSITIVE_BUFFER));\n      }\n    }\n\n    exponent = exponent - 1;\n  }\n\n  while(exponent < EXPONENT_MIN || nDigitsStored < nDigits) {\n    // Shift last digit\n    if(lastDigit == 0) {\n      exponent = EXPONENT_MIN;\n      significantDigits = 0;\n      break;\n    }\n\n    if(nDigitsStored < nDigits) {\n      // adjust to match digits not stored\n      nDigits = nDigits - 1;\n    } else {\n      // adjust to round\n      lastDigit = lastDigit - 1;\n    }\n\n    if(exponent < EXPONENT_MAX) {\n      exponent = exponent + 1;\n    } else {\n      // Check if we have a zero then just hard clamp, otherwise fail\n      var digitsString = digits.join('');\n      if(digitsString.match(/^0+$/)) {\n        exponent = EXPONENT_MAX;\n        break;\n      } else {\n        return new Decimal128(new Buffer(isNegative ? INF_NEGATIVE_BUFFER : INF_POSITIVE_BUFFER))\n      }\n    }\n  }\n\n\n  // Round\n  // We've normalized the exponent, but might still need to round.\n  if((lastDigit - firstDigit + 1 < significantDigits) && string[significantDigits] != '0') {\n    var endOfString = nDigitsRead;\n\n    // If we have seen a radix point, 'string' is 1 longer than we have\n    // documented with ndigits_read, so inc the position of the first nonzero\n    // digit and the position that digits are read to.\n    if(sawRadix && exponent == EXPONENT_MIN) {\n      firstNonZero = firstNonZero + 1;\n      endOfString = endOfString + 1;\n    }\n\n    var roundDigit = parseInt(string[firstNonZero + lastDigit + 1], 10);\n    var roundBit = 0;\n\n    if(roundDigit >= 5) {\n      roundBit = 1;\n\n      if(roundDigit == 5) {\n        roundBit = digits[lastDigit] % 2 == 1;\n\n        for(var i = firstNonZero + lastDigit + 2; i < endOfString; i++) {\n          if(parseInt(string[i], 10)) {\n            roundBit = 1;\n            break;\n          }\n        }\n      }\n    }\n\n    if(roundBit) {\n      var dIdx = lastDigit;\n\n      for(; dIdx >= 0; dIdx--) {\n        if(++digits[dIdx] > 9) {\n          digits[dIdx] = 0;\n\n          // overflowed most significant digit\n          if(dIdx == 0) {\n            if(exponent < EXPONENT_MAX) {\n              exponent = exponent + 1;\n              digits[dIdx] = 1;\n            } else {\n              return new Decimal128(new Buffer(isNegative ? INF_NEGATIVE_BUFFER : INF_POSITIVE_BUFFER))\n            }\n          }\n        } else {\n          break;\n        }\n      }\n    }\n  }\n\n  // Encode significand\n  // The high 17 digits of the significand\n  significandHigh = Long.fromNumber(0);\n  // The low 17 digits of the significand\n  significandLow = Long.fromNumber(0);\n\n  // read a zero\n  if(significantDigits == 0) {\n    significandHigh = Long.fromNumber(0);\n    significandLow = Long.fromNumber(0);\n  } else if(lastDigit - firstDigit < 17) {\n    var dIdx = firstDigit;\n    significandLow = Long.fromNumber(digits[dIdx++]);\n    significandHigh = new Long(0, 0);\n\n    for(; dIdx <= lastDigit; dIdx++) {\n      significandLow = significandLow.multiply(Long.fromNumber(10));\n      significandLow = significandLow.add(Long.fromNumber(digits[dIdx]));\n    }\n  } else {\n    var dIdx = firstDigit;\n    significandHigh = Long.fromNumber(digits[dIdx++]);\n\n    for(; dIdx <= lastDigit - 17; dIdx++) {\n      significandHigh = significandHigh.multiply(Long.fromNumber(10));\n      significandHigh = significandHigh.add(Long.fromNumber(digits[dIdx]));\n    }\n\n    significandLow = Long.fromNumber(digits[dIdx++]);\n\n    for(; dIdx <= lastDigit; dIdx++) {\n      significandLow = significandLow.multiply(Long.fromNumber(10));\n      significandLow = significandLow.add(Long.fromNumber(digits[dIdx]));\n    }\n  }\n\n  var significand = multiply64x2(significandHigh, Long.fromString(\"100000000000000000\"));\n\n  significand.low = significand.low.add(significandLow);\n\n  if(lessThan(significand.low, significandLow)) {\n    significand.high = significand.high.add(Long.fromNumber(1));\n  }\n\n  // Biased exponent\n  var biasedExponent = (exponent + EXPONENT_BIAS);\n  var dec = { low: Long.fromNumber(0), high: Long.fromNumber(0) };\n\n  // Encode combination, exponent, and significand.\n  if(significand.high.shiftRightUnsigned(49).and(Long.fromNumber(1)).equals(Long.fromNumber)) {\n    // Encode '11' into bits 1 to 3\n    dec.high = dec.high.or(Long.fromNumber(0x3).shiftLeft(61));\n    dec.high = dec.high.or(Long.fromNumber(biasedExponent).and(Long.fromNumber(0x3fff).shiftLeft(47)));\n    dec.high = dec.high.or(significand.high.and(Long.fromNumber(0x7fffffffffff)));\n  } else {\n    dec.high = dec.high.or(Long.fromNumber(biasedExponent & 0x3fff).shiftLeft(49));\n    dec.high = dec.high.or(significand.high.and(Long.fromNumber(0x1ffffffffffff)));\n  }\n\n  dec.low = significand.low;\n\n  // Encode sign\n  if(isNegative) {\n    dec.high = dec.high.or(Long.fromString('9223372036854775808'));\n  }\n\n  // Encode into a buffer\n  var buffer = new Buffer(16);\n  var index = 0;\n\n  // Encode the low 64 bits of the decimal\n  // Encode low bits\n  buffer[index++] = dec.low.low_ & 0xff;\n  buffer[index++] = (dec.low.low_ >> 8) & 0xff;\n  buffer[index++] = (dec.low.low_ >> 16) & 0xff;\n  buffer[index++] = (dec.low.low_ >> 24) & 0xff;\n  // Encode high bits\n  buffer[index++] = dec.low.high_ & 0xff;\n  buffer[index++] = (dec.low.high_ >> 8) & 0xff;\n  buffer[index++] = (dec.low.high_ >> 16) & 0xff;\n  buffer[index++] = (dec.low.high_ >> 24) & 0xff;\n\n  // Encode the high 64 bits of the decimal\n  // Encode low bits\n  buffer[index++] = dec.high.low_ & 0xff;\n  buffer[index++] = (dec.high.low_ >> 8) & 0xff;\n  buffer[index++] = (dec.high.low_ >> 16) & 0xff;\n  buffer[index++] = (dec.high.low_ >> 24) & 0xff;\n  // Encode high bits\n  buffer[index++] = dec.high.high_ & 0xff;\n  buffer[index++] = (dec.high.high_ >> 8) & 0xff;\n  buffer[index++] = (dec.high.high_ >> 16) & 0xff;\n  buffer[index++] = (dec.high.high_ >> 24) & 0xff;\n\n  // Return the new Decimal128\n  return new Decimal128(buffer);\n}\n\n// Extract least significant 5 bits\nvar COMBINATION_MASK = 0x1f;\n// Extract least significant 14 bits\nvar EXPONENT_MASK = 0x3fff;\n// Value of combination field for Inf\nvar COMBINATION_INFINITY = 30;\n// Value of combination field for NaN\nvar COMBINATION_NAN = 31;\n// Value of combination field for NaN\nvar COMBINATION_SNAN = 32;\n// decimal128 exponent bias\nvar EXPONENT_BIAS = 6176;\n\nDecimal128.prototype.toString = function() {\n  // Note: bits in this routine are referred to starting at 0,\n  // from the sign bit, towards the coefficient.\n\n  // bits 0 - 31\n  var high;\n  // bits 32 - 63\n  var midh;\n  // bits 64 - 95\n  var midl;\n  // bits 96 - 127\n  var low;\n  // bits 1 - 5\n  var combination;\n  // decoded biased exponent (14 bits)\n  var biased_exponent;\n  // the number of significand digits\n  var significand_digits = 0;\n  // the base-10 digits in the significand\n  var significand = new Array(36);\n  for(var i = 0; i < significand.length; i++) significand[i] = 0;\n  // read pointer into significand\n  var index = 0;\n\n  // unbiased exponent\n  var exponent;\n  // the exponent if scientific notation is used\n  var scientific_exponent;\n\n  // true if the number is zero\n  var is_zero = false;\n\n  // the most signifcant significand bits (50-46)\n  var significand_msb;\n  // temporary storage for significand decoding\n  var significand128 = {parts: new Array(4)};\n  // indexing variables\n  var i;\n  var j, k;\n\n  // Output string\n  var string = [];\n\n  // Unpack index\n  var index = 0;\n\n  // Buffer reference\n  var buffer = this.bytes;\n\n  // Unpack the low 64bits into a long\n  low = buffer[index++] | buffer[index++] << 8 | buffer[index++] << 16 | buffer[index++] << 24;\n  midl = buffer[index++] | buffer[index++] << 8 | buffer[index++] << 16 | buffer[index++] << 24;\n\n  // Unpack the high 64bits into a long\n  midh = buffer[index++] | buffer[index++] << 8 | buffer[index++] << 16 | buffer[index++] << 24;\n  high = buffer[index++] | buffer[index++] << 8 | buffer[index++] << 16 | buffer[index++] << 24;\n\n  // Unpack index\n  var index = 0;\n\n  // Create the state of the decimal\n  var dec = {\n    low: new Long(low, midl),\n    high: new Long(midh, high) };\n\n  if(dec.high.lessThan(Long.ZERO)) {\n    string.push('-');\n  }\n\n  // Decode combination field and exponent\n  combination = (high >> 26) & COMBINATION_MASK;\n\n  if((combination >> 3) == 3) {\n    // Check for 'special' values\n    if(combination == COMBINATION_INFINITY) {\n      return string.join('') + \"Infinity\";\n    } else if(combination == COMBINATION_NAN) {\n      return \"NaN\";\n    } else {\n      biased_exponent = (high >> 15) & EXPONENT_MASK;\n      significand_msb = 0x08 + ((high >> 14) & 0x01);\n    }\n  } else {\n    significand_msb = (high >> 14) & 0x07;\n    biased_exponent = (high >> 17) & EXPONENT_MASK;\n  }\n\n  exponent = biased_exponent - EXPONENT_BIAS;\n\n  // Create string of significand digits\n\n  // Convert the 114-bit binary number represented by\n  // (significand_high, significand_low) to at most 34 decimal\n  // digits through modulo and division.\n  significand128.parts[0] = (high & 0x3fff) + ((significand_msb & 0xf) << 14);\n  significand128.parts[1] = midh;\n  significand128.parts[2] = midl;\n  significand128.parts[3] = low;\n\n  if(significand128.parts[0] == 0 && significand128.parts[1] == 0\n    && significand128.parts[2] == 0 && significand128.parts[3] == 0) {\n      is_zero = true;\n  } else {\n    for(var k = 3; k >= 0; k--) {\n      var least_digits = 0;\n      // Peform the divide\n      var result = divideu128(significand128);\n      significand128 = result.quotient;\n      least_digits = result.rem.low_;\n\n      // We now have the 9 least significant digits (in base 2).\n      // Convert and output to string.\n      if(!least_digits) continue;\n\n      for(var j = 8; j >= 0; j--) {\n        // significand[k * 9 + j] = Math.round(least_digits % 10);\n        significand[k * 9 + j] = least_digits % 10;\n        // least_digits = Math.round(least_digits / 10);\n        least_digits = Math.floor(least_digits / 10);\n      }\n    }\n  }\n\n  // Output format options:\n  // Scientific - [-]d.dddE(+/-)dd or [-]dE(+/-)dd\n  // Regular    - ddd.ddd\n\n  if(is_zero) {\n    significand_digits = 1;\n    significand[index] = 0;\n  } else {\n    significand_digits = 36;\n    var i = 0;\n\n    while(!significand[index]) {\n      i++;\n      significand_digits = significand_digits - 1;\n      index = index + 1;\n    }\n  }\n\n  scientific_exponent = significand_digits - 1 + exponent;\n\n  // The scientific exponent checks are dictated by the string conversion\n  // specification and are somewhat arbitrary cutoffs.\n  //\n  // We must check exponent > 0, because if this is the case, the number\n  // has trailing zeros.  However, we *cannot* output these trailing zeros,\n  // because doing so would change the precision of the value, and would\n  // change stored data if the string converted number is round tripped.\n\n  if(scientific_exponent >= 34 || scientific_exponent <= -7 ||\n    exponent > 0) {\n    // Scientific format\n    string.push(significand[index++]);\n    significand_digits = significand_digits - 1;\n\n    if(significand_digits) {\n      string.push('.');\n    }\n\n    for(var i = 0; i < significand_digits; i++) {\n      string.push(significand[index++]);\n    }\n\n    // Exponent\n    string.push('E');\n    if(scientific_exponent > 0) {\n      string.push('+' + scientific_exponent);\n    } else {\n      string.push(scientific_exponent);\n    }\n  } else {\n    // Regular format with no decimal place\n    if(exponent >= 0) {\n      for(var i = 0; i < significand_digits; i++) {\n        string.push(significand[index++]);\n      }\n    } else {\n      var radix_position = significand_digits + exponent;\n\n      // non-zero digits before radix\n      if(radix_position > 0) {\n        for(var i = 0; i < radix_position; i++) {\n          string.push(significand[index++]);\n        }\n      } else {\n        string.push('0');\n      }\n\n      string.push('.');\n      // add leading zeros after radix\n      while(radix_position++ < 0) {\n        string.push('0');\n      }\n\n      for(var i = 0; i < significand_digits - Math.max(radix_position - 1, 0); i++) {\n        string.push(significand[index++]);\n      }\n    }\n  }\n\n  return string.join('');\n}\n\nDecimal128.prototype.toJSON = function() {\n  return { \"$numberDecimal\": this.toString() };\n}\n\nmodule.exports = Decimal128;\nmodule.exports.Decimal128 = Decimal128;\n"]}