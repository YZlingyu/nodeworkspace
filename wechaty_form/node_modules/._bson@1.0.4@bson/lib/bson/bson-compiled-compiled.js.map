{"version":3,"sources":["bson-compiled.js"],"names":[],"mappings":"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","file":"bson-compiled-compiled.js","sourcesContent":["\"use strict\";\n\nvar writeIEEE754 = require('./float_parser').writeIEEE754,\n    readIEEE754 = require('./float_parser').readIEEE754,\n    Map = require('./map'),\n    Long = require('./long'),\n    Double = require('./double'),\n    Timestamp = require('./timestamp'),\n    ObjectID = require('./objectid'),\n    BSONRegExp = require('./regexp'),\n    Symbol = require('./symbol'),\n    Int32 = require('./int_32'),\n    Code = require('./code'),\n    Decimal128 = require('./decimal128'),\n    MinKey = require('./min_key'),\n    MaxKey = require('./max_key'),\n    DBRef = require('./db_ref'),\n    Binary = require('./binary');\n\n// Parts of the parser\nvar deserialize = require('./parser/deserializer'),\n    serializer = require('./parser/serializer'),\n    calculateObjectSize = require('./parser/calculate_size');\n\n/**\n * @ignore\n * @api private\n */\n// Max Size\nvar MAXSIZE = 1024 * 1024 * 17;\n// Max Document Buffer size\nvar buffer = new Buffer(MAXSIZE);\n\nvar BSON = function () {};\n\n/**\n * Serialize a Javascript object.\n *\n * @param {Object} object the Javascript object to serialize.\n * @param {Boolean} [options.checkKeys] the serializer will check if keys are valid.\n * @param {Boolean} [options.serializeFunctions=false] serialize the javascript functions **(default:false)**.\n * @param {Boolean} [options.ignoreUndefined=true] ignore undefined fields **(default:true)**.\n * @return {Buffer} returns the Buffer object containing the serialized object.\n * @api public\n */\nBSON.prototype.serialize = function serialize(object, options) {\n  options = options || {};\n  // Unpack the options\n  var checkKeys = typeof options.checkKeys == 'boolean' ? options.checkKeys : false;\n  var serializeFunctions = typeof options.serializeFunctions == 'boolean' ? options.serializeFunctions : false;\n  var ignoreUndefined = typeof options.ignoreUndefined == 'boolean' ? options.ignoreUndefined : true;\n\n  // Attempt to serialize\n  var serializationIndex = serializer(buffer, object, checkKeys, 0, 0, serializeFunctions, ignoreUndefined, []);\n  // Create the final buffer\n  var finishedBuffer = new Buffer(serializationIndex);\n  // Copy into the finished buffer\n  buffer.copy(finishedBuffer, 0, 0, finishedBuffer.length);\n  // Return the buffer\n  return finishedBuffer;\n};\n\n/**\n * Serialize a Javascript object using a predefined Buffer and index into the buffer, useful when pre-allocating the space for serialization.\n *\n * @param {Object} object the Javascript object to serialize.\n * @param {Buffer} buffer the Buffer you pre-allocated to store the serialized BSON object.\n * @param {Boolean} [options.checkKeys] the serializer will check if keys are valid.\n * @param {Boolean} [options.serializeFunctions=false] serialize the javascript functions **(default:false)**.\n * @param {Boolean} [options.ignoreUndefined=true] ignore undefined fields **(default:true)**.\n * @param {Number} [options.index] the index in the buffer where we wish to start serializing into.\n * @return {Number} returns the index pointing to the last written byte in the buffer.\n * @api public\n */\nBSON.prototype.serializeWithBufferAndIndex = function (object, finalBuffer, options) {\n  options = options || {};\n  // Unpack the options\n  var checkKeys = typeof options.checkKeys == 'boolean' ? options.checkKeys : false;\n  var serializeFunctions = typeof options.serializeFunctions == 'boolean' ? options.serializeFunctions : false;\n  var ignoreUndefined = typeof options.ignoreUndefined == 'boolean' ? options.ignoreUndefined : true;\n  var startIndex = typeof options.index == 'number' ? options.index : 0;\n\n  // Attempt to serialize\n  var serializationIndex = serializer(buffer, object, checkKeys, startIndex || 0, 0, serializeFunctions, ignoreUndefined);\n  buffer.copy(finalBuffer, startIndex, 0, serializationIndex);\n\n  // Return the index\n  return serializationIndex - 1;\n};\n\n/**\n * Deserialize data as BSON.\n *\n * @param {Buffer} buffer the buffer containing the serialized set of BSON documents.\n * @param {Object} [options.evalFunctions=false] evaluate functions in the BSON document scoped to the object deserialized.\n * @param {Object} [options.cacheFunctions=false] cache evaluated functions for reuse.\n * @param {Object} [options.cacheFunctionsCrc32=false] use a crc32 code for caching, otherwise use the string of the function.\n * @param {Object} [options.promoteLongs=true] when deserializing a Long will fit it into a Number if it's smaller than 53 bits\n * @param {Object} [options.promoteBuffers=false] when deserializing a Binary will return it as a node.js Buffer instance.\n * @param {Object} [options.promoteValues=false] when deserializing will promote BSON values to their Node.js closest equivalent types.\n * @param {Object} [options.fieldsAsRaw=null] allow to specify if there what fields we wish to return as unserialized raw buffer.\n * @param {Object} [options.bsonRegExp=false] return BSON regular expressions as BSONRegExp instances.\n * @return {Object} returns the deserialized Javascript Object.\n * @api public\n */\nBSON.prototype.deserialize = function (buffer, options) {\n  return deserialize(buffer, options);\n};\n\n/**\n * Calculate the bson size for a passed in Javascript object.\n *\n * @param {Object} object the Javascript object to calculate the BSON byte size for.\n * @param {Boolean} [options.serializeFunctions=false] serialize the javascript functions **(default:false)**.\n * @param {Boolean} [options.ignoreUndefined=true] ignore undefined fields **(default:true)**.\n * @return {Number} returns the number of bytes the BSON object will take up.\n * @api public\n */\nBSON.prototype.calculateObjectSize = function (object, options) {\n  options = options || {};\n\n  var serializeFunctions = typeof options.serializeFunctions == 'boolean' ? options.serializeFunctions : false;\n  var ignoreUndefined = typeof options.ignoreUndefined == 'boolean' ? options.ignoreUndefined : true;\n\n  return calculateObjectSize(object, serializeFunctions, ignoreUndefined);\n};\n\n/**\n * Deserialize stream data as BSON documents.\n *\n * @param {Buffer} data the buffer containing the serialized set of BSON documents.\n * @param {Number} startIndex the start index in the data Buffer where the deserialization is to start.\n * @param {Number} numberOfDocuments number of documents to deserialize.\n * @param {Array} documents an array where to store the deserialized documents.\n * @param {Number} docStartIndex the index in the documents array from where to start inserting documents.\n * @param {Object} [options] additional options used for the deserialization.\n * @param {Object} [options.evalFunctions=false] evaluate functions in the BSON document scoped to the object deserialized.\n * @param {Object} [options.cacheFunctions=false] cache evaluated functions for reuse.\n * @param {Object} [options.cacheFunctionsCrc32=false] use a crc32 code for caching, otherwise use the string of the function.\n * @param {Object} [options.promoteLongs=true] when deserializing a Long will fit it into a Number if it's smaller than 53 bits\n * @param {Object} [options.promoteBuffers=false] when deserializing a Binary will return it as a node.js Buffer instance.\n * @param {Object} [options.promoteValues=false] when deserializing will promote BSON values to their Node.js closest equivalent types.\n * @param {Object} [options.fieldsAsRaw=null] allow to specify if there what fields we wish to return as unserialized raw buffer.\n * @param {Object} [options.bsonRegExp=false] return BSON regular expressions as BSONRegExp instances.\n * @return {Number} returns the next index in the buffer after deserialization **x** numbers of documents.\n * @api public\n */\nBSON.prototype.deserializeStream = function (data, startIndex, numberOfDocuments, documents, docStartIndex, options) {\n  options = options != null ? options : {};\n  var index = startIndex;\n  // Loop over all documents\n  for (var i = 0; i < numberOfDocuments; i++) {\n    // Find size of the document\n    var size = data[index] | data[index + 1] << 8 | data[index + 2] << 16 | data[index + 3] << 24;\n    // Update options with index\n    options['index'] = index;\n    // Parse the document at this point\n    documents[docStartIndex + i] = this.deserialize(data, options);\n    // Adjust index by the document size\n    index = index + size;\n  }\n\n  // Return object containing end index of parsing and list of documents\n  return index;\n};\n\n/**\n * @ignore\n * @api private\n */\n// BSON MAX VALUES\nBSON.BSON_INT32_MAX = 0x7FFFFFFF;\nBSON.BSON_INT32_MIN = -0x80000000;\n\nBSON.BSON_INT64_MAX = Math.pow(2, 63) - 1;\nBSON.BSON_INT64_MIN = -Math.pow(2, 63);\n\n// JS MAX PRECISE VALUES\nBSON.JS_INT_MAX = 0x20000000000000; // Any integer up to 2^53 can be precisely represented by a double.\nBSON.JS_INT_MIN = -0x20000000000000; // Any integer down to -2^53 can be precisely represented by a double.\n\n// Internal long versions\nvar JS_INT_MAX_LONG = Long.fromNumber(0x20000000000000); // Any integer up to 2^53 can be precisely represented by a double.\nvar JS_INT_MIN_LONG = Long.fromNumber(-0x20000000000000); // Any integer down to -2^53 can be precisely represented by a double.\n\n/**\n * Number BSON Type\n *\n * @classconstant BSON_DATA_NUMBER\n **/\nBSON.BSON_DATA_NUMBER = 1;\n/**\n * String BSON Type\n *\n * @classconstant BSON_DATA_STRING\n **/\nBSON.BSON_DATA_STRING = 2;\n/**\n * Object BSON Type\n *\n * @classconstant BSON_DATA_OBJECT\n **/\nBSON.BSON_DATA_OBJECT = 3;\n/**\n * Array BSON Type\n *\n * @classconstant BSON_DATA_ARRAY\n **/\nBSON.BSON_DATA_ARRAY = 4;\n/**\n * Binary BSON Type\n *\n * @classconstant BSON_DATA_BINARY\n **/\nBSON.BSON_DATA_BINARY = 5;\n/**\n * ObjectID BSON Type\n *\n * @classconstant BSON_DATA_OID\n **/\nBSON.BSON_DATA_OID = 7;\n/**\n * Boolean BSON Type\n *\n * @classconstant BSON_DATA_BOOLEAN\n **/\nBSON.BSON_DATA_BOOLEAN = 8;\n/**\n * Date BSON Type\n *\n * @classconstant BSON_DATA_DATE\n **/\nBSON.BSON_DATA_DATE = 9;\n/**\n * null BSON Type\n *\n * @classconstant BSON_DATA_NULL\n **/\nBSON.BSON_DATA_NULL = 10;\n/**\n * RegExp BSON Type\n *\n * @classconstant BSON_DATA_REGEXP\n **/\nBSON.BSON_DATA_REGEXP = 11;\n/**\n * Code BSON Type\n *\n * @classconstant BSON_DATA_CODE\n **/\nBSON.BSON_DATA_CODE = 13;\n/**\n * Symbol BSON Type\n *\n * @classconstant BSON_DATA_SYMBOL\n **/\nBSON.BSON_DATA_SYMBOL = 14;\n/**\n * Code with Scope BSON Type\n *\n * @classconstant BSON_DATA_CODE_W_SCOPE\n **/\nBSON.BSON_DATA_CODE_W_SCOPE = 15;\n/**\n * 32 bit Integer BSON Type\n *\n * @classconstant BSON_DATA_INT\n **/\nBSON.BSON_DATA_INT = 16;\n/**\n * Timestamp BSON Type\n *\n * @classconstant BSON_DATA_TIMESTAMP\n **/\nBSON.BSON_DATA_TIMESTAMP = 17;\n/**\n * Long BSON Type\n *\n * @classconstant BSON_DATA_LONG\n **/\nBSON.BSON_DATA_LONG = 18;\n/**\n * MinKey BSON Type\n *\n * @classconstant BSON_DATA_MIN_KEY\n **/\nBSON.BSON_DATA_MIN_KEY = 0xff;\n/**\n * MaxKey BSON Type\n *\n * @classconstant BSON_DATA_MAX_KEY\n **/\nBSON.BSON_DATA_MAX_KEY = 0x7f;\n\n/**\n * Binary Default Type\n *\n * @classconstant BSON_BINARY_SUBTYPE_DEFAULT\n **/\nBSON.BSON_BINARY_SUBTYPE_DEFAULT = 0;\n/**\n * Binary Function Type\n *\n * @classconstant BSON_BINARY_SUBTYPE_FUNCTION\n **/\nBSON.BSON_BINARY_SUBTYPE_FUNCTION = 1;\n/**\n * Binary Byte Array Type\n *\n * @classconstant BSON_BINARY_SUBTYPE_BYTE_ARRAY\n **/\nBSON.BSON_BINARY_SUBTYPE_BYTE_ARRAY = 2;\n/**\n * Binary UUID Type\n *\n * @classconstant BSON_BINARY_SUBTYPE_UUID\n **/\nBSON.BSON_BINARY_SUBTYPE_UUID = 3;\n/**\n * Binary MD5 Type\n *\n * @classconstant BSON_BINARY_SUBTYPE_MD5\n **/\nBSON.BSON_BINARY_SUBTYPE_MD5 = 4;\n/**\n * Binary User Defined Type\n *\n * @classconstant BSON_BINARY_SUBTYPE_USER_DEFINED\n **/\nBSON.BSON_BINARY_SUBTYPE_USER_DEFINED = 128;\n\n// Return BSON\nmodule.exports = BSON;\nmodule.exports.Code = Code;\nmodule.exports.Map = Map;\nmodule.exports.Symbol = Symbol;\nmodule.exports.BSON = BSON;\nmodule.exports.DBRef = DBRef;\nmodule.exports.Binary = Binary;\nmodule.exports.ObjectID = ObjectID;\nmodule.exports.Long = Long;\nmodule.exports.Timestamp = Timestamp;\nmodule.exports.Double = Double;\nmodule.exports.Int32 = Int32;\nmodule.exports.MinKey = MinKey;\nmodule.exports.MaxKey = MaxKey;\nmodule.exports.BSONRegExp = BSONRegExp;\nmodule.exports.Decimal128 = Decimal128;\n\n//# sourceMappingURL=bson-compiled.js.map"]}