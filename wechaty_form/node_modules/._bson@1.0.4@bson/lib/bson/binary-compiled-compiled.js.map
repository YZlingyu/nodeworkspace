{"version":3,"sources":["binary-compiled.js"],"names":[],"mappings":"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","file":"binary-compiled-compiled.js","sourcesContent":["/**\n * Module dependencies.\n * @ignore\n */\n\n// Test if we're in Node via presence of \"global\" not absence of \"window\"\n// to support hybrid environments like Electron\nif (typeof global !== 'undefined') {\n  var Buffer = require('buffer').Buffer; // TODO just use global Buffer\n}\n\n/**\n * A class representation of the BSON Binary type.\n *\n * Sub types\n *  - **BSON.BSON_BINARY_SUBTYPE_DEFAULT**, default BSON type.\n *  - **BSON.BSON_BINARY_SUBTYPE_FUNCTION**, BSON function type.\n *  - **BSON.BSON_BINARY_SUBTYPE_BYTE_ARRAY**, BSON byte array type.\n *  - **BSON.BSON_BINARY_SUBTYPE_UUID**, BSON uuid type.\n *  - **BSON.BSON_BINARY_SUBTYPE_MD5**, BSON md5 type.\n *  - **BSON.BSON_BINARY_SUBTYPE_USER_DEFINED**, BSON user defined type.\n *\n * @class\n * @param {Buffer} buffer a buffer object containing the binary data.\n * @param {Number} [subType] the option binary type.\n * @return {Binary}\n */\nfunction Binary(buffer, subType) {\n  if (!(this instanceof Binary)) return new Binary(buffer, subType);\n\n  this._bsontype = 'Binary';\n\n  if (buffer instanceof Number) {\n    this.sub_type = buffer;\n    this.position = 0;\n  } else {\n    this.sub_type = subType == null ? BSON_BINARY_SUBTYPE_DEFAULT : subType;\n    this.position = 0;\n  }\n\n  if (buffer != null && !(buffer instanceof Number)) {\n    // Only accept Buffer, Uint8Array or Arrays\n    if (typeof buffer == 'string') {\n      // Different ways of writing the length of the string for the different types\n      if (typeof Buffer != 'undefined') {\n        this.buffer = new Buffer(buffer);\n      } else if (typeof Uint8Array != 'undefined' || Object.prototype.toString.call(buffer) == '[object Array]') {\n        this.buffer = writeStringToArray(buffer);\n      } else {\n        throw new Error(\"only String, Buffer, Uint8Array or Array accepted\");\n      }\n    } else {\n      this.buffer = buffer;\n    }\n    this.position = buffer.length;\n  } else {\n    if (typeof Buffer != 'undefined') {\n      this.buffer = new Buffer(Binary.BUFFER_SIZE);\n    } else if (typeof Uint8Array != 'undefined') {\n      this.buffer = new Uint8Array(new ArrayBuffer(Binary.BUFFER_SIZE));\n    } else {\n      this.buffer = new Array(Binary.BUFFER_SIZE);\n    }\n    // Set position to start of buffer\n    this.position = 0;\n  }\n};\n\n/**\n * Updates this binary with byte_value.\n *\n * @method\n * @param {string} byte_value a single byte we wish to write.\n */\nBinary.prototype.put = function put(byte_value) {\n  // If it's a string and a has more than one character throw an error\n  if (byte_value['length'] != null && typeof byte_value != 'number' && byte_value.length != 1) throw new Error(\"only accepts single character String, Uint8Array or Array\");\n  if (typeof byte_value != 'number' && byte_value < 0 || byte_value > 255) throw new Error(\"only accepts number in a valid unsigned byte range 0-255\");\n\n  // Decode the byte value once\n  var decoded_byte = null;\n  if (typeof byte_value == 'string') {\n    decoded_byte = byte_value.charCodeAt(0);\n  } else if (byte_value['length'] != null) {\n    decoded_byte = byte_value[0];\n  } else {\n    decoded_byte = byte_value;\n  }\n\n  if (this.buffer.length > this.position) {\n    this.buffer[this.position++] = decoded_byte;\n  } else {\n    if (typeof Buffer != 'undefined' && Buffer.isBuffer(this.buffer)) {\n      // Create additional overflow buffer\n      var buffer = new Buffer(Binary.BUFFER_SIZE + this.buffer.length);\n      // Combine the two buffers together\n      this.buffer.copy(buffer, 0, 0, this.buffer.length);\n      this.buffer = buffer;\n      this.buffer[this.position++] = decoded_byte;\n    } else {\n      var buffer = null;\n      // Create a new buffer (typed or normal array)\n      if (Object.prototype.toString.call(this.buffer) == '[object Uint8Array]') {\n        buffer = new Uint8Array(new ArrayBuffer(Binary.BUFFER_SIZE + this.buffer.length));\n      } else {\n        buffer = new Array(Binary.BUFFER_SIZE + this.buffer.length);\n      }\n\n      // We need to copy all the content to the new array\n      for (var i = 0; i < this.buffer.length; i++) {\n        buffer[i] = this.buffer[i];\n      }\n\n      // Reassign the buffer\n      this.buffer = buffer;\n      // Write the byte\n      this.buffer[this.position++] = decoded_byte;\n    }\n  }\n};\n\n/**\n * Writes a buffer or string to the binary.\n *\n * @method\n * @param {(Buffer|string)} string a string or buffer to be written to the Binary BSON object.\n * @param {number} offset specify the binary of where to write the content.\n * @return {null}\n */\nBinary.prototype.write = function write(string, offset) {\n  offset = typeof offset == 'number' ? offset : this.position;\n\n  // If the buffer is to small let's extend the buffer\n  if (this.buffer.length < offset + string.length) {\n    var buffer = null;\n    // If we are in node.js\n    if (typeof Buffer != 'undefined' && Buffer.isBuffer(this.buffer)) {\n      buffer = new Buffer(this.buffer.length + string.length);\n      this.buffer.copy(buffer, 0, 0, this.buffer.length);\n    } else if (Object.prototype.toString.call(this.buffer) == '[object Uint8Array]') {\n      // Create a new buffer\n      buffer = new Uint8Array(new ArrayBuffer(this.buffer.length + string.length));\n      // Copy the content\n      for (var i = 0; i < this.position; i++) {\n        buffer[i] = this.buffer[i];\n      }\n    }\n\n    // Assign the new buffer\n    this.buffer = buffer;\n  }\n\n  if (typeof Buffer != 'undefined' && Buffer.isBuffer(string) && Buffer.isBuffer(this.buffer)) {\n    string.copy(this.buffer, offset, 0, string.length);\n    this.position = offset + string.length > this.position ? offset + string.length : this.position;\n    // offset = string.length\n  } else if (typeof Buffer != 'undefined' && typeof string == 'string' && Buffer.isBuffer(this.buffer)) {\n    this.buffer.write(string, offset, 'binary');\n    this.position = offset + string.length > this.position ? offset + string.length : this.position;\n    // offset = string.length;\n  } else if (Object.prototype.toString.call(string) == '[object Uint8Array]' || Object.prototype.toString.call(string) == '[object Array]' && typeof string != 'string') {\n    for (var i = 0; i < string.length; i++) {\n      this.buffer[offset++] = string[i];\n    }\n\n    this.position = offset > this.position ? offset : this.position;\n  } else if (typeof string == 'string') {\n    for (var i = 0; i < string.length; i++) {\n      this.buffer[offset++] = string.charCodeAt(i);\n    }\n\n    this.position = offset > this.position ? offset : this.position;\n  }\n};\n\n/**\n * Reads **length** bytes starting at **position**.\n *\n * @method\n * @param {number} position read from the given position in the Binary.\n * @param {number} length the number of bytes to read.\n * @return {Buffer}\n */\nBinary.prototype.read = function read(position, length) {\n  length = length && length > 0 ? length : this.position;\n\n  // Let's return the data based on the type we have\n  if (this.buffer['slice']) {\n    return this.buffer.slice(position, position + length);\n  } else {\n    // Create a buffer to keep the result\n    var buffer = typeof Uint8Array != 'undefined' ? new Uint8Array(new ArrayBuffer(length)) : new Array(length);\n    for (var i = 0; i < length; i++) {\n      buffer[i] = this.buffer[position++];\n    }\n  }\n  // Return the buffer\n  return buffer;\n};\n\n/**\n * Returns the value of this binary as a string.\n *\n * @method\n * @return {string}\n */\nBinary.prototype.value = function value(asRaw) {\n  asRaw = asRaw == null ? false : asRaw;\n\n  // Optimize to serialize for the situation where the data == size of buffer\n  if (asRaw && typeof Buffer != 'undefined' && Buffer.isBuffer(this.buffer) && this.buffer.length == this.position) return this.buffer;\n\n  // If it's a node.js buffer object\n  if (typeof Buffer != 'undefined' && Buffer.isBuffer(this.buffer)) {\n    return asRaw ? this.buffer.slice(0, this.position) : this.buffer.toString('binary', 0, this.position);\n  } else {\n    if (asRaw) {\n      // we support the slice command use it\n      if (this.buffer['slice'] != null) {\n        return this.buffer.slice(0, this.position);\n      } else {\n        // Create a new buffer to copy content to\n        var newBuffer = Object.prototype.toString.call(this.buffer) == '[object Uint8Array]' ? new Uint8Array(new ArrayBuffer(this.position)) : new Array(this.position);\n        // Copy content\n        for (var i = 0; i < this.position; i++) {\n          newBuffer[i] = this.buffer[i];\n        }\n        // Return the buffer\n        return newBuffer;\n      }\n    } else {\n      return convertArraytoUtf8BinaryString(this.buffer, 0, this.position);\n    }\n  }\n};\n\n/**\n * Length.\n *\n * @method\n * @return {number} the length of the binary.\n */\nBinary.prototype.length = function length() {\n  return this.position;\n};\n\n/**\n * @ignore\n */\nBinary.prototype.toJSON = function () {\n  return this.buffer != null ? this.buffer.toString('base64') : '';\n};\n\n/**\n * @ignore\n */\nBinary.prototype.toString = function (format) {\n  return this.buffer != null ? this.buffer.slice(0, this.position).toString(format) : '';\n};\n\n/**\n * Binary default subtype\n * @ignore\n */\nvar BSON_BINARY_SUBTYPE_DEFAULT = 0;\n\n/**\n * @ignore\n */\nvar writeStringToArray = function (data) {\n  // Create a buffer\n  var buffer = typeof Uint8Array != 'undefined' ? new Uint8Array(new ArrayBuffer(data.length)) : new Array(data.length);\n  // Write the content to the buffer\n  for (var i = 0; i < data.length; i++) {\n    buffer[i] = data.charCodeAt(i);\n  }\n  // Write the string to the buffer\n  return buffer;\n};\n\n/**\n * Convert Array ot Uint8Array to Binary String\n *\n * @ignore\n */\nvar convertArraytoUtf8BinaryString = function (byteArray, startIndex, endIndex) {\n  var result = \"\";\n  for (var i = startIndex; i < endIndex; i++) {\n    result = result + String.fromCharCode(byteArray[i]);\n  }\n  return result;\n};\n\nBinary.BUFFER_SIZE = 256;\n\n/**\n * Default BSON type\n *\n * @classconstant SUBTYPE_DEFAULT\n **/\nBinary.SUBTYPE_DEFAULT = 0;\n/**\n * Function BSON type\n *\n * @classconstant SUBTYPE_DEFAULT\n **/\nBinary.SUBTYPE_FUNCTION = 1;\n/**\n * Byte Array BSON type\n *\n * @classconstant SUBTYPE_DEFAULT\n **/\nBinary.SUBTYPE_BYTE_ARRAY = 2;\n/**\n * OLD UUID BSON type\n *\n * @classconstant SUBTYPE_DEFAULT\n **/\nBinary.SUBTYPE_UUID_OLD = 3;\n/**\n * UUID BSON type\n *\n * @classconstant SUBTYPE_DEFAULT\n **/\nBinary.SUBTYPE_UUID = 4;\n/**\n * MD5 BSON type\n *\n * @classconstant SUBTYPE_DEFAULT\n **/\nBinary.SUBTYPE_MD5 = 5;\n/**\n * User BSON type\n *\n * @classconstant SUBTYPE_DEFAULT\n **/\nBinary.SUBTYPE_USER_DEFINED = 128;\n\n/**\n * Expose.\n */\nmodule.exports = Binary;\nmodule.exports.Binary = Binary;\n\n//# sourceMappingURL=binary-compiled.js.map"]}