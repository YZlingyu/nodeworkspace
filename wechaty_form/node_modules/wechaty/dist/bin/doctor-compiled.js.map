{"version":3,"sources":["doctor.js"],"names":[],"mappings":";AACA;;AACA,IAAI,YAAa,QAAQ,KAAK,SAAd,IAA4B,UAAU,OAAV,EAAmB,UAAnB,EAA+B,CAA/B,EAAkC,SAAlC,EAA6C;AACrF,WAAO,KAAK,MAAM,IAAI,OAAV,CAAL,EAAyB,UAAU,OAAV,EAAmB,MAAnB,EAA2B;AACvD,iBAAS,SAAT,CAAmB,KAAnB,EAA0B;AAAE,gBAAI;AAAE,qBAAK,UAAU,IAAV,CAAe,KAAf,CAAL;AAA8B,aAApC,CAAqC,OAAO,CAAP,EAAU;AAAE,uBAAO,CAAP;AAAY;AAAE;AAC3F,iBAAS,QAAT,CAAkB,KAAlB,EAAyB;AAAE,gBAAI;AAAE,qBAAK,UAAU,OAAV,EAAmB,KAAnB,CAAL;AAAkC,aAAxC,CAAyC,OAAO,CAAP,EAAU;AAAE,uBAAO,CAAP;AAAY;AAAE;AAC9F,iBAAS,IAAT,CAAc,MAAd,EAAsB;AAAE,mBAAO,IAAP,GAAc,QAAQ,OAAO,KAAf,CAAd,GAAsC,IAAI,CAAJ,CAAM,UAAU,OAAV,EAAmB;AAAE,wBAAQ,OAAO,KAAf;AAAwB,aAAnD,EAAqD,IAArD,CAA0D,SAA1D,EAAqE,QAArE,CAAtC;AAAuH;AAC/I,aAAK,CAAC,YAAY,UAAU,KAAV,CAAgB,OAAhB,EAAyB,cAAc,EAAvC,CAAb,EAAyD,IAAzD,EAAL;AACH,KALM,CAAP;AAMH,CAPD;AAQA,OAAO,cAAP,CAAsB,OAAtB,EAA+B,YAA/B,EAA6C,EAAE,OAAO,IAAT,EAA7C;AACA,MAAM,KAAK,QAAQ,IAAR,CAAX;AACA,MAAM,WAAW,QAAQ,eAAR,CAAjB;AACA,MAAM,WAAW,QAAQ,eAAR,CAAjB;AACA,MAAM,YAAY,QAAQ,gBAAR,CAAlB;AACA,MAAM,UAAU,UAAU,OAAV,CAAkB,QAAlB,EAAhB;AACA,MAAM,SAAS,IAAI,SAAS,OAAb,EAAf;AACA,SAAS,IAAT,GAAgB;AACZ,WAAO,UAAU,IAAV,EAAgB,KAAK,CAArB,EAAwB,KAAK,CAA7B,EAAgC,aAAa;AAChD,YAAI,aAAJ;AACA,cAAM,sBAAsB,OAAO,mBAAP,EAA5B;AACA,YAAI;AACA,kBAAM,OAAO,OAAP,EAAN;AACA,4BAAgB,MAAhB;AACH,SAHD,CAIA,OAAO,GAAP,EAAY;AACR,oBAAQ,GAAR,CAAY,GAAZ;AACA,4BAAgB,6FAAhB;AACH;AACD,gBAAQ,GAAR,CAAa;;;wBAAA,CAGG,QAAQ,OAAR,EAAkB;OAAA,CACnC,GAAG,IAAH,EAAU,MAAG,GAAG,IAAH,EAAU,cAAW,GAAG,OAAH,EAAa,aAAU,KAAK,KAAL,CAAW,GAAG,OAAH,KAAe,IAAf,GAAsB,IAAjC,CAAuC,MAAG,KAAK,KAAL,CAAW,GAAG,QAAH,KAAgB,IAAhB,GAAuB,IAAlC,CAAwC;eAAA,CACnI,SAAS,OAAT,CAAiB,QAAS;qBAAA,CACpB,QAAQ,OAAQ;qBAAA,CAChB,aAAc;qBAAA,CACd,mBAAoB;;GARjC;AAWH,KAtBM,CAAP;AAuBH;AACD,IAAI;AACA;AACH,CAFD,CAGA,OAAO,GAAP,EAAY;AACR,YAAQ,KAAR,CAAc,sBAAd,EAAsC,IAAI,OAAJ,IAAe,GAArD;AACH;AACD","file":"doctor-compiled.js","sourcesContent":["#!/usr/bin/env node\n\"use strict\";\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst os = require(\"os\");\nconst config_1 = require(\"../src/config\");\nconst doctor_1 = require(\"../src/doctor\");\nconst wechaty_1 = require(\"../src/wechaty\");\nconst wechaty = wechaty_1.default.instance();\nconst doctor = new doctor_1.default();\nfunction main() {\n    return __awaiter(this, void 0, void 0, function* () {\n        let ipcTestResult;\n        const chromedriverVersion = doctor.chromedriverVersion();\n        try {\n            yield doctor.testTcp();\n            ipcTestResult = 'PASS';\n        }\n        catch (err) {\n            console.log(err);\n            ipcTestResult = 'FAIL. Please check your tcp network, Wechaty need to listen on localhost and connect to it.';\n        }\n        console.log(`\n  #### Wechaty Doctor\n\n  1. Wechaty version: ${wechaty.version()}\n  2. ${os.type()} ${os.arch()} version ${os.release()} memory ${Math.floor(os.freemem() / 1024 / 1024)}/${Math.floor(os.totalmem() / 1024 / 1024)} MB\n  3. Docker: ${config_1.default.isDocker}\n  4. Node version: ${process.version}\n  5. Tcp IPC TEST: ${ipcTestResult}\n  6. Chromedriver: ${chromedriverVersion}\n\n  `);\n    });\n}\ntry {\n    main();\n}\ncatch (err) {\n    console.error('main() exception: %s', err.message || err);\n}\n//# sourceMappingURL=doctor.js.map"]}