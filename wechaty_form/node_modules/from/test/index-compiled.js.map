{"version":3,"sources":["index.js"],"names":[],"mappings":"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","file":"index-compiled.js","sourcesContent":["var from = require('..')\nvar spec = require('stream-spec')\nvar a = require('assertions')\n\nfunction read(stream, callback) {\n  var actual = []\n  stream.on('data', function (data) {\n    actual.push(data)\n  })\n  stream.once('end', function () {\n    callback(null, actual)\n  })\n  stream.once('error', function (err) {\n    callback(err)\n  })\n}\n\nfunction pause(stream) {\n  stream.on('data', function () {\n    if(Math.random() > 0.1) return\n    stream.pause()\n    process.nextTick(function () {\n      stream.resume()\n    })\n  })\n}\n\nexports['inc'] = function (test) {\n\n  var fs = from(function (i) {\n    this.emit('data', i)\n    if(i >= 99)\n      return this.emit('end')\n    return true\n  })\n\n  spec(fs).readable().validateOnExit() \n\n  read(fs, function (err, arr) {\n    test.equal(arr.length, 100)\n    test.done()\n  })\n}\n\nexports['inc - async'] = function (test) {\n\n  var fs = from(function (i, next) {\n    this.emit('data', i)\n    if(i >= 99)\n      return this.emit('end')\n\t\tnext();\n  })\n\n  spec(fs).readable().validateOnExit() \n\n  read(fs, function (err, arr) {\n    test.equal(arr.length, 100)\n    test.done()\n  })\n}\n\nexports['large stream - from an array'] = function (test) {\n\n  var l = 100000\n    , expected = [] \n\n  while(l--) expected.push(l * Math.random())\n\n  var fs = from(expected.slice())\n\n  spec(fs).readable().validateOnExit() \n\n  read(fs, function (err, arr) {\n\t\ta.deepEqual(arr, expected)\n    test.done()\n  })\n}\n\nexports['large stream - callback return true'] = function (test) {\n\n  var fs = from(function (i, next) {\n    this.emit('data', i)\n    if(i >= 99999)\n      return this.emit('end')\n\t\treturn true;\n  })\n\n  spec(fs).readable().validateOnExit() \n\n  read(fs, function (err, arr) {\n    test.equal(arr.length, 100000)\n    test.done()\n  })\n}\n\nexports['large stream - callback call next()'] = function (test) {\n\n  var fs = from(function (i, next) {\n    this.emit('data', i)\n    if(i >= 99999)\n      return this.emit('end')\n\t\tnext();\n  })\n\n  spec(fs).readable().validateOnExit() \n\n  read(fs, function (err, arr) {\n    test.equal(arr.length, 100000)\n    test.done()\n  })\n}\n\nexports['simple'] = function (test) {\n\n  var l = 1000\n    , expected = [] \n\n  while(l--) expected.push(l * Math.random())\n\n  var t = from(expected.slice())\n\n  spec(t)\n    .readable()\n    .pausable({strict: true})\n    .validateOnExit()\n\n  read(t, function (err, actual) {\n    if(err) test.error(err) //fail\n    a.deepEqual(actual, expected)\n    test.done()\n  })\n\n}\n\nexports['simple pausable'] = function (test) {\n\n  var l = 1000\n    , expected = [] \n\n  while(l--) expected.push(l * Math.random())\n\n  var t = from(expected.slice())\n\n  spec(t)\n    .readable()\n    .pausable({strict: true})\n    .validateOnExit()\n\n  pause(t)\n\n  read(t, function (err, actual) {\n    if(err) test.error(err) //fail\n    a.deepEqual(actual, expected)\n    test.done()\n  })\n\n}\n\nexports['simple (not strictly pausable) setTimeout'] = function (test) {\n\n  var l = 10\n    , expected = [] \n  while(l--) expected.push(l * Math.random())\n\n\n  var _expected = expected.slice()\n  var t = from(function (i, n) {\n    var self = this\n    setTimeout(function () {\n      if(_expected.length)\n        self.emit('data', _expected.shift())\n      else\n        if(!self.ended)\n          self.emit('end')\n      n()\n    }, 3)\n  })\n\n  /*\n    using from in this way will not be strictly pausable.\n    it could be extended to buffer outputs, but I think a better\n    way would be to use a PauseStream that implements strict pause.\n  */\n\n  spec(t)\n    .readable()\n    .pausable({strict: false })\n    .validateOnExit()\n\n  //pause(t)\n  var paused = false\n  var i = setInterval(function () {\n    if(!paused) t.pause()\n    else t.resume()\n    paused = !paused\n  }, 2)\n\n  t.on('end', function () {\n    clearInterval(i)\n  })\n\n  read(t, function (err, actual) {\n    if(err) test.error(err) //fail\n    a.deepEqual(actual, expected)\n    test.done()\n  })\n\n}\n\n\n"]}