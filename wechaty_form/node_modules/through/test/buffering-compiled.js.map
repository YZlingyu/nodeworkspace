{"version":3,"sources":["buffering.js"],"names":[],"mappings":"AAAA,IAAI,OAAO,QAAQ,MAAR,CAAX;AACA,IAAI,UAAU,QAAQ,KAAR,CAAd;;AAEA;;AAEA,KAAK,WAAL,EAAkB,UAAS,MAAT,EAAiB;AACjC,MAAI,KAAK,QAAQ,UAAU,IAAV,EAAgB;AAC/B,SAAK,KAAL,CAAW,IAAX;AACD,GAFQ,EAEN,YAAY;AACb,SAAK,KAAL,CAAW,IAAX;AACD,GAJQ,CAAT;;AAMA,MAAI,QAAQ,KAAZ;AAAA,MAAoB,SAAS,EAA7B;;AAEA,KAAG,EAAH,CAAM,MAAN,EAAc,OAAO,IAAP,CAAY,IAAZ,CAAiB,MAAjB,CAAd;AACA,KAAG,EAAH,CAAM,KAAN,EAAa,YAAY;AACvB,YAAQ,IAAR;AACD,GAFD;;AAIA,KAAG,KAAH,CAAS,CAAT;AACA,KAAG,KAAH,CAAS,CAAT;AACA,KAAG,KAAH,CAAS,CAAT;AACA,SAAO,SAAP,CAAiB,MAAjB,EAAyB,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,CAAzB;AACA,KAAG,KAAH;AACA,KAAG,KAAH,CAAS,CAAT;AACA,KAAG,KAAH,CAAS,CAAT;AACA,KAAG,KAAH,CAAS,CAAT;AACA,SAAO,SAAP,CAAiB,MAAjB,EAAyB,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,CAAzB;AACA,KAAG,MAAH;AACA,SAAO,SAAP,CAAiB,MAAjB,EAAyB,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,EAAU,CAAV,EAAa,CAAb,EAAgB,CAAhB,CAAzB;AACA,KAAG,KAAH;AACA,KAAG,GAAH;AACA,SAAO,EAAP,CAAU,CAAC,KAAX;AACA,KAAG,MAAH;AACA,SAAO,EAAP,CAAU,KAAV;AACA,SAAO,GAAP;AACD,CA/BD;;AAiCA,KAAK,wCAAL,EAA+C,UAAU,MAAV,EAAkB;;AAE/D;;;;;;AAMA,MAAI,KAAK,QAAQ,UAAU,IAAV,EAAgB;AAC/B,SAAK,KAAL,CAAW,IAAX;AACD,GAFQ,EAEN,YAAY;AACb,SAAK,KAAL,CAAW,IAAX;AACD,GAJQ,CAAT;;AAMA,MAAI,QAAQ,KAAZ;AAAA,MAAoB,SAAS,EAA7B;;AAEA,KAAG,EAAH,CAAM,MAAN,EAAc,OAAO,IAAP,CAAY,IAAZ,CAAiB,MAAjB,CAAd;AACA,KAAG,EAAH,CAAM,KAAN,EAAa,YAAY;AACvB,YAAQ,IAAR;AACD,GAFD;;AAIA,KAAG,KAAH;AACA,KAAG,KAAH,CAAS,CAAT;AACA,KAAG,KAAH,CAAS,CAAT;AACA,KAAG,KAAH,CAAS,CAAT;AACA,KAAG,GAAH;AACA,SAAO,SAAP,CAAiB,MAAjB,EAAyB,EAAzB,EAA6B,mCAA7B;AACA,SAAO,EAAP,CAAU,CAAC,KAAX,EAAkB,mCAAlB;AACA,KAAG,MAAH;AACA,SAAO,SAAP,CAAiB,MAAjB,EAAyB,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,CAAzB,EAAoC,uCAApC;AACA,SAAO,EAAP,CAAU,KAAV,EAAiB,mDAAjB;AACA,SAAO,GAAP;AACD,CAhCD","file":"buffering-compiled.js","sourcesContent":["var test = require('tape')\nvar through = require('../')\n\n// must emit end before close.\n\ntest('buffering', function(assert) {\n  var ts = through(function (data) {\n    this.queue(data)\n  }, function () {\n    this.queue(null)\n  })\n\n  var ended = false,  actual = []\n\n  ts.on('data', actual.push.bind(actual))\n  ts.on('end', function () {\n    ended = true\n  })\n\n  ts.write(1)\n  ts.write(2)\n  ts.write(3)\n  assert.deepEqual(actual, [1, 2, 3])\n  ts.pause()\n  ts.write(4)\n  ts.write(5)\n  ts.write(6)\n  assert.deepEqual(actual, [1, 2, 3])\n  ts.resume()\n  assert.deepEqual(actual, [1, 2, 3, 4, 5, 6])\n  ts.pause()\n  ts.end()\n  assert.ok(!ended)\n  ts.resume()\n  assert.ok(ended)\n  assert.end()\n})\n\ntest('buffering has data in queue, when ends', function (assert) {\n\n  /*\n   * If stream ends while paused with data in the queue,\n   * stream should still emit end after all data is written\n   * on resume.\n   */\n\n  var ts = through(function (data) {\n    this.queue(data)\n  }, function () {\n    this.queue(null)\n  })\n\n  var ended = false,  actual = []\n\n  ts.on('data', actual.push.bind(actual))\n  ts.on('end', function () {\n    ended = true\n  })\n\n  ts.pause()\n  ts.write(1)\n  ts.write(2)\n  ts.write(3)\n  ts.end()\n  assert.deepEqual(actual, [], 'no data written yet, still paused')\n  assert.ok(!ended, 'end not emitted yet, still paused')\n  ts.resume()\n  assert.deepEqual(actual, [1, 2, 3], 'resumed, all data should be delivered')\n  assert.ok(ended, 'end should be emitted once all data was delivered')\n  assert.end();\n})\n"]}