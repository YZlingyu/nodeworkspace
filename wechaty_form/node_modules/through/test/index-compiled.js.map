{"version":3,"sources":["index.js"],"names":[],"mappings":"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","file":"index-compiled.js","sourcesContent":["\nvar test = require('tape')\nvar spec = require('stream-spec')\nvar through = require('../')\n\n/*\n  I'm using these two functions, and not streams and pipe\n  so there is less to break. if this test fails it must be\n  the implementation of _through_\n*/\n\nfunction write(array, stream) {\n  array = array.slice()\n  function next() {\n    while(array.length)\n      if(stream.write(array.shift()) === false)\n        return stream.once('drain', next)\n    \n    stream.end()\n  }\n\n  next()\n}\n\nfunction read(stream, callback) {\n  var actual = []\n  stream.on('data', function (data) {\n    actual.push(data)\n  })\n  stream.once('end', function () {\n    callback(null, actual)\n  })\n  stream.once('error', function (err) {\n    callback(err)\n  })\n}\n\ntest('simple defaults', function(assert) {\n\n  var l = 1000\n    , expected = []\n\n  while(l--) expected.push(l * Math.random())\n\n  var t = through()\n  var s = spec(t).through().pausable()\n\n  read(t, function (err, actual) {\n    assert.ifError(err)\n    assert.deepEqual(actual, expected)\n    assert.end()\n  })\n\n  t.on('close', s.validate)\n\n  write(expected, t)\n});\n\ntest('simple functions', function(assert) {\n\n  var l = 1000\n    , expected = [] \n\n  while(l--) expected.push(l * Math.random())\n\n  var t = through(function (data) {\n      this.emit('data', data*2)\n    }) \n  var s = spec(t).through().pausable()\n      \n\n  read(t, function (err, actual) {\n    assert.ifError(err)\n    assert.deepEqual(actual, expected.map(function (data) {\n      return data*2\n    }))\n    assert.end()\n  })\n\n  t.on('close', s.validate)\n\n  write(expected, t)\n})\n\ntest('pauses', function(assert) {\n\n  var l = 1000\n    , expected = [] \n\n  while(l--) expected.push(l) //Math.random())\n\n  var t = through()    \n \n  var s = spec(t)\n      .through()\n      .pausable()\n\n  t.on('data', function () {\n    if(Math.random() > 0.1) return\n    t.pause()\n    process.nextTick(function () {\n      t.resume()\n    })\n  })\n\n  read(t, function (err, actual) {\n    assert.ifError(err)\n    assert.deepEqual(actual, expected)\n  })\n\n  t.on('close', function () {\n    s.validate()\n    assert.end()\n  })\n\n  write(expected, t)\n})\n\ntest('does not soft-end on `undefined`', function(assert) {\n  var stream = through()\n    , count = 0\n\n  stream.on('data', function (data) {\n    count++\n  })\n\n  stream.write(undefined)\n  stream.write(undefined)\n\n  assert.equal(count, 2)\n\n  assert.end()\n})\n"]}