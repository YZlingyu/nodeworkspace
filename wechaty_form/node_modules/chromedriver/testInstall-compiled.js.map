{"version":3,"sources":["testInstall.js"],"names":[],"mappings":"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","file":"testInstall-compiled.js","sourcesContent":["#!/usr/bin/env node\n\n\"use strict\";\n\nconst os = require('os');\nconst path = require('path');\nconst fs = require('fs');\nconst spawnSync = require('child_process').spawnSync;\n\nconst versions = ['0.12', '4', '6'];\nconst tmpdir = os.tmpdir();\n\nfunction directoryExists(file) {\n    try {\n        var stat = fs.lstatSync(file);\n        return stat.isDirectory();\n    } catch (err) {\n        return false;\n    }\n}\n\nfunction fileExists(file) {\n    try {\n        var stat = fs.lstatSync(file);\n        return stat.isFile();\n    } catch (err) {\n        return false;\n    }\n}\n\nfunction removeFolder(dir) {\n    if (!fs.existsSync(dir)) return;\n    fs.readdirSync(dir).forEach((file) => {\n        let curPath = dir + path.sep + file;\n        if (fs.lstatSync(curPath).isDirectory())\n            removeFolder(curPath);\n        else\n            fs.unlinkSync(curPath);\n    });\n    fs.rmdirSync(dir);\n}\n\nlet tempInstallPath = path.resolve(tmpdir, 'chromedriver-test');\nif (directoryExists(tempInstallPath)) {\n    console.log(`Deleting directory '${tempInstallPath}'.`);\n    removeFolder(tempInstallPath);\n}\nfs.mkdirSync(tempInstallPath);\n\nfunction checkSpawn(spawnInfo) {\n    if (spawnInfo.stdout) {\n        if (typeof (spawnInfo.stdout) !== 'string')\n            console.log(spawnInfo.stdout.toString('utf8'));\n        else\n            console.log(spawnInfo.stdout);\n    }\n    if (spawnInfo.stderr) {\n        if (typeof (spawnInfo.error) !== 'string')\n            console.error(spawnInfo.stderr.toString('utf8'));\n        else\n            console.error(spawnInfo.stderr);\n    }\n    if (spawnInfo.status !== 0 || spawnInfo.error) {\n        console.error('Failed when spawning.');\n        process.exit(1);\n    }\n    if (typeof (spawnInfo.stdout) !== 'string')\n        return spawnInfo.stdout.toString('utf8');\n    else\n        return spawnInfo.stdout;\n}\n\nfunction nvmUse(version) {\n    if (os.platform() === 'win32')\n        var versionsText = checkSpawn(spawnSync('nvm', ['list']));\n    else\n        var versionsText = checkSpawn(spawnSync('/bin/bash', ['-c', 'source $HOME/.nvm/nvm.sh && nvm list']));\n    const versionsAvailable = versionsText.split('\\n').map(v => v.match(/\\d+\\.\\d+\\.\\d+/)).filter(v => v).map(v => v[0]);\n    var largestMatch = versionsAvailable.filter(v => v.match(`^${version}\\.`)).map(v => v.match(/\\d+\\.(\\d+)\\.\\d+/)).reduce(((max, v) => max[1] > v[1] ? max : v), [null, 0]);\n    if (largestMatch.length === 0) {\n        console.error(`Version '${version}' not found.`);\n        process.exit(3);\n    }\n    var largestMatchingVersion = largestMatch.input;\n    console.log(`Found version '${largestMatchingVersion}'.`);\n    if (os.platform() === 'win32')\n        checkSpawn(spawnSync('nvm', ['use', largestMatchingVersion]));\n    else\n        checkSpawn(spawnSync('/bin/bash', ['-c', `source $HOME/.nvm/nvm.sh && nvm use ${largestMatchingVersion}`]));\n}\n\nfunction sleep(milliseconds) {\n    const inAFewMilliseconds = new Date(new Date().getTime() + 2000);\n    while (inAFewMilliseconds > new Date()) { }\n}\n\nfor (let version of versions) {\n    console.log(`Testing version ${version}...`);\n    let tempInstallPathForVersion = path.resolve(tmpdir, 'chromedriver-test', version);\n    fs.mkdirSync(tempInstallPathForVersion);\n    nvmUse(version);\n    if (os.platform() === 'win32') {\n        sleep(2000); // wait 2 seconds until everything is in place\n        checkSpawn(spawnSync('cmd.exe', ['/c', `npm i ${__dirname}`], { cwd: tempInstallPathForVersion }));\n\n    } else {\n        checkSpawn(spawnSync('npm', ['i', `${__dirname}`], { cwd: tempInstallPathForVersion }));\n    }\n    let executable = path.resolve(tempInstallPathForVersion, 'node_modules', 'chromedriver', 'lib', 'chromedriver', `chromedriver${os.platform() === 'win32' ? '.exe' : ''}`);\n    if (fileExists(executable)) {\n        console.log(`Version ${version} installed fine.`);\n    }\n    else {\n        console.error(`Version ${version} did not install correctly, file '${executable}' was not found.`);\n        process.exit(2);\n    }\n}\n\ntry {\n    removeFolder(tempInstallPath);\n} catch (err) {\n    console.error(`Could not delete folder '${tempInstallPath}'.`);\n}"]}