{"version":3,"sources":["zipEntry.js"],"names":[],"mappings":"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","file":"zipEntry-compiled.js","sourcesContent":["var Utils = require(\"./util\"),\r\n    Headers = require(\"./headers\"),\r\n    Constants = Utils.Constants,\r\n    Methods = require(\"./methods\");\r\n\r\nmodule.exports = function (/*Buffer*/input) {\r\n\r\n    var _entryHeader = new Headers.EntryHeader(),\r\n        _entryName = new Buffer(0),\r\n        _comment = new Buffer(0),\r\n        _isDirectory = false,\r\n        uncompressedData = null,\r\n        _extra = new Buffer(0);\r\n\r\n    function getCompressedDataFromZip() {\r\n        if (!input || !Buffer.isBuffer(input)) {\r\n            return new Buffer(0);\r\n        }\r\n        _entryHeader.loadDataHeaderFromBinary(input);\r\n        return input.slice(_entryHeader.realDataOffset, _entryHeader.realDataOffset + _entryHeader.compressedSize)\r\n    }\r\n\r\n    function crc32OK(data) {\r\n        // if bit 3 (0x08) of the general-purpose flags field is set, then the CRC-32 and file sizes are not known when the header is written\r\n        if (_entryHeader.flags & 0x8 != 0x8) {\r\n           if (Utils.crc32(data) != _entryHeader.crc) {\r\n               return false;\r\n           }\r\n        } else {\r\n            // @TODO: load and check data descriptor header\r\n            // The fields in the local header are filled with zero, and the CRC-32 and size are appended in a 12-byte structure\r\n            // (optionally preceded by a 4-byte signature) immediately after the compressed data:\r\n        }\r\n        return true;\r\n    }\r\n\r\n    function decompress(/*Boolean*/async, /*Function*/callback, /*String*/pass) {\r\n        if(typeof callback === 'undefined' && typeof async === 'string') {\r\n            pass=async;\r\n            async=void 0;\r\n        }\r\n        if (_isDirectory) {\r\n            if (async && callback) {\r\n                callback(new Buffer(0), Utils.Errors.DIRECTORY_CONTENT_ERROR); //si added error.\r\n            }\r\n            return new Buffer(0);\r\n        }\r\n\r\n        var compressedData = getCompressedDataFromZip();\r\n       \r\n        if (compressedData.length == 0) {\r\n            if (async && callback) callback(compressedData, Utils.Errors.NO_DATA);//si added error.\r\n            return compressedData;\r\n        }\r\n\r\n        var data = new Buffer(_entryHeader.size);\r\n        data.fill(0);\r\n\r\n        switch (_entryHeader.method) {\r\n            case Utils.Constants.STORED:\r\n                compressedData.copy(data);\r\n                if (!crc32OK(data)) {\r\n                    if (async && callback) callback(data, Utils.Errors.BAD_CRC);//si added error\r\n                    return Utils.Errors.BAD_CRC;\r\n                } else {//si added otherwise did not seem to return data.\r\n                    if (async && callback) callback(data);\r\n                    return data;\r\n                }\r\n                break;\r\n            case Utils.Constants.DEFLATED:\r\n                var inflater = new Methods.Inflater(compressedData);\r\n                if (!async) {\r\n                    inflater.inflate(data);\r\n                    if (!crc32OK(data)) {\r\n                        console.warn(Utils.Errors.BAD_CRC + \" \" + _entryName.toString())\r\n                    }\r\n                    return data;\r\n                } else {\r\n                    inflater.inflateAsync(function(result) {\r\n                        result.copy(data, 0);\r\n                        if (!crc32OK(data)) {\r\n                            if (callback) callback(data, Utils.Errors.BAD_CRC); //si added error\r\n                        } else { //si added otherwise did not seem to return data.\r\n                            if (callback) callback(data);\r\n                        }\r\n                    })\r\n                }\r\n                break;\r\n            default:\r\n                if (async && callback) callback(new Buffer(0), Utils.Errors.UNKNOWN_METHOD);\r\n                return Utils.Errors.UNKNOWN_METHOD;\r\n        }\r\n    }\r\n\r\n    function compress(/*Boolean*/async, /*Function*/callback) {\r\n        if ((!uncompressedData || !uncompressedData.length) && Buffer.isBuffer(input)) {\r\n            // no data set or the data wasn't changed to require recompression\r\n            if (async && callback) callback(getCompressedDataFromZip());\r\n            return getCompressedDataFromZip();\r\n        }\r\n\r\n        if (uncompressedData.length && !_isDirectory) {\r\n            var compressedData;\r\n            // Local file header\r\n            switch (_entryHeader.method) {\r\n                case Utils.Constants.STORED:\r\n                    _entryHeader.compressedSize = _entryHeader.size;\r\n\r\n                    compressedData = new Buffer(uncompressedData.length);\r\n                    uncompressedData.copy(compressedData);\r\n\r\n                    if (async && callback) callback(compressedData);\r\n                    return compressedData;\r\n\r\n                    break;\r\n                default:\r\n                case Utils.Constants.DEFLATED:\r\n\r\n                    var deflater = new Methods.Deflater(uncompressedData);\r\n                    if (!async) {\r\n                        var deflated = deflater.deflate();\r\n                        _entryHeader.compressedSize = deflated.length;\r\n                        return deflated;\r\n                    } else {\r\n                        deflater.deflateAsync(function(data) {\r\n                            compressedData = new Buffer(data.length);\r\n                            _entryHeader.compressedSize = data.length;\r\n                            data.copy(compressedData);\r\n                            callback && callback(compressedData);\r\n                        })\r\n                    }\r\n                    deflater = null;\r\n                    break;\r\n            }\r\n        } else {\r\n            if (async && callback) {\r\n                callback(new Buffer(0));\r\n            } else {\r\n                return new Buffer(0);\r\n            }\r\n        }\r\n    }\r\n\r\n    function readUInt64LE(buffer, offset) {\r\n        return (buffer.readUInt32LE(offset + 4) << 4) + buffer.readUInt32LE(offset);\r\n    }\r\n\r\n    function parseExtra(data) {\r\n        var offset = 0;\r\n        var signature, size, part;\r\n        while(offset<data.length) {\r\n            signature = data.readUInt16LE(offset);\r\n            offset += 2;\r\n            size = data.readUInt16LE(offset);\r\n            offset += 2;\r\n            part = data.slice(offset, offset+size);\r\n            offset += size;\r\n            if(Constants.ID_ZIP64 === signature) {\r\n                parseZip64ExtendedInformation(part);\r\n            }\r\n        }\r\n    }\r\n\r\n    //Override header field values with values from the ZIP64 extra field\r\n    function parseZip64ExtendedInformation(data) {\r\n        var size, compressedSize, offset, diskNumStart;\r\n\r\n        if(data.length >= Constants.EF_ZIP64_SCOMP) {\r\n            size = readUInt64LE(data, Constants.EF_ZIP64_SUNCOMP);\r\n            if(_entryHeader.size === Constants.EF_ZIP64_OR_32) {\r\n                _entryHeader.size = size;\r\n            }\r\n        }\r\n        if(data.length >= Constants.EF_ZIP64_RHO) {\r\n            compressedSize = readUInt64LE(data, Constants.EF_ZIP64_SCOMP);\r\n            if(_entryHeader.compressedSize === Constants.EF_ZIP64_OR_32) {\r\n                _entryHeader.compressedSize = compressedSize;\r\n            }\r\n        }\r\n        if(data.length >= Constants.EF_ZIP64_DSN) {\r\n            offset = readUInt64LE(data, Constants.EF_ZIP64_RHO);\r\n            if(_entryHeader.offset === Constants.EF_ZIP64_OR_32) {\r\n                _entryHeader.offset = offset;\r\n            }\r\n        }\r\n        if(data.length >= Constants.EF_ZIP64_DSN+4) {\r\n            diskNumStart = data.readUInt32LE(Constants.EF_ZIP64_DSN);\r\n            if(_entryHeader.diskNumStart === Constants.EF_ZIP64_OR_16) {\r\n                _entryHeader.diskNumStart = diskNumStart;\r\n            }\r\n        }\r\n    }\r\n\r\n\r\n    return {\r\n        get entryName () { return _entryName.toString(); },\r\n        get rawEntryName() { return _entryName; },\r\n        set entryName (val) {\r\n            _entryName = Utils.toBuffer(val);\r\n            var lastChar = _entryName[_entryName.length - 1];\r\n            _isDirectory = (lastChar == 47) || (lastChar == 92);\r\n            _entryHeader.fileNameLength = _entryName.length;\r\n        },\r\n\r\n        get extra () { return _extra; },\r\n        set extra (val) {\r\n            _extra = val;\r\n            _entryHeader.extraLength = val.length;\r\n            parseExtra(val);\r\n        },\r\n\r\n        get comment () { return _comment.toString(); },\r\n        set comment (val) {\r\n            _comment = Utils.toBuffer(val);\r\n            _entryHeader.commentLength = _comment.length;\r\n        },\r\n\r\n        get name () { var n = _entryName.toString(); return _isDirectory ? n.substr(n.length - 1).split(\"/\").pop() : n.split(\"/\").pop(); },\r\n        get isDirectory () { return _isDirectory },\r\n\r\n        getCompressedData : function() {\r\n            return compress(false, null)\r\n        },\r\n\r\n        getCompressedDataAsync : function(/*Function*/callback) {\r\n            compress(true, callback)\r\n        },\r\n\r\n        setData : function(value) {\r\n            uncompressedData = Utils.toBuffer(value);\r\n            if (!_isDirectory && uncompressedData.length) {\r\n                _entryHeader.size = uncompressedData.length;\r\n                _entryHeader.method = Utils.Constants.DEFLATED;\r\n                _entryHeader.crc = Utils.crc32(value);\r\n            } else { // folders and blank files should be stored\r\n                _entryHeader.method = Utils.Constants.STORED;\r\n            }\r\n        },\r\n\r\n        getData : function(pass) {\r\n            return decompress(false, null, pass);\r\n        },\r\n\r\n        getDataAsync : function(/*Function*/callback, pass) {\r\n            decompress(true, callback, pass)\r\n        },\r\n\r\n        set attr(attr) { _entryHeader.attr = attr; },\r\n        get attr() { return _entryHeader.attr; },\r\n\r\n        set header(/*Buffer*/data) {\r\n            _entryHeader.loadFromBinary(data);\r\n        },\r\n\r\n        get header() {\r\n            return _entryHeader;\r\n        },\r\n\r\n        packHeader : function() {\r\n            var header = _entryHeader.entryHeaderToBinary();\r\n            // add\r\n            _entryName.copy(header, Utils.Constants.CENHDR);\r\n            if (_entryHeader.extraLength) {\r\n                _extra.copy(header, Utils.Constants.CENHDR + _entryName.length)\r\n            }\r\n            if (_entryHeader.commentLength) {\r\n                _comment.copy(header, Utils.Constants.CENHDR + _entryName.length + _entryHeader.extraLength, _comment.length);\r\n            }\r\n            return header;\r\n        },\r\n\r\n        toString : function() {\r\n            return '{\\n' +\r\n                '\\t\"entryName\" : \"' + _entryName.toString() + \"\\\",\\n\" +\r\n                '\\t\"name\" : \"' + _entryName.toString().split(\"/\").pop() + \"\\\",\\n\" +\r\n                '\\t\"comment\" : \"' + _comment.toString() + \"\\\",\\n\" +\r\n                '\\t\"isDirectory\" : ' + _isDirectory + \",\\n\" +\r\n                '\\t\"header\" : ' + _entryHeader.toString().replace(/\\t/mg, \"\\t\\t\") + \",\\n\" +\r\n                '\\t\"compressedData\" : <' + (input && input.length  + \" bytes buffer\" || \"null\") + \">\\n\" +\r\n                '\\t\"data\" : <' + (uncompressedData && uncompressedData.length  + \" bytes buffer\" || \"null\") + \">\\n\" +\r\n                '}';\r\n        }\r\n    }\r\n};\r\n"]}