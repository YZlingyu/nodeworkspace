{"version":3,"sources":["entryHeader.js"],"names":[],"mappings":"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","file":"entryHeader-compiled.js","sourcesContent":["var Utils = require(\"../util\"),\r\n    Constants = Utils.Constants;\r\n\r\n/* The central directory file header */\r\nmodule.exports = function () {\r\n    var _verMade = 0x0A,\r\n        _version = 0x0A,\r\n        _flags = 0,\r\n        _method = 0,\r\n        _time = 0,\r\n        _crc = 0,\r\n        _compressedSize = 0,\r\n        _size = 0,\r\n        _fnameLen = 0,\r\n        _extraLen = 0,\r\n\r\n        _comLen = 0,\r\n        _diskStart = 0,\r\n        _inattr = 0,\r\n        _attr = 0,\r\n        _offset = 0;\r\n\r\n    var _dataHeader = {};\r\n\r\n    function setTime(val) {\r\n        var val = new Date(val);\r\n        _time = (val.getFullYear() - 1980 & 0x7f) << 25  // b09-16 years from 1980\r\n            | (val.getMonth() + 1) << 21                 // b05-08 month\r\n            | val.getDay() << 16                         // b00-04 hour\r\n\r\n            // 2 bytes time\r\n            | val.getHours() << 11    // b11-15 hour\r\n            | val.getMinutes() << 5   // b05-10 minute\r\n            | val.getSeconds() >> 1;  // b00-04 seconds divided by 2\r\n    }\r\n\r\n    setTime(+new Date());\r\n\r\n    return {\r\n        get made () { return _verMade; },\r\n        set made (val) { _verMade = val; },\r\n\r\n        get version () { return _version; },\r\n        set version (val) { _version = val },\r\n\r\n        get flags () { return _flags },\r\n        set flags (val) { _flags = val; },\r\n\r\n        get method () { return _method; },\r\n        set method (val) { _method = val; },\r\n\r\n        get time () { return new Date(\r\n            ((_time >> 25) & 0x7f) + 1980,\r\n            ((_time >> 21) & 0x0f) - 1,\r\n            (_time >> 16) & 0x1f,\r\n            (_time >> 11) & 0x1f,\r\n            (_time >> 5) & 0x3f,\r\n            (_time & 0x1f) << 1\r\n        );\r\n        },\r\n        set time (val) {\r\n            setTime(val);\r\n        },\r\n\r\n        get crc () { return _crc; },\r\n        set crc (val) { _crc = val; },\r\n\r\n        get compressedSize () { return _compressedSize; },\r\n        set compressedSize (val) { _compressedSize = val; },\r\n\r\n        get size () { return _size; },\r\n        set size (val) { _size = val; },\r\n\r\n        get fileNameLength () { return _fnameLen; },\r\n        set fileNameLength (val) { _fnameLen = val; },\r\n\r\n        get extraLength () { return _extraLen },\r\n        set extraLength (val) { _extraLen = val; },\r\n\r\n        get commentLength () { return _comLen },\r\n        set commentLength (val) { _comLen = val },\r\n\r\n        get diskNumStart () { return _diskStart },\r\n        set diskNumStart (val) { _diskStart = val },\r\n\r\n        get inAttr () { return _inattr },\r\n        set inAttr (val) { _inattr = val },\r\n\r\n        get attr () { return _attr },\r\n        set attr (val) { _attr = val },\r\n\r\n        get offset () { return _offset },\r\n        set offset (val) { _offset = val },\r\n\r\n        get encripted () { return (_flags & 1) == 1 },\r\n\r\n        get entryHeaderSize () {\r\n            return Constants.CENHDR + _fnameLen + _extraLen + _comLen;\r\n        },\r\n\r\n        get realDataOffset () {\r\n            return _offset + Constants.LOCHDR + _dataHeader.fnameLen + _dataHeader.extraLen;\r\n        },\r\n\r\n        get dataHeader () {\r\n            return _dataHeader;\r\n        },\r\n\r\n        loadDataHeaderFromBinary : function(/*Buffer*/input) {\r\n            var data = input.slice(_offset, _offset + Constants.LOCHDR);\r\n            // 30 bytes and should start with \"PK\\003\\004\"\r\n            if (data.readUInt32LE(0) != Constants.LOCSIG) {\r\n                throw Utils.Errors.INVALID_LOC;\r\n            }\r\n            _dataHeader = {\r\n                // version needed to extract\r\n                version : data.readUInt16LE(Constants.LOCVER),\r\n                // general purpose bit flag\r\n                flags : data.readUInt16LE(Constants.LOCFLG),\r\n                // compression method\r\n                method : data.readUInt16LE(Constants.LOCHOW),\r\n                // modification time (2 bytes time, 2 bytes date)\r\n                time : data.readUInt32LE(Constants.LOCTIM),\r\n                // uncompressed file crc-32 value\r\n                crc : data.readUInt32LE(Constants.LOCCRC),\r\n                // compressed size\r\n                compressedSize : data.readUInt32LE(Constants.LOCSIZ),\r\n                // uncompressed size\r\n                size : data.readUInt32LE(Constants.LOCLEN),\r\n                // filename length\r\n                fnameLen : data.readUInt16LE(Constants.LOCNAM),\r\n                // extra field length\r\n                extraLen : data.readUInt16LE(Constants.LOCEXT)\r\n            }\r\n        },\r\n\r\n        loadFromBinary : function(/*Buffer*/data) {\r\n            // data should be 46 bytes and start with \"PK 01 02\"\r\n            if (data.length != Constants.CENHDR || data.readUInt32LE(0) != Constants.CENSIG) {\r\n                throw Utils.Errors.INVALID_CEN;\r\n            }\r\n            // version made by\r\n            _verMade = data.readUInt16LE(Constants.CENVEM);\r\n            // version needed to extract\r\n            _version = data.readUInt16LE(Constants.CENVER);\r\n            // encrypt, decrypt flags\r\n            _flags = data.readUInt16LE(Constants.CENFLG);\r\n            // compression method\r\n            _method = data.readUInt16LE(Constants.CENHOW);\r\n            // modification time (2 bytes time, 2 bytes date)\r\n            _time = data.readUInt32LE(Constants.CENTIM);\r\n            // uncompressed file crc-32 value\r\n            _crc = data.readUInt32LE(Constants.CENCRC);\r\n            // compressed size\r\n            _compressedSize = data.readUInt32LE(Constants.CENSIZ);\r\n            // uncompressed size\r\n            _size = data.readUInt32LE(Constants.CENLEN);\r\n            // filename length\r\n            _fnameLen = data.readUInt16LE(Constants.CENNAM);\r\n            // extra field length\r\n            _extraLen = data.readUInt16LE(Constants.CENEXT);\r\n            // file comment length\r\n            _comLen = data.readUInt16LE(Constants.CENCOM);\r\n            // volume number start\r\n            _diskStart = data.readUInt16LE(Constants.CENDSK);\r\n            // internal file attributes\r\n            _inattr = data.readUInt16LE(Constants.CENATT);\r\n            // external file attributes\r\n            _attr = data.readUInt32LE(Constants.CENATX);\r\n            // LOC header offset\r\n            _offset = data.readUInt32LE(Constants.CENOFF);\r\n        },\r\n\r\n        dataHeaderToBinary : function() {\r\n            // LOC header size (30 bytes)\r\n            var data = new Buffer(Constants.LOCHDR);\r\n            // \"PK\\003\\004\"\r\n            data.writeUInt32LE(Constants.LOCSIG, 0);\r\n            // version needed to extract\r\n            data.writeUInt16LE(_version, Constants.LOCVER);\r\n            // general purpose bit flag\r\n            data.writeUInt16LE(_flags, Constants.LOCFLG);\r\n            // compression method\r\n            data.writeUInt16LE(_method, Constants.LOCHOW);\r\n            // modification time (2 bytes time, 2 bytes date)\r\n            data.writeUInt32LE(_time, Constants.LOCTIM);\r\n            // uncompressed file crc-32 value\r\n            data.writeUInt32LE(_crc, Constants.LOCCRC);\r\n            // compressed size\r\n            data.writeUInt32LE(_compressedSize, Constants.LOCSIZ);\r\n            // uncompressed size\r\n            data.writeUInt32LE(_size, Constants.LOCLEN);\r\n            // filename length\r\n            data.writeUInt16LE(_fnameLen, Constants.LOCNAM);\r\n            // extra field length\r\n            data.writeUInt16LE(_extraLen, Constants.LOCEXT);\r\n            return data;\r\n        },\r\n\r\n        entryHeaderToBinary : function() {\r\n            // CEN header size (46 bytes)\r\n            var data = new Buffer(Constants.CENHDR + _fnameLen + _extraLen + _comLen);\r\n            // \"PK\\001\\002\"\r\n            data.writeUInt32LE(Constants.CENSIG, 0);\r\n            // version made by\r\n            data.writeUInt16LE(_verMade, Constants.CENVEM);\r\n            // version needed to extract\r\n            data.writeUInt16LE(_version, Constants.CENVER);\r\n            // encrypt, decrypt flags\r\n            data.writeUInt16LE(_flags, Constants.CENFLG);\r\n            // compression method\r\n            data.writeUInt16LE(_method, Constants.CENHOW);\r\n            // modification time (2 bytes time, 2 bytes date)\r\n            data.writeUInt32LE(_time, Constants.CENTIM);\r\n            // uncompressed file crc-32 value\r\n            data.writeInt32LE(_crc, Constants.CENCRC, true);\r\n            // compressed size\r\n            data.writeUInt32LE(_compressedSize, Constants.CENSIZ);\r\n            // uncompressed size\r\n            data.writeUInt32LE(_size, Constants.CENLEN);\r\n            // filename length\r\n            data.writeUInt16LE(_fnameLen, Constants.CENNAM);\r\n            // extra field length\r\n            data.writeUInt16LE(_extraLen, Constants.CENEXT);\r\n            // file comment length\r\n            data.writeUInt16LE(_comLen, Constants.CENCOM);\r\n            // volume number start\r\n            data.writeUInt16LE(_diskStart, Constants.CENDSK);\r\n            // internal file attributes\r\n            data.writeUInt16LE(_inattr, Constants.CENATT);\r\n            // external file attributes\r\n            data.writeUInt32LE(_attr, Constants.CENATX);\r\n            // LOC header offset\r\n            data.writeUInt32LE(_offset, Constants.CENOFF);\r\n            // fill all with\r\n            data.fill(0x00, Constants.CENHDR);\r\n            return data;\r\n        },\r\n\r\n        toString : function() {\r\n            return '{\\n' +\r\n                '\\t\"made\" : ' + _verMade + \",\\n\" +\r\n                '\\t\"version\" : ' + _version + \",\\n\" +\r\n                '\\t\"flags\" : ' + _flags + \",\\n\" +\r\n                '\\t\"method\" : ' + Utils.methodToString(_method) + \",\\n\" +\r\n                '\\t\"time\" : ' + _time + \",\\n\" +\r\n                '\\t\"crc\" : 0x' + _crc.toString(16).toUpperCase() + \",\\n\" +\r\n                '\\t\"compressedSize\" : ' + _compressedSize + \" bytes,\\n\" +\r\n                '\\t\"size\" : ' + _size + \" bytes,\\n\" +\r\n                '\\t\"fileNameLength\" : ' + _fnameLen + \",\\n\" +\r\n                '\\t\"extraLength\" : ' + _extraLen + \" bytes,\\n\" +\r\n                '\\t\"commentLength\" : ' + _comLen + \" bytes,\\n\" +\r\n                '\\t\"diskNumStart\" : ' + _diskStart + \",\\n\" +\r\n                '\\t\"inAttr\" : ' + _inattr + \",\\n\" +\r\n                '\\t\"attr\" : ' + _attr + \",\\n\" +\r\n                '\\t\"offset\" : ' + _offset + \",\\n\" +\r\n                '\\t\"entryHeaderSize\" : ' + (Constants.CENHDR + _fnameLen + _extraLen + _comLen) + \" bytes\\n\" +\r\n                '}';\r\n        }\r\n    }\r\n};\r\n"]}