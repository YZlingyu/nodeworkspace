{"version":3,"sources":["inflater.js"],"names":[],"mappings":"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","file":"inflater-compiled.js","sourcesContent":["var Buffer = require(\"buffer\").Buffer;\r\n\r\nfunction JSInflater(/*Buffer*/input) {\r\n\r\n    var WSIZE = 0x8000,\r\n        slide = new Buffer(0x10000),\r\n        windowPos = 0,\r\n        fixedTableList = null,\r\n        fixedTableDist,\r\n        fixedLookup,\r\n        bitBuf = 0,\r\n        bitLen = 0,\r\n        method = -1,\r\n        eof = false,\r\n        copyLen = 0,\r\n        copyDist = 0,\r\n        tblList, tblDist, bitList, bitdist,\r\n\r\n        inputPosition = 0,\r\n\r\n        MASK_BITS = [0x0000, 0x0001, 0x0003, 0x0007, 0x000f, 0x001f, 0x003f, 0x007f, 0x00ff, 0x01ff, 0x03ff, 0x07ff, 0x0fff, 0x1fff, 0x3fff, 0x7fff, 0xffff],\r\n        LENS = [3, 4, 5, 6, 7, 8, 9, 10, 11, 13, 15, 17, 19, 23, 27, 31, 35, 43, 51, 59, 67, 83, 99, 115, 131, 163, 195, 227, 258, 0, 0],\r\n        LEXT = [0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 2, 2, 2, 2, 3, 3, 3, 3, 4, 4, 4, 4, 5, 5, 5, 5, 0, 99, 99],\r\n        DISTS = [1, 2, 3, 4, 5, 7, 9, 13, 17, 25, 33, 49, 65, 97, 129, 193, 257, 385, 513, 769, 1025, 1537, 2049, 3073, 4097, 6145, 8193, 12289, 16385, 24577],\r\n        DEXT = [0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7, 8, 8, 9, 9, 10, 10, 11, 11, 12, 12, 13, 13],\r\n        BITORDER = [16, 17, 18, 0, 8, 7, 9, 6, 10, 5, 11, 4, 12, 3, 13, 2, 14, 1, 15];\r\n\r\n    function HuffTable(clen, cnum, cval, blist, elist, lookupm) {\r\n\r\n        this.status = 0;\r\n        this.root = null;\r\n        this.maxbit = 0;\r\n\r\n        var el, f, tail,\r\n            offsets = [],\r\n            countTbl = [],\r\n            sTbl = [],\r\n            values = [],\r\n            tentry = {extra: 0, bitcnt: 0, lbase: 0, next: null};\r\n\r\n        tail = this.root = null;\r\n        for(var i = 0; i < 0x11; i++)  { countTbl[i] = 0; sTbl[i] = 0; offsets[i] = 0; }\r\n        for(i = 0; i < 0x120; i++) values[i] = 0;\r\n\r\n        el = cnum > 256 ? clen[256] : 16;\r\n\r\n        var pidx = -1;\r\n        while (++pidx < cnum) countTbl[clen[pidx]]++;\r\n\r\n        if(countTbl[0] == cnum) return;\r\n\r\n        for(var j = 1; j <= 16; j++) if(countTbl[j] != 0) break;\r\n        var bitLen = j;\r\n        for(i = 16; i != 0; i--) if(countTbl[i] != 0) break;\r\n        var maxLen = i;\r\n\r\n        lookupm < j && (lookupm = j);\r\n\r\n        var dCodes = 1 << j;\r\n        for(; j < i; j++, dCodes <<= 1)\r\n            if((dCodes -= countTbl[j]) < 0) {\r\n                this.status = 2;\r\n                this.maxbit = lookupm;\r\n                return;\r\n            }\r\n\r\n        if((dCodes -= countTbl[i]) < 0) {\r\n            this.status = 2;\r\n            this.maxbit = lookupm;\r\n            return;\r\n        }\r\n\r\n        countTbl[i] += dCodes;\r\n        offsets[1] = j = 0;\r\n        pidx = 1;\r\n        var xp = 2;\r\n        while(--i > 0) offsets[xp++] = (j += countTbl[pidx++]);\r\n        pidx = 0;\r\n        i = 0;\r\n        do {\r\n            (j = clen[pidx++]) && (values[offsets[j]++] = i);\r\n        } while(++i < cnum);\r\n        cnum = offsets[maxLen];\r\n        offsets[0] = i = 0;\r\n        pidx = 0;\r\n\r\n        var level = -1,\r\n            w = sTbl[0] = 0,\r\n            cnode = null,\r\n            tblCnt = 0,\r\n            tblStack = [];\r\n\r\n        for(; bitLen <= maxLen; bitLen++) {\r\n            var kccnt = countTbl[bitLen];\r\n            while(kccnt-- > 0) {\r\n                while(bitLen > w + sTbl[1 + level]) {\r\n                    w += sTbl[1 + level];\r\n                    level++;\r\n                    tblCnt = (tblCnt = maxLen - w) > lookupm ? lookupm : tblCnt;\r\n                    if((f = 1 << (j = bitLen - w)) > kccnt + 1) {\r\n                        f -= kccnt + 1;\r\n                        xp = bitLen;\r\n                        while(++j < tblCnt) {\r\n                            if((f <<= 1) <= countTbl[++xp]) break;\r\n                            f -= countTbl[xp];\r\n                        }\r\n                    }\r\n                    if(w + j > el && w < el) j = el - w;\r\n                    tblCnt = 1 << j;\r\n                    sTbl[1 + level] = j;\r\n                    cnode = [];\r\n                    while (cnode.length < tblCnt) cnode.push({extra: 0, bitcnt: 0, lbase: 0, next: null});\r\n                    if (tail == null) {\r\n                        tail = this.root = {next:null, list:null};\r\n                    } else {\r\n                        tail = tail.next = {next:null, list:null}\r\n                    }\r\n                    tail.next = null;\r\n                    tail.list = cnode;\r\n\r\n                    tblStack[level] = cnode;\r\n\r\n                    if(level > 0) {\r\n                        offsets[level] = i;\r\n                        tentry.bitcnt = sTbl[level];\r\n                        tentry.extra = 16 + j;\r\n                        tentry.next = cnode;\r\n                        j = (i & ((1 << w) - 1)) >> (w - sTbl[level]);\r\n\r\n                        tblStack[level-1][j].extra = tentry.extra;\r\n                        tblStack[level-1][j].bitcnt = tentry.bitcnt;\r\n                        tblStack[level-1][j].lbase = tentry.lbase;\r\n                        tblStack[level-1][j].next = tentry.next;\r\n                    }\r\n                }\r\n                tentry.bitcnt = bitLen - w;\r\n                if(pidx >= cnum)\r\n                    tentry.extra = 99;\r\n                else if(values[pidx] < cval) {\r\n                    tentry.extra = (values[pidx] < 256 ? 16 : 15);\r\n                    tentry.lbase = values[pidx++];\r\n                } else {\r\n                    tentry.extra = elist[values[pidx] - cval];\r\n                    tentry.lbase = blist[values[pidx++] - cval];\r\n                }\r\n\r\n                f = 1 << (bitLen - w);\r\n                for(j = i >> w; j < tblCnt; j += f) {\r\n                    cnode[j].extra = tentry.extra;\r\n                    cnode[j].bitcnt = tentry.bitcnt;\r\n                    cnode[j].lbase = tentry.lbase;\r\n                    cnode[j].next = tentry.next;\r\n                }\r\n                for(j = 1 << (bitLen - 1); (i & j) != 0; j >>= 1)\r\n                    i ^= j;\r\n                i ^= j;\r\n                while((i & ((1 << w) - 1)) != offsets[level]) {\r\n                    w -= sTbl[level];\r\n                    level--;\r\n                }\r\n            }\r\n        }\r\n\r\n        this.maxbit = sTbl[1];\r\n        this.status = ((dCodes != 0 && maxLen != 1) ? 1 : 0);\r\n    }\r\n\r\n    function addBits(n) {\r\n        while(bitLen < n) {\r\n            bitBuf |= input[inputPosition++] << bitLen;\r\n            bitLen += 8;\r\n        }\r\n        return bitBuf;\r\n    }\r\n\r\n    function cutBits(n) {\r\n        bitLen -= n;\r\n        return bitBuf >>= n;\r\n    }\r\n\r\n    function maskBits(n) {\r\n        while(bitLen < n) {\r\n            bitBuf |= input[inputPosition++] << bitLen;\r\n            bitLen += 8;\r\n        }\r\n        var res = bitBuf & MASK_BITS[n];\r\n        bitBuf >>= n;\r\n        bitLen -= n;\r\n        return res;\r\n    }\r\n\r\n    function codes(buff, off, size) {\r\n        var e, t;\r\n        if(size == 0) return 0;\r\n\r\n        var n = 0;\r\n        for(;;) {\r\n            t = tblList.list[addBits(bitList) & MASK_BITS[bitList]];\r\n            e = t.extra;\r\n            while(e > 16) {\r\n                if(e == 99) return -1;\r\n                cutBits(t.bitcnt);\r\n                e -= 16;\r\n                t = t.next[addBits(e) & MASK_BITS[e]];\r\n                e = t.extra;\r\n            }\r\n            cutBits(t.bitcnt);\r\n            if(e == 16) {\r\n                windowPos &= WSIZE - 1;\r\n                buff[off + n++] = slide[windowPos++] = t.lbase;\r\n                if(n == size) return size;\r\n                continue;\r\n            }\r\n            if(e == 15) break;\r\n\r\n            copyLen = t.lbase + maskBits(e);\r\n            t = tblDist.list[addBits(bitdist) & MASK_BITS[bitdist]];\r\n            e = t.extra;\r\n\r\n            while(e > 16) {\r\n                if(e == 99) return -1;\r\n                cutBits(t.bitcnt);\r\n                e -= 16;\r\n                t = t.next[addBits(e) & MASK_BITS[e]];\r\n                e = t.extra\r\n            }\r\n            cutBits(t.bitcnt);\r\n            copyDist = windowPos - t.lbase - maskBits(e);\r\n\r\n            while(copyLen > 0 && n < size) {\r\n                copyLen--;\r\n                copyDist &= WSIZE - 1;\r\n                windowPos &= WSIZE - 1;\r\n                buff[off + n++] = slide[windowPos++] = slide[copyDist++];\r\n            }\r\n\r\n            if(n == size) return size;\r\n        }\r\n\r\n        method = -1; // done\r\n        return n;\r\n    }\r\n\r\n    function stored(buff, off, size) {\r\n        cutBits(bitLen & 7);\r\n        var n = maskBits(0x10);\r\n        if(n != ((~maskBits(0x10)) & 0xffff)) return -1;\r\n        copyLen = n;\r\n\r\n        n = 0;\r\n        while(copyLen > 0 && n < size) {\r\n            copyLen--;\r\n            windowPos &= WSIZE - 1;\r\n            buff[off + n++] = slide[windowPos++] = maskBits(8);\r\n        }\r\n\r\n        if(copyLen == 0) method = -1;\r\n        return n;\r\n    }\r\n\r\n    function fixed(buff, off, size) {\r\n        var fixed_bd = 0;\r\n        if(fixedTableList == null) {\r\n            var lengths = [];\r\n\r\n            for(var symbol = 0; symbol < 144; symbol++) lengths[symbol] = 8;\r\n            for(; symbol < 256; symbol++) lengths[symbol] = 9;\r\n            for(; symbol < 280; symbol++) lengths[symbol] = 7;\r\n            for(; symbol < 288; symbol++) lengths[symbol] = 8;\r\n\r\n            fixedLookup = 7;\r\n\r\n            var htbl = new HuffTable(lengths, 288, 257, LENS, LEXT, fixedLookup);\r\n\r\n            if(htbl.status != 0) return -1;\r\n\r\n            fixedTableList = htbl.root;\r\n            fixedLookup = htbl.maxbit;\r\n\r\n            for(symbol = 0; symbol < 30; symbol++) lengths[symbol] = 5;\r\n            fixed_bd = 5;\r\n\r\n            htbl = new HuffTable(lengths, 30, 0, DISTS, DEXT, fixed_bd);\r\n            if(htbl.status > 1) {\r\n                fixedTableList = null;\r\n                return -1;\r\n            }\r\n            fixedTableDist = htbl.root;\r\n            fixed_bd = htbl.maxbit;\r\n        }\r\n\r\n        tblList = fixedTableList;\r\n        tblDist = fixedTableDist;\r\n        bitList = fixedLookup;\r\n        bitdist = fixed_bd;\r\n        return codes(buff, off, size);\r\n    }\r\n\r\n    function dynamic(buff, off, size) {\r\n        var ll = new Array(0x023C);\r\n\r\n        for (var m = 0; m < 0x023C; m++) ll[m] = 0;\r\n\r\n        var llencnt = 257 + maskBits(5),\r\n            dcodescnt = 1 + maskBits(5),\r\n            bitlencnt = 4 + maskBits(4);\r\n\r\n        if(llencnt > 286 || dcodescnt > 30) return -1;\r\n\r\n        for(var j = 0; j < bitlencnt; j++) ll[BITORDER[j]] = maskBits(3);\r\n        for(; j < 19; j++) ll[BITORDER[j]] = 0;\r\n\r\n        // build decoding table for trees--single level, 7 bit lookup\r\n        bitList = 7;\r\n        var hufTable = new HuffTable(ll, 19, 19, null, null, bitList);\r\n        if(hufTable.status != 0)\r\n            return -1;\t// incomplete code set\r\n\r\n        tblList = hufTable.root;\r\n        bitList = hufTable.maxbit;\r\n        var lencnt = llencnt + dcodescnt,\r\n            i = 0,\r\n            lastLen = 0;\r\n        while(i < lencnt) {\r\n            var hufLcode = tblList.list[addBits(bitList) & MASK_BITS[bitList]];\r\n            j = hufLcode.bitcnt;\r\n            cutBits(j);\r\n            j = hufLcode.lbase;\r\n            if(j < 16)\r\n                ll[i++] = lastLen = j;\r\n            else if(j == 16) {\r\n                j = 3 + maskBits(2);\r\n                if(i + j > lencnt) return -1;\r\n                while(j-- > 0) ll[i++] = lastLen;\r\n            } else if(j == 17) {\r\n                j = 3 + maskBits(3);\r\n                if(i + j > lencnt) return -1;\r\n                while(j-- > 0) ll[i++] = 0;\r\n                lastLen = 0;\r\n            } else {\r\n                j = 11 + maskBits(7);\r\n                if(i + j > lencnt) return -1;\r\n                while(j-- > 0) ll[i++] = 0;\r\n                lastLen = 0;\r\n            }\r\n        }\r\n        bitList = 9;\r\n        hufTable = new HuffTable(ll, llencnt, 257, LENS, LEXT, bitList);\r\n        bitList == 0 && (hufTable.status = 1);\r\n\r\n        if (hufTable.status != 0) return -1;\r\n\r\n        tblList = hufTable.root;\r\n        bitList = hufTable.maxbit;\r\n\r\n        for(i = 0; i < dcodescnt; i++) ll[i] = ll[i + llencnt];\r\n        bitdist = 6;\r\n        hufTable = new HuffTable(ll, dcodescnt, 0, DISTS, DEXT, bitdist);\r\n        tblDist = hufTable.root;\r\n        bitdist = hufTable.maxbit;\r\n\r\n        if((bitdist == 0 && llencnt > 257) || hufTable.status != 0) return -1;\r\n\r\n        return codes(buff, off, size);\r\n    }\r\n\r\n    return {\r\n        inflate : function(/*Buffer*/outputBuffer) {\r\n            tblList = null;\r\n\r\n            var size = outputBuffer.length,\r\n                offset = 0, i;\r\n\r\n            while(offset < size) {\r\n                if(eof && method == -1) return;\r\n                if(copyLen > 0) {\r\n                    if(method != 0) {\r\n                        while(copyLen > 0 && offset < size) {\r\n                            copyLen--;\r\n                            copyDist &= WSIZE - 1;\r\n                            windowPos &= WSIZE - 1;\r\n                            outputBuffer[offset++] = (slide[windowPos++] = slide[copyDist++]);\r\n                        }\r\n                    } else {\r\n                        while(copyLen > 0 && offset < size) {\r\n                            copyLen--;\r\n                            windowPos &= WSIZE - 1;\r\n                            outputBuffer[offset++] = (slide[windowPos++] = maskBits(8));\r\n                        }\r\n                        copyLen == 0 && (method = -1); // done\r\n                    }\r\n                    if (offset == size) return;\r\n                }\r\n\r\n                if(method == -1) {\r\n                    if(eof) break;\r\n                    eof = maskBits(1) != 0;\r\n                    method = maskBits(2);\r\n                    tblList = null;\r\n                    copyLen = 0;\r\n                }\r\n                switch(method) {\r\n                    case 0: i = stored(outputBuffer, offset, size - offset); break;\r\n                    case 1: i = tblList != null ? codes(outputBuffer, offset, size - offset) : fixed(outputBuffer, offset, size - offset); break;\r\n                    case 2: i = tblList != null ? codes(outputBuffer, offset, size - offset) : dynamic(outputBuffer, offset, size - offset); break;\r\n                    default: i = -1; break;\r\n                }\r\n\r\n                if(i == -1) return;\r\n                offset += i;\r\n            }\r\n        }\r\n    };\r\n}\r\n\r\nmodule.exports = function(/*Buffer*/inbuf) {\r\n    var zlib = require(\"zlib\");\r\n    return {\r\n        inflateAsync : function(/*Function*/callback) {\r\n            var tmp = zlib.createInflateRaw(),\r\n                parts = [], total = 0;\r\n            tmp.on('data', function(data) {\r\n                parts.push(data);\r\n                total += data.length;\r\n            });\r\n            tmp.on('end', function() {\r\n                var buf = new Buffer(total), written = 0;\r\n                buf.fill(0);\r\n\r\n                for (var i = 0; i < parts.length; i++) {\r\n                    var part = parts[i];\r\n                    part.copy(buf, written);\r\n                    written += part.length;\r\n                }\r\n                callback && callback(buf);\r\n            });\r\n            tmp.end(inbuf)\r\n        },\r\n\r\n        inflate : function(/*Buffer*/outputBuffer) {\r\n            var x = {\r\n                x: new JSInflater(inbuf)\r\n            };\r\n            x.x.inflate(outputBuffer);\r\n            delete(x.x);\r\n        }\r\n    }\r\n};\r\n"]}