{"version":3,"sources":["try_catch.asynct.js"],"names":[],"mappings":"AAAA,IAAI,KAAK,QAAQ,OAAR,EAAiB,KAAjB,CAAuB,QAAvB,CAAT;AAAA,IACI,QAAQ,QAAQ,IAAR,CADZ;;AAGA,QAAS,wCAAT,IAAqD,UAAU,IAAV,EAAgB;AACnE,MAAI,IAAI,MAAM,KAAK,KAAX,CAAR;AAAA,MACI,cAAc,KADlB;AAAA,MAEI,OAAO,EAFX;;AAIA,IAAE,EAAF,CAAK,OAAL,EAAc,UAAU,GAAV,EAAe;AAC3B,kBAAc,IAAd;AACD,GAFD;;AAIA,IAAE,EAAF,CAAK,MAAL,EAAa,UAAU,GAAV,EAAe;AAAE,SAAK,IAAL,CAAU,GAAV;AAAgB,GAA9C;;AAEA,IAAE,KAAF,CAAQ,aAAR;AACA,KAAG,WAAH,EAAgB,KAAhB,CAAsB,KAAtB;AACA,KAAG,IAAH,EAAS,SAAT,CAAmB,CAAE,EAAE,GAAG,CAAL,EAAF,CAAnB;;AAEA,IAAE,KAAF,CAAQ,iBAAR;AACA,KAAG,WAAH,EAAgB,KAAhB,CAAsB,IAAtB;AACA,KAAG,IAAH,EAAS,SAAT,CAAmB,CAAE,EAAE,GAAG,CAAL,EAAF,EAAY,EAAE,GAAG,CAAL,EAAZ,CAAnB;;AAEA,IAAE,GAAF;AACA,OAAK,IAAL;AACD,CArBD;;AAuBA,QAAS,wCAAT,IAAqD,UAAU,IAAV,EAAgB;AACnE,MAAI,IAAI,MAAM,KAAK,KAAX,CAAR;AAAA,MACI,cAAc,KADlB;AAAA,MAEI,OAAO,EAFX;;AAIA,IAAE,EAAF,CAAK,OAAL,EAAc,UAAU,GAAV,EAAe;AAC3B,kBAAc,IAAd;AACD,GAFD;;AAIA,IAAE,EAAF,CAAK,MAAL,EAAa,UAAU,GAAV,EAAe;AAAE,SAAK,IAAL,CAAU,GAAV;AAAgB,GAA9C;;AAEA,IAAE,KAAF,CAAQ,aAAR;AACA,KAAG,WAAH,EAAgB,KAAhB,CAAsB,KAAtB;AACA,KAAG,IAAH,EAAS,SAAT,CAAmB,CAAE,EAAE,GAAG,CAAL,EAAF,CAAnB;;AAEA,IAAE,KAAF,CAAQ,eAAR;AACA,KAAG,WAAH,EAAgB,KAAhB,CAAsB,KAAtB;AACA,KAAG,IAAH,EAAS,SAAT,CAAmB,CAAE,EAAE,GAAG,CAAL,EAAF,EAAY,EAAE,GAAG,CAAL,EAAZ,CAAnB;;AAEA,IAAE,GAAF;AACA,KAAG,WAAH,EAAgB,KAAhB,CAAsB,IAAtB;AACA,KAAG,IAAH,EAAS,SAAT,CAAmB,CAAE,EAAE,GAAG,CAAL,EAAF,EAAY,EAAE,GAAG,CAAL,EAAZ,CAAnB;;AAEA,OAAK,IAAL;AACD,CAxBD","file":"try_catch.asynct-compiled.js","sourcesContent":["var it = require('it-is').style('colour')\n  , split = require('..')\n\nexports ['emit mapper exceptions as error events'] = function (test) {\n  var s = split(JSON.parse)\n    , caughtError = false\n    , rows = []\n \n  s.on('error', function (err) {\n    caughtError = true\n  })\n \n  s.on('data', function (row) { rows.push(row) })\n\n  s.write('{\"a\":1}\\n{\"')\n  it(caughtError).equal(false)\n  it(rows).deepEqual([ { a: 1 } ])\n\n  s.write('b\":2}\\n{\"c\":}\\n')\n  it(caughtError).equal(true)\n  it(rows).deepEqual([ { a: 1 }, { b: 2 } ])\n\n  s.end()\n  test.done()\n}\n\nexports ['mapper error events on trailing chunks'] = function (test) {\n  var s = split(JSON.parse)\n    , caughtError = false\n    , rows = []\n \n  s.on('error', function (err) {\n    caughtError = true\n  })\n \n  s.on('data', function (row) { rows.push(row) })\n\n  s.write('{\"a\":1}\\n{\"')\n  it(caughtError).equal(false)\n  it(rows).deepEqual([ { a: 1 } ])\n\n  s.write('b\":2}\\n{\"c\":}')\n  it(caughtError).equal(false)\n  it(rows).deepEqual([ { a: 1 }, { b: 2 } ])\n\n  s.end()\n  it(caughtError).equal(true)\n  it(rows).deepEqual([ { a: 1 }, { b: 2 } ])\n\n  test.done()\n}\n"]}