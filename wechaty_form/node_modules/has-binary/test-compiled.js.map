{"version":3,"sources":["test.js"],"names":[],"mappings":";AACA,IAAI,YAAY,QAAQ,IAAR,CAAhB;AACA,IAAI,SAAS,QAAQ,eAAR,CAAb;AACA,IAAI,KAAK,QAAQ,IAAR,CAAT;;AAEA,SAAS,gBAAT,EAA2B,YAAU;;AAEnC,KAAG,yBAAH,EAA8B,YAAU;AACtC,WAAO,UAAU,GAAG,YAAH,CAAgB,WAAhB,CAAV,CAAP;AACD,GAFD;;AAIA,KAAG,wDAAH,EAA6D,YAAW;AACtE,QAAI,MAAM,CAAC,CAAD,EAAI,MAAJ,EAAY,CAAZ,CAAV;AACA,WAAO,CAAC,UAAU,GAAV,CAAR;AACD,GAHD;;AAKA,KAAG,kDAAH,EAAuD,YAAW;AAChE,QAAI,MAAM,CAAC,CAAD,EAAI,IAAI,MAAJ,CAAW,UAAX,EAAuB,MAAvB,CAAJ,EAAoC,CAApC,CAAV;AACA,WAAO,UAAU,GAAV,CAAP;AACD,GAHD;;AAKA,KAAG,yDAAH,EAA8D,YAAW;AACvE,QAAI,KAAK,EAAC,GAAG,GAAJ,EAAS,GAAG,EAAZ,EAAgB,GAAG,IAAnB,EAAyB,QAAQ,gBAAjC,EAAT;AACA,WAAO,CAAC,UAAU,EAAV,CAAR;AACD,GAHD;;AAKA,KAAG,mDAAH,EAAwD,YAAW;AACjE,QAAI,KAAK,EAAC,GAAG,GAAJ,EAAS,GAAG,IAAI,MAAJ,CAAW,KAAX,CAAZ,EAA+B,GAAG,IAAlC,EAAwC,QAAQ,gBAAhD,EAAT;AACA,WAAO,UAAU,EAAV,CAAP;AACD,GAHD;;AAKA,KAAG,uBAAH,EAA4B,YAAW;AACrC,WAAO,CAAC,UAAU,IAAV,CAAR;AACD,GAFD;;AAIA,KAAG,4BAAH,EAAiC,YAAW;AAC1C,WAAO,CAAC,UAAU,SAAV,CAAR;AACD,GAFD;;AAIA,KAAG,yEAAH,EAA8E,YAAW;AACvF,QAAI,KAAK;AACP,SAAG,CAAC,GAAD,EAAM,GAAN,EAAW,GAAX,CADI;AAEP,SAAG,SAFI;AAGP,SAAG,EAAC,GAAG,GAAJ,EAAS,GAAG,GAAZ,EAAiB,GAAG,CAApB,EAAuB,GAAG,IAA1B,EAHI;AAIP,SAAG;AAJI,KAAT;AAMA,WAAO,CAAC,UAAU,EAAV,CAAR;AACD,GARD;;AAUA,KAAG,sEAAH,EAA2E,YAAW;AACpF,QAAI,KAAK;AACP,SAAG,CAAC,GAAD,EAAM,GAAN,EAAW,GAAX,CADI;AAEP,SAAG,SAFI;AAGP,SAAG,EAAC,GAAG,GAAJ,EAAS,GAAG,GAAZ,EAAiB,GAAG,CAApB,EAAuB,GAAG,IAA1B,EAHI;AAIP,SAAG,EAJI;AAKP,WAAK,IAAI,MAAJ,CAAW,KAAX;AALE,KAAT;AAOA,WAAO,UAAU,EAAV,CAAP;AACD,GATD;;AAWA,MAAI,OAAO,WAAX,EAAwB;AACpB,OAAG,iCAAH,EAAsC,YAAW;AAC/C,aAAO,UAAU,IAAI,WAAJ,EAAV,CAAP;AACD,KAFD;AAGH;;AAED,MAAI,OAAO,IAAX,EAAiB;AACd,OAAG,yBAAH,EAA8B,YAAW;AACtC,aAAO,UAAU,IAAI,IAAJ,EAAV,CAAP;AACF,KAFD;AAGF;AAEF,CAnED","file":"test-compiled.js","sourcesContent":["\nvar hasBinary = require('./');\nvar assert = require('better-assert');\nvar fs = require('fs');\n\ndescribe('has-binarydata', function(){\n\n  it('should work with buffer', function(){\n    assert(hasBinary(fs.readFileSync('./test.js')));\n  });\n\n  it('should work with an array that does not contain binary', function() {\n    var arr = [1, 'cool', 2];\n    assert(!hasBinary(arr));\n  });\n\n  it('should work with an array that contains a buffer', function() {\n    var arr = [1, new Buffer('asdfasdf', 'utf8'), 2];\n    assert(hasBinary(arr));\n  });\n\n  it('should work with an object that does not contain binary', function() {\n    var ob = {a: 'a', b: [], c: 1234, toJSON: '{\\\"a\\\": \\\"a\\\"}'};\n    assert(!hasBinary(ob));\n  });\n\n  it('should work with an object that contains a buffer', function() {\n    var ob = {a: 'a', b: new Buffer('abc'), c: 1234, toJSON: '{\\\"a\\\": \\\"a\\\"}'};\n    assert(hasBinary(ob));\n  });\n\n  it('should work with null', function() {\n    assert(!hasBinary(null));\n  });\n\n  it('should work with undefined', function() {\n    assert(!hasBinary(undefined));\n  });\n\n  it('should work with a complex object that contains undefined and no binary', function() {\n    var ob = {\n      x: ['a', 'b', 123],\n      y: undefined,\n      z: {a: 'x', b: 'y', c: 3, d: null},\n      w: []\n    };\n    assert(!hasBinary(ob));\n  });\n\n  it('should work with a complex object that contains undefined and binary', function() {\n    var ob = {\n      x: ['a', 'b', 123],\n      y: undefined,\n      z: {a: 'x', b: 'y', c: 3, d: null},\n      w: [],\n      bin: new Buffer('xxx')\n    };\n    assert(hasBinary(ob));\n  });\n\n  if (global.ArrayBuffer) {\n      it('should work with an ArrayBuffer', function() {\n        assert(hasBinary(new ArrayBuffer()));\n      });\n  }\n\n  if (global.Blob) {\n     it('should work with a Blob', function() {\n        assert(hasBinary(new Blob()));\n     });\n  }\n\n});\n"]}